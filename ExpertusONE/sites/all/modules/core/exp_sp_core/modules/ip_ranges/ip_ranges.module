<?php

/**
 * Implements hook_menu().
 */
function ip_ranges_menu() {
  $items = array();
  $items['admin/config/people/ip-ranges'] = array(
    'title' => 'IP range bans',
    'description' => 'Manage banned IP addresse ranges.',
    'page callback' => 'ip_ranges_page',
    'access arguments' => array('ban IP address ranges'),
    'file' => 'ip_ranges.admin.inc',
    'weight' => 10,
  );
  $items['admin/config/people/ip-ranges/delete/%'] = array(
    'title' => 'Delete IP range',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ip_ranges_delete', 5),
    'access arguments' => array('ban IP address ranges'),
    'file' => 'ip_ranges.admin.inc',
  $items['admin/config/people/ip-ranges/whitelist_own'] = array(
    'page callback' => 'ip_ranges_whitelist_own_address',
    'access arguments' => array('ban IP address ranges'),
  ), 
 );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ip_ranges_permission() {
  return array(
    'ban IP address ranges' => array(
      'title' => t('Ban IP address ranges'),
    ),
  );
}

/**
 * Implements hook_boot().
 *
 * Checks users ip first against the whitelist, then the blacklist if needed.
 *
 * @see ip_ranges_get_ip_list()
 * @see ip_ranges_check_ip()
 * @see ip_ranges_deny_access()
 */
function ip_ranges_boot() {
  $whitelist = ip_ranges_get_ip_list('whitelist');
  $current_ip = ip_address();
  foreach ($whitelist as $ip) {
    if (ip_ranges_check_ip($ip->ip, $current_ip)) {
      $whitelisted = 1;
      break;
    }
  }

  if (!isset($whitelisted)) {
    $blacklist = ip_ranges_get_ip_list('blacklist');
    foreach ($blacklist as $ip) {
      if (ip_ranges_check_ip($ip->ip, $current_ip) && $_SESSION['widgetCallback']==false) {
        ip_ranges_deny_access($current_ip);
      }
      else if(ip_ranges_check_ip($ip->ip, $current_ip) && $_SESSION['widgetCallback']==true)
      {
      $width=$_SESSION['widget']['display_width']-30;
      $list = system_list('module_enabled');
      
      
         $outhtml ='<html><head>';
         if(isset($list['theme_override']))
         {
         	$cert_css_path = $base_url. '/'. drupal_get_path('module', 'theme_override');
         	$outhtml .='<link href="'.$cert_css_path.'/css/expertusone_en_override.css" rel="stylesheet">';
         }
         else
         {
         	$cert_css_path = $base_url. '/'. drupal_get_path('module', 'ip_ranges');
         	$outhtml .='<link href="'.$cert_css_path.'/ip_ranges.css" rel="stylesheet">';
         }
          $outhtml .='</head><body><div style="background-color: #fff;clear: both;min-height: 471px;position: relative;padding-top:1px;width:'.$width.'px;">
         <div id="iprange_container">
         <div id="page-container" style="width:0px;background:none;margin:0px;">
         <div id="main_wrapper">
	<div id="main" style="clear: both;display: block;height: 0;">
	<div id="contentt" class="contentcolumn">
	<div class="section">
	<a id="main-content"></a>
	<div class="block">
	<div class="block-title-left">
	      <div class="block-title-right">
	      <div class="block-title-middle">
	         <h2 class="block-title">IP BANNED</h2>
	      </div>
	      </div>
	</div>
	<div class="region-sidebar-widget-bg"> &nbsp;Your IP has been blocked. Contact Support.</div>
	<div class="block-footer-left">
	<div class="block-footer-right">
	<div class="block-footer-middle">&nbsp;</div>
	</div>
	</div>
	</div>
	</div>
	</div>
	<div id="navigation">
	<div class="section clearfix"></div>
	</div>
	</div>
	</div>
	</div>
	</div>
	</div>
    </body></html>';
	 echo $outhtml;
        exit;
      }
    }
  }
}


/**
 * Handles denied users.
 *
 * Prints a message and exits if access is denied.
 */
function ip_ranges_deny_access($current_ip) {
  header($_SERVER['SERVER_PROTOCOL'] . ' 403 Forbidden');
  
  if(isset($_REQUEST['mobile_request']))
  {
  	if(isset($_REQUEST['apiname']))
  	{
  		$errobj=new stdClass();
  		$errobj->errcode= "ip_blacklist";
  		$errobj->errormsg='ip blocked';
  		
  		$json_array = array();
  		$json_res->errors = $errobj;
  		$json_res->iserror = "true";
  		$json_array[] = $json_res;
  		$error_message = json_encode(array("results"=>array("jsonResponse"=> $json_array)));
  		
  		header('HTTP/1.1 200 OK');
  		//Commented for php 5.3.26 stack. It is misbehaving.
  		//header('Content-Length: '.strlen($outstr));
  		// 	    expDebug::dPrint("LENGTH::".strlen($outstr)." outstr  ==>".$outstr);
  		header('Content-Type: application/x-www-form-urlencoded');
  		echo $error_message;
  		exit();
  	}
  	else {
  	//This is for validating IP blaclisting while doing login from mobile
  	$result = "error=ip blocked";
  	// expDebug::dPrint("API Login Response.".$result);
  	header ( 'HTTP/1.1 200 OK' );
  	header ( 'Content-Length: ' . strlen ( $result ) );
  	header ( 'Content-Type: application/x-www-form-urlencoded' );
  	echo $result;
  	exit();
  	}
  }
  else if(isset($_REQUEST['apiname'])) {
    
    $returntype=$_REQUEST['returntype'];
  	
  	include_once $_SERVER["DOCUMENT_ROOT"]."/apis/ext/ExpertusOneAPI.php";
  	
  	$api = new ExpertusOneAPI();
  	$errobj=new stdClass();
	$errobj->errcode= "L_012";
	$errobj->errormsg='ip blocked';
	
	               if($returntype=="xml")
					{
						if($api->getErrorResponse() == 1) {
						$formattedErr=ErrorMessages::getErrorMessageNew($errobj);
						$outxml = $api->formatErrorObject($formattedErr, $returntype);
						}
						else
						{
						$formattedErr=ErrorMessages::getErrorMessage($errobj);
						$outxml = "<error><error_code>".$formattedErr->code."</error_code><short_msg>".$formattedErr->longmessage."</short_msg><long_msg>".$formattedErr->longmessage."</long_msg><corrective_solution>".$formattedErr->correctivesolution."</corrective_solution></error>";
						}
					}
					if($returntype=="json")
					{
						if($api->getErrorResponse() == 1) {
						$formattedErr=ErrorMessages::getErrorMessageNew($errobj);
						$outxml = $api->formatErrorObject($formattedErr, $returntype);
						}
						else
						{
						 $formattedErr=ErrorMessages::getErrorMessage($errobj);
						  $outxml = "{\"results\":{\"jsonResponse\":[{\"iserror\":\"true\",\"errorcode\":\"$formattedErr->code\",\"shortmessage\":\"$formattedErr->shortmessage\",\"longmessage\":\"$formattedErr->longmessage\"}]}}";
						}
					}
	             $api->sendResponse($outxml);
	             exit();
  }

  include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/services/GlobalUtil.php";
  $obj = new GlobalUtil();
  $conf = $obj->getConfig();
  $logopath = $conf["logo_image_path"];
   
 $returntype=$_POST['Request_Type'];
 
 if(($returntype == 'endReq') || ($returntype == 'pauseReq') || ($returntype == 'stsReq') || ($returntype == 'createReq') )
 {
 	$content = 'Your IP has been blocked. Contact Support.';
 	print $content;
 	exit();	
 }
  
  $outhtml='<html>';
  
  $list = system_list('module_enabled');
  
  if(isset($list['theme_override']))
  {
  	$cert_css_path = $base_url. '/'. drupal_get_path('module', 'theme_override');
    $outhtml.='<link href="'.$cert_css_path.'/css/expertusone_en_override.css" rel="stylesheet">';
  }
  else
  {
  	$cert_css_path = $base_url. '/'. drupal_get_path('module', 'ip_ranges');
  	$outhtml.='<link href="'.$cert_css_path.'/ip_ranges.css" rel="stylesheet">';
  }
  $outhtml.='<body style="background-color: #fff;margin: 0;padding: 0;">
    <div id="iprange_container">
	<div id="page-container">
		<div id="page-wrapper">
			<div id="page">
				<div id="header">
					<div>
						<a id="logo" rel="home" title="Home">
						<img alt="Home" src="'.$logopath.'/logo.png"></a>
						<div class="secondary-top-menu-links">
								<div id="system-admin-menu-container" style="position: relative;"></div>
								<div class="clearBoth"></div>
						</div>
					</div>
				</div>		

				<div id="main_wrapper">
					<div id="main">
						<div id="content" class="column">
							<div class="section">
								<a id="main-content"></a>

								<div class="block">
									<div class="block-title-left">
										<div class="block-title-right">
											<div class="block-title-middle">
												<h2 class="block-title">IP BANNED</h2>
											</div>
										</div>
									</div>
									<div class="region-sidebar-widget-bg">Your IP has been blocked. Contact Support.</div>
									<div class="block-footer-left">
										<div class="block-footer-right">
											<div class="block-footer-middle">&nbsp;</div>										
										</div>
									</div>
								</div>
							</div>
						</div>
						<div id="navigation">
							<div class="section clearfix"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>	
</body>
</html>';
  print $outhtml;
  exit();
  
}

/**
 * Checks users ip first against the whitelist, then the blacklist if needed.
 *
 * @param $ip
 *   Black- or whitelisted ip-address.
 * @param $current_ip
 *   Ip to be checked against the list, usually users current ip-address.
 *
 * @return
 *   TRUE if the ip is on the list, FALSE if it is not.
 *
 * @see ip_ranges_check_range()
 */
function ip_ranges_check_ip($ip, $current_ip) {
  $type = strpos($ip, '-') ? 'range' : 'single';
  return ($type == 'single') ? $ip == $current_ip : ip_ranges_check_range($ip, $current_ip);
}

/**
 * Checks if the given ip-address matches the given range.
 *
 * @param $ip
 *   Black- or whitelisted ip-address range.
 * @param $current_ip
 *   Ip to be checked against the list, usually users current ip-address.
 *
 * @return
 *   TRUE if the ip is on the list, FALSE if it is not.
 */
function ip_ranges_check_range($ip, $current_ip) {
  $ip = explode('-', $ip);
  list($lower, $upper) = $ip;
  $lower_dec = (float) sprintf("%u", ip2long($lower));
  $upper_dec = (float) sprintf("%u", ip2long($upper));
  $ip_dec = (float) sprintf("%u", ip2long($current_ip));
  return (($ip_dec >= $lower_dec) && ($ip_dec <= $upper_dec));
}

/**
 * Creates/updates an entry to the ban database.
 *
 * @param $ip
 *   IP-address or range to bw written to the database.
 * @param $type
 *   Type of the list(blacklist, whitelist).
 * @param $bid
 *   (optional) id of the current ban, used when existing record is updated.
 */
function ip_ranges_write_record($ip, $type, $bid = NULL) {
  db_merge('ip_ranges')
    ->key(array('bid' => $bid))
    ->fields(array(
      'bid' => $bid,
      'ip' => $ip,
      'type' => $type,
    ))
    ->execute();
}

/**
 * Retrieves list of banned ip from the database.
 *
 * @param $type
 *   (optional) Retrieve only the ip's of given list type(blacklist, whitelist).
 *
 * @return
 *   An array of black-/whitelisted IP-addresses.
 */

function ip_ranges_get_ip_list($type = '') {
  $query = db_select('ip_ranges', 'list');
  if ($type) {
    $query->condition('list.type', $type, '=')
      ->fields('list', array('ip'));
  }
  else {
    $query->fields('list');
  }
  return $query->execute()->fetchAll();
}

function ip_ranges_whitelist_own_address(){
  ip_ranges_write_record(ip_address(), 'whitelist');
  drupal_set_message('Your own IP-address ('.ip_address().') has been whitelisted.');
  drupal_goto('admin/config/people/ip-ranges');
}
