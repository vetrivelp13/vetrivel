<?php 
function fivestar_rating_widget($form, &$form_state, $values, $settings) {
  try{
  global $user;
  global $catalog_reg;
  $values = array();
  $form = array(
    '#attributes' => array(
      'class' => array('fivestar-widget')
    ),
  );
  $form_state['settings'] = $settings;
  $form['#submit'] = 'fivestar_form_submit';
  if($catalog_reg == 'Course' && $form_state['settings']['catalog_crs'] == 'Course') {
    $votes = fivestarGetVotesCrsLevReg($form_state['settings']['content_type'], $form_state['settings']['content_id'], $form_state['settings']['tag'] , $user->uid);
  }else {
    $votes = fivestar_get_votes($form_state['settings']['content_type'], $form_state['settings']['content_id'], $form_state['settings']['tag'] , $user->uid);
  }
  $values['user'] = isset($votes['user']['value']) ? $votes['user']['value'] : 0;
  $values['average'] = isset($votes['average']['value']) ? $votes['average']['value'] : 0;
  $values['count'] = isset($votes['count']['value']) ? $votes['count']['value'] : 0;  
  $form['vote'] = array(
    '#type' => 'fivestar',
    '#stars' => $settings['stars'],
    '#auto_submit' => isset($settings['autosubmit']) ? $settings['autosubmit'] : TRUE,
    '#allow_clear' => $settings['allow_clear'],
    '#required' => isset($settings['required']) ? $settings['required'] : FALSE,
    //'#widget' => isset($settings['widget']) ? $settings['widget'] : array('name' => 'default', 'css' => 'default'),
    '#values' => $values,
    '#settings' => $settings,
    '#default_value' => $values['average'],
    //'#disabled' => !empty($values['user']) ? TRUE : FALSE,
  );

  $form['fivestar_submit'] = array(
    '#type' => 'submit',
    '#value' => '',
    '#attributes' => array('class' => array('fivestar-submit')),
  );
  return $form;
  }catch (Exception $ex) {
    watchdog_exception('fivestar_rating_widget', $ex);
    expertusErrorThrow($ex);
  }   
}

function fivestar_expand_stars($element) {
  try{
  global $theme_key;
  $path = drupal_get_path('module', 'fivestar');
  $element['#attached']['js'][] = $path . '/js/fivestar.js';
  if($theme_key == 'expertusoneV2'){
  	$element['#attached']['css'][] = $path . '/css/fivestar_v2.css';
  }else{
  	$element['#attached']['css'][] = $path . '/css/fivestar.css';
  }
  $settings = $element['#settings'];
  $values = $element['#values'];
  $class[] = 'clearfix';
  $titles = array('1'=>t('LBL143'),'2'=>t('LBL144'),'3'=>t('LBL145'),'4'=>t('LBL146'),'5'=>t('LBL147'));
  $options = array('-' => t('Select rating'));
  for ($i = 1; $i <= $element['#stars']; $i++) {
    $this_value = ceil($i * 100/$element['#stars']);
   //$options[$this_value] = t('Give it @star/@count', array('@star' => $i, '@count' => $element['#stars']));
   $options[$this_value] = $titles[$i];
  }
  // Display clear button only if enabled.
  if ($element['#allow_clear'] == TRUE) {
    $options[0] = t('Cancel rating');
  }

  $element['vote'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#required' => $element['#required'],
    '#theme' => 'fivestar_select',
    '#default_value' => _fivestar_get_element_default_value($element),
  );

  if (isset($element['#parents'])) {
    $element['vote']['#parents'] = $element['#parents'];
  }
  if (isset($element['#weight'])) {
    $element['vote']['#weight'] = $element['#weight'];
  }
  switch ($settings['text']) {
    case 'user':
      $element['vote']['#description'] = theme('fivestar_summary', array(
        'user_rating' => $values['user'],
        'votes' => $settings['style'] == 'dual' ? NULL : $values['count'],
        'stars' => $settings['stars'],
      ));
      $class[] = 'fivestar-user-text';
      break;
    case 'average':
      $element['vote']['#description'] = $settings['style'] == 'dual' ? NULL : theme('fivestar_summary', array(
        'average_rating' => $values['average'],
        'votes' => $values['count'],
        'stars' => $settings['stars'],
      ));
      $class[] = 'fivestar-average-text';
      break;
    case 'smart':
      $element['vote']['#description'] = ($settings['style'] == 'dual' && !$values['user']) ? NULL : theme('fivestar_summary', array(
        'user_rating' => $values['user'],
        'average_rating' => $values['user'] ? NULL : $values['average'],
        'votes' => $settings['style'] == 'dual' ? NULL : $values['count'],
        'stars' => $settings['stars'],
      ));
      $class[] = 'fivestar-smart-text';
      $class[] = $values['user'] ? 'fivestar-user-text' : 'fivestar-average-text';
      break;
    case 'dual':
      $element['vote']['#description'] = theme('fivestar_summary', array(
        'user_rating' => $values['user'],
        'average_rating' => $settings['style'] == 'dual' ? NULL : $values['average'],
        'votes' => $settings['style'] == 'dual' ? NULL : $values['count'],
        'stars' => $settings['stars'],
      ));
      $class[] = ' fivestar-combo-text';
      break;
  }

  switch ($settings['style']) {
    case 'average':
      $class[] = 'fivestar-average-stars';
      break;
    case 'user':
      $class[] = 'fivestar-user-stars';
      break;
    case 'smart':
      $class[] = 'fivestar-smart-stars '. ($values['user'] ? 'fivestar-user-stars' : 'fivestar-average-stars');
      break;
    case 'dual':
      $class[] = 'fivestar-combo-stars';
      $static_average = theme('fivestar_static', array(
        'rating' => $values['average'],
        'stars' => $settings['stars'],
        'tag' => $settings['tag'],
        'widget' => $settings['widget'],
      ));
      if ($settings['text'] != 'none') {
        $static_description = theme('fivestar_summary', array(
          'average_rating' => $settings['text'] == 'user' ? NULL : (isset($values['average']) ? $values['average'] : 0),
          'votes' => isset($values['count']) ? $values['count'] : 0,
          'stars' => $settings['stars'],
        ));
      }
      else {
        $static_description = '&nbsp;';
      }
      $element['average'] = array(
        '#type' => 'markup',
        '#markup' => theme('fivestar_static_element', array(
          'star_display' => $static_average,
          'title' => '',
          'description' => $static_description,
        )),
        '#weight' => -1,
      );
      break;
  }
  $class[] = 'fivestar-form-item';
  $class[] = 'fivestar-' . $element['#widget']['name'];
  if ($element['#widget']['name'] != 'default') {
    $element['#attached']['css'][] = $element['#widget']['css'];
  }
  $element['#prefix'] = '<div ' . drupal_attributes(array('class' => $class,'startype' => $settings['startype'])) . '>';
  $element['#suffix'] = '</div>';

  // Add AJAX handling if necessary.
  $enableRate= isset($settings['enable_rate'])?$settings['enable_rate']:'';
  if (!empty($element['#auto_submit']) &&  $enableRate != 'disable' && (empty($values['user']) || $values['user'] == '0' || $values['user'] == 0)) {

    $element['vote']['#ajax'] = array(
      'callback' => 'fivestar_ajax_submit',
    );
     
    }else{
    	$element['vote']['#prefix'] = "<div id = 'fivestar-already-rated'>";
     $element['vote']['#suffix'] = "</div>";
    }
    $element['vote']['#attached']['js'][] = $path . '/js/fivestar.ajax.js';
  

  if (empty($element['#input'])) {
    $static_stars = theme('fivestar_static', array(
      'rating' => $element['vote']['#default_value'],
      'stars' => $settings['stars'],
      'tag' => $settings['tag'],
      'widget' => $settings['widget'],
    ));

    $element['vote'] = array(
      '#type' => 'markup',
      '#markup' => theme('fivestar_static_element', array(
        'star_display' => $static_stars,
        'title' => '',
        'description' => $element['vote']['#description'],
      )),
    );
  }

  // Add validation function that considers a 0 value as empty.
  $element['#element_validate'] = array('fivestar_validate');
  return $element;
  }catch (Exception $ex) {
    watchdog_exception('fivestar_expand_stars', $ex);
    expertusErrorThrow($ex);
  }    
}

/**
 * Utility function to retrieve VotingAPI votes.
 *
 * Note that this should not be used for general vote retrieval, instead the
 * VotingAPI function votingapi_select_results() should be used, which is more
 * efficient when retrieving multiple votes.
 *
 * @param $entity_type
 *   The Entity type for which to retrieve votes.
 * @param $id
 *   The ID for which to retrieve votes.
 * @param $tag
 *   The VotingAPI tag for which to retrieve votes.
 * @param $uid
 *   Optional. A user ID for which to retrieve votes.
 * @return
 *   An array of the following keys:
 *   - average: An array of VotingAPI results, including the average 'value'.
 *   - count: An array of VotingAPI results, including the count 'value'.
 *   - user: An array of VotingAPI results, including the user's vote 'value'.
 */
function fivestarGetVotesCrsLevReg($entity_type, $id, $tag = 'vote', $uid = NULL) {
	try{
  global $user;
  $med = 0;

  if (!isset($uid)) {
    $uid = $user->uid;
  }
  $criteria = array(
      'entity_type' => $entity_type,
      'entity_id' => !empty($id) ? $id : '',
      'value_type' => 'percent',
      'tag' => $tag,
  );

  $votes = array(
      'average' => array(),
      'count' => array(),
      'user' => array(),
  );

  $results = votingapi_select_results($criteria);
  $count = 0;
  foreach ($results as $result) {
    if ($result['function'] == 'average') {
      $med++;
      $votes['average']['value'] += $result['value'];
    }
    if ($result['function'] == 'count') {
      $count += $result['value'];
    }
  }
  $votes['average']['value'] = $votes['average']['value']/ $med;
  if ($uid) {
    $user_vote = votingapi_select_votes($criteria += array('uid' => $uid));
    if ($user_vote) {
      $votes['user'] = $user_vote[0];
      $votes['user']['function'] = 'user';
    }
  }
  else {
    // If the user is anonymous, we never bother loading their existing votes.
    // Not only would it be hit-or-miss, it would break page caching. Safer to always
    // show the 'fresh' version to anon users.
    $votes['user'] = array('value' => 0);
  }
  $votes['count']['value'] = $count;
  return $votes;
  }catch (Exception $ex) {
  	watchdog_exception('fivestarGetVotesCrsLevReg', $ex);
  	expertusErrorThrow($ex);
  }
}
?>