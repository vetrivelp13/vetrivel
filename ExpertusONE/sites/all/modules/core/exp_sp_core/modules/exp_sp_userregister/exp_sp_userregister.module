<?php
/**
 * Implementation of hook_menu().
 */
function exp_sp_userregister_init() {
	try {
		$request_uri = request_uri();
		if(stripos(request_uri(),'learning/register')!==false || (stripos(request_uri(),'widget/register')!==false)){
	  global $theme_key;
	  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);

	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.js', $js_module_optional);

	  include_once(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.inc');

	  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/modules/exp_sp_userregister/exp_sp_userregister.js', array('type' => 'file', 'group' => JS_DEFAULT));
	  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/modules/exp_sp_userregister/jstz.min.js', array('type' => 'file', 'group' => JS_DEFAULT));

	  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/modules/exp_sp_userregister/exp_sp_userregister_addedit_behaviours.js', array('type' => 'file', 'group' => JS_DEFAULT));


	  // Multiselect

	  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
	  $css_theme_optional1 = array('type' => 'file', 'group' => CSS_THEME, 'weight'=> 999);
	  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.css');
	  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.filter.css');
	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.filter.js', $js_module_optional);
	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.js', $js_module_optional);
	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.js', $js_module_optional);
	  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/exp_multiselect/jquery.expertus.multiselectDropdown.js',$js_module_optional);
	  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/exp_multiselect/jquery.expertus.multiselectExtend.js',$js_module_optional);
	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);

	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user_v2.css', $css_theme_optional1);
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning_v2.css');
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_view_v2.css', $css_theme_optional);

	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user.js', $js_module_optional);
	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user_addedit_behaviours.js', $js_module_optional);

	  drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', $css_theme_optional);
	  drupal_add_css(drupal_get_path('module', 'exp_sp_userregister') .'/exp_sp_userregister_V2.css', array('type' => 'file', 'group' => CSS_DEFAULT));

	  //CUSTOM SCROLLBAR "JSscrollbar"
	  drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.jscrollpane.js', $js_module_optional);
	  include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_custom_fields.inc');
	  include_once(drupal_get_path('module', 'exp_sp_administration_people') .'/exp_sp_administration_people.inc');

		}
 	} catch (Exception $ex) {
		watchdog_exception('exp_sp_userregister_init', $ex);
		expertusErrorThrow($ex);
	}
}

function exp_sp_userregister_menu() {
  try{
  $items['learning/register'] = array(
    'title' => 'Register',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ajax_userregister'),
    'access callback' => array('user_is_anonymous'),
    'type' => MENU_CALLBACK,
    'weight' => 10,
    'menu_name' => 'user-menu',
  );
  $items['learning/register/success'] = array(
  	'title' => 'Register',
    'page callback' => 'drupal_get_form',
	'page arguments' => array('ajax_userregister'),
    //'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
	'menu_name' => 'user-menu',
  );
  $items['learning/register/usernamecheck/%'] = array(
  	'title' => 'checkusername',
    'page callback' => 'usernamecheck',
	'page arguments' => array(3),
    //'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['user_reg_link_callback'] = array(
    'page callback' => 'user_reg_link_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['learning/active_login'] = array(
    'page callback' => 'get_active_session',
  	'access callback' => 'user_is_logged_in',
  	'type' => MENU_CALLBACK
  );

  $items['admin/config/userregister/settings'] = array(
  		'page callback' => 'drupal_get_form',
  		'page arguments' => array('get_active_fileds'),
  		'access callback' => 'user_is_logged_in',
  		'type' => MENU_CALLBACK
  );

  $items['learning/register/countrycheck/%'] = array(
  		'title' => 'checkcountryname',
  		'page callback' => 'countrycheck',
  		'page arguments' => array(3),
  		//'access callback' => 'user_access',
  		'access arguments' => array('access content'),
  		'type' => MENU_CALLBACK,
  );

  $items['learning/register/jobrole/%'] = array(
  		'page callback' => 'getJobRoleList',
  		'page arguments' => array(3),
  		'access callback' => array('user_is_anonymous'),
  		'type' => MENU_CALLBACK,
  );

  $items['learning/register/jobrole-autocomplete'] = array(
  		'title' => 'Job Role Autocomplete',
    	'page callback' => 'getJobRoleAutoComplete',
	    'access callback' => array('user_is_anonymous'),
	    'type' => MENU_CALLBACK,
  		//'file' => 'exp_sp_administration_people.inc'
  );

  return $items;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_userregister_menu', $ex);
    expertusErrorThrow($ex);
  }
}

function getJobRoleList($formSelectedJobroleList) {
	try {
		$select = db_select('slt_profile_list_items', 'spli');
		// Add fields to fetch
		$select->addExpression('spli.code', 'opt');
		$select->addExpression('spli.name', 'val');
		$select->condition('spli.is_active', 'Y','=');
		$select->condition('spli.code', '%cre_usr_jrl_%', 'LIKE');

		$searchText	= $_GET['z'];
		$page		= $_GET['page'];
		$limit		= $_GET['rows'];
		$start		= $limit * $page - $limit;
		$select->addExpression('if(find_in_set(spli.code, :select_id) > 0 ,1 ,0)', 'sel', array('select_id'=>$formSelectedJobroleList));
		if($searchText != '' && $searchText != null) {
				$select->condition('spli.name', '%' . db_like($searchText) . '%', 'LIKE');
		}
		$select->orderBy('sel','desc');
		$select->orderBy('val');
		expDebug::dPrintDBAPI("getJobRoleList countQuery ",$select->countQuery());

		$count = $select->countQuery()->execute()->fetchField();

		if( $count >0 ){
			$total_pages = ceil($count/$limit);
		}else{
			$total_pages = 0;
		}
		if($page > $total_pages)
			$page = $total_pages;
		if($start < 0) {
			$start = 0;
		}
		$select->range($start,$limit);
		expDebug::dPrintDBAPI("getJobRoleList Query ",$select, 4);
		$jobrole = $select->execute()->fetchAll();

		$output = array();
		$output['records'] = $count ;
		$output['page'] = $page ;
		$output['data'] = $jobrole;
		expDebug::dPrint(' getJobRoleList output->'.print_r($output, 1));
		return drupal_json_output($output);

	} catch (Exception $e) {
		watchdog_exception('getJobRoleList', $ex);
		expertusErrorThrow($ex);
	}
}


function get_active_fileds($form, &$form_state){
	$form[]=array(
		         '#prefix' => '<div>Enable the fields that you would like to capture during User Registration.</div><br/>',
	       		 '#suffix' => ''
	        );

$form['Phone'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('Phone'),
                        '#default_value' => variable_get('registration_Phone',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['Mobile'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('Mobile'),
                        '#default_value' => variable_get('registration_Mobile',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['Address1'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('Address 1'),
                        '#default_value' => variable_get('registration_Address 1',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['Address2'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('Address 2'),
                        '#default_value' => variable_get('registration_Address 2',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['City'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('City'),
                        '#default_value' => variable_get('registration_City',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['Zipcode'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('Zip code'),
                        '#default_value' => variable_get('registration_Zip Code',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['State'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('State'),
                        '#default_value' => variable_get('registration_State',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['Country'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('Country'),
                        '#default_value' => variable_get('registration_Country',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['EmploymentType'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('Employment Type'),
                        '#default_value' => variable_get('registration_Employment Type',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['EmployeeID'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('Employee ID'),
                        '#default_value' => variable_get('registration_Employee ID',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['JobRole'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('Job Role'),
                        '#default_value' => variable_get('registration_Job Role',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );


$form['Department'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('Department'),
                        '#default_value' => variable_get('registration_Department',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['UserType'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('User Type'),
                        '#default_value' => variable_get('registration_User Type',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['JobTitle'] = array(
                        '#type' => 'checkbox',
                        '#title' => t('Job Title'),
                        '#default_value' => variable_get('registration_Job Title',0),
                        '#prefix' => "<div class='publish_checkbox'>",
                        '#suffix' => "</div>",
        );

$form['Organization'] = array(
		'#type' => 'checkbox',
		'#title' => t('Organization'),
		'#default_value' => variable_get('registration_Organization',0),
		'#prefix' => "<div class='publish_checkbox'>",
		'#suffix' => "</div>",
);

$form['Language'] = array(
		'#type' => 'checkbox',
		'#title' => t('Language'),
		'#default_value' => variable_get('registration_Language',0),
		'#prefix' => "<div class='publish_checkbox'>",
		'#suffix' => "</div>",
);

$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Save'),
			'#prefix' => '<div id="red-sub" style="clear:both;">',
			'#suffix' => '</div>',
			/*'#ajax' => array(
					'callback' => 'ajax_userregister_variable_submit',
					'event'=>'click',
			)*/
	);

	return $form;
}

function get_active_fileds_submit($form, &$form_state)
{
	try{
		 variable_set('registration_Phone',$form_state['values']['Phone']);
		variable_set('registration_Mobile',$form_state['values']['Mobile']);
		variable_set('registration_Address 1',$form_state['values']['Address1']);
		variable_set('registration_Address 2',$form_state['values']['Address2']);
		variable_set('registration_City',$form_state['values']['City']);
		variable_set('registration_Zip Code',$form_state['values']['Zipcode']);
		variable_set('registration_Country',$form_state['values']['Country']);
		variable_set('registration_State',$form_state['values']['State']);
		variable_set('registration_Employment Type',$form_state['values']['EmploymentType']);
		variable_set('registration_Employee ID',$form_state['values']['EmployeeID']);
		variable_set('registration_Job Role',$form_state['values']['JobRole']);
		variable_set('registration_Department',$form_state['values']['Department']);
		variable_set('registration_Organization',$form_state['values']['Organization']);
		variable_set('registration_Language',$form_state['values']['Language']);
		variable_set('registration_User Type',$form_state['values']['UserType']);
		variable_set('registration_Job Title',$form_state['values']['JobTitle']);
		drupal_set_message(t('Registration Page settings saved successfully.'));
		$form_state['redirect'] = array('admin/config/userregister/settings/');
			}catch (Exception $ex) {
				watchdog_exception('exp_sp_userregister_theme', $ex);
				expertusErrorThrow($ex);
			}
}

function usernamecheck($name){
	try{
	print existsUserName($name);
	die;
	}catch (Exception $ex) {
		watchdog_exception('usernamecheck', $ex);
		expertusErrorThrow($ex);
	}
};

function countrycheck($countryname)
{
	try{
		require_once('exp_sp_userregister.inc');
		print getState($countryname);
		die;
	}catch (Exception $ex) {
		watchdog_exception('countrycheck', $ex);
		expertusErrorThrow($ex);
	}
};

function exp_sp_userregister_theme() {
	try{
  return array(
     'ajax_userregister' => array
    (
      	'render element' => 'form',
    	'template' => 'exp_sp_userregister_form',
    	'path' => drupal_get_path('module', 'exp_sp_userregister'),
    )
  );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_userregister_theme', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * method to get the ip address of the visitor
 */

function get_web_page( $url )
{
	expDebug::dPrint('user register module country name $url= '.print_r($url,1), 4);
	$options = array(
			CURLOPT_RETURNTRANSFER => true,     // return web page
			CURLOPT_HEADER         => false,    // don't return headers
			CURLOPT_FOLLOWLOCATION => true,     // follow redirects
			CURLOPT_ENCODING       => "",       // handle all encodings
			CURLOPT_USERAGENT      => "expertus", // who am i
			CURLOPT_AUTOREFERER    => true,     // set referer on redirect
			CURLOPT_CONNECTTIMEOUT => 120,      // timeout on connect
			CURLOPT_TIMEOUT        => 120,      // timeout on response
			CURLOPT_MAXREDIRS      => 10,       // stop after 10 redirects
			CURLOPT_SSL_VERIFYPEER => false,
	);

	$ch      = curl_init( $url );
	curl_setopt_array( $ch, $options );
	$content = curl_exec( $ch );
	$err     = curl_errno( $ch );
	$errmsg  = curl_error( $ch );
	$header  = curl_getinfo( $ch );
	curl_close( $ch );

	$header['errno']   = $err;
	$header['errmsg']  = $errmsg;
	$header['content'] = json_decode($content);
	expDebug::dPrint('get_wbe_page return header value= '.print_r($header,1), 4);
	return $header;
} 

function ajax_userregister($form, &$form_state) {
  try{
  // Provide a wrapper around the entire form, since we'll replace the whole
  // thing with each submit.
  global $theme_key;  
   //commented for 0062038
   /* $ip = get_remote_address();
   $ip_locator_url = getConfigValue('ip_locator_url');
   $ipdetails = json_decode(file_get_contents($ip_locator_url.'?ip='.$ip));
  
  if(count($ipdetails) > 0){
  	$country_name = $ipdetails->country_name;
  } else {
  	$country_name = '';
  } 
  $header_message = get_web_page($ip_locator_url.'?ip='.$ip);
  $country_name = ($header_message['content']->country_name) ? $header_message['content']->country_name : '';
  expDebug::dPrint('user register module country name= '.print_r($country_name,1), 4);
  drupal_add_js(array('register' =>array('country_name' => $country_name)), array('type' => 'setting')); // pass that value to js file */
  
  
 /* $ip = $_SERVER ['REMOTE_ADDR'];
  expDebug::dPrint('remote addr '.$_SERVER ['REMOTE_ADDR'], 1);
  $ipdetails = unserialize ( file_get_contents ( 'http://www.geoplugin.net/php.gp?ip=' . $ip ) );
  expDebug::dprint ( '$ipdetails ' . print_r ( $ipdetails, true ), 1 );
  drupal_add_js(array('ip_details' => $ipdetails), 'setting'); */
	expDebug::dPrint('form state value begining'.print_r($form_state['values'], 1));
	$form['#id'] = 'ajax-userregister';
  $form['#prefix'] = '<div id="wizard-form-wrapper" class="reg-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#tree'] = TRUE; // We want to deal with hierarchical form values.

  // $form_state['storage'] has no specific drupal meaning, but it is
  // traditional to keep variables for multistep forms there.
  $step = empty($form_state['storage']['step']) ? 'register' : $form_state['storage']['step'];
  $step = (arg(2) == "success") ? "saved" : $step ;
  $form_state['storage']['step'] = $step;

  switch ($step) {
    case 'register':

            drupal_add_css(drupal_get_path('module', 'exp_sp_userregister') .'/exp_sp_userregister_V2.css', array('type' => 'file', 'group' => CSS_DEFAULT));

      require_once('exp_sp_userregister.inc');

      
      $tzone   = getTimeZoneDet();
      $jtitle  = getJobTitle();
      $ploc    = getLocation();


      $form['fname'] = array('#type' => 'textfield',
			'#title' => t('LBL056'),
		    '#size' => 40,
		    '#attributes' => array('tabindex' => '1'),
		    '#maxlength' => 50,
		    '#required' => TRUE,
      );
     /*$form['mname'] = array('#type' => 'textfield',
		    '#title' => 'Middle Initial',
		    '#attributes' => array('tabindex' => '2'),
		    '#size' => 40,
		    '#maxlength' => 40,
      );*/
     $form['lname'] = array('#type' => 'textfield',
		    '#title' => t('LBL058'),
		    '#attributes' => array('tabindex' => '3'),
		    '#size' => 40,
		    '#maxlength' => 50,
		    '#required' => TRUE,
      );

      $form['email'] = array('#type' => 'textfield',
		    '#title' => t('LBL061'),
		    '#attributes' => array('tabindex' => '4'),
		    '#size' => 40,
		    '#maxlength' => 255,
		    '#required' => TRUE,
      );


      $form['name'] = array('#type' => 'textfield',
		    '#title' => t('LBL054'),
		    '#attributes' => array('tabindex' => '5','autocomplete' => 'off','onblur'=>'checkusername(this)'),
		    '#size' => 40,
		    '#maxlength' => 60,
		    '#required' => TRUE,
	  );


      $form['pass'] = array('#type' => 'password',
		    '#title' => t('LBL060'),
		   // '#attributes' => array('tabindex' => '6','autocomplete' => 'off'),
		    '#size' => 40,
		    '#maxlength' => 40,
		    '#required' => TRUE,
	            '#attributes' => array('tabindex' => '6','autocomplete' => 'off','value' => (!empty($form_state['values']['pass']) ? $form_state['values']['pass'] : '')),
      );


      $form['cpass'] = array('#type' => 'password',
		    '#title' => t('LBL075'),
		   //  '#attributes' => array('tabindex' => '7','autocomplete' => 'off'),
		    '#size' => 40,
		    '#maxlength' => 40,
		    '#required' => TRUE,
		    '#attributes' => array('tabindex' => '7','autocomplete' => 'off','value' => (!empty($form_state['values']['pass']) ? $form_state['values']['pass'] : '')),
      );

      if (variable_get('registration_Phone') == '1'){
      $form['phoneno'] = array('#type' => 'textfield',
		    '#title' => t('LBL070'),
		    '#attributes' => array('tabindex' => '10'),
		    '#size' => 40,
		    '#maxlength' => 50,
      );
      }
      if (variable_get('registration_Mobile') == '1'){
      $form['mobile'] = array('#type' => 'textfield',
      		'#title' => t('Mobile'),
      		'#attributes' => array('tabindex' => '11'),
      		'#size' => 40,
      		'#maxlength' => 50,
      );
      }
      if (variable_get('registration_Address 1') == '1'){
      $form['addr1'] = array('#type' => 'textfield',
      		'#title' => t('LBL064'),
      		'#attributes' => array('tabindex' => '12'),
      		'#size' => 40,
      		'#maxlength' => 255,
      );
      }
      if (variable_get('registration_Address 2') == '1'){
      $form['addr2'] = array('#type' => 'textfield',
      		'#title' => t('LBL065'),
      		'#attributes' => array('tabindex' => '13'),
      		'#size' => 40,
      		'#maxlength' => 255,
      );
      }
      if (variable_get('registration_City') == '1'){
      $form['city'] = array('#type' => 'textfield',
      		'#title' => t('LBL066'),
      		'#attributes' => array('tabindex' => '14'),
      		'#size' => 40,
      		'#maxlength' => 255,
      );
      }
      if (variable_get('registration_Zip Code') == '1'){
      $form['zipcode'] = array('#type' => 'textfield',
      		'#title' => t('LBL562'),
      		'#attributes' => array('tabindex' => '15'),
      		'#size' => 40,
      		'#maxlength' => 50,
      );
      }
      
     $userLocation = getUserCurrentLocation();
     expDebug::dPrint("User Location IP-->> ".$userLocation,5);
     $userLocation['country_code'] = (empty($userLocation)) ? 'US': $userLocation['country_code'];

     if (variable_get('registration_State') == '1'){

     	$state = getStateDef();
        $defStateVal = getState($userLocation['country_code']);

      $optstate[''] = t('LBL674');
      foreach($state as $code => $name){
      	$optstate[$name->sta_code] = $name->sta_name;
      }
      $stateAttributes = array();
      $stateAttributes['tabindex'] = 17;
      $stateAttributes['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $stateAttributes['id'] ='state';
      $stateAttributes['class'] = array('register-drop-down exp-select-field-style');
      $form['state'] = array(
      		'#type' => 'select',
      		'#title' => t('LBL152'),
      		'#attributes' => $stateAttributes,
      		'#default_value' => $defStateVal,
      		'#options' => $optstate
      );

     }
     
     if (variable_get('registration_Country') == '1'){
      	$country = getCountry();

      	$optcountry[''] = t('LBL674');
      	foreach($country as $code => $name){
      		$optcountry[$name->cnt_code] = $name->cnt_name;
      	}
      	$countryAttributes = array();
      	$countryAttributes['tabindex'] = 16;
      	if (variable_get('registration_State') == '1'){
      	  $countryAttributes['onchange'] = 'getstatesforcountry(this.value);';
      	}
      	$countryAttributes['id'] ='count';
      	$countryAttributes['class'] = array('register-drop-down exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to exp-select-field-style
      	$form['country'] = array(
      			'#type' => 'select',
      			'#title' => t('LBL067'),
      			'#attributes' => $countryAttributes,
      			'#default_value' =>$userLocation['country_code'],
      			'#options' => $optcountry,
      	);

      }


      if (variable_get('registration_Organization') == '1'){

      	$org  = getOrg();

      $optorg[''] = t('LBL674');
      foreach($org as $code => $name){
      	$optorg[$name->org_id] = $name->org_name;
      }
      $orgAttributes = array();
      $orgAttributes['tabindex'] = 18;
      $orgAttributes['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $orgAttributes['class'] = array('register-drop-down exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to exp-select-field-style
      $form['org'] = array(
      		'#type' => 'select',
      		'#title' => t('Organization'),
      		'#attributes' => $orgAttributes,
      		'#default_value' => '',
      		'#options' => $optorg,
      		);
           }


      if (variable_get('registration_Employment Type') == '1'){


      	$emptype = getEmptype();


      	$optemptype[''] = t('LBL674');
      foreach($emptype as $code => $name){
      	$optemptype[$name->emp_code] = $name->emp_name;
      	}
      $emptypeAttributes = array();
      $emptypeAttributes['tabindex'] = 19;
      $emptypeAttributes['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $emptypeAttributes['class'] = array('register-drop-down exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to exp-select-field-style
      $form['emptype'] = array(
      		'#type' => 'select',
      		'#title' => t('LBL174'),
      		'#attributes' => $emptypeAttributes,
      		'#default_value' =>'',
      		'#options' => $optemptype,
      		//'#required' => TRUE,
      );

      //addDropDownToAddEditForm($form, 'emptype', t('LBL174'),$emptypeAttributes,'', 15, false);
      }
      if (variable_get('registration_Employee ID') == '1'){
      $form['empid'] = array('#type' => 'textfield',
      		'#title' => t('LBL294'),
      		'#attributes' => array('tabindex' => '21'),
      		'#size' => 40,
      		'#maxlength' => 255,
      );
      	//addTextFieldToAddEditForm($form, 'empid', t('LBL294'),'', 18, true);
      }

      if (variable_get('registration_Department') == '1') {
      	$dept = getDept();

      $optdept[''] = t('LBL674');
      foreach($dept as $code => $name){
      	$optdept[$name->dept_code] = $name->dept_name;
      }
      $deptAttributes = array();
      $deptAttributes['tabindex'] = 20;
      $deptAttributes['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $deptAttributes['class'] = array('register-drop-down exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to exp-select-field-style
      $form['dept'] = array(
      		'#type' => 'select',
      		'#title' => t('LBL179'),
      		'#attributes' => $deptAttributes,
      		'#default_value' =>'',
      		'#options' => $optdept,
      		//'#required' => TRUE,
      );
      }

      if (variable_get('registration_Job Role') == '1'){

      	$jobrole = getJobRole();

       	$jobRolesOption = getProfileItemNamesKeyed('cre_usr_jrl_');

      	$defaultOptions='';

      	addMultiselectDropDownToRegForm($form, 'jobrole', t('LBL133'), $jobRolesOption, $defaultOptions, 24, false, false, array('style'=>'display: none; width:293px;'), array('code' => 'cre_usr_jrl'));

     }

      if (variable_get('registration_User Type') == '1'){
      	$usrtype = getUsrtype();

      $optusrtype[''] = t('LBL674');
      foreach($usrtype as $code => $name){
      	$optusrtype[$name->usrtype_code] = $name->usrtype_name;
      }
      $usrtypeAttributes = array();
      $usrtypeAttributes['tabindex'] = 22;
      $usrtypeAttributes['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $usrtypeAttributes['class'] = array('register-drop-down exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to exp-select-field-style
      $form['usrtype'] = array(
      		'#type' => 'select',
      		'#title' => t('LBL173'),
      		'#attributes' => $usrtypeAttributes,
      		'#default_value' =>'',
      		'#options' => $optusrtype,
      		//'#required' => TRUE,
      );
      }


      $optloc[0] = 'Select';
      foreach($ploc as $code => $name){
        $optloc[$name->loc_id] = $name->loc_name;
      }
      $preflocAttributes = array();
      $preflocAttributes['tabindex'] = 30;
      $preflocAttributes['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $preflocAttributes['class'] = array('register-drop-down exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to exp-select-field-style
      $form['prefloc'] = array(
		    '#type' => 'select',
		    '#title' => t('Location'),
		    '#attributes' => $preflocAttributes,
		    '#default_value' =>0,
		    '#options' => $optloc,
      );


      if (variable_get('registration_Job Title') == '1'){
      $optjob[''] = t('LBL674');
      foreach($jtitle as $code => $name){
        $optjob[$name->job_code] = $name->job_name;
      }
      $jtitleAttributes = array();
      $jtitleAttributes['tabindex'] = 23;
      $jtitleAttributes['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $jtitleAttributes['class'] = array('register-drop-down exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to exp-select-field-style
      $form['jtitle'] = array(
		    '#type' => 'select',
		    '#title' => t('LBL073'),
		    '#attributes' => $jtitleAttributes,
		    '#default_value' =>'',
		    '#options' => $optjob,
		    //'#required' => TRUE,
      );

      //addDropDownToAddEditForm($form, 'jtitle', t('LBL073'),$deptAttributes,'', 19, false);
      }

      $optzone[''] = t('LBL674');
      foreach($tzone as $code => $name){
        $optzone[$name->zone_code] = $name->zone_name;
      }
      $tzoneAttributes = array();
      $tzoneAttributes['tabindex'] = 8;
      $tzoneAttributes['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $tzoneAttributes['class'] = array('register-drop-down exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to exp-select-field-style
      $form['tzone'] = array(
		    '#type' => 'select',
		    '#title' => t('LBL077'),
		    '#attributes' => $tzoneAttributes,
		    '#default_value' => '',
		    '#options' => $optzone,
		    '#required' => TRUE,
      );
      if (variable_get('registration_Language') == '1'){

      	$lang = getLang();

      $optlang[''] = t('LBL674');
      foreach($lang as $code => $name){
      	$optlang[$name->lang_code] = $name->lang_name;
      }
      $langAttributes = array();
      $langAttributes['tabindex'] = 9;
      $langAttributes['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $langAttributes['class'] = array('register-drop-down exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to exp-select-field-style
      $form['lang'] = array(
      		'#type' => 'select',
      		'#title' => t('LBL038'),
      		'#attributes' => $langAttributes,
      		'#default_value' => '',
      		'#options' => $optlang,
      		'#required' => FALSE,
      );
      //addDropDownToAddEditForm($form, 'lang', t('LBL038'),$deptAttributes,'', 19, false);
      }

      /* Added by simbu Sep 25, 2015*/
      if (variable_get('registration_Currency') == '1'){
	//Added by Subin. Ticket #59698
      	$currency = getCurrency();
        $default_profile_currency = getCurrencyDefDetails();
		$allow_currency_change = restrict_user_currency_select();
		
        
      	$optcurrency[''] = t('LBL674');
      	foreach($currency as $code => $symbol){
      		$optcurrency[$symbol->currency_code] = $symbol->currency_code." ".$symbol->currency_symbol." ".$symbol->currency_name;
      	}
      	$currencyAttributes = array();
      	$currencyAttributes['tabindex'] = 9;
      	$currencyAttributes['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      	$currencyAttributes['class'] = array('register-drop-down exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to exp-select-field-style
      	$form['currency'] = array(
      			'#type' => 'select',
      			'#title' => t('LBL101'),
      			'#attributes' => $currencyAttributes,
      			'#default_value' => $default_profile_currency,
      			'#options' => $optcurrency,
      			'#required' => FALSE,
                        '#disabled' => $allow_currency_change
      	);
      }
      /* Added by simbu Sep 25, 2015*/

      if(module_exists('captcha') && module_exists('image_captcha')){
        $form['captcha_test'] = array(
    	    '#prefix' => '<tr><td class="reg-field-title"><div class="captcha-textfield">'.t('MSG014').': <span class="require-text">*</span></div></td><td><div><div id="create-lnr-captcha">',
    	    '#suffix' => '</div></div></td></tr>',
            '#type' => 'captcha',
            '#attributes' => array('tabindex' => '24')
        );
      }
      /*$captcha_text = generateCaptcha();
      $cap_url = $captcha_text['url'];
      $cap_num = $captcha_text['num'];

      $cap_url = $base_url."/sites/all/services/Captcha.php";*/

      global $base_url;
      $form['hidden'] = array(
      		//'#type' => 'hidden',
	      	'#markup' => '<div id="dropdown_initialization_id">
            		<img src="'.$base_url.'/sites/all/themes/core/expertusoneV2/logo.png" id="Img" onload="onloadimage(this)"/></div>',

      );
            //hidden field for storing state value
            $form['stateid'] = array('#type' => 'hidden',
	  		'#attributes' => array('id' => 'stateid'),
			//'#default_value' => $form_state['values']['state'],
            '#default_value' => '',
      );
      /*$form['ajax_link'] = array(
		    '#type' => 'link',
		    '#title' => t(' '),
		    //'#href' => 'user_reg_link_callback/nojs',
		    '#attributes' => array('Class' => 'captch-refresh-img'),
		    '#id' => 'ajax_link',
		    '#ajax' => array(
		      'wrapper' => 'captcha-test',
		      'method' => 'html',
            ),
      );*/



        $attributes['tabindex'] = 25;
        $attributes['onclick'][] = 'checkboxSelectedUnselectedCommon(this);';
        $form['sub_check'] = array(
		    '#type' => 'checkbox',
            '#prefix' => '<div class="checkbox-unselected">',
            '#suffix' => '</div>',
		    '#attributes' => $attributes,
        );

  		$form['register'] = array(
					    '#type' => 'submit',
                                            '#id' => 'edit-register',
					    '#prefix' => '<div class="admin-save-pub-unpub-button-container"><div class="admin-save-button-left-bg"></div>',
					    '#suffix' => '<div class="admin-save-button-right-bg"><div class="clearBoth"></div></div></div>',
					    '#attributes' => array('tabindex' => '26', 'Class' => 'admin-save-button-middle-bg'),
					    '#value' => t('Register'),
					    '#ajax' => array(
					        'wrapper' => 'wizard-form-wrapper',
					        'callback' => 'ajax_userregister_add',
                                                 'event'=>'click',
                                             ),
                                    );
      $policy = _password_policy_load_active_policy();
      $translate = array();
      if (!empty($policy['policy'])) {
        // Some policy constraints are active.
        foreach ($policy['policy'] as $key => $value) {
          $translate['constraint_'. $key] = _password_policy_constraint_error($key, $value);
        }
      }
      // Printing out the restrictions.
      if (variable_get('password_policy_show_restrictions', 0) && !empty($translate) && isset($translate)) {
        $form['password_restriction']['#markup'] = '<div class="password-note-cls"><ul><li>('. implode('</li><li>', $translate) .')</li></ul></div>';
      }
			$form['addrval'] = array(
					'#type' => 'hidden',
					'#attributes' => array('id' => 'addrval-status'),
		 	);
                                                
                        $form['is_verified_add'] = array(
					'#type' => 'hidden',
					'#attributes' => array('value' => (!empty($form_state['values']['is_verified_add']) ? $form_state['values']['is_verified_add'] : '')),
		 	);
                        
                        $form['is_valid_add'] = array(
					'#type' => 'hidden',
					'#attributes' => array('value' => (!empty($form_state['values']['is_valid_add']) ? $form_state['values']['is_valid_add'] : '')),
		 	);
                        
                        $form['invalid_add_reason'] = array(
					'#type' => 'hidden',
					'#attributes' => array('value' => (!empty($form_state['values']['invalid_add_reason']) ? $form_state['values']['invalid_add_reason'] : '')),
		 	);
                        

			$form['#validate'] = user_reg_default_validators();

			if($form_state['values']['addrval']) {
						$form['addrval-hidden-image'] = array(
								//'#type' => 'hidden',
									'#markup' => '<div id="dropdown_initialization_id">
									<img src="'.$base_url.'/sites/all/themes/core/expertusoneV2/logo.png" id="Img" onload="confirmationPopup();"/></div>',
								);
			}
			break;

    case 'saved':
      global $base_url;
      $form['description'] = array(
    		'#markup' => '<script>window.location="'.$base_url.'?q=learning/catalog-search";</script>',
      );
      break;
  }


  return $form;
  }catch (Exception $ex) {
    watchdog_exception('ajax_userregister', $ex);
    expertusErrorThrow($ex);
  }
}

function user_reg_default_validators() {
	try{
  return array('user_reg_pass_validate',
					'user_reg_phone_validate',
  		            'user_reg_mobile_validate',
					'user_reg_email_validate',
					'user_reg_uname_validate',
					'expertus_xss_validate',
					'user_reg_email_exists_validate',
  		            'user_reg_empid_exists_validate',
				   	//'user_reg_captcha_validate'
					);

}catch (Exception $ex) {
	watchdog_exception('user_reg_default_validators', $ex);
	expertusErrorThrow($ex);
}
}

function user_reg_captcha_validate(&$form, &$form_state){
  try{
  require_once('exp_sp_userregister.inc');
  $entered_captcha = getEncryptedCaptcha($form_state['values']['captchatxt']);
  if(strcmp($form_state['values']['hid_cap_txt'],$entered_captcha) == 0){
    //return true;
  }else{
    form_set_error('captchatxt',t('ERR013'));
  }
  }catch (Exception $ex) {
    watchdog_exception('user_reg_captcha_validate', $ex);
    expertusErrorThrow($ex);
  }
}

function user_reg_pass_validate(&$form, &$form_state){
	try{
  validatePassword('pass', $form_state['values']['pass'], 'cpass', $form_state['values']['cpass']);
  }catch (Exception $ex) {
  	watchdog_exception('user_reg_pass_validate', $ex);
  	expertusErrorThrow($ex);
  }
}

function user_reg_email_validate(&$form, &$form_state) {
	try{
  $mail = trim($form_state['values']['email']);
  if(!empty($mail)){
 	if (!validateEmail($mail)) {
      form_set_error('email', t('ERR002'));
    }
  }
  }catch (Exception $ex) {
  	watchdog_exception('user_reg_email_validate', $ex);
  	expertusErrorThrow($ex);
  }
}

function user_reg_uname_validate(&$form, &$form_state) {
	try{
		$uname = $form_state['values']['name'];
		$fname = $form_state['values']['fname'];
		$lname = $form_state['values']['lname'];
		if(existsUserName($uname)){
			form_set_error('name', t('ERR016'));
		}
		if (strpos($uname, ' ') !== FALSE){
			form_set_error('name', t('ERR015'));
		}
		if(preg_match('/[\<>"]/',$uname)){
			form_set_error('name', t('ERR068'));
		}
		if(preg_match('/[\<>"]/',$fname)){
			form_set_error('fname', t('ERR171').' '.t('LBL056').'.');
		}
		if(preg_match('/[\<>"]/',$lname)){
			form_set_error('lname', t('ERR171').' '.t('LBL058').'.');
		}
	}catch (Exception $ex) {
		watchdog_exception('user_reg_uname_validate', $ex);
		expertusErrorThrow($ex);
	}
}

function user_reg_email_exists_validate(&$form, &$form_state) {
	try{
  $email_add = $form_state['values']['email'];
  if(!empty($email_add)){
    if(existsUserEmail($email_add)){
      form_set_error('email', t('ERR001'));
    }
  }
  }catch (Exception $ex) {
  	watchdog_exception('user_reg_email_exists_validate', $ex);
  	expertusErrorThrow($ex);
  }
}

function user_reg_phone_validate(&$form, &$form_state){
	try{
  $phone = $form_state['values']['phoneno'];
  if(!empty($phone)){
    if (!preg_match('/[^+\(] *[0-9-\)]+ *[^-]$/',$phone)) {
  	  form_set_error('phoneno', t('ERR003'));
    }
  }
  }catch (Exception $ex) {
  	watchdog_exception('user_reg_phone_validate', $ex);
  	expertusErrorThrow($ex);
  }
}
function user_reg_mobile_validate(&$form, &$form_state){
	try{
		$mobile = $form_state['values']['mobile'];
		if(!empty($mobile)){
			if (!preg_match('/[^+\(] *[0-9-\)]+ *[^-]$/',$mobile)) {
				form_set_error('mobile', t('ERR003'));
			}
		}
	}catch (Exception $ex) {
		watchdog_exception('user_reg_mobile_validate', $ex);
		expertusErrorThrow($ex);
	}
}

function user_reg_empid_exists_validate(&$form, &$form_state) {
	try{

		include_once(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user.inc');
		$empid = $form_state['values']['empid'];
		if(!empty($empid)){
			if(existsUserEmpid($empid)){
				form_set_error('empid', t('ERR159'));
			}
		}
	}catch (Exception $ex) {
		watchdog_exception('user_reg_empid_exists_validate', $ex);
		expertusErrorThrow($ex);
	}
}


function ajax_userregister_add($form, &$form_state) {
	try{
		if(form_set_error){
    $form['captchatxt']['#value'] = '';
    //For storing state in hidden field
    $stateopt=$form_state['values']['state'];
    $form['stateid']['#value']=$stateopt;

    }
  if($form_state['storage']['step'] == 'saved'){
    unset($form['#theme']);
    }
  return $form;
  }catch (Exception $ex) {
  	watchdog_exception('ajax_userregister_add', $ex);
  	expertusErrorThrow($ex);
  }
}
/**
 * Submit function for ajax_example_wizard.
 *
 * In AJAX this is only submitted when the final submit button is clicked,
 * but in the non-javascript situation, it is submitted with every
 * button click.
 *
 */
function ajax_userregister_submit($form, &$form_state) {
  try{
        //Added by Subin. Ticket #59698
        $default_profile_currency = getCurrencyDefDetails();
	$addrval_fail = false;
	$is_verified_add = 'No';
	$is_valid_add = '';
	$invalid_add_reason = '';
        //vaidate address
        include_once(drupal_get_path('module', 'exp_sp_administration_module_info') .'/exp_sp_administration_module_info.inc');
        include_once(drupal_get_path('module', 'exp_sp_usps_integration') .'/exp_sp_usps_integration.module');
        $uspsValidate = getDrupalModuleStatus(array('exp_sp_usps_integration'));
        $countryCode = trim($form_state['values']['country']);
	
	if($form_state['values']['addrval'] != '0') {
		if($uspsValidate == 1 && strtolower($countryCode) == 'us'){
			$address_info = array(
				'apt' => trim($form_state['values']['addr1']),
				'address' => trim($form_state['values']['addr2']),
				'city' => trim($form_state['values']['city']),
				'state' => trim($form_state['values']['state']),
				'zip5' => trim($form_state['values']['zipcode']),
			);
                        if($address_info['apt']=='' && $address_info['address']=='' && $address_info['city']=='' && $address_info['state']=='' && $address_info['zip5']==''){
                            $addressVerify = '';
                        }else{
                            $addressVerify = exp_sp_usps_integration_verify_address($address_info);
                        }
			$response = end($addressVerify);
			$is_verified_add = (!empty($response)) ? 'Yes' : 'No';
			$isuspsError = $response['Address']['Error']['Description'];
                        if(empty($isuspsError) && !empty($response)){
                            $resCity = strtolower($response['Address']['City']);
                            $inpCity = strtolower($address_info['city']);
                            $isuspsError = ($resCity == $inpCity) ? '' : 'Invalid City';
                        }
			$is_valid_add = (!empty($isuspsError)) ? 'Invalid' : (empty($response) ? '': 'Valid');
			$invalid_add_reason = (!empty($isuspsError)) ? $isuspsError : null;
			if(!empty($invalid_add_reason) && $is_valid_add == 'Invalid'){
				$addrval_fail = true; //set the flag to initiate the confirmation popup to the user
			}
			// do nothing
		}
	}
        
	$form_state['values']['is_verified_add'] = ($uspsValidate == 1 && (strtolower($countryCode) == 'us') && (!empty($form_state['values']['is_valid_add']) || $is_valid_add !='')) ? 'Yes' : 'No';
	$form_state['values']['is_valid_add'] = empty($is_valid_add) ? $form_state['values']['is_valid_add'] : $is_valid_add;
	$form_state['values']['invalid_add_reason'] = (empty($invalid_add_reason) && $form_state['values']['is_valid_add'] == 'Valid') ? null : (empty($invalid_add_reason) ? $form_state['values']['invalid_add_reason'] : $invalid_add_reason);
	expDebug::dPrint('form state value end'.print_r($form_state['values'], 1));
	if($addrval_fail && $form_state['triggering_element']['#value'] == t('Register')) {
		  // $form_state['storage']['step'] = 'addrval';
			$form_state['values']['addrval'] = 1;
	}
  else if ($form_state['triggering_element']['#value'] == t('Register')) {

// return;
    require_once('exp_sp_userregister.inc');
    $sub_val = 'N';
    if($form['sub_check']['#value']==1){
      $sub_val = 'Y';
    }else{
      $sub_val = 'N';
    }
    $_SESSION['newusersaved'] = 'yes';


    $values_for_user_ins = array('fname_val'  => $form['fname']['#value'],
										'mname_val'  => $form['mname']['#value'],
										'lname_val'  => $form['lname']['#value'],
										'email_val'  => $form['email']['#value'],
										'phone_val'  => $form['phoneno']['#value'],
										'mobile_val'  => $form['mobile']['#value'],
										'uname_val'  => $form['name']['#value'],
										'pass_val'   => $form['pass']['#value'],
										'addr1_val'  => $form['addr1']['#value'],
										'addr2_val'  => $form['addr2']['#value'],
										'city_val'  => $form['city']['#value'],
										'state_val'  => $form['state']['#value'],
										'country_val'  => $form['country']['#value'],
										'emptype_val'  => $form['emptype']['#value'],
										'usrtype_val'  => $form['usrtype']['#value'],
										'org_val'  => $form['org']['#value'],
										'empid_val'  => $form['empid']['#value'],
										'dept_val'  => $form['dept']['#value'],
										'lang_val'  => $form['lang']['#value'],
										'currency_val'  => empty($form['currency']['#value']) ? $default_profile_currency : $form['currency']['#value'],
										'zip_val'  => $form['zipcode']['#value'],
										'ploc_val'   => $form['prefloc']['#value'],
										'jtitle_val' => $form['jtitle']['#value'],
										'tzone_val'  => $form['tzone']['#value'],
										'jobrole_val' => $form['load_multiselect_jobrole']['#value'],
										'sub_val'    => $sub_val,
										'is_verified_add' => $form_state['values']['is_verified_add'],
										'is_valid_add' => $form_state['values']['is_valid_add'],
										'invalid_add_reason' => $form_state['values']['invalid_add_reason']
							);

    insertUserInfo($values_for_user_ins,$form_state);
    $form_state['storage']['step'] = 'saved';
    drupal_set_message(t('MSG009'));
  }
  // Otherwise, we still have work to do.
  $form_state['rebuild'] = TRUE;
  }catch (Exception $ex) {
    watchdog_exception('ajax_userregister_submit', $ex);
    expertusErrorThrow($ex);
  }
}



function user_reg_link_response($type = 'ajax') {
  try{
  require_once('exp_sp_userregister.inc');
  $ref_text = generateCaptcha();
  $ref_url = $ref_text['url'];
  $ref_num = $ref_text['num'];
  $output = '<script>reloadCaptchaImg("'.$ref_num.'")</script>';
  if ($type == 'ajax') {
    $commands = array();
    $output .= '<img src="'.$ref_url.'" id="captchaImg"/>';
    $commands[] = ajax_command_html('#captcha-test',$output);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    $output .= '<img src="'.$ref_url.'" id="captchaImg"/>';
    return $output;
  }
  }catch (Exception $ex) {
    watchdog_exception('user_reg_link_response', $ex);
    expertusErrorThrow($ex);
  }
}

//for 40896: System throws error message while clicking "Register" button after user logged user
function get_active_session() {
	global $user;
	if($user->uid) {
		echo t('MSG464').' '.$user->name;	//you are already logged in as $user->name
	}
}
?>
