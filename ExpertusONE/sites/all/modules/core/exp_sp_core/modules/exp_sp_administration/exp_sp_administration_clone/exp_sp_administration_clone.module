<?php 

/* function exp_sp_administration_clone_init() {
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_class_register.inc');
} */
/**
 * Implementation of hook_menu().
 */
function exp_sp_administration_clone_menu() {
	try {
		$items = array();
		expDebug::dPrint(' $items = ');
		
		$items['administration/clone/popup/%/%/%'] = array(
				'title' => 'Clone Popup',
				'page callback' => 'buildAndPaintFormInCloneEntitiesPopup',
				'page arguments' => array(3,4,5),
				'access callback' => 'user_access',
				'access arguments' => array('expertus learner'),
				'type' => MENU_CALLBACK,
				'file' => 'exp_sp_administration_clone.inc',
		);
		
		$items['administration/clone/%/%/%/%'] = array(
				'title' => 'Clone Results without Enrollment',
				'page callback' => 'adminCommonClone',
				'page arguments' => array(2,3,4,5),
				'access callback' => 'user_access',
				'access arguments' => array('expertus learner'),
				'type' => MENU_CALLBACK,
				'file' => 'exp_sp_administration_clone.inc',
		); 
		
				
		expDebug::dPrint(' $items = ' . print_r($items, true), 4);
		return $items;
  }catch (Exception $ex) {
			watchdog_exception('exp_sp_administration_clone_menu', $ex);
			expertusErrorThrow($ex);
	}
}

function clone_admin_course_class_tp_qtip_entities_form($form, &$form_state,$entityId,$clsId,$page){
	
	global $theme_key;
	$form = array();
	$cls_details = getAvailableListofEntities($entityId,$clsId);
	$hasClassEnr = getEnrollmentDetailsForClass($entityId,$clsId);
	$is_priced = (int) $cls_details[0]->price;
	$enroll_check = ($is_priced > 0 || ($hasClassEnr == 0)) ? 1 : 0;
	expDebug::dPrint('ccccccc1111  '.$entityId.'$cls_details'.$clsId);
	$deliveryTypeValue = $cls_details[0]->delivery_type;
	expDebug::dPrint('checking the values of clone_admin_course_class_tp_qtip_entities'.$enroll_check.'is priced or not'.$is_priced,5);
	if($deliveryTypeValue == 'lrn_cls_dty_ilt' || $deliveryTypeValue == 'lrn_cls_dty_vcl'){
		$checkboxes_list = array('access'=>t('LBL642'),'assessment'=> t('Assessment'),'attachment'=>t('LBL231'),'business_rule'=>t('LBL719') , 'enrollment'=>t('LBL275'), 'survey'=>t('Survey'),'tags'=>t('LBL191'));
	}else if($form_state['page']=='contentauthor'){
		$checkboxes_list = array('Content'=>t('Content'),'access'=>t('LBL642'),'Interactions'=> t('LBL3037'));
	
	}else if($form_state['page']=='TP'){
		$checkboxes_list = array('access'=>t('LBL642'),'assessment'=> t('Assessment'),'attachedcourses'=>t('Attached Courses'),'attachment'=>t('LBL231'),'certificate'=>t('LBL205'),'prerequisite'=>t('LBL230'),'survey'=>t('Survey'),'tags'=>t('LBL191'));
	}else{
		$checkboxes_list = array('access'=>t('LBL642'),'assessment'=> t('Assessment'),'attachment'=>t('LBL231'),'business_rule'=>t('LBL719'),'content_list' =>t('Content'),'enrollment'=>t('LBL275'),'survey'=>t('Survey'),'tags'=>t('LBL191'));
	} 	 

$addCls = "";
if($form_state['page']=='contentauthor')
	$addCls = "contentauthorclone";	
	 $form['clone-scroll-div-start'] = array(
			'#type' => 'markup',
			'#markup' => "<div class='clone-class-scroll-list ".$addCls."' id='clonescrolldiv".$clsId."'>"
			); 
	
	foreach ($checkboxes_list as $val => $name){
		expDebug::dPrint('checking the variables for the checkbox list'.$val.'$name'.$name);
		$form['label-attributes-'.$val] = array(
				'#type' => 'markup',
				'#id' =>$val,
				'#prefix'=> "<li class='clone-list-class'>",
				'#suffix' =>  "<label title=".$name." class='clone-label-list' for=".$val.">".$name."</label>"
		);

		$checkboxAttributes = array();
		if($val == 'content_list' && ($deliveryTypeValue == 'lrn_cls_dty_wbt' || $deliveryTypeValue == 'lrn_cls_dty_vod') && $enroll_check == 0){
			$checkboxAttributes['onclick'][]   = 'checkboxDisableForClone("class",'.$clsId.');';
		} 
		if($form_state['page']=='TP' && $val == 'attachedcourses'){
			$checkboxAttributes['onclick'][]   = 'checkboxDisableForClone("tp",'.$clsId.');';
		} 
		if ($val == 'enrollment' && ($deliveryTypeValue == 'lrn_cls_dty_wbt' || $deliveryTypeValue == 'lrn_cls_dty_vod') && $hasClassEnr >0){
			$checkboxAttributes['onclick'][]   = 'checkboxAutoEchckForContentClone("class",'.$clsId.');';
		}
		if($form_state['page']=='TP' && ($val == 'survey' || $val == 'assessment')){
			$checkboxAttributes['onclick'][]   = 'checkboxAutoEchckForContentClone("tp",'.$clsId.');';
		}
		

		if($val == "Content")
			$checkboxAttributes['onclick'][]   = 'checkboxDisableForCloneCA(this);';
		if($theme_key == 'expertusoneV2'){
			
			if($val == "Interactions")
			{
				$checkboxAttributes['onclick'][]   = 'checkboxDisableForCloneCA(this);';
			
			$form['checkbox-attributes-'.$val] = array(
					'#id' => 'clone-'.$val,
					'#type' => 'checkbox',
					'#field_prefix'=> "<div class='checkbox-unselected'>",// #0037171: Create Copy (clone) feature needs to be tweaked- all options in UI to be unchecked/ un selected by default
					'#field_suffix' =>  "</div>",
					'#suffix' =>  "</li>",
					//'#default_value' => ($enroll_check && $val=='enrollment') ? 0 : 1, 	/**	#0037171: End of Code Change*/
					//'#disabled' => true,
					'#attributes' => $checkboxAttributes,
			);
			}
			else if($form_state['page']=='contentauthor' && $val == "access")
			{
			    $checkboxAttributes['onclick'][]   = 'checkboxDisableForCloneCA(this);';
			    	
			    $form['checkbox-attributes-'.$val] = array(
			            '#id' => 'clone-'.$val,
			            '#type' => 'checkbox',
			            '#field_prefix'=> "<div class='checkbox-unselected'>",// #0037171: Create Copy (clone) feature needs to be tweaked- all options in UI to be unchecked/ un selected by default
			            '#field_suffix' =>  "</div>",
			            '#suffix' =>  "</li>",
			            //'#default_value' => ($enroll_check && $val=='enrollment') ? 0 : 1, 	/**	#0037171: End of Code Change*/
			            //'#disabled' => true,
			            '#attributes' => $checkboxAttributes,
			    );
			}
			
			else if($val == "Content") //for content author "content" option should be selected always and disabled.
			{ 
				$checkboxAttributes['onclick'][]   = '';//checkboxSelectedUnselectedCommon(this);';
			
			$form['checkbox-attributes-'.$val] = array(
					'#id' => 'clone-'.$val,
					'#type' => 'checkbox',
					'#field_prefix'=> "<div class='checkbox-selected'>",// #0037171: Create Copy (clone) feature needs to be tweaked- all options in UI to be unchecked/ un selected by default
					'#field_suffix' =>  "</div>",
					'#suffix' =>  "</li>",
					'#default_value' =>  1, 	/**	#0037171: End of Code Change*/
					'#disabled' => true,
					'#attributes' => $checkboxAttributes,
			);
			}
			else{
			    $checkboxAttributes['onclick'][]   = 'checkboxSelectedUnselectedCommon(this);';
			$form['checkbox-attributes-'.$val] = array(
					'#id' => 'clone-'.$val,
					'#type' => 'checkbox',
					'#field_prefix'=> "<div class='checkbox-unselected'>",// #0037171: Create Copy (clone) feature needs to be tweaked- all options in UI to be unchecked/ un selected by default
					'#field_suffix' =>  "</div>",
					'#suffix' =>  "</li>",
					//'#default_value' => ($enroll_check && $val=='enrollment') ? 0 : 1, 	/**	#0037171: End of Code Change*/
					'#disabled' => ($enroll_check && $val=='enrollment') ? true : false,
					'#attributes' => $checkboxAttributes,
			);
			}
			
		}else{
			$form['checkbox-attributes-'.$val] = array(
					'#id' => 'clone-'.$val,
					'#type' => 'checkbox',
					'#suffix' =>  "</li>",
					//'#default_value' => ($enroll_check && $val=='enrollment') ? 0 : 1,	/**	#0037171: Create Copy (clone) feature needs to be tweaked- all options in UI to be unchecked/ un selected by default**/
					'#disabled' => ($enroll_check && $val=='enrollment') ? true : false,
					'#attributes' => $checkboxAttributes,
			);
		}
	}
	
 	$form['clone-scroll-div-end'] = array(
			'#type' => 'markup',
			'#markup' => '</div>'
	); 
 	$form['clone-attributes-divider'] = array(
 			'#type' => 'markup',
 			'#markup' => "<div class='clone-attributes-button-divider'></div>"
 	);
	
	$attributesclone = array();
	if($form_state['page']=='TP')
		$attributesclone['class'][] = 'ctools-modal-ctools-admin-programform-addedit-style';
	else
		$attributesclone['class'][] = 'ctools-modal-ctools-admin-course-class-addedit-scroll-wrapper';
	$attributesclone['class'][] = 'admin-save-button-middle-bg';
	$attributesclone['class'][] = 'addedit-form-expertusone-throbber';
	$attributesclone['data-wrapperid'] = 'paint-narrow-search-results';
	$form['clone-selected-attributes-'.$clsId] = array(
			'#type' => 'submit',
			'#name' => 'clone-selected-attributes-'.$clsId,
			'#id' => 'clone-selected-attributes-'.$clsId,
			'#prefix' => "<div id='clone-selected-confirm'><div class='admin-save-button-left-bg'></div>",
			'#suffix' => "<div class='admin-save-button-right-bg'></div></div>",
			'#value' => t('LBL569'),
			'#name' => 'clone-selected-attributes',
			'#attributes' => $attributesclone,
			'#ajax' => array(
					'wrapper' => 'paint-narrow-search-results',
					'event'=>'click',
					'callback' => '',
					'method' => 'replace',
					'effect' => 'none', // 'fade',
					'event'=>'click',
					'keypress' => true,
					'progress' => array(
							'type' => 'throbber',
							'message' => ''
					),
			)
	);
	expDebug::dPrint("TESTING FORM --->> ".print_r($form,true));
	return $form;
}

/**
 * Builds and paints schedule addedit form in Report Schedules popup
 */
function buildAndPaintFormInCloneEntitiesPopup($entityId,$clsId,$page) {
	try {
		expDebug::dPrint('$$entityId = ' . print_r($entityId, true), 4);
		//expDebug::dPrint('$$entityType = ' . print_r($entityType, true), 4);
		expDebug::dPrint('$$$page = ' . print_r($page, true), 4);

		$form_state = array(
				'no_redirect'  => TRUE,
				'build_info' => array('args' => array($entityId, $clsId,$page)),
				'entityId' => $entityId,
				'clsId' => $clsId,
			//	'entityType' => $entityType,
				'page' => $page,
		);
		$cloneAddEditFormId = 'clone_admin_course_class_tp_qtip_entities_form';
		$builtCloneAddEditForm = drupal_build_form($cloneAddEditFormId, $form_state);
		$renderedCloneAddEditForm = drupal_render($builtCloneAddEditForm);

			
		$commands = array();
		$commands[] = showClonePopup($renderedCloneAddEditForm,$clsId);
		$commands[] = ajax_command_invoke(NULL, "enableMultiCheckClone",array($clsId));
		$commands[] = ajax_command_invoke(NULL, "cloneDestroyloader", array());
		expDebug::dPrint('$commands = ' . print_r($commands, true), 4);
		print ajax_render($commands);
		exit;	
	}
	catch (Exception $ex) {
		watchdog_exception('buildAndPaintFormInReportSchedulesPopup', $ex);
		expertusErrorThrow($ex);
	}
}


/**
 * Wrapper for Drupal ajax command showClonePopup
 */
function showClonePopup($html,$clsId) {
	try{
		global $secure_entities_name;
		
		if (in_array(arg(5), $secure_entities_name)) {
			$clsId = core_encrypt($clsId); 
		} 
		return array(
				'command' => 'showClonePopup',
				'html' => $html,
				'class_id'=> $clsId
		);
	} catch (Exception $ex) {
		watchdog_exception('getMsgForOwner', $ex);
		expertusErrorThrow($ex);
	}
}

function clone_admin_course_class_tp_qtip_entities_form_submit($form, &$form_state){
	try {
		expDebug::dPrint('checking whether it is going to this function or not'.print_r($form_state,true),5);
		$entityId = $form_state['entityId'];
		$clsId = $form_state['clsId'];
		$page =  $form_state['page'];
		$enroll = 0;
		$loggedInUserId = getIdOfLoggedInUser();
		 switch($page){
			case 'Class':
				cloneClass($entityId,$clsId,$page,$form_state,$loggedInUserId);
				break;
			case 'TP':
				cloneTp($entityId,$clsId,$page,$form_state,$loggedInUserId);
				break;
			case 'contentauthor':
				cloneContentAuthor($entityId,$clsId,$page,$form_state,$loggedInUserId);
				break;
				
		} 
	}catch (Exception $ex) {
		watchdog_exception('clone_admin_course_class_tp_qtip_entities_form_submit', $ex);
		expertusErrorThrow($ex);
	}
}




?>
