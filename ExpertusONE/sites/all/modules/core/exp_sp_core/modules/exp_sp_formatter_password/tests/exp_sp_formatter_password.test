<?php
class ForgotPasswordTestCase extends ExpertusWebTestCase {
	public static function getInfo() {
	    return array(
	      'name'  => 'Forgot password Test',
	      'description'  => 'Forgot password Test',
	      'group' => 'exp_sp_formatter_password',
	    );
	 }
	 public function setUp() {
	      parent::setUp();
	  	  $user = new stdClass();
	  	//  $user->name =  'admin';
	  	 // $user->pass_raw = 'welcome';
	  	  //$this->drupalLogin($user);
     }
      public function testForgotPassword(){
	      $this->setHttpReferer('user/password');
		  $this->drupalGet('user/password');
		  $getusr = db_query("select user_name from slt_person order by user_name desc limit 1")->fetchField();
		  debug($getusr);
		  $this->assertRaw('<div class="my-forgot-pass-frm">','Form Rendered Successfully', 'exp_sp_formatter_password');
		  $webError = "Website encountered an unexpected error";
	  	  $this->assertNoText(t($webError),'Web errors not found','exp_sp_formatter_password');
	  	  $formIds = $this->xpath('//form[@action="/?q=user/password"]');
  		  $formId = (string) $formIds[1]['id'];
    	  $edit= array();
   		  $edit = array(
           'name' => $getusr,
          ); 
 		  // Submit the submit email new password button
	      $this->drupalPost('user/password', $edit, 'Email New Password');
	  	  $this->assertRaw('Instructions have been emailed to you','Submitted Successfully', 'exp_sp_formatter_password');
	  	 
    }
    
     public function testResetPassword(){
       $getonetimeurl= db_query("select substring_index(substring_index(token_str,'=',-1),'~|',1) as token_str2
       from slt_notification order by id desc limit 0,1;")->fetchField();
       $this->setHttpReferer('user/reset');
       // Get the reset password URL from db and submit
	   $this->drupalPost($getonetimeurl);
	   $this->assertRaw('Click on this button to log in to the site and set/change your password.','Submitted Successfully', 'exp_sp_formatter_password');
	   $this->assertFieldById('edit-submit', t('Log in'), t('Log in button appear on the page.'));
	   $this->drupalPost(null, array(), 'Log in');

     }
     
       public function testChangeUserPassword() {
       $getonetimeurl= db_query("select substring_index(substring_index(token_str,'=',-1),'~|',1) as token_str2
       from slt_notification order by id desc limit 0,1;")->fetchField();
   // $this->setHttpReferer($getonetimeurl);
	$this->drupalGet('');
  	$ctoolModel = array(
  		'modelWidth' => 890,
  		'modelClass' => 'ctools-modal-ctools-login-style',
  		'modelTitle' => 'Reset user password',
  		'contentWidth' => 890,
  		'contentMhight' => 236,
  		'outerHeight' => 236,
  		'outerWidth' => 890,
  		'blockHeight' => 1232,
  		'blockWidth' => 1343,
  		'modelTop' => 147.5,
  		'modelLeft' => 645,
  		'docHeight' => 1169,
  		'docWidth' => 1840
  	);
  	$this->addCtoolModelContent($ctoolModel);
  	$modelContent = $this->content;
  	$edit = array(
      'new_password' => "welcome123@",
    'confirm_password' => "welcome123@", 
    ); 

  	//$this->content = $modelContent;
  	$post_field = array('wrapper'=>'my-forgot-pass-frm');
	$out = $this->drupalPostAJAX(null, '','Save','/?q=.$getonetimeurl./login&destination=learning/reset-password',array(),array(),'',$post_field);
	$this->verbose('Request to: ' . $this->getUrl() . '<hr />' . $this->content);
  	$this->assertResponse(200,'Form Rendered successfully');
	$param = array('submit'=>array(
					"form_id"=>"reset_password",
					"_triggering_element_name" 	=>"op",
					"_triggering_element_value"	=>"Submit",
	));
	
	$post_field = array('submit'=>$param,	'wrapper'=>'reset-form-wrapper');
	$formIds = $this->xpath('//form[@action="/?q=ctools_ajax_sample/ajax/reset_password/start"]');
	$formId = "reset_password";
	//$this->drupalPost('ctools_ajax_sample/ajax/user_login', $edit, 'Sign In');
	$this->drupalPostAJAX(null,$edit,'Submit','?q=ctools_ajax_sample/ajax/reset_password/start',array(),array(),$formId,$post_field);
	//$out = $this->drupalPostAJAX(null, $edit,'Submit','?q=ctools_ajax_sample/ajax/reset_password/start',array(),array(),'',$post_field);
	
	$this->drupalGet('administration/learning/catalog');
	
	$this->verbose('Request to: ' . $this->getUrl() .	'<hr />' . $this->content);
	
	$isError = $this->xpath('//div[@class="messages error"]/ul/li/span');
	$error = '';
  	foreach($isError as $err){
	  	$error .= (string) $err[0]->span;
	  } 
  	
	$txt = 'my-account-settings';
  	$this->assertRaw('my-account-settings','Logged Successfully', 'exp_sp_login');
  	//$this->assertText($txt,'Updated changes successfully','exp_sp_login');
  	$this->assertNoText(t($error),'Error - '.$error,'exp_sp_login');

   }   
    
     
}
class ForgotPasswordValidationTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'e-mail validation',
      'description' => 'Verify that email validity checks behave as designed.',
      'group' => 'exp_sp_formatter_password'
    );
  }
  // Mail validation. More extensive tests can be found at common.test
  function testMailAddresses() {
    $test_cases = array( // '<username>' => array('<description>', 'assert<testName>'),
      ''                => array('Empty mail address', 'assertNotNull'),
      'foo'             => array('Invalid mail address', 'assertNotNull'),
      'foo@example.com' => array('Valid mail address', 'assertNull'),
    );
    foreach ($test_cases as $name => $test_case) {
      list($description, $test) = $test_case;
      $result = user_validate_mail($name);
      $this->$test($result, $description . ' (' . $name . ')');
    }
  }
}
