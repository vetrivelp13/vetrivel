(function(a){Drupal.Nodejs=Drupal.Nodejs||{contentChannelNotificationCallbacks:{},presenceCallbacks:{},callbacks:{},socket:false,connectionSetupHandlers:{}};Drupal.behaviors.nodejs={attach:function(b,c){if(!Drupal.Nodejs.socket){if(Drupal.Nodejs.connect()){Drupal.Nodejs.sendAuthMessage();}}}};Drupal.Nodejs.runCallbacks=function(b){if(b.clientSocketId==Drupal.Nodejs.socket.socket.sessionid){return;}if(b.callback){if(typeof b.callback=="string"){b.callback=[b.callback];}a.each(b.callback,function(){var d=this;if(Drupal.Nodejs.callbacks[d]&&a.isFunction(Drupal.Nodejs.callbacks[d].callback)){try{Drupal.Nodejs.callbacks[d].callback(b);}catch(c){}}});}else{if(b.presenceNotification!=undefined){a.each(Drupal.Nodejs.presenceCallbacks,function(){if(a.isFunction(this.callback)){try{this.callback(b);}catch(c){}}});}else{if(b.contentChannelNotification!=undefined){a.each(Drupal.Nodejs.contentChannelNotificationCallbacks,function(){if(a.isFunction(this.callback)){try{this.callback(b);}catch(c){}}});
}else{a.each(Drupal.Nodejs.callbacks,function(){if(a.isFunction(this.callback)){try{this.callback(b);}catch(c){}}});}}}};Drupal.Nodejs.runSetupHandlers=function(b){a.each(Drupal.Nodejs.connectionSetupHandlers,function(){if(a.isFunction(this[b])){try{this[b]();}catch(c){}}});};Drupal.Nodejs.connect=function(b){if(typeof b==="undefined"){b=false;}var c=Drupal.settings.nodejs.secure?"https":"http",d=c+"://"+Drupal.settings.nodejs.host+":"+Drupal.settings.nodejs.port;Drupal.settings.nodejs.connectTimeout=Drupal.settings.nodejs.connectTimeout||10000;Drupal.settings.nodejs.tryMultipleTransport=Drupal.settings.nodejs.tryMultipleTransport||false;if(typeof io==="undefined"){Drupal.Nodejs.runSetupHandlers("connectionFatalFailure");return false;}if(Drupal.Nodejs.expCheckConnection){clearTimeout(Drupal.Nodejs.expCheckConnection);}delete Drupal.Nodejs.expCheckConnection;if(b){Drupal.Nodejs.socket.removeAllListeners();if(Drupal.Nodejs.socket.socket.connected){Drupal.Nodejs.socket.disconnect();}delete io.sockets[d];
io.j=[];}Drupal.Nodejs.socket=io.connect(d,{"connect timeout":Drupal.settings.nodejs.connectTimeout,reconnect:false,secure:Drupal.settings.nodejs.secure?true:false,"try multiple transports":Drupal.settings.nodejs.tryMultipleTransport,"flash policy port":Drupal.settings.nodejs.flashPolicyPort});Drupal.Nodejs.expCheckConnection=setTimeout("Drupal.Nodejs.checkConnection()",Drupal.settings.nodejs.connectTimeout+250);Drupal.Nodejs.socket.on("connect",function(){if(Drupal.Nodejs.expCheckConnection){clearTimeout(Drupal.Nodejs.expCheckConnection);}delete Drupal.Nodejs.expCheckConnection;Drupal.Nodejs.sendAuthMessage();if(Drupal.Nodejs.authTimoutId){clearTimeout(Drupal.Nodejs.authTimoutId);}Drupal.Nodejs.authTimoutId=setTimeout("Drupal.Nodejs.reconnectOnAuthNoResponse()",Drupal.settings.nodejs.authTimeout);Drupal.Nodejs.runSetupHandlers("connect");});Drupal.Nodejs.socket.on("message",Drupal.Nodejs.runCallbacks);Drupal.Nodejs.socket.on("disconnect",function(){Drupal.Nodejs.runSetupHandlers("disconnect");
if(Drupal.Nodejs.authTimoutId){clearTimeout(Drupal.Nodejs.authTimoutId);}delete Drupal.Nodejs.authTimoutId;if(typeof Drupal.Nodejs.codeTriggeredDisconnectOnAuthNoResponse==="undefined"){setTimeout("Drupal.Nodejs.reconnectWhenNotUnload()",Drupal.settings.nodejs.pageUnloadDelay);}else{delete Drupal.Nodejs.codeTriggeredDisconnectOnAuthNoResponse;Drupal.Nodejs.reconnectWhenNotUnload();}});Drupal.Nodejs.socket.on("connecting",function(){Drupal.Nodejs.runSetupHandlers("connecting");});Drupal.Nodejs.socket.on("exp-authenticated",function(e){if(Drupal.Nodejs.authTimoutId){clearTimeout(Drupal.Nodejs.authTimoutId);}delete Drupal.Nodejs.authTimoutId;Drupal.Nodejs.cleanupAfterReconnectSuccessful();Drupal.Nodejs.runSetupHandlers("expAuthenticated");});Drupal.Nodejs.socket.on("exp-auth-failed",function(e){if(Drupal.Nodejs.authTimoutId){clearTimeout(Drupal.Nodejs.authTimoutId);}delete Drupal.Nodejs.authTimoutId;Drupal.Nodejs.socket.removeAllListeners();Drupal.Nodejs.socket.disconnect();Drupal.Nodejs.runSetupHandlers("expAuthFailed");
});};Drupal.Nodejs.checkConnection=function(){delete Drupal.Nodejs.expCheckConnection;if(!Drupal.Nodejs.socket.socket.connected){Drupal.Nodejs.runSetupHandlers("connectionFailure");Drupal.Nodejs.reconnect();}};Drupal.Nodejs.reconnect=function(){if(Drupal.Nodejs.socket.socket.connected){}if(typeof Drupal.Nodejs.reconnectCount==="undefined"){Drupal.Nodejs.reconnectCount=0;Drupal.Nodejs.currentReconnectDelay=Math.floor((Math.random()*(Drupal.settings.nodejs.maxInitialReconnectDelay-Drupal.settings.nodejs.minInitialReconnectDelay))+Drupal.settings.nodejs.minInitialReconnectDelay);}if(Drupal.Nodejs.reconnectCount<Drupal.settings.nodejs.reconnectAttempts){if(Drupal.Nodejs.reconnectCount>0){Drupal.Nodejs.currentReconnectDelay*=2;if(Drupal.Nodejs.currentReconnectDelay>Drupal.settings.nodejs.reconnectLimit){Drupal.Nodejs.currentReconnectDelay=Math.floor((Math.random()*(Drupal.settings.nodejs.maxInitialReconnectDelay-Drupal.settings.nodejs.minInitialReconnectDelay))+Drupal.settings.nodejs.minInitialReconnectDelay);
}}setTimeout("Drupal.Nodejs.connect(true)",Drupal.Nodejs.currentReconnectDelay);Drupal.Nodejs.reconnectCount+=1;}else{Drupal.Nodejs.socket.removeAllListeners();Drupal.Nodejs.runSetupHandlers("connectionFatalFailure");}};Drupal.Nodejs.cleanupAfterReconnectSuccessful=function(){delete Drupal.Nodejs.reconnectCount;delete Drupal.Nodejs.currentReconnectDelay;};Drupal.Nodejs.sendAuthMessage=function(){var b={authToken:Drupal.settings.nodejs.authToken,contentTokens:Drupal.settings.nodejs.contentTokens};Drupal.Nodejs.socket.emit("authenticate",b);};Drupal.Nodejs.reconnectOnAuthNoResponse=function(){delete Drupal.Nodejs.authTimoutId;Drupal.Nodejs.codeTriggeredDisconnectOnAuthNoResponse=true;Drupal.Nodejs.socket.disconnect();};})(jQuery);Drupal.Nodejs.reconnectWhenNotUnload=function(){Drupal.Nodejs.runSetupHandlers("connectionFailure");Drupal.Nodejs.reconnect();};jQuery(window).unload(function(){if(typeof Drupal.Nodejs.socket!="undefined"&&typeof Drupal.Nodejs.socket.socket!="undefined"&&typeof Drupal.Nodejs.socket.socket.connected!="undefined"){Drupal.Nodejs.socket.removeAllListeners();
if(Drupal.Nodejs.socket.socket.connected){Drupal.Nodejs.socket.disconnect();}}});