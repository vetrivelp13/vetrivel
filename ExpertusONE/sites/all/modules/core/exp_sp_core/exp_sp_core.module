<?php

function exp_sp_core_init() {
	try{	
  global $user;
  global $base_url;
  global $theme_key;
  global $catalog_reg;
  global $Solr_User;
  require_once DRUPAL_ROOT."/sites/all/services/Trace.php";
  require_once DRUPAL_ROOT."/sites/all/dao/AbstractDAO.php";
  require_once DRUPAL_ROOT."/sites/all/commonlib/UserInfo.php";
  require_once DRUPAL_ROOT."/sites/all/commonlib/ExpertusSelectQueryExtender.php";
  require_once "exp_sp_core.inc"; 
  
  $is_anonymous_user_catalog = is_anonymous_user_catalog();
  expDebug::dPrint("check is_anonymous_user_catalog function returns - ".$is_anonymous_user_catalog,5);
  $config=getConfig('exp_sp');
  
  $content_refresh = (!empty($config['content_refresh'])) ? ($config['content_refresh']*60*1000) : 180000;
  
  // Common custom separator accross application
  define('EXP_AC_SEPARATOR', '|||');
  drupal_add_js(array('custom' => array('EXP_AC_SEPARATOR' => EXP_AC_SEPARATOR)), 'setting');
  drupal_add_js(array('content' => $content_refresh), 'setting');
  get_set_user_preferences();  
  /* Added by ganeshbabuv on 16/03/2016 3:00pm .
   * If saleforce module has disabled state and try to login through as SF user and click on Learning tab in salesforce, then this error should be display in page.Ticket #0062007
  */
  if(!module_exists(salesforce_integration)){  	 	
     $sf_ref = trim($_SERVER['HTTP_REFERER']);       	
  	 expDebug::dPrint('Saleforce module is in disabled state. HTTP refer $sf_ref ='.print_r($sf_ref,true),5);  	
	  if($sf_ref!=''){	  	
	  	$sf_parsed_url=parse_url($sf_ref);	  	
	  	expDebug::dPrint('$sf_parsed_url ='.print_r($sf_parsed_url,true),5);	  	  	
	  	$sf_host_name = $sf_parsed_url['host'];	  	
	  	if(strpos($sf_host_name,".salesforce.com")!==false || strpos($host_name,".visual.force.com")!==false){
	  		expDebug::dPrint("This page cannot be accessed now. Please contact your System Administrator.",5);
	  		throw new securityException(t("SFMSG038")); //This page cannot be accessed now. Please contact your System Administrator.
	  	}
	  }
  }
  
  if($user->uid==0){
  	if($_SESSION['user_preferred_currency_code']==''){
  		$getDefaultCurrency = getDefaultCurrency();
  		$UserPrefCurrCode = $getDefaultCurrency['preferred_currency'];
  		$UserPrefCurrSym  = $getDefaultCurrency['attr2'];
  		$_SESSION['user_preferred_currency_code'] = $UserPrefCurrCode;
  		$_SESSION['user_preferred_currency_sym'] = $UserPrefCurrSym;
  		drupal_add_js(array('user_prefference' => array('currency_code' =>  $_SESSION['user_preferred_currency_code'], 'currency_sym' =>  $_SESSION['user_preferred_currency_sym'])), 'setting');
  	}
  }
  
  // Condition added for - #0053717: To activate language in lookup master, it keeps on loading.
  if(stripos($_SERVER["REQUEST_URI"],'lookup-master')===false)
  	include_once DRUPAL_ROOT."/sites/all/commonlib/csrf-magic/csrf-magic.php";

  if($user->uid==0 || isAdminTheme() || arg(0)=='cart')
  	enableCtool();
  // below line to commented out if file is not uploaded
  // variable_set('file_directory_temp', NULL);
	/*if ($cache = cache_get('exp_ini_setting')){
  	$catDt = $cache->data;
  	$paths = $catDt['Path'];
  	$catalog_reg = $catDt['RegLevel'];
//   	$skip_param_validation = $catDt['Skip_Param'];
  	$allowed_domain = $catDt['allowed_domains'];
  }else{*/
  	$pathObj=new getPath();
  	$paths = $pathObj->getPaths();
  	$catalog_reg = getConfigValue('registration_level'); // Course/Class level registration from exp_sp.ini
//   	$skip_param_validation = getConfigValue('skip_param_validation');
  	$allowed_domain = trim(getConfigValue('allowed_domains'));
  	/*$exp_ini = array('RegLevel'=>$catalog_reg, 
  									'Path'=>$paths, 
//   									'Skip_Param'=>$skip_param_validation,
  									'allowed_domains'=>$allowed_domain
  								);
  	cache_set('exp_ini_setting',$exp_ini,'cache');
  }*/
  $_SESSION['exp_sp_scripts'] = "<input type='hidden' id='enabledFunction' value='".getEnabledFunctions()."' /><script type='text/javascript'>".$paths."var themepath = '".path_to_theme()."';</script>";

  // variable value set, when it's not ajax call.
  if(!isset($_SERVER['HTTP_X_REQUESTED_WITH']) && empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) != 'xmlhttprequest') {
    $_SESSION['widgetCallback'] = false;
    expDebug::dPrint('widget set to false '.print_r($_SESSION['widgetCallback'], 1), 5);
  }
   		
  $header_optional = array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY);
  $css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  $admin_theme = 'AdministrationTheme';

  // Embed widget default value added in settings
  drupal_add_js(array('widget' => array('widgetCallback' =>  false)), 'setting');

  drupal_add_library('system', 'ui.accordion');
  drupal_add_library('system', 'ui.dialog');
  drupal_add_library('system', 'ui.resizable');
  drupal_add_js('misc/ajax.js', $header_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.metadata.js',$header_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_core.js',$header_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/AbstractDetailsWidgetUi.js',$header_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/AbstractManagerUi.js',$header_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.autocomplete.js',$js_module_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.qtip-1.0.0-rc3.min.js',$header_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.jscrollpane.js', $js_module_optional);
  drupal_add_js(drupal_get_path("module", "exp_sp_admincalendar") ."/jquery.min.js",$header_optional);
  drupal_add_js(drupal_get_path("module", "exp_sp_core") ."/trunk8.js",$header_optional);
  drupal_add_js(drupal_get_path("module", "exp_sp_core") ."/trunk8_fadeout.js",$header_optional);

  // report is added to this conditon by Vincent to load data grid in report scheduling.
  if(isAdminTheme() && arg(0)!="admincalendar" && (arg(0)!="reports" && stripos($_SERVER['REQUEST_URI'],'report')===false)){
  	// Certine admin side values are stored in session to imporve performance
  	// these values should be reset in certine frequency otherwise any change in
  	// logged use's privilege will be taken effect only on their next login
  	if(isset($_SESSION['timestamp'])){
  		$unsetTime = getConfigValue('admin_variable_expire');
  		if(empty($unsetTime)) $unsetTime = 60;
  		$crDt = strtotime(now());
  		if($crDt >= ($_SESSION['timestamp']+($unsetTime*60))){
  			resetStoredValues($_SESSION);
  			$_SESSION['timestamp'] = $crDt;
  		}
  	}else{
  		$_SESSION['timestamp'] = strtotime(now());
  	}
  	
    //Load admin related scripts and styles
    drupal_add_library('system', 'ui.datepicker');
    drupal_add_library('system', 'ui.slider');
  	drupal_add_library('system', 'ui.tabs');
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/AbstractDetailsWidget.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/AbstractManager.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.expertus.datatable.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.soapclient.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.fileupload.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.showHelpPage.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.expertus.cluetip.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_search/exp_sp_searchwidget.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/lib/sarissa.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/timepicker.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.tabs.scroll.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.table2CSV.js',$js_module_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.expertus.datatable_roster.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.dataTablesReport.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.expertus.calendar.js',$header_optional);
   // drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/swfobject.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.pagelayout.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.colorpicker.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.tree.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/plugins/jquery.tree.xml_flat.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/plugins/jquery.tree.checkbox.js',$header_optional);
    //drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_tree/exp_sp_treewidget.js',$js_module_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid/jquery.jqGrid.js',$header_optional);

    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid/js/min/grid.locale-en-min.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid/js/grid.base.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid/js/min/grid.common-min.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid/js/min/grid.subgrid-min.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid/js/grid.custom.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid/js/min/grid.import-min.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid/js/min/jquery.fmatter-min.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/qtippopup.js',$header_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/exp_multiselect/jquery.expertus.multiselect.js',$js_module_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/exp_multiselect/jquery.expertus.multiselectDropdown.js',$js_module_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/exp_multiselect/jquery.expertus.multiselectExtend.js',$js_module_optional);
    // json2.js is requied for IE
    // TODO: json2.js should load if the browser is IE for rest of the browsers it should not be loaded.
    drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/exp_multiselect/json2.js',$js_module_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/exp_multiselect/css/jquery.expertus.multiselect.css',$css_theme_optional);
    drupal_add_css(drupal_get_path('theme', $admin_theme).'/calender_style.css',$css_theme_optional);
    //drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_user/exp_sp_userwidget.js',$js_module_optional);
    if(stripos(request_uri(),'/learning/catalog')!==false){
    	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
	    if($theme_key == 'expertusoneV2') {
		 		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
		 	} else {
		 		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
		 	}
    }
  }elseif($user->uid==0){
	  	if($theme_key == 'expertusoneV2') {
	    	drupal_add_css(drupal_get_path('module', 'exp_sp_login') .'/exp_sp_login_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
	  	}
	  	else{
	  		drupal_add_css(drupal_get_path('module', 'exp_sp_login') .'/exp_sp_login.css', array('type' => 'file', 'group' => CSS_DEFAULT));
	  	}
  	//}
  }

  if(module_exists('theme_override')) {
  	$module_path = drupal_get_path('module', 'theme_override');
  	drupal_add_js(array('theme_override' => $module_path), 'setting');
  }
  // CSS For Translation Override
  $userLanguage = ($user->uid) ? $user->language : $_SESSION['language'];
  // language of the users value added in settings
  drupal_add_js(array('user' => array('language' =>  $userLanguage)), 'setting'); // user language initilaised #0043857
  $langDir = drupal_get_path('theme', $theme_key) . '/expertusone-internals/lang-css/' . $userLanguage . '/' ;
  if(file_exists($langDir . 'lang_'.$userLanguage.'.css')){
  	$cssDirectory = $langDir . 'lang_'.$userLanguage.'.css';
  	drupal_add_css($cssDirectory, array('group' => CSS_THEME, 'every_page' => TRUE));
  }
  $checkRefer = true;
  expDebug::dPrint("referer check variable : " . var_export($RefererCheck, 1) . "checkRefer variable : " . var_export($checkRefer, 1), 4);
  expDebug::dPrint("referer check variable : refer server" . $_SERVER['HTTP_REFERER'], 4);
  if(isset($_SERVER['HTTP_REFERER']) && !empty($_SERVER['HTTP_REFERER'])) { // && !empty($_SERVER['QUERY_STRING']) && empty($is_anonymous_user_catalog) && ($is_anonymous_user_catalog == '')
  	expDebug::dPrint('REFERER CHECK TRUE CONDTION---->11111',4);
  	//added the code domain allowed checking from ini file.
  	$parsed_url = parse_url($_SERVER['HTTP_REFERER']);
  	$host_name =  $parsed_url['host'];
  	$allowed_domain_arr = explode(',',$allowed_domain);
  	$allowed_domain_arr = array_map('trim', $allowed_domain_arr); // remove white space in domain string

  	//Salesforce fix by Kannan to check refer for SF this should not go to trunk
  	$purl = $_SERVER['SCRIPT_URI'];
    $parsed_url = parse_url($purl);
    $refer_url  = $parsed_url['host'];

    //Added by Ganeshbabuv,Nov 2, 2015 7:25PM, Condition has changed as knowledge of eng.team for allow the salesforce.com,visual.force.com,.force.com domains as default when turn on skip_param_validation.
    if( (checkdnsrr($host_name,'ANY')) || ($host_name == $refer_url) || (strpos($host_name,".salesforce.com")!==false) || (strpos($host_name,".visual.force.com")!==false)|| (strpos($host_name,".force.com")!==false) || (!empty($allowed_domain) && IsAllowedDomain($host_name,$allowed_domain_arr))){
	  	$splitter = strpos($_SERVER["HTTP_REFERER"], "/?q=") !== false ? "/?q=" : '?';
         if ($user->uid==0 && (strpos($_SERVER['QUERY_STRING'],"q=learning/catalog-search")!==false) && empty($is_anonymous_user_catalog)) { // when catalog page disabled to anonymous access
         	drupal_goto("user_access_denied");
         }
	  	if(strpos($_SERVER["HTTP_REFERER"], $splitter) > 0 ){
	  		$params = explode($splitter,$_SERVER["HTTP_REFERER"]);
	  		$refer_param = param_validation($params[1], $splitter, 'refer');
	  		$_SERVER["HTTP_REFERER"] = $params[0].$refer_param;
	  	}
  	}else{
  		//throw new Exception("Invalid Referer URL");
  		expDebug::dPrint("Referer issue. Current request REFERER ".print_r($_SERVER["HTTP_REFERER"],true),1);
  		throw new securityException('Access denied - Referer is absent or different from current domain.');
  	}
  	}else{
  		$eliminateURL = array(
  			'reset',
  			'enrollment-search',
  			'training',
  			'widget',
  			'user',
  			'my-profile',
  			'myteam-search',
  			'my-account',
  			'node',
  			'sso',
  			'user_access_denied',
  			'access_denied',
  			'exp_sp_paymetric_resp',
  			'login-process',
  			'certificate'
  		);
  		// Skip referer check for white list url
  		$inURL = $_SERVER["REQUEST_URI"];
     	foreach($eliminateURL as $str){
  			if(stripos($inURL,$str)!==false){
  				$checkRefer = false;
  			}
  		}
  		
  		expDebug::dPrint('REFER CHECK -------------->11111'.var_export($checkRefer, 1),4);

  		// Skip referer check catalog and share, when anonymous catalog is enabled , samal login
	    if ((($is_anonymous_user_catalog == 1) && (strpos($_SERVER['QUERY_STRING'],"q=learning/catalog-search")!==false)) || (strpos($_SERVER["REQUEST_URI"],"q=saml20/acs")!==false) || (strpos($_SERVER["REQUEST_URI"],"=share/")!==false)) {
	  			$checkRefer = false;
	  	}
	  	
	  	expDebug::dPrint('REFER CHECK -------------->2222'.var_export($checkRefer, 1),4);
  		if($checkRefer === true && !isset($_REQUEST['apiname'])){
	  		if((!isset($_SERVER['HTTP_REFERER']) || empty($_SERVER['HTTP_REFERER'])) && strlen($_SERVER['QUERY_STRING']) > 3 && $user->uid == 0){
	  			expDebug::dPrint("Referer issue. Current request REFERER ".print_r($_SERVER["HTTP_REFERER"],true),1);
					drupal_goto("user_access_denied");
	  			//throw new securityException('Access denied - You are not authorized to view this content.');
	  		}
  		}
  	}
  if(!isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] != 'XMLHttpRequest')
  	$_SESSION['base_url_from'] = $_SERVER["REQUEST_URI"];
	
  /* if ($skip_param_validation == 0) {
  	$pos = strpos($_SERVER["REQUEST_URI"], '&');
  	if($pos >0 ){
  		$splitter = strpos($_SERVER["REQUEST_URI"], "/?q=") !== false ? "/?q=" : '?';
  		param_validation($_SERVER["REQUEST_URI"], $splitter);
  	}
  } */
//   param_validation($_SERVER["REQUEST_URI"], $splitter);
  // enable ctools when page url is catalog, mylearning or admin content preview
   if(strpos($_SERVER['REQUEST_URI'], 'learning/enrollment-search') !== false ||
  		strpos($_SERVER['REQUEST_URI'], 'learning/catalog-search') !== false ||
  		strpos($_SERVER['REQUEST_URI'], 'widget/catalog-search') !== false ||
  		strpos($_SERVER["HTTP_REFERER"], "force.com") !== false) {
  			enableCtool();
  	}
  	
  	// below code is commented due to 0084822
			//TODO: need to find a different solution to address this issue 
  //Solr search implementation to store logged in users groups in session variable
  	$solr = getConfigValue('solr_search');
  	if($solr == 1 && empty($Solr_User)){
			// Setting group filters
			require_once $_SERVER['DOCUMENT_ROOT'].'/sites/all/modules/core/exp_sp_solr/exp_sp_solr_user.php';
			$userObj = new UserSolrSearch();
			$userDetails = $userObj->getLoggedUserDetails();
			$Solr_User = $userDetails;
		}
  
	}catch(securityException $se){
  	print $se->getMessage();
  	exit;
  }
	catch (Exception $ex) {
    watchdog_exception('exp_sp_core_init', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * Function used to find entry available in allowed domains with patten match.
 * @param string $domainName
 * @param array_type $domainList
 * @return boolean:
 */
function IsAllowedDomain($domainName = '', $domainList = array()) {
    $result = false;
    expDebug::dPrint("Domain Name: " . $domainName);
	if (empty($domainList)) { // domain list was empty
    	return $result;
	}
	$domainName = strtolower($domainName); // make lower case
    expDebug::dPrint("Domain Name: " . $domainName, 4);
	foreach($domainList as $domain) {
   		expDebug::dPrint("Domain List Match Name: " . $domain, 4);
		if (preg_match("/".$domain."$/", $domainName)) {
			$result = true;
			break;
		}
	}
	return $result; // return true or false.
}

/**
 * Implements hook_menu().
 * - To change the getLearnerInfo.php as ajax callback by implementing this hook for salesforce cookie less option #0054508 on 30th sep 2015 10:40 AM
 */

function exp_sp_core_menu(){

	try{
		$items = array();
		$items['getLearnerInfo/getvalue/%/%'] = array(
				'title' => 'Get Learner Info',
				'page callback' => 'getLearerInfofromCookie',
				'page arguments' => array(2,3),
				'type' => MENU_CALLBACK,
				'access arguments' => array('access content')
		);
		$items['user_access_denied'] = array(
				'title' => 'Access Denied',
				'page callback' => 'user_access_denied',
				'access callback' => array('user_is_anonymous'),
				'access callback' => TRUE,
		);
		return $items;

	}catch (Exception $ex) {
		watchdog_exception('exp_sp_core_menu', $ex);
		expertusErrorThrow($ex);
	}
}
function user_access_denied() {
	drupal_set_title('Access Denied');
	$cust_err = 'Access denied - You are not authorized to view this content.';
	return $cust_err;
}

/**
 * Implements getLearerInfofromCookie().
 * - If session set in salesforce, revert the old session from salesforce or else call the getLearnerInfo.php
 * - To implement the salesforce cookie less option (#0054508), which is added by on 30th sep 2015 10:40 AM
 */

function getLearerInfofromCookie($prm,$exp_sess_id=""){

	try{
		expDebug::dPrint('$prm='.print_r($prm,true),5);
		expDebug::dPrint('$exp_sess_id='.print_r($exp_sess_id,true),5);

		if($exp_sess_id!=''){
			get_previous_session_for_sf_cookieless($exp_sess_id);
		}
	  
		$_GET['getvalue']=$prm;
	  
		expDebug::dPrint("GET Value=".print_r($_GET,true),5);
		include_once $_SERVER['DOCUMENT_ROOT']."/getLearnerInfo.php";

		$param = isset($_GET['getvalue'])?$_GET['getvalue']:'';
		expDebug::dPrint('$param='.print_r($param,true),5);

		$detail = new GetLearnerInfo();
		if($param!=''){
			echo header('Content-Type:text/plain; charset=utf-8');
			echo header("Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0");
			echo header("Pragma: no-cache");
			echo $detail->getValue($param);
		}
	}catch (Exception $ex) {
		watchdog_exception('getLearerInfofromCookie', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * Implements hook_permission().
 */
function exp_sp_core_permission() {
	return array(
			'expertus learner' =>  array(
					'title' => t('Expertus Learner'),
					'restrict access' => TRUE,
			),
			'catalog learner' => array(
					'title' => t('Catalog Learner'),
					'restrict access' => TRUE
			)
	);  
}

/**
 * Implements hook_menu_alter().
 */
function exp_sp_core_menu_alter(&$items){
  // Disable the RSS feed link.
  try{
  unset($items['rss.xml']);
  // Disable Register link when LDAP enabled

  if(module_exists('ldap_authentication'))
  {
  	$auth_conf = ldap_authentication_get_valid_conf();
  	if($auth_conf->authenticationMode == LDAP_AUTHENTICATION_EXCLUSIVE)
  		unset($items["learning/register"]);
  }
  }catch (Exception $ex) {
    	watchdog_exception('exp_sp_core_menu_alter', $ex);
    	expertusErrorThrow($ex);
  	}
}
/*
 * Includes Javascript and Css files for Jqgrid plugin
 */
function includeJqGridJsCss() {
  try{
  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid_latest/js/grid.locale-en.js', array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY, 'weight' => 1));
  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid_latest/js/grid.base.js', array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY, 'weight' => 2));
  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid_latest/js/grid.common.js', array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY, 'weight' => 3));
  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid_latest/js/grid.formedit.js', array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY, 'weight' => 4));
  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid_latest/js/grid.custom.js', array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY, 'weight' => 5));
  drupal_add_css(drupal_get_path('module', 'exp_sp_core').'/css/ui.jqgrid_latest.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  }catch (Exception $ex) {
    watchdog_exception('includeJqGridJsCss', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_js_alter().
 * Use drupal 6 js aggregate logic instead of Drupal 7 logic.
 * Code obtained from http://www.metaltoad.com/blog/drupal-7-taking-control-css-and-js-aggregation
 */
function exp_sp_core_js_alter(&$javascript) {
  try{
  $util = new GlobalUtil();
  $config = $util->getConfig();
  uasort($javascript, 'drupal_sort_css_js');
  $i = 0;
  foreach ($javascript as $name => $script) {
    $javascript[$name]['weight'] = $i++;
    $javascript[$name]['group'] = JS_DEFAULT;
    $javascript[$name]['every_page'] = FALSE;
    /**
     * Following set of codes are used for performance improvement
     * This will load all the compressed min js file in our product
     * if use_min_js_compress = 1 in exp_sp.ini
     */
    
    $newfile = str_replace('.js', '-min.js', $javascript[$name]['data']);
    //if ($config['use_min_js_compress'] == '1' && $newfile !== '' && file_exists($newfile)) 
    if ($config['use_min_js_compress'] == '1' && is_string($newfile) && file_exists($newfile)) {
    	$javascript[$name]['data'] = $newfile;
    }
    
  }
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_core_js_alter', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_css_alter().
 * Use drupal 6 css aggregate logic instead of Drupal 7 logic.
 * Code obtained from http://www.metaltoad.com/blog/drupal-7-taking-control-css-and-js-aggregation
 */
function exp_sp_core_css_alter(&$css) {
  try{
  /**
   * Following set of codes are to support the older css background-image styles for rounded images
   * This needs to removed once all the customer brandings are changed to support background-color and border-radius styles
   * The older css files which have background-image styles are suffixed with _branding and will be loaded
   * if use_css_back_ground_image = 1 in exp_sp.ini
   */
  $util = new GlobalUtil();
  $config = $util->getConfig();
  uasort($css, 'drupal_sort_css_js');
  $i = 0;
  foreach ($css as $name => $style) {
    $css[$name]['weight'] = $i++;
    $css[$name]['group'] = CSS_DEFAULT;
    $css[$name]['every_page'] = FALSE;

  }
  global $user;
  global $theme_key;
  $userLanguage = ($user->uid) ? $user->language : $_SESSION['language'];
  $langDir = drupal_get_path('theme', $theme_key) . '/expertusone-internals/lang-css/' . $userLanguage . '/' ;
  if(file_exists($langDir . 'lang_'.$userLanguage.'.css')){
  	$cssDirectory = $langDir . 'lang_'.$userLanguage.'.css';
  	$css[$cssDirectory]['weight'] = $i + 10;
  }
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_core_css_alter', $ex);
    expertusErrorThrow($ex);
  }
}

function extend_ctools_ajax_js() {
  try{
  // Provide a gate so we only do this once.
  static $done = FALSE;
  if ($done) {
    return;
  }

  if (function_exists('ctools_add_js')) {
  ctools_add_js('exp_sp_core_extend_ctools_ajax', 'exp_sp_core');
  }

  $done = TRUE;
  }catch (Exception $ex) {
    watchdog_exception('extend_ctools_ajax_js', $ex);
    expertusErrorThrow($ex);
  }
}


/*
 * Ctool dialog plugin function start
 */
function enableCtool() {
  try{
  global $theme_key;
  // Include the CTools tools that we need.
  if(function_exists('ctools_include')){
    ctools_include('ajax');
    ctools_include('modal');
  }

  // Add CTools' javascript to the page.
  if(function_exists('ctools_modal_add_js')){
    ctools_modal_add_js();
  }

  extend_ctools_ajax_js();

 if(function_exists('ctools_image_path')){
  // Create our own javascript that will be used to theme a modal.
  // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
 	if(isset($_SESSION['widgetCallback']) && $_SESSION['widgetCallback']==TRUE){
 		if ($_SESSION['widget']['display_width'] > 635 && $_SESSION['widget']['display_width'] < 775){
 			$vwidth = 575;
 			$vheight = 350;
 		}
 		else if($_SESSION['widget']['display_width'] > 775 && $_SESSION['widget']['display_width'] < 900){
 			$vwidth = 675;
 			$vheight = 450;
 		}
 		else if($_SESSION['widget']['display_width'] > 900){
 			$vwidth = 880;
	 		$vheight = 550;
 		}
 	}else{
	 	$vwidth = 880;
	 	$vheight = 550;
 	}
  $sample_style = array(
    'ctools-default-style' => array(
      'modalSize' => array(
        'type' => 'scale',
        'width' => .28,
        'minHeight' => .3,
       ),
    ),

    'ctools-learning-request-style' => array(
      'modalSize' => array(
        'width' => 404,
    		'maxHeight' => 565,
        'minHeight' => 465,
       ),
    ),

    'ctools-login-style' => array(
      'modalSize' => array(
        'width' => module_exists('saml')?(($theme_key == "expertusoneV2") ? 550 : 490) : (($theme_key == "expertusoneV2") ? 450 : 400),
        'minHeight' => module_exists('saml')?(($theme_key == "expertusoneV2") ? 230 : 220):162,
        'maxHeight' => 400,
        'addWidth' => 0,
       ),
    ),

    'ctools-video-style' => array(
      'modalSize' => array(
        'width' => $vwidth,
        'height' => $vheight,
       ),
    ),

    'ctools-mobile-app-style' => array(
      'modalSize' => array(
        'width' => 670,
        'height' => 250,
       ),
    ),

    'ctools-admin-addedit-style' => array(
      'modalSize' => array(
        'width' => 670,
        'minHeight' => 360,
       ),
    ),

    'ctools-admin-user-addedit-style' => array(
      'modalSize' => array(
        'width' => 735,
        'minHeight' => 400,
       ),
    ),

    'ctools-admin-mro-catalog-style' => array(
      'modalSize' => array(
        'width' => 690,
        'minHeight' => 250,
       ),
    ),

    'ctools-admin-course-class-addedit-style' => array(
      'modalSize' => array(
        'width' => 870,
        'minHeight' => 380,
       ),
    ),

    'ctools-admin-course-class-addedit-scroll-style' => array(
      'modalSize' => array(
        'width' => 895,
        'minHeight' => 380,
       ),
      'modalTheme' => 'ExpertusCToolsAdminModalTheme',
    ),

    'ctools-admin-drop-policy-addedit-style' => array(
      'modalSize' => array(
        'width' => 625,
        'minHeight' => 360,
        'maxHeight' => 475,
       ),
    ),
  	'ctools-widget-reset-style' => array(
      'modalSize' => array(
		'type' => 'fixed',
		'width' => 420,
		'minHeight' => 150,
       ),
    ),
  	// following height and width are based on 16:9 aspect ratios
  	//  880	x 495 x-10 and y+40
  	'ctools-content-launch-style' => array(
      'modalSize' => array(
		'type' => 'fixed',
		'width' => 870,
		'height' => 535
       ),
    ),
  	// 576 x 324
  	'ctools-content-launch-style-640x480' => array(
      'modalSize' => array(
		'type' => 'fixed',
		'width' => 566,
		'height' => 364,
       ),
    ),
  	// 672 x 378
  	'ctools-content-launch-style-768x576' => array(
      'modalSize' => array(
		'type' => 'fixed',
		'width' => 662,
		'height' => 418,
       ),
    ),
  	// 752 x 423
  	'ctools-content-launch-style-800x600' => array(
      'modalSize' => array(
		'type' => 'fixed',
		'width' => 742,
		'height' => 463,
       ),
    ),
  	// 896 x 504
  	'ctools-content-launch-style-1024x768' => array(
      'modalSize' => array(
		'type' => 'fixed',
		'width' => 886,
		'height' => 544,
       ),
    )
  );
  expDebug::dPrint('widget is set ? '.var_export($_SESSION['widgetCallback'], 1), 5);
  drupal_add_js($sample_style, 'setting');
 }
  // Since we have our js, css and images in well-known named directories,
  // CTools makes it easy for us to just use them without worrying about
  // using drupal_get_path() and all that ugliness.
  if(function_exists('ctools_add_js')){
    ctools_add_js('ctools-ajax-sample', 'ctools_ajax_sample');
  }
  if(function_exists('ctools_add_css')){
    ctools_add_css('ctools-ajax-sample', 'ctools_ajax_sample');
  }
  $path = drupal_get_path('module','ctools/ctools_ajax_sample');
  drupal_add_css($path.'/css/ctools_ajax_sample.css');
  }catch (Exception $ex) {
    watchdog_exception('enableCtool', $ex);
    expertusErrorThrow($ex);
  }
}
//dialog callback
function render_dialog_callback($js = NULL, $form_id = NULL, $step = NULL) {
  try{
  if ($js) {
    /* 0041479: Force password change pop not showing when user login as first time */
    enableCtool();
    ctools_include('modal');
    ctools_include('ajax');
  }

  $form_info = array(
    'path' => "ctools_ajax_sample/" . ($js ? 'ajax' : 'nojs') . "/".$form_id."/%step",
    'next callback' =>  'ctools_ajax_sample_wizard_next',
    //Navigate page from first to page to second
    'order' => array(
      'start' => ' ',
    ),
    // here we map a step to a form id.
    'forms' => array(
      // e.g. this for the step at wombat/create
      'start' => array(
        'form id' => $form_id//lnr_req_start'
      ),
    ),
  );

  // We're not using any real storage here, so we're going to set our
  // object_id to 1. When using wizard forms, id management turns
  // out to be one of the hardest parts. Editing an object with an id
  // is easy, but new objects don't usually have ids until somewhere
  // in creation.
  //
  // We skip all this here by just using an id of 1.

  $object_id = 1;

  if (empty($step)) {
    // We reset the form when $step is NULL because that means they have
    // for whatever reason started over.
    ctools_ajax_sample_cache_clear($object_id);
    $step = 'start';
  }

  // This automatically gets defaults if there wasn't anything saved.
  //$object = ctools_ajax_sample_cache_get($object_id);
  $object = new stdClass;
    $object->type = 'unknown';
    $object->name = '';

   $animals = ctools_ajax_sample_animals();

  // Make sure we can't somehow accidentally go to an invalid animal.
  if (empty($animals[$object->type])) {
    $object->type = 'unknown';
  }

  // Now that we have our object, dynamically add the animal's form.
  if ($object->type == 'unknown') {
    // If they haven't selected a type, add a form that doesn't exist yet.
    $form_info['order']['unknown'] = t('Configure');
    $form_info['forms']['unknown'] = array('form id' => 'nothing');
  }
  else {
    // Add the selected animal to the order so that it shows up properly in the trail.
    $form_info['order'][$object->type] = $animals[$object->type]['config title'];
  }

  // Make sure all animals forms are represented so that the next stuff can
  // work correctly:
  foreach ($animals as $id => $animal) {
    $form_info['forms'][$id] = array('form id' => $animals[$id]['form']);
  }

  $form_state = array(
    'ajax' => $js,
    // Put our object and ID into the form state cache so we can easily find
    // it.
    'object_id' => $object_id,
    'object' => &$object,
  );

  // Send this all off to our form. This is like drupal_get_form only wizardy.
  ctools_include('wizard');
  $form = ctools_wizard_multistep_form($form_info, $step, $form_state);
  $output = drupal_render($form);
  // If $output is FALSE, there was no actual form.
  if ($js) {
     $commands = array();
     $commands = ctools_modal_form_render($form_state, $output);
     print ajax_render($commands);
     exit;
  }
  else {
    if ($output === FALSE || !empty($form_state['complete'])) {
      return $animal;
    }
    else if (!empty($form_state['cancel'])) {
      drupal_goto('ctools_ajax_sample');
    }
    else {
      return $output;
    }
  }
 return $output;
  }catch (Exception $ex) {
    watchdog_exception('render_dialog_callback', $ex);
    expertusErrorThrow($ex);
  }
}
/*
 * Ctool dialog plugin function end
 */
function getEnabledFunctions(){
  try{
  $listobj = new StdClass();
  $list=module_list(false,false,false);
  foreach($list as $key => $val)
  $listobj->$key = $val;

  $_SESSION['availableFunctionalities'] = $listobj;
  return "[".drupal_json_encode($list)."]";
  }catch (Exception $ex) {
    watchdog_exception('getEnabledFunctions', $ex);
    expertusErrorThrow($ex);
  }
}

function isAdminTheme(){
  try{
  global $theme;
  /*if($theme == 'AdministrationTheme'){
    return true;
  }else{
    return false;
  }*/
 // $isAdminPage = stripos(request_uri(),'administration/')!==false?true:false;
  $isAdminPage = (arg(0) == 'administration' || arg(0) == 'admincalendar' ||(arg(0)=='portalpages' && arg(3) == 'lookup-master'))?true:false;
  return $isAdminPage;
  }catch (Exception $ex) {
    watchdog_exception('isAdminTheme', $ex);
    expertusErrorThrow($ex);
  }
}

function getuserVars(){
  try{
  global $user;
  $jsUser=new stdClass();
  $jsUser->name=$user->name;
  $jsUser->language=$user->language;
  return "var user=".drupal_json_encode($jsUser);
  }catch (Exception $ex) {
    watchdog_exception('getuserVars', $ex);
    expertusErrorThrow($ex);
  }
}

class spPaths {
  private $jspath="";
  private $learningpath="";
  private $spppath="";
  private $csspath="";
  private $imagepath="";
  function __construct() {
  	try{
    global $base_url;
    $this->jspath = $base_url.'/'.drupal_get_path('module', 'exp_sp_core').'/js';
    $this->learningpath=drupal_get_path('module', 'exp_sp_learning').'';
    $this->spppath=drupal_get_path('module', 'exp_sp_spportal').'';
    }catch (Exception $ex) {
    	watchdog_exception('__construct', $ex);
    	expertusErrorThrow($ex);
    }
  }
  function getJsPath() {
    try{
    return $this->jspath;
    }catch (Exception $ex) {
      watchdog_exception('getJsPath', $ex);
      expertusErrorThrow($ex);
    }
  }
  function getLearningPath() {
    try{
    return $this->learningpath;
    }catch (Exception $ex) {
      watchdog_exception('getLearningPath', $ex);
      expertusErrorThrow($ex);
    }
  }
  function getSppPath() {
    try{
    return $this->spppath;
    }catch (Exception $ex) {
      watchdog_exception('getSppPath', $ex);
      expertusErrorThrow($ex);
    }
  }
  function getCssPath() {
    try{
    return $this->csspath;
    }catch (Exception $ex) {
      watchdog_exception('getSppPath', $ex);
      expertusErrorThrow($ex);
    }
  }
  function getImagePath() {
  try{
    return $this->imagepath;
   }catch (Exception $ex) {
      watchdog_exception('getSppPath', $ex);
      expertusErrorThrow($ex);
   }
  }

}

class getPath {
  static function JsPath() {
  	try{
    $obj=new spPaths();
    return $obj->getJsPath();
  	}catch (Exception $ex) {
      watchdog_exception('JsPath', $ex);
      expertusErrorThrow($ex);
   }
  }
  static function CssPath(){
  	try{
    $obj=new spPaths();
    return $obj->getCssPath();
  	}catch (Exception $ex) {
      watchdog_exception('CssPath', $ex);
      expertusErrorThrow($ex);
   }
  }
  static function LearningPath(){
  	try{
    $obj=new spPaths();
    return $obj->getLearningPath();
  	}catch (Exception $ex) {
      watchdog_exception('LearningPath', $ex);
      expertusErrorThrow($ex);
   }
  }
  static function SppPath(){
  	try{
    $obj=new spPaths();
    return $obj->getSppPath();
  	}catch (Exception $ex) {
      watchdog_exception('SppPath', $ex);
      expertusErrorThrow($ex);
   }
  }
  static function ImagePath()
  {
  	try{
    $obj=new spPaths();
    return $obj->getImagePath();
  	}catch (Exception $ex) {
      watchdog_exception('ImagePath', $ex);
      expertusErrorThrow($ex);
   }
  }
  function getPaths()
  {
    try{
    global $base_url;
    global $base_path;
    global $user;
    // If path seting available in cache return cache value
    if ($cache = cache_get('path_settings')){
    	return $cache->data;
    }
    $paths=new stdClass();
    $paths->base_host=getAdminSiteUrl();
    $paths->base_path=$base_path;
    $paths->jspath=getPath::JsPath();
    $paths->learningpath=getPath::LearningPath();
    $paths->spppath=getPath::SppPath();
    $paths->csspath=getPath::CssPath();
    $paths->imagepath=getPath::ImagePath();
    $paths->base_url=$base_url;
    //$paths->smartconnect_url=getSmartConnect_url();
    //$paths->admin_licensekey=getSmartConnect_admin_lkey();
    $paths->lnr_service_url=getLearnerService_url();
    $paths->service_url=getService_url();
    $paths->admin_site_name=getAdminSiteName();
    $paths->site_name=variable_get('site_name');
    $paths->drupal_user_uid  = $user->uid;
    $paths->drupal_user_name = $user->name;
    $paths->admin_site_url=getAdminSiteUrl();
    //$paths->ipaddress= $_SERVER['REMOTE_ADDR'];
    $paths->timeout=getSiteTimeout();
    $paths->notification_image_path=getNotificationImagePath();
    $paths->content_upload_path=getContentUploadPath();
    $paths->checkout_timeout=getCheckoutTimeout();

    $paths->language=getSessionLanguage();

	$paths->query_max_execution_time = getQueryMaxExecutionTime();
	$paths->webex_url = getConfigValue('webex_url');
	$paths->meeting_url = getConfigValue('meeting_url');
	$paths->allow_meeting_launch = getConfigValue('allow_meeting_launch');
	$paths->allow_meeting_launch_complete = getConfigValue('allow_meeting_launch_complete');
	$paths->show_messages = getConfigValue('show_messages');
	$paths->iphone_download_url = getConfigValue('iphone_download_url');
	$paths->android_download_url = getConfigValue('android_download_url');
	$paths->catalog_reg = getConfigValue('registration_level');
	
		// Added by Vincent to load tinymce when JS aggregation is enabled
		// for more details see the comments in wysiwyg_tinymce_init()
		$tinymceInit = '';
		if(variable_get('preprocess_js',0)==1){
		  	 $tinymceInit = 'window.tinyMCEPreInit = {"base":"\/sites\/all\/libraries\/tinymce\/jscripts\/tiny_mce","suffix":"","query":""};';
		}
		$paths = "var resource=".drupal_json_encode($paths)."; $tinymceInit; ";
		cache_set('path_settings',$paths,'cache');
    return $paths;
   }catch (Exception $ex) {
      watchdog_exception('getPaths', $ex);
      expertusErrorThrow($ex);
   }
  }
}

function getHost($url)
{
  try{
  if(filter_var($url, FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED) === FALSE)
  {
    return false;
  }
  /*** get the url parts ***/
  $parts = parse_url($url);
  /*** return the host domain ***/
  return $parts['host'];
  }catch (Exception $ex) {
    watchdog_exception('getHost', $ex);
    expertusErrorThrow($ex);
  }
}

function getConfig($val)
{
	try{
		// Modified by Vincent on Dec 17, 2013 for read exp_sp.ini file in multisite environment.
		$confDir = !empty($_SERVER["SERVER_NAME"]) && is_dir($_SERVER["DOCUMENT_ROOT"]."/sites/".$_SERVER["SERVER_NAME"])?$_SERVER["SERVER_NAME"]:'default';
  	$conf=parse_ini_file($_SERVER["DOCUMENT_ROOT"]."/sites/$confDir/".$val.".ini");
  	return $conf;
  }catch (Exception $ex) {
    watchdog_exception('getConfig', $ex);
    expertusErrorThrow($ex);
  }
}
function getLearnerService_url()
{
	try{
  $config=getConfig('exp_sp');
  return $config["lnr_service_url"];
	}catch (Exception $ex) {
      watchdog_exception('getLearnerService_url', $ex);
      expertusErrorThrow($ex);
   }
}

function getQueryMaxExecutionTime(){
	try{
	$config=getConfig('exp_sp');
  return $config["query_max_execution_time"];
	}catch (Exception $ex) {
      watchdog_exception('getQueryMaxExecutionTime', $ex);
      expertusErrorThrow($ex);
   }
}

function getAdminSiteName(){
	try{
  $config=getConfig('exp_sp');
  return $config["admin_site_name"];
	}catch (Exception $ex) {
      watchdog_exception('getAdminSiteName', $ex);
      expertusErrorThrow($ex);
   }
}
function getAdminSiteUrl(){
	try{
  $config=getConfig('exp_sp');
  return $config["admin_site_url"];
	}catch (Exception $ex) {
      watchdog_exception('getAdminSiteUrl', $ex);
      expertusErrorThrow($ex);
   }
}
/*function getSiteName(){
	try{
  $config=getConfig('exp_sp');
  return $config["site_name"];
	}catch (Exception $ex) {
      watchdog_exception('getSiteName', $ex);
      expertusErrorThrow($ex);
   }
}*/
/*function getSmartConnect_admin_lkey()
 {
 $config=getConfig('exp_sp');
 return $config["admin_licensekey"];
 }*/
function getService_url(){
  try{
  $config=getConfig('exp_sp');
  $tmp_service_url=getContextBasedProtocol($config["service_url"]);
  return $tmp_service_url;//$config["service_url"];
  }catch (Exception $ex) {
    watchdog_exception('getService_url', $ex);
    expertusErrorThrow($ex);
  }
}


function getSiteTimeout()
{
	try{
  $config=getConfig('exp_sp');
  return $config["timeout"];
	}catch (Exception $ex) {
    watchdog_exception('getSiteTimeout', $ex);
    expertusErrorThrow($ex);
  }
}
function getCheckoutTimeout()
{
	try{
  $config=getConfig('exp_sp');
  return $config["checkout_timeout"];
	}catch (Exception $ex) {
    watchdog_exception('getCheckoutTimeout', $ex);
    expertusErrorThrow($ex);
  }
}
function getNotificationImagePath()
{
	try{
  $config=getConfig('exp_sp');
  return $config["notification_image_path"];
	}catch (Exception $ex) {
    watchdog_exception('getNotificationImagePath', $ex);
    expertusErrorThrow($ex);
  }
}
function getContentUploadPath()
{
	try{
  $config=getConfig('exp_sp');
  return $config["content_upload_path"];
	}catch (Exception $ex) {
    watchdog_exception('getContentUploadPath', $ex);
    expertusErrorThrow($ex);
  }
}
function getSessionLanguage(){
	try{
  $config=getConfig('exp_sp');
  return $config["language"];
	}catch (Exception $ex) {
    watchdog_exception('getSessionLanguage', $ex);
    expertusErrorThrow($ex);
  }
}

function getConfigValue($key) {
	try{
		$config=getConfig('exp_sp');
		/* if ($cache = cache_get('exp_ini_setting')){
	  	$config = $cache->data;
		}else{
		  $config=getConfig('exp_sp');
		  cache_set('exp_ini_setting',$config,'cache');
		} */
		return $config[$key];
	}catch (Exception $ex) {
    watchdog_exception('getConfigValue', $ex);
    expertusErrorThrow($ex);
  }
}


/*
 * Programatically update list of pages settings for blocks
 *
 *
 */
function settingPagesforBlock($blockDisplayPages, $hook_name = '', $delta = '', $theme_name = '')
{
  $txn = db_transaction();
  try{
 	if($hook_name!='' && $delta != '')
 	{
 	  $existing_pages = '';
 	  $existing_pages = db_query("SELECT pages from {blocks} WHERE module = '".$hook_name."' AND delta = '".$delta."' AND theme = '".$theme_name."'")->fetchField();
 	  if(trim($existing_pages) != implode("\n",$blockDisplayPages))
 	  {
 	    db_query("UPDATE {blocks} SET visibility = %d, pages = '%s' WHERE module = '%s' AND delta = '%s' AND theme = '%s'", 1, implode("\n",$blockDisplayPages), $hook_name, $delta, $theme_name);
 	  }
 	}
  }catch (Exception $ex) {
    $txn->rollback();
    unset($txn);
    watchdog_exception('settingPagesforBlock', $ex);
    expertusErrorThrow($ex);
  }
  // Commit the transaction
  unset($txn);
}

/*
 * get full name of the user
 *
 *
 */
//function getFullName($drupal_user_id)
function getScreenName($drupal_user_id)
{
  try{
 	$user_ful_name = db_query("SELECT sp.full_name from users u,slt_person sp WHERE u.name = sp.user_name AND u.uid = '".$drupal_user_id."'" )->fetchField();
 	$exp_ufn = explode(" ",$user_ful_name);
 	if(count($exp_ufn) > 2){
 	  $screen_name = $exp_ufn[0]." ".substr($exp_ufn[2],0,1);
 	}else {
 	  $screen_name = $exp_ufn[0]." ".substr($exp_ufn[1],0,1);
 	}
 	return $screen_name;
  }catch (Exception $ex) {
    watchdog_exception('getScreenName', $ex);
    expertusErrorThrow($ex);
  }
}

/*
 * get full name of the user
 * for Drupal chat
 * used in nodejs.module and drupalchat.module
 */
function getPersonFullName($uid,$uname){
	$select = db_select('slt_person', 'pers');
  $select->addField('pers', 'first_name', 'fname');
  $select->addField('pers', 'last_name', 'lname');
  $select->condition('pers.user_name', $uname, '=');
  $result =  $select->execute()->fetchAssoc();
  $displayname = ucfirst($result['fname']) . ' ' . ucfirst(substr($result['lname'],0,1));
  return $displayname;
	//return getScreenName($uid);
}


/*
 *
 */

function addSpaceForEmpty($items) {
  try{
  if(empty($items)){
    return t("No records are found");
  }
  else
  return $items;
  }catch (Exception $ex) {
    watchdog_exception('addSpaceForEmpty', $ex);
    expertusErrorThrow($ex);
  }
}
/**
 * Return users picture.
 *
 * @param $userId
 *   An array of user IDs, Using this to find a user image path.
 *
 * @param $account
 *   It provide a particular user image and full path of the image.
 *
 * @return
 *   An user image path in the format of html tag.
 *
 */
function getUserPicture($userId) {
  try{
  global $theme_key;
  $account = array();
  $user_image_path = '';
  $account = user_load($userId);
  if(!empty($account->picture->uri)){
    $user_image_path = file_create_url($account->picture->uri);
  }
  if($theme_key == "expertusoneV2"){
  	return '<img title="'.getScreenName($userId).'"  width="35" height="35" src="'. file_create_url(($user_image_path != '') ? $user_image_path : 'sites/default/files/pictures/expertusonev2_default_user.png').'"/>';
  }else{
  	return '<img title="'.getScreenName($userId).'"  width="35" height="35" src="'. file_create_url(($user_image_path != '') ? $user_image_path : 'sites/default/files/pictures/default_user.png').'"/>';
  }
  }catch (Exception $ex) {
    watchdog_exception('getUserPicture', $ex);
    expertusErrorThrow($ex);
  }
}


/*
* Select the context, based on the incoming protocol
*/

function getContextBasedProtocol($tmp_service_url)
{
  try{
  $s = empty($_SERVER["HTTPS"]) ? '' : ($_SERVER["HTTPS"] == "on") ? "s" : "";
  $protocol = strleft(strtolower($_SERVER["SERVER_PROTOCOL"]), "/").$s;
  if($protocol=="https")
  {
	$tmp_service_url=" ".$tmp_service_url;
	if(!strpos($tmp_service_url,"https")>0)
	{
		$tmp_service_url=trim(str_replace("http","https",$tmp_service_url));
	}
  }
   expDebug::dPrint(" getContextBasedProtocol ...".$tmp_service_url , 4);
   return $tmp_service_url;
  }catch (Exception $ex) {
    watchdog_exception('getContextBasedProtocol', $ex);
    expertusErrorThrow($ex);
  }
}

/*
 * Custom implementation for redirecting the account related pages to https
 * Ticket No: #6231 by Suresh
 */
function strleft($s1, $s2)
{
  try{
	return substr($s1, 0, strpos($s1, $s2));
  }catch (Exception $ex) {
    watchdog_exception('strleft', $ex);
    expertusErrorThrow($ex);
  }
}
/*
 * End
 */

/* core form alter */
function exp_sp_core_form_alter(&$form, $form_state, $form_id) {
  try{
  switch($form_id){
    case 'lang_dropdown':
      return true;
    break;
    default:
    $form['#validate'][] = 'expertus_xss_validate';
    break;
  }
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_core_form_alter', $ex);
    expertusErrorThrow($ex);
  }
}
/**
 * Form validation for expertus_xss_validate().
 *
 */
function expertus_xss_validate($form, &$form_state) {
   try{
   	if(arg(0) == 'admin')
   		return '';
   	$pattern = getHtmlEventPattern();
  	$replacement = '$1$5';
   expDebug::dPrint(" expertus_xss_validate ...",4);
  // $terms =array('(?i)<\s*script','(?i)<\s*img','(?i)<\s*b','(?i)<\s*input','(?i)<\s*a','(?i)<\s*body','(?i)<\s*meta','(?i)<\s*iframe','(?i)<\s*\?');

  // Added by Ganeshbabuv, june 16th 2015 12:52PM -  Deny LMS to frequently used HTML tags for security Issue
   $terms =array('(?i)<\s*applet','(?i)<\s*base','(?i)<\s*bgsound','(?i)<\s*big','(?i)<\s*blink','(?i)<\s*blockquote','(?i)<\s*br','(?i)<\s*caption','(?i)<\s*center','(?i)<
				\s*cite','(?i)<\s*code','(?i)<\s*del','(?i)<\s*dir','(?i)<\s*div','(?i)<\s*embed','(?i)<\s*font',
			    '(?i)<\s*form','(?i)<\s*frame','(?i)<\s*frameset','(?i)<\s*h','(?i)<\s*head','(?i)<\s*hr','(?i)<\s*html','(?i)<\s*i','(?i)<\s*link','(?i)<\s*marquee','(?i)<
				\s*menu','(?i)<\s*note','(?i)<\s*ol','(?i)<\s*p','(?i)<\s*param','(?i)<\s*pre','(?i)<\s*q','(?i)<\s*select','(?i)<\s*small','(?i)<\s*strike','(?i)<\s*stron
				g','(?i)<\s*sub','(?i)<\s*table','(?i)<\s*tbody','(?i)<\s*td','(?i)<\s*textarea','(?i)<\s*th','(?i)<\s*thead','(?i)<\s*title','(?i)<\s*tr','(?i)<\s*ul','(?i)<\s*var',
   			   '(?i)<\s*script','(?i)<\s*img','(?i)<\s*b','(?i)<\s*input','(?i)<\s*a','(?i)<\s*body','(?i)<\s*meta','(?i)<\s*iframe','(?i)<\s*\?');
   $result = array();
   foreach($form_state['values'] as $key=>&$data){
   	if(!is_array($form_state['values'][$key]) && !is_object($form_state['values'][$key]) ){
	   	 foreach($terms as $term){
	   	 	if($form_state['values']['form_id'] == 'exp_sp_administration_order_edit_form' && $key == 'admin_comment') {
	   	 		continue;
	   	 	}
		   	if(!count($result)){
		   		$result = preg_filter('~' . $term . '~','$0', $form_state['values'][$key]);
		   	}else{
		   		break;
		   	}
	   	}
   		while( preg_match($pattern, $data) ){
		  	$data = preg_replace($pattern, $replacement, $data);
		  }
    }
    if(is_array($form_state['values']['answerchoices']['choices'])) {
    	$opt_count = $form_state['values']['answerchoices']['count'];
    	if($opt_count > 0) {
    		for($m=0;$m<=$opt_count;$m++) {
    			foreach($terms as $term){
    				if(!count($result)){
    					//$data1['value']=cleanEventsFormValue($form_state['values']['answerchoices']['choices']['choice-text-'.$m]);
    					$result = preg_filter('~' . $term . '~','$0', $form_state['values']['answerchoices']['choices']['choice-text-'.$m]);
    				}
    				else {
    					break;
    				}
    			}
    		}
    	}
    }
    if(isset($form_state['values']['panes']['payment']['details'])) {
    	foreach($terms as $term){
    		if(!count($result)){
    			$result = preg_filter('~' . $term . '~','$0', $form_state['values']['panes']['payment']['details']);
    		}
    		else {
    			break;
    		}
    	}
    }
    /*    if(count($result)){
   		break;
   	}*/
   	if(!is_array($form_state['values'][$key]) && !is_object($form_state['values'][$key]) ){
   		if($form_state['values']['form_id'] != 'page_node_form' && $form_state['values'][$key] != 'date'){
   			$form_state['values'][$key] = xss_clean($form_state['values'][$key],$key);
   		}
   	}
   	else if((is_array($form_state['values'][$key]) && (stripos($key,'desc')!==false) || (stripos($key,'additional_info')!==false) || (is_array($form_state['values'][$key]) && stripos($key,'message')!==false)) || ($form_state['values']['form_id'] == 'exp_sp_administration_order_edit_form' && $key == 'admin_comment')){
   		if(preg_match('/[<>]/',$val)){
   			$data['value']=htmlentities($data['value'],'','UTF-8'); // default charset set utf-8
   		}
   		if($data['value'] != '' && !empty($data['value']))
   	    	$data['value']=cleanEventsFormValue($data['value']);//Remove the html events in description field

      $form_state['values'][$key] = $data;
      expDebug::dPrint("XSS VALIDATE for html entities--> ".$key . " ---- ".print_r($data,true),4);
      // fix in input field
      foreach($form_state['input'] as $key1=>&$data1){
      	/*#custom_attribute_0078975*/
		  //if(stripos($key1,'desc')!==false || (stripos($key1,'additional_info')!==false) || stripos($key1,'message')!==false){
      	if((stripos($key1,'desc')!==false || (stripos($key1,'additional_info')!==false) || stripos($key1,'message')!==false) &&  stripos($key1,'c_')===false){
      		$data1['value']=cleanEventsFormValue($data1['value']);
      	}
      }
    }
   }
if (is_array($form_state['content_storage']) || is_object($form_state['content_storage']))
   foreach($form_state['content_storage'] as $key=>$data){
   	foreach($data as $key1=>$data1){
   		$form_state['content_storage'][$key]->$key1 = cleanEventsFormValue($data1);
   	}
   }
   expDebug::dPrint("form state values".$form_state['values']['attachment_provide_url'],5);
   //Comment the following line to disable xss clean up of $form_state['input']
   //same $terms varaible has been passed to the function call. It can be overriden if required
   if ($form_state['values']['attachment_provide_url'] == 'Provide URL' || (!is_array($form_state['values'][$key]) && (stripos($key,'desc')===false) || (stripos($key,'additional_info')!==false))){
   		$result_new = expertus_xss_validate_form_input($form, $form_state);
   }
   if(isset($_FILES)){
		$result_file = array();
		if (is_array($_FILES['files']['name']) || is_object($_FILES['files']['name'])) {
	   	foreach($_FILES['files']['name'] as $key=>$data){
	   		foreach($terms as $term){
	   			if(!count($result_file)){
	   				$result_file = preg_filter('~' . $term . '~','$0', $_FILES['files']['name'][$key]);
	   			}
	   			else{
	   				break;
	   			}
	   		}
		   	while( preg_match($pattern, $data) ){
		  		$data = preg_replace($pattern, $replacement, $data);
		  	}
	   	}
	  }
   }
   if(count($result)){
   		foreach($form_state as $k=>&$v){
   			if(stripos($k,'complete')!==false){
   				foreach($form_state[$k] as $k2=>&$v2){
   					if(stripos($k2,'desc')!==false){
		   				foreach($v2['value'] as $k1=>&$v1){
		   					if(stripos($k1,'value')!==false){
		   						$v2['value'][$k1] = cleanEventsFormValue($v2['value'][$k1]);
		   					}
		   				}
   					}
   				}
   			}
   		}
   }
 if(count($result) || count($result_new) || count($result_file) || count($result_po) ){
    form_set_error('',  t('LBL1273'));
     $form_state["storage"]["form_validate"] = false;
     if(module_exists('exp_sp_esignature')){
       $form_state['esign_show_popup']= false;
     }
   }
  }catch (Exception $ex) {
    watchdog_exception('expertus_xss_validate', $ex);
    expertusErrorThrow($ex);
  }
}
function expertus_xss_validate_form_input($form, &$form_state) {
	$terms =array('(?i)<\s*applet','(?i)<\s*base','(?i)<\s*bgsound','(?i)<\s*big','(?i)<\s*blink','(?i)<\s*blockquote','(?i)<\s*br','(?i)<\s*caption','(?i)<\s*center','(?i)<
			\s*cite','(?i)<\s*code','(?i)<\s*del','(?i)<\s*dir','(?i)<\s*div','(?i)<\s*embed','(?i)<\s*font',
			'(?i)<\s*form','(?i)<\s*frame','(?i)<\s*frameset','(?i)<\s*h','(?i)<\s*head','(?i)<\s*hr','(?i)<\s*html','(?i)<\s*i','(?i)<\s*link','(?i)<\s*marquee','(?i)<
			\s*menu','(?i)<\s*note','(?i)<\s*ol','(?i)<\s*p','(?i)<\s*param','(?i)<\s*pre','(?i)<\s*q','(?i)<\s*select','(?i)<\s*small','(?i)<\s*strike','(?i)<\s*stron
			g','(?i)<\s*sub','(?i)<\s*table','(?i)<\s*tbody','(?i)<\s*td','(?i)<\s*textarea','(?i)<\s*th','(?i)<\s*thead','(?i)<\s*title','(?i)<\s*tr','(?i)<\s*ul','(?i)<\s*var',
			'(?i)<\s*script','(?i)<\s*img','(?i)<\s*b','(?i)<\s*input','(?i)<\s*a','(?i)<\s*body','(?i)<\s*meta','(?i)<\s*iframe','(?i)<\s*\?');
	$result_new = array();
	$pattern = getHtmlEventPattern();
  $replacement = '$1$5';

	foreach($form_state['input'] as $key=>&$data){
		if($form_state['input']['form_id'] != 'exp_sp_administration_notification_attaching_template_addedit_form') {
		if(is_array($form_state['input'][$key]) && stripos($key,'desc')!==false || stripos($key,'additional_info')!==false || is_array($form_state['input'][$key]) && stripos($key,'message')!==false){
			//$data['value']=cleanEventsFormValue($data['value']);
			continue;
		}
		}
		
		else {
			if(is_array($form_state['input'][$key])){
				//$data['value']=cleanEventsFormValue($data['value']);
				continue;
			}
		}
		
		foreach($terms as $term){
			if($form_state['values']['form_id'] == 'exp_sp_administration_order_edit_form' && $key == 'admin_comment') {
				continue;
			}
			if(!count($result_new)){
				$result_new = preg_filter('~' . $term . '~','$0', $form_state['input'][$key]);
			}
			else{
				break;
			}
		}
		while( preg_match($pattern, $data) ){
	  	$data = preg_replace($pattern, $replacement, $data);
	  }
	}

	return $result_new;
}
function cleanEventsFormValue(&$string)
{
	//Remove the html events in description field
	try{
	    $pattern = getHtmlEventPattern(1);
	    $replacement = '$1$5';
	    while( preg_match($pattern, $string) ){
	  		$string = preg_replace($pattern, $replacement, $string);
	    }
	    expDebug::dPrint("cleanEventsFormValue ".$string,4);
		$string = preg_replace('#</*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|i(?:frame|layer)|l(?:ayer|ink)|meta|object|s(?:cript)|title|xml|iframe|confirm\(|alert\()[^>]*+>#i', '', $string);
		return $string;
	}catch (Exception $ex) {
	  	watchdog_exception('cleanEventsFormValue', $ex);
	  	expertusErrorThrow($ex);
	}
}

function getHtmlEventPattern($op=0){
	$html_events = 'onafterprint|onbeforeprint|onbeforeunload|onerror|onhashchange|onload|onmessage|onoffline|ononline|onpagehide|onpageshow|onpopstate|onresize|onstorage|onunload|ondblclick|ondrag|ondragend|ondragenter|ondragleave|ondragover|ondragstart|ondrop|onmousedown|onmousemove|onmouseout|onmouseover|onmouseup|onmousewheel|onscroll|onwheel|onblur|onchange|oncontextmenu|onfocus|oninput|oninvalid|onreset|onsearch|onselect|onsubmit|onkeydown|onkeypress|onkeyup|onclick|oncopy|oncut|onpaste|onabort|oncanplay|oncanplaythrough|oncuechange|ondurationchange|onemptied|onended|onerror|onloadeddata|onloadedmetadata|onloadstart|onpause|onplay|onplaying|onprogress|onratechange|onseeked|onseeking|onstalled|onsuspend|ontimeupdate|onvolumechange|onwaiting|onerror|onshow|ontoggle|onerror';

	$pattern = "/(<[A-Z][A-Z0-9]*[^>]*)($html_events)([\s]*=[\s]*)('[^>]*'|\"[^>]*\"|[^>]*)([^>]*>)/i";

	$pattern2 = "/($html_events)([\s]*=[\s]*)/i";
	return ($op==1) ? $pattern : $pattern2;
}

function xss_clean($data,$key){
	try{
  //expDebug::dPrint("xss clean 1".$data,4);
	if((stripos($key,'cybersource_soap_transaction_key')>0) || (stripos($key,'metric_di_sharedkey')>0))
		return $data; // do not clean special character for cybersource transaction key
	// Fix &entity\n;
	$data = html_entity_decode($data, ENT_COMPAT, 'UTF-8');
	$data = rawurldecode($data);
	$data = str_replace(array('&amp;','&lt;','&gt;'), array('&amp;amp;','&amp;lt;','&amp;gt;'), $data);
	$data = preg_replace('/(&#*\w+)[\x00-\x20]+;/u', '$1;', $data);
	$data = preg_replace('/(&#x*[0-9A-F]+);*/iu', '$1;', $data);


	// Remove any attribute starting with "on" or xmlns
	$data = preg_replace('#(<[^>]+?[\x00-\x20"\'])(?:on|xmlns)[^>]*+>#iu', '$1>', $data);

	// Remove javascript: and vbscript: protocols
	$data = preg_replace('#([a-z]*)[\x00-\x20]*=[\x00-\x20]*([`\'"]*)[\x00-\x20]*j[\x00-\x20]*a[\x00-\x20]*v[\x00-\x20]*a[\x00-\x20]*s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:#iu', '$1=$2nojavascript...', $data);
	$data = preg_replace('#([a-z]*)[\x00-\x20]*=([\'"]*)[\x00-\x20]*v[\x00-\x20]*b[\x00-\x20]*s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:#iu', '$1=$2novbscript...', $data);
	$data = preg_replace('#([a-z]*)[\x00-\x20]*=([\'"]*)[\x00-\x20]*-moz-binding[\x00-\x20]*:#u', '$1=$2nomozbinding...', $data);

	// Only works in IE: <span style="width: expression(alert('Ping!'));"></span>
	$data = preg_replace('#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?expression[\x00-\x20]*\([^>]*+>#i', '$1>', $data);
	$data = preg_replace('#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?behaviour[\x00-\x20]*\([^>]*+>#i', '$1>', $data);
	$data = preg_replace('#(<[^>]+?)style[\x00-\x20]*=[\x00-\x20]*[`\'"]*.*?s[\x00-\x20]*c[\x00-\x20]*r[\x00-\x20]*i[\x00-\x20]*p[\x00-\x20]*t[\x00-\x20]*:*[^>]*+>#iu', '$1>', $data);

	// Remove namespaced elements (we do not need them)
	$data = preg_replace('#</*\w+:\w[^>]*+>#i', '', $data);
	//expDebug::dPrint("xss clean 2".$data,4);
	do{
		// Remove really unwanted tags
		$old_data = $data;
		$data = preg_replace('#</*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|i(?:frame|layer)|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|title|xml)[^>]*+>#i', '', $data);
	}while ($old_data !== $data);
	expDebug::dPrint("xss clean return -- ".$data,4);
	// we are done...
	return $data;
	}catch (Exception $ex) {
    watchdog_exception('xss_clean', $ex);
    expertusErrorThrow($ex);
  }
}
/*
 * Sql and xml injection validation for params in url.
 *
 * */
function param_validation($serverurl, $splitter, $refer='') {
	$url1 = str_replace($splitter, "", $serverurl);
	$url = explode("&", $url1);
	expDebug::dPrint(' $url :: ' . print_r($url, true), 4);
	foreach($url as $key => $value) {
		if(strpos($value, '=') > 0) {
			$parv = explode("=", $value);
			$parv[0] = escape_string($parv[0]);
			$parv[1] = expertus_xss_validate_security(urldecode($parv[1]));
			$parv[1] = escape_string(urlencode($parv[1]));
			$val = implode("=", $parv);
		}
		
		//Added by ganeshbabuv on Nov 8 2016 for #0069779
		if($val=='' || empty($val)){
			$val=$value;
		} 
		
		$url[$key] = $val;
	}
	if(empty($refer)) {
		$_SERVER["REQUEST_URI"] = $splitter . implode("&", $url);
		$_SERVER["QUERY_STRING"] = $splitter . implode("&", $url);
	} else {
		$refer_param = $splitter . implode("&", $url);
		return $refer_param;
	}
	$get = $_GET;
	expDebug::dPrint('before sanity $_GET :: ' . print_r($get, true), 4);
	foreach($get as $key => $value) {
		// 53638: Home page widgets - Top search bar - Quote based string search not working
		if(($key == 'r') || ($key == 's') || $key == 'textfilter' || $key == 'title') { // added to exclude checking the incomin values of get variable from paymetric transaction
			$get[$key] = $value;
		} else {
			if($key != 'q') {
				$get_new = expertus_xss_validate_security($value);
				$get[$key] = escape_string($get_new);
			}
		}
	}
	$_GET = $get;
	expDebug::dPrint('after sanity $_GET :: ' . print_r($get, true), 4);
	
	$request = $_REQUEST;
	expDebug::dPrint("before sanity $_REQUEST :: " . print_r($request, true), 4);
	foreach($request as $key => $value) {
		if(($key == 'r') || ($key == 's')) { // added to exclude checking the incomin values of get variable from paymetric transaction
			$get[$key] = $value;
		} else {
			if($key != 'q') {
				$request_new = expertus_xss_validate_security($value);
				$request[$key] = escape_string($request_new);
			}
		}
	}
	$_REQUEST = $request;
	expDebug::dPrint('after sanity $_REQUEST :: ' . print_r($_REQUEST, true), 5);
}

/**
 * Implements hook_theme().
 */
function exp_sp_core_theme() {
	try {
  return array(
    'error_page' => array(
  		'variables' => array('content' => NULL, 'show_messages' => TRUE),
      'template' => 'error-page',
    ),
  );
	}catch (Exception $ex) {
    watchdog_exception('exp_sp_core_theme', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * The variables array generated here is a mirror of template_preprocess_page().
 * This preprocessor will run its course when theme_maintenance_page() is
 * invoked.
 *
 * An alternate template file of "maintenance-page--offline.tpl.php" can be
 * used when the database is offline to hide errors and completely replace the
 * content.
 *
 * The $variables array contains the following arguments:
 * - $content
 *
 * @see error-page.tpl.php
 */
function template_preprocess_error_page(&$variables) {
// Move some variables to the top level for themer convenience and template cleanliness.
	try{
  $variables['show_messages'] = $variables['page']['#show_messages'];

  $variables['base_path']         = base_path();
  $variables['front_page']        = url();
  $variables['feed_icons']        = drupal_get_feeds();
  $variables['language']          = $GLOBALS['language'];
  $variables['logo']              = theme_get_setting('logo');

 // Add favicon.
  if (theme_get_setting('toggle_favicon')) {
    $favicon = theme_get_setting('favicon');
    $type = theme_get_setting('favicon_mimetype');
    drupal_add_html_head_link(array('rel' => 'shortcut icon', 'href' => drupal_strip_dangerous_protocols($favicon), 'type' => $type));
  }
	}catch (Exception $ex) {
    watchdog_exception('template_preprocess_error_page', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * The variables array generated here is a mirror of template_process_html().
 * This processor will run its course when theme_maintenance_page() is invoked.
 *
 * @see error-page.tpl.php
 */
function template_process_error_page(&$variables) {
try{
 if (!isset($variables['title'])) {
    $variables['title'] = drupal_get_title();
  }

  // Generate messages last in order to capture as many as possible for the
  // current page.
  if (!isset($variables['messages'])) {
    $variables['messages'] = $variables['show_messages'] ? theme('status_messages') : '';
  }

  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
  drupal_add_css(path_to_theme() .'/expertusone-internals/css/layout-fixed.css', $css_theme_optional);
  $variables['head']    = drupal_get_html_head();
  $variables['scripts'] = drupal_get_js();
  $variables['styles']  = drupal_get_css();
}catch (Exception $ex) {
    watchdog_exception('template_process_error_page', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * Function to check the callout is active or not
 * return boolean successvalue
 */
function calloutIsActive() {
 try {
  $calloutStatus = getConfigValue('callout_feature');
  if(!empty($calloutStatus)){
   return true;
  } else {
   return false;
  }

 } catch(Exception $ex) {
  watchdog_exception('calloutIsActive' . $ex);
  expertusErrorThrow($ex);
 }
}

/**
 * Check the entityType callout feature enabled or not
 * @param string $entityType
 */
function calloutEntityIsActive($entityType = '') {
	try {
		expDebug::dPrint(" calloutEntityIsActive ... calleed" . $calloutStatus , 4);
		if ($entityType == '') {
			return false;
		}
		$result = db_query('SELECT cal.id FROM slt_callout cal WHERE cal.entity_type = :entityType and cal.status = :status',
				array(	':entityType' => $entityType,
						':status' => 'cme_cal_sys_atv'));
		$rowCount = $result->rowCount();
		if($rowCount > 0) {
			return true;
		} else {
			return false;
		}

	} catch (Exception $ex) {
		watchdog_exception('calloutEntityIsActive', $ex);
		expertusErrorThrow($ex);
	}
}
function calloutEntityMethod($entityType) {
	try {
		$fieldValue  = db_query("SELECT method_type FROM slt_callout WHERE entity_type = :entity_type limit 1",
				array(':entity_type' => $entityType))->fetchField();
		return $fieldValue;
	} catch (Exception $ex) {
		watchdog_exception('calloutEntityIsActive', $ex);
		expertusErrorThrow($ex);
	}
}

function getCalloutEntityInfo($entityType = '') {
	try {
		if (empty($entityType)) {
			return '';
		}
		$select = db_select('slt_callout', 'sc');
		$select->fields('sc', array('entity_type', 'method_type', 'file', 'response_url'));
		$select->condition('sc.entity_type', $entityType, '=');
		//expDebug::dPrintDBAPI('$select', $select);
		$results = $select->execute()->fetchAssoc();
		return $results;
	} catch (Exception $ex){
		watchdog_exception('getCalloutEntityInfo', $ex);
		expertusErrorThrow($ex);
	}
}
/**
 * Function used to escape quotes in a string
 * @param string $string
 * @return string
 */
function escapeStringQuotes($string) {
	try {
		return addslashes($string);
	} catch (Exception $ex){
		watchdog_exception('escapeStringQuotes', $ex);
		expertusErrorThrow($ex);
	}
}
function expertus_xss_validate_security($keyValues) {
	try{
		// expDebug::dPrint(" expertus_xss_validate ...".$keyValues,5);
		// $terms =array('(?i)<\s*script','(?i)<\s*img','(?i)<\s*b','(?i)<\s*input','(?i)<\s*a','(?i)<\s*body','(?i)<\s*meta','(?i)<\s*iframe','(?i)<\s*\?');

		// Added by Ganeshbabuv, june 17th 2015 12:52PM -  Deny LMS to frequently used HTML tags for security Issue
		$terms =array('(?i)<\s*applet','(?i)<\s*base','(?i)<\s*bgsound','(?i)<\s*big','(?i)<\s*blink','(?i)<\s*blockquote','(?i)<\s*br','(?i)<\s*caption','(?i)<\s*center','(?i)<
				\s*cite','(?i)<\s*code','(?i)<\s*del','(?i)<\s*dir','(?i)<\s*div','(?i)<\s*embed','(?i)<\s*font',
				'(?i)<\s*form','(?i)<\s*frame','(?i)<\s*frameset','(?i)<\s*h','(?i)<\s*head','(?i)<\s*hr','(?i)<\s*html','(?i)<\s*i','(?i)<\s*link','(?i)<\s*marquee','(?i)<
				\s*menu','(?i)<\s*note','(?i)<\s*ol','(?i)<\s*p','(?i)<\s*param','(?i)<\s*pre','(?i)<\s*q','(?i)<\s*select','(?i)<\s*small','(?i)<\s*strike','(?i)<\s*stron
				g','(?i)<\s*sub','(?i)<\s*table','(?i)<\s*tbody','(?i)<\s*td','(?i)<\s*textarea','(?i)<\s*th','(?i)<\s*thead','(?i)<\s*title','(?i)<\s*tr','(?i)<\s*ul','(?i)<\s*var',
				'(?i)<\s*script','(?i)<\s*img','(?i)<\s*b','(?i)<\s*input','(?i)<\s*a','(?i)<\s*body','(?i)<\s*meta','(?i)<\s*iframe','(?i)<\s*\?');

		$result = array();
	 foreach($terms as $term){
		 $keyValues = preg_replace('/' . $term . '/', '',$keyValues);
	 }
	 return $keyValues;
	}catch (Exception $ex) {
		watchdog_exception('expertus_xss_validate', $ex);
		expertusErrorThrow($ex);
	}
}

class securityException extends Exception{
	public function __construct($message=null,$code=null){
		try{
			expDebug::dPrint('getting the message value string from exception'.$message,4);
			parent::__construct($message,$code);
		}catch(Exception $ex){
			// Nothing to do
		}
	}
}

function get_logo_path($logo_image_for='') {
	try {
		$config=getConfig('exp_sp');
		$image_path = isset($config['logo_image_path']) ? $config['logo_image_path'] :'';
		if($logo_image_for == 'folder')
			return $image_path.'/';
		else
			return $image_path.'/logo.png';
	}catch (Exception $ex){
		watchdog_exception('get_logo_path', $ex);
		expertusErrorThrow($ex);
	}
}
/**
 * Implements hook_html_head_alter().
 *
 * Replaces the favicon.
 *
 * @param array $pages
 */

function exp_sp_core_page_alter(&$pages) {
	try {
		$config=getConfig('exp_sp');
		$image_path_folder = isset($config['logo_image_path']) ? $config['logo_image_path'] :'';
		$favicon = $image_path_folder.'/favicon.ico';
		$type = theme_get_setting('favicon_mimetype');
		drupal_add_html_head_link(array('rel' => 'shortcut icon', 'href' => drupal_strip_dangerous_protocols($favicon), 'type' => $type));
	}catch (Exception $ex){
		watchdog_exception('favicon_page_alter', $ex);
		expertusErrorThrow($ex);
	}
}

function getDefaultCurrency()
{
	try{
		$geoplugin_currencyCode = '';
		 if ($_REQUEST['currency_type'] && $_REQUEST['apiname'])
		{
			$geoplugin_currencyCode = $_REQUEST['currency_type'];
			
		}else {
			
			if(empty($_REQUEST['apiname'])){
				$ip = get_remote_address();
				$ip_locator_url = trim(getConfigValue('ip_locator_url'));
				if($ip_locator_url != '') {
					$peerVerify = getConfigValue('peer_verify') == 0 ? FALSE : TRUE;
					$context = stream_context_create(array(
							'ssl' => array(
									'verify_peer'=> $peerVerify,
									'verify_peer_name'=> $peerVerify
							)
					));
					$ipdetails = json_decode(file_get_contents($ip_locator_url.'?ip='.$ip,false,$context));
					if(count($ipdetails) > 0){
						$geoplugin_currencyCode = $ipdetails->currency_type;
					} else{
						$geoplugin_currencyCode = '';
					}
				}
				
			}
			
		}
		$checkSiteCurrencysupportedlist = checkSiteCurrencysupportedlist ( $geoplugin_currencyCode );
		if ($geoplugin_currencyCode != '' && count ( $checkSiteCurrencysupportedlist ) > 0) {
			$currencysym = $checkSiteCurrencysupportedlist [0]->currency_symbol;
			$result = array (
					'code' => '',
					'preferred_currency' => $geoplugin_currencyCode,
					'attr2' => $currencysym
			);
		} else {
			$select = db_select ( 'slt_profile_list_items', 'spli' );
			$select->addField ( 'spli', 'code', 'code' );
			$select->addField ( 'spli', 'attr1', 'preferred_currency' );
			$select->addField ( 'spli', 'attr2', 'attr2' );
			$select->condition ( 'spli.code', 'cre_sys_crn_%', 'LIKE' );
			$select->condition ( 'spli.attr4', 'Y', '=' );
			$result = $select->execute ()->fetchAssoc ();
		}
		return $result;
	}catch (Exception $ex) {
		watchdog_exception('getDefaultCurrency', $ex);
		throw $ex;
	}
}

function checkSiteCurrencysupportedlist($code){
	try{
		$checkCurrency = db_select('slt_profile_list_items','prof');
		$checkCurrency->addField('prof','attr2','currency_symbol');
		$checkCurrency->condition('prof.code','cre_sys_crn_%','LIKE');
		$checkCurrency->condition('attr1', $code);
		$checkCurrency->condition('attr3', 'Y');
		$checkCurrency->condition('is_active', 'Y');
		expDebug::dPrintDBAPI('$checkCurrency querykjkksss ',$checkCurrency);
		$CurrencySymbol = $checkCurrency->execute()->fetchAll();
		return $CurrencySymbol;
	}catch (Exception $ex) {
		watchdog_exception('checkSiteCurrencysupportedlist', $ex);
		expertusErrorThrow($ex);
	}
}
/**
 * Returns array of currency code
 */
function getCurrencySymbol($code) {
	try{
		$expcurrencysymbol = db_select('slt_profile_list_items','sltpli');
		$expcurrencysymbol->addField('sltpli','attr2');
		$expcurrencysymbol->Condition('sltpli.attr1',$code);
		expDebug::dPrintDBAPI('getCurrencySymbol' ,   $expcurrencysymbol);
		$expselcurrencysymbol = $expcurrencysymbol->execute()->fetchAssoc();
		return $expselcurrencysymbol;
	}catch (Exception $ex) {
		watchdog_exception('getCurrencySymbol', $ex);
		expertusErrorThrow($ex);
	}
}

function getUserCurrentLocation(){
    try{
        $ip_locator_url=getConfigValue('ip_locator_url');
        $ip = ip_address();
	$fieldsval=array('ip' => $ip);
        $post_field_string = http_build_query($fieldsval, '', '&');
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $ip_locator_url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json'));
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_field_string);
        curl_setopt($ch, CURLOPT_POST, true);
        $json = curl_exec($ch);
        $result_response = json_decode($json, true); 
        curl_close ($ch);
        return $result_response;
    } catch (Exception $ex) {
        watchdog_exception('getUserCurrentLocation', $ex);
        expertusErrorThrow($ex);
    }
}

function block_role_permission_check($module_name, $delta ='') {
	 global $user;
	 global $theme;
	 $flag = true;
	 $block = db_query('SELECT * FROM {block} WHERE module = :module AND delta = :delta AND theme = :theme', array(':module' => $module_name, ':delta' => $delta, ':theme' => $theme))->fetchObject();	 
	 expDebug::dPrint('block_role_permission_check block detail'.print_r($block,true),4);
	 if($block->status != 0) {
		$select = db_select('block_role', 'br');
		$select->fields('br', array('rid'));
		$select->condition('br.module', $module_name, '=');
		//$select->condition('br.module', $module_name, '=');
		if($delta != '')
			$select->condition('br.delta', $delta, '=');
		$row_count = $select->countQuery()->execute()->fetchField();
		if($row_count >= 1) {
			$select->condition ('br.rid',array_keys($user->roles), 'IN');
			$role_count = $select->countQuery()->execute()->fetchField();
			if($role_count >= 1) {
				$flag = true;
			} else {
				$flag = false;
			}
		}
	} else {
		$flag = false;
	}
	return $flag;
}
/**
 * method to get the ip address of the visitor
 */
	
function get_remote_address() {
	$ip = $_SERVER['REMOTE_ADDR'];
	expDebug::dPrint('REMOTE_ADDR = '.$_SERVER['REMOTE_ADDR'], 4);
	if(!empty($_SERVER['HTTP_CLIENT_IP'])) {
		$ip = $_SERVER['HTTP_CLIENT_IP'];
		expDebug::dPrint('HTTP_CLIENT_IP = '.$_SERVER['HTTP_CLIENT_IP'], 4);
	} elseif(!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
		$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
		expDebug::dPrint('HTTP_X_FORWARDED_FOR = '.$_SERVER['HTTP_X_FORWARDED_FOR'], 4);
	}
	return $ip;
}

/**
 * Function to replace escape_string with 
 * mysqli_real_escape_string. 
 * 
 * PHP's mysql library has been marked as deprecated
 * from 5.6, this might be revmove in further releases of PHP.
 * 
 * Since we are using mysql function in some of the places which should
 * be changed to mysqli, but mysqli required database connection object.
 * Instead of passing connection objcet to all the places use this function.
 * 
 * @param $str String to escape
 * @return escaped string
 */
function escape_string($str){
	try{
		
		if(isset($_POST['apiname'])){
			include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/services/GlobalUtil.php";
    	$util=new GlobalUtil();
    	$config=$util->getConfig();
    	$url = parse_url($config['db_url']);
		}else{
			$url = parse_url(getConfigValue('db_url'));
		}
		// Parse DB URL from configuration file
		$dsn=$url["scheme"];
		$username=$url["user"];
		$password=$url["pass"];
		$host=$url["host"];
		if(isset($url["port"]))
			$port=$url["port"];
		if(!empty($port)){
			$host = $host.':'.$port;
		}
		$db=basename($url['path']);
		
		// Connect mysql using mysqli lib
		$link = mysqli_connect($host,$username,$password,$db);
		// Escape string using mysqli built in function
		$rtn = mysqli_real_escape_string($link,$str);
		// Close mysql
		mysqli_close($link);
		
		return $rtn;
	} catch (Exception $ex){
		watchdog_exception('escapeStringQuotes', $ex);
		expertusErrorThrow($ex);
	}
}
function qtip_popup_paint($session_id,$sessionDate,$multisession,$label){
	try {
		$label = ($label == 1 ? '(Location TZ)' : '(TZ)');
		$width = ($multisession > 1 ? '365' : '304');
		$session_id = 'changeclass-'.$session_id;
		/*Viswanathan added for #76619,#76437,#76441 */
		$class = $_REQUEST['q'];
		expDebug::dPrint(' $entity_multi_action velu '.print_r($class,true),5);
		
		if($class == 'learning/catalog-search/search/all/'){
			$addClassPrefix = '<div class="line-item-container float-left">';
			$addClassSuffix = '</div>';
		}
		$qtipOptClassObj  =  '{"entityId":"'.$session_id.'",
							 "entityType":"cre_sys_obt_cls",					
					         "popupDispId":"location-session-details_'.$session_id.'",
		  					 "wid":'.$width.',
		  					 "heg":"60",
		  					 "postype":"bottomright",
							          "linkid":"manage-location-time-' . $session_id . '",
							          "dispDown":"Y"}';		
        	$paintqtipAction =$addClassPrefix.'<div id="location-session-details_'.$session_id.'" class="location-session-detail">';
        	$paintqtipAction .='<span><a id="manage-location-time-'.$session_id.'" class=" location-tz manage-location-time" onclick=\'locationdetails('.$qtipOptClassObj.');\' >'.$label.'</a></span>';
        	$paintqtipAction .='<span id="selSessionId-'.$session_id.'" style="display: none;">'.$sessionDate.'</span>';
        	$paintqtipAction .='<span style="position:absolute; left:0px; top:0px;" class="qtip-popup-visible" id="visible-popup-'.$session_id.'"></span>';
        	$paintqtipAction .=$addClassSuffix.'</div>';
			return $paintqtipAction;
	} catch (Exception $ex ) {
		watchdog_exception ('escapeStringQuotes', $ex);
		expertusErrorThrow ($ex);
	}
}

/**
 * Function to check the content player is active or not
 * return boolean success value
 */
function contentPlayerIsActive() {
		$calloutStatus = getConfigValue('mylearn_version');
		if(!empty($calloutStatus)){
			return $calloutStatus;
		} 
		return false;
}
/**
 * Function to check the footer is active or not
 * return boolean success value
 */
function footerIsActive() {
	$footerSts = getConfigValue('show_footer');
	if(($footerSts == 1 && !empty($footerSts)) || drupal_is_front_page()) {
		return TRUE;
	}
	return FALSE;
}
/**
 * get or set user preferences
 * @param array $preferences
 * @param boolean $save
 */
function get_set_user_preferences($user_id = -1, $preferences, $save = false) {
	try {
// 		expDebug::dPrint('get_set_user_preferences'. print_r(func_get_args(), 1), 1);
		/* ALTER TABLE slt_person_preference
 ADD catalog_refine INT AFTER widget_deleted; */
		if($user_id == -1) {
			$user_id = getSltpersonUserId();
		}
		//unset($_SESSION['user_preferences'][$user_id]);
		if($save && $user_id) {	// save all preferences given to user profile
			unset($_SESSION['user_preferences'][$user_id]);
			$save_pref = db_merge('slt_person_preference')
						->insertFields($preferences)
						->updateFields($preferences)
						->key(array('user_id' => $user_id));
			$save_pref->execute();
// 			expDebug::dPrint('save user preferences'. $save_pref);
// 			https://www.drupal.org/docs/7/api/database-api/merge-queries-using-db_merge
		} else {
			if(isset($_SESSION['user_preferences'][$user_id])) {
// 				expDebug::dPrint('user preferences in session '.print_r($_SESSION['user_preferences'][$user_id], 1), 2);
				drupal_add_js(array('user_preferences' => $_SESSION['user_preferences'][$user_id]), 'setting');
				return $_SESSION['user_preferences'][$user_id];
			}
			$select_pref = db_select('slt_person_preference', 'pref');
			$select_pref->addField('pref', 'catalog_refine');
			$select_pref->condition('pref.user_id', $user_id, '=');
// 			expDebug::dPrintDBAPI('$select_pref ', $select_pref);
			$preferences = (array)$select_pref->execute()->fetch();
// 			expDebug::dPrint('select pref '.print_r($preferences, 1), 1);
// 			expDebug::dPrint('select pref count '.count($preferences), 1);
		}
		$filter_popup_in = getConfigValue('filter_popup_in', 0);
		$preferences['filter_popup_in'] = $filter_popup_in;
		//if user pref is 0 (he wants filter left side)
// 		expDebug::dPrint('is user pref there '.var_export(isset($preferences['catalog_refine']), 1), 1);
		if((isset($preferences['catalog_refine']) && $preferences['catalog_refine'] == 1)) {
			$hide_filter = 1;
		} else if(!isset($preferences['catalog_refine']) && $filter_popup_in) {
			$hide_filter = 1;
		} else {
			$hide_filter = 0;
		}
		$preferences['catalog_criteria_class'] = (($hide_filter) ? 'searchcriteria-div-unpinned' : '');
		$preferences['catalog_content_class'] = (($hide_filter) ? 'catalog-extended' : '');
		$_SESSION['user_preferences'][$user_id] = $preferences;
		drupal_add_js(array('user_preferences' => $preferences), 'setting');
		return $preferences;
	} catch (Exception $ex) {
		watchdog_exception ('get_set_user_preferences', $ex);
		expertusErrorThrow ($ex);
	}
}

function print_refine_filter_menu($include_wrapper = false) {
	$refine_icon = '<div class="refine-line refine-line-first"></div>
			<div class="refine-line"></div>
			<div class="refine-line"></div>
			<div class="refine-text vtip" title="'.t('REFINE').'"><span class="refine-text-span">'. t('REFINE').'</span><div class="refine-text-fade"></div></div>';
	if($include_wrapper) {
		$refine_icon = '<div class="criteria-refine-icon">'.$refine_icon.'</div>';
	}
	return $refine_icon;
}
/**
 * Initiate indexing of various entites if Solr search is enabled
 * @param $entity (String) Name of the entity which needs to be indexed
 * @param $type (String) Import type full/delta
 * @return NA
 */
function syncSolrData($entity, $type='' ,$entitytype ='',$singleUser=''){
	
	$solr = getConfigValue('solr_search');
	expDebug::dPrint('syncSolrData function is called '.$entity.'<----- $singleUser ---> '.$singleUser);
	if($solr == 0) return; // Do nothing if solr is disabled.
	
	try{
		require_once $_SERVER['DOCUMENT_ROOT'].'/sites/all/modules/core/exp_sp_solr/exp_sp_solr_index.php';		
       
		$type  = ($entitytype=='Bulk')? '':'delta';
 		
		if($type == 'delta'){
			$options = array(
				'command'=>'delta-import',
				'clean'=>'false',
			);
		}
		if(!empty($entitytype)){
		    $options = array(
		        'command'=>'full-import',
		        'clean'=>'false',
 		    );
		}
		if($entity == 'User' && !empty($singleUser)){
		    expDebug::dPrint('singleuser called',5);
			$options = array(
					'command'=>'full-import',
					'clean'=>'false',
			        'pId' => $singleUser
 			);
		}
		$solrIdx = new SolrIndex();
		
		switch($entity){
			case 'Course':
			case 'Class':
				$solrIdx->catalogIndexing($options);
				break;
			case 'Program':
				$solrIdx->trainingProgramIndexing($options);
			case 'User':
				$solrIdx->userIndexing($options,$entitytype,$singleUser);
				break;
			case 'Enrollment':
				$solrIdx->enrollmentIndexing($options,$entitytype);
				break;
			case 'MasterEnrollment':
				$solrIdx->masterEnrollmentIndexing($options,$entitytype);
				break;
			}
	}catch(Exception $e){
		expertusLogError($e);
	}
}
