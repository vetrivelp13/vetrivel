<?php

/**
 * Implementation of hook_menu().
 */
function exp_sp_administration_organization_init() {
	try {
	if(stripos(request_uri(),'administration/people/organization')!==false){
		$css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
		global $theme_key;
		if($theme_key == "expertusoneV2"){
		  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_organization') .'/exp_sp_administration_organization_v2.css', $css_theme_optional);
		  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
		  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user_v2.css');
		  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning_v2.css');
          
          if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status
              drupal_add_css(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_v2.css', $css_theme_optional);
          } //#custom_attribute_0078975 - End Check module status
          
		  drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_view_v2.css', $css_theme_optional);
		}else{
		  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_organization') .'/exp_sp_administration_organization.css', $css_theme_optional);
		  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
		  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user.css');
		  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.css');
		  drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_view.css', $css_theme_optional);
		}
		//CUSTOM SCROLLBAR "JSscrollbar"
		drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.jscrollpane.js', $js_module_optional);
		include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_custom_fields.inc'); 
		drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_organization_init', $ex);
  	expertusErrorThrow($ex);
  } 
}
function exp_sp_administration_organization_menu() {
 try {
  $items = array(); 

  $items['administration/people/organization'] = array(
    'title' => t('Organization'),
    'page callback' => 'empty_value', 
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'weight' => 2,
    'access arguments' => array('Organization Admin Perm'),
    );
      
  $items['administration/people/organization/%ctools_js/addedit'] = array(
    'title' => 'Add / Edit Organization',
    'page callback' => 'exp_sp_organization_display_addedit_form',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('Organization Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_organization.inc'
  );
    
  $items['administration/people/organization/search/all'] = array(
    'title' => 'Fetch Organizations List to display in JQGrid',
    'page callback' => 'sendOrganizationsListToJqGrid',
    'access callback' => 'user_access',
    'access arguments' => array('Organization Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_organization.inc'
    );
    
  $items['administration/people/organization/textfilter-autocomplete'] = array(
    'title' => 'Search By Text Filter Autocomplete',
    'page callback' => 'getOrganizationTextFilterAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Organization Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_organization.inc',
    );

    $items['administration/people/organization/addedit'] = array(
    'title' => 'Add / Edit Organization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exp_sp_administration_organization_addedit_form'), 
    'access callback' => 'user_access',
    'access arguments' => array('Organization Admin Perm'),
    'type' => MENU_CALLBACK
    );

  $items['administration/people/organization/export'] = array(
    'title' => 'Organization Search Results CSV Export',
    'page callback' => 'fetchOrganizationsAll',
    'page arguments' => array('CSV'),
    'access callback' => 'user_access',
    'access arguments' => array('Organization Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_organization.inc',
    );
    
  $items['administration/people/organization/print'] = array(
    'title' => 'Organization Search Results Print to PDF',
    'page callback' => 'fetchOrganizationsAll',
    'page arguments' => array('PDF'),
    'access callback' => 'user_access',
    'access arguments' => array('Organization Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_organization.inc',
    );
    
 $items['ajax/administration/people/organization/activate-and-deactivate/%'] = array (
    'title' => 'Activate Or Deactivate organization',
    'page callback' => 'activateOrDeactivateOrg',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
    'access arguments' => array('Organization Admin Perm'),
    'file' => 'exp_sp_administration_organization.inc'
    );
    
  $items['administration/people/organization/organization-autocomplete'] = array (
    'title' => 'Parent Organization Autcomplete URL',
    'page callback' => 'getOrganizationAutoComplete',
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'access arguments' => array('Organization Admin Perm'),
  );
  
  $items['administration/people/organization/orguserslist/%'] = array(
  	'title' => 'Get Organization Users List',
  	'page callback' => 'getOrgUsersListForGrid',
  	'page arguments' => array(4,5),
  	'access callback' => 'user_access',
  	'access arguments' => array('Organization Admin Perm'),
  	'type' => MENU_CALLBACK,
  	'file' => 'exp_sp_administration_organization.inc',
  	'file path' => drupal_get_path('module', 'exp_sp_administration_organization'),
  );
  
  $items['administration/people/organization/username-autocomplete/%'] = array( 
	'title' => 'Search by Manager username autocomplete',
	'page callback' => 'getUsernameAutoComplete',
	'access callback' => 'user_access',
	'access arguments' => array('Organization Admin Perm'),
	'type' => MENU_CALLBACK,
  );
    
  $items['administration/people/organization/get-org-users/%'] = array(
    'title' => 'Get enrolled class/tp list for user',
    'page callback' => 'getOrgUsersListForGrid',
    'page arguments' => array(4,5),
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_organization.inc',
    'file path' => drupal_get_path('module', 'exp_sp_administration_organization'),
  );
    
  $items['administration/people/organization/expoertorgusers/%'] = array( 
   	'title' => 'Search by Manager username autocomplete',
    'page callback' => 'getOrgUsersExportCSV',
    'page arguments' => array(4,5),
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_organization.inc',
    'file path' => drupal_get_path('module', 'exp_sp_administration_organization'),
  );
  $items['administration/view-org/%ctools_js/addedit/%'] = array(
  		'title' => 'View Class',
  		'page callback' => 'exp_sp_administration_vieworg_addedit_form',
  		'page arguments' => array(3,4),
  		'access callback' => 'user_access',
  		'access arguments' => array('Organization Admin Perm'),
  		'type' => MENU_CALLBACK,
  		'file' => 'exp_sp_administration_organization.inc'
  );

  expDebug::dPrint(' $items = ' . print_r($items, true) , 4);
	return $items;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_organization_menu', $ex);
		expertusErrorThrow($ex);
	}
}


function exp_sp_organization_display_addedit_form($js = NULL, $orgId) {
  try {
	 // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
   $organization_style = array(
    'ctools-admin-organization-addedit-style' => array(
      'modalSize' => array(
        'width' => 602,
        'minHeight' => 300,
       ),
    )
   		
  );

  drupal_add_js($organization_style, 'setting');
  
  if ($js) {
    // Prepare list of forms to be displayed in the modal
    $formIdList = array(
                        array('id' => 'exp_sp_administration_organization_addedit_form', 'title' => t('Organization'))
                       );
    
    // Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
    $argsList = array();
    if (!empty($orgId)) {
      $argsList[] = $orgId;
    }
    exp_ctools_modal_multi_ajaxonly_forms_display($formIdList, $argsList);
  }
  else {
    throw new Exception('exp_sp_administration_organization.module: exp_sp_organization_display_addedit_form() : nojs');
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_organization_display_addedit_form', $ex);
  	expertusErrorThrow($ex);
  }
}


/**
 * exp_sp_administration_organization_addedit_form() - Build the addedit form.
 */
function exp_sp_administration_organization_addedit_form($form, &$form_state, $renderMode, $arg) {
	try {
  expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
  expDebug::dPrint(' $form_state = ' . print_r($form_state, true) , 5);
  expDebug::dPrint(' $renderMode = ' . print_r($renderMode, true) , 4);
  expDebug::dPrint(' $arg = ' . print_r($arg, true) , 4);
  
  include_once('exp_sp_administration_organization.inc');
  
  $header_optional = array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY);
  $css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access.js', $js_module_optional);
  
  
  //drupal_add_js(drupal_get_path('module', 'exp_sp_administration_organization') .'/exp_sp_administration_organization.js', $js_module_optional);
    global $theme_key;
  	if($theme_key == 'expertusoneV2') {
  		//NEWUI THEME STYLE SHEET
  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', $css_theme_optional);
  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access_v2.css', $css_theme_optional);
  		
  	} else {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access.css', $css_theme_optional);
  	}
  //drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);

  // Alternate way to get the org id for the edit operation
  ///$orgId = $form_state['build_info']['args'][0];
  expDebug::dPrint(' $orgId = ' . print_r($orgId, true) , 4);
  
  $orgDetails = array();
  if (!empty($arg)) { // An edit operation. Is not form rebuild after save, in which case we
                                                        // can fetch values from $form_state.
    // Fetch organization details to be displayed in the form
    $orgDetails = getOrganizationDetails($arg, array('id', 'name', 'description', 'parent_org_id', 'type', 'status',
                                                           'contact_name', 'cost_center'));
    //$orgDetails['state'] = getStateName($orgDetails['state'], $orgDetails['country']);
    expDebug::dPrint(' $orgDetails = ' . print_r($orgDetails, true) , 4);
  }
  
   // Create a new add/edit form
  $form = newAddEditFormWithCancelAndSave('organization-addedit-form');
  
  // Define the form fields
  
  $orgId =  getDefaultOrgAddEditFormFieldValue('id', $form_state, $orgDetails);
  addHiddenValueToAddEditForm($form, 'id', $orgId);
  
  $defaultValue =  getDefaultOrgAddEditFormFieldValue('name', $form_state, $orgDetails);
  addTextFieldToAddEditForm($form, 'name', t('LBL107'), $defaultValue, 1, true);
  
  addTwoColumnRowToAddEditForm($form, 'type_costcenter');

  $defaultValue =  getDefaultOrgAddEditFormFieldValue('type', $form_state, $orgDetails);
  addDropDownToAddEditForm($form, 'type', t('LBL036'), getProfileItemNamesKeyed('cre_org_typ_'), $defaultValue, 2, true);
  
  $defaultValue =  getDefaultOrgAddEditFormFieldValue('cost_center', $form_state, $orgDetails);
  addTextFieldToAddEditForm($form, 'cost_center', t('LBL155'), $defaultValue, 3);
  endAddEditTwoColumnRow($form);

  $defaultValue =  getDefaultOrgAddEditFormFieldValue('description', $form_state, $orgDetails);
  $form['addedit-long-description-container'] = array(
    '#type'   => 'markup',
    '#markup' => '<div class="addedit-long-description-container">',
  );
  $emptyId = '' ;
  if(empty($orgId))
  	$emptyId        = empty($form_state['values']['empty_id']) ? microtime(false) : $form_state['values']['empty_id'];
  
  addHiddenFieldToAddEditForm($form, 'empty_id', $emptyId);
  addHiddenFieldToAddEditForm($form, 'entity_value', 'cre_org');
  addHiddenFieldToAddEditForm($form, 'ckeditor_word_count', '1000');
  addTextFormatFieldToAddEditForm($form, 'description', t('LBL229'), $defaultValue, 'full_html', 4,true);
  $form['addedit-long-description-container1'] = array(
    '#type'   => 'markup',
    '#markup' => '</div>',
  );
  
  addTwoColumnRowToAddEditForm($form, 'parent_contactperson');

  $excludedOrgId = empty($orgId) ? 0 : $orgId;
  $parentOrgName = getDefaultOrgAddEditFormFieldValue('parent', $form_state, $orgDetails);
  $parentOrgId  = getDefaultOrgAddEditFormFieldValue('parent_org_id', $form_state, $orgDetails);
  $addlACDependencies = array('id' => '"parent_org_id"', 'excluded_org_id' => $excludedOrgId);
  // data[0] is id, data[1] is orgname
  $acOptionsList = array('formatItem' => 'function(data){return data[1];}', // orgname displayed in AC dropdown
                         'formatResult' => 'function(data){return data[1];}' //On selecting a name from AC dropdown, orgname is entered in textfield
                   );
  addHiddenFieldToAddEditForm($form, 'parent_org_id', $parentOrgId); // field name is same as id in $addlDependencies
  addACFieldToAddEditFormInitViaBehavior($form, 'parent', 'administration/people/organization/organization-autocomplete',
                                                  t('LBL151'), $parentOrgName, 5,
                                                       array(), $addlACDependencies, $acOptionsList);
  
  $defaultValue =  getDefaultOrgAddEditFormFieldValue('contact', $form_state, $orgDetails);
  addTextFieldToAddEditForm($form, 'contact', t('LBL153'), $defaultValue, 6);
  
  endAddEditTwoColumnRow($form);

 if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/To display the Custom attributes UI
      include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
      renderCustomAttributesInAddEditForm($form, $form_state,'cre_org',$orgId);
      addCustomAttributesBlockToAddEditForm($form, $form_state, $orgId, 'organization', 'org-custom-attributes', 'organization-addedit-form');  
  }else{ //To display custom fields
  addCustomFieldsBlockToAddEditForm($form, $form_state, $orgId, 'organization', 'org-custom-fields', 'organization-addedit-form', 9);
  } //#custom_attribute_0078975 - End Check module status 
  
  
  
  orgAddEditFormWithCancelAndSaveClose($form, 'organization-addedit-form','save-button','cancel-button', $orgDetails,$emptyId);
  
  expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
  return $form;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_organization_addedit_form', $ex);
  	expertusErrorThrow($ex);
  }
}

/*
 * exp_sp_administration_organization_addedit_form_submit() - Save the data entered by the user in the exp_sp_administration_organization_addedit_form form
 */
function exp_sp_administration_organization_addedit_form_submit($form, &$form_state) {
	try {
  if ($form_state['hidden-save-submit']==true) {
    include_once('exp_sp_administration_organization.inc'); 
    $loggedInUserId = getIdOfLoggedInUser();
    // Check whether add or edit 
    if (empty($form_state['values']['id'])) { // Add
      if (!empty($form_state['values']['name'])) {
        $returnArr = addNewOrganization($form, $form_state, $loggedInUserId);
        expDebug::dPrint(' $returnArr = ' . print_r($returnArr, true) , 4);
        $newOrgId = $returnArr[0]->id;
        
        if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/Save Custom Attribute Values
            include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
            saveCustomAttributesInAddEditForm($form, $form_state, $newOrgId, 'cre_org', $loggedInUserId, 'Inserted');
        }else{
        saveCustomFieldsInAddEditForm($form, $form_state, $newOrgId, 'organization', $loggedInUserId);
        } //#custom_attribute_0078975 - End Check module status  
        
        $emptyId = $form_state['values']['empty_id'];
        _updateAccessEntity($newOrgId, "cre_org", $emptyId);
        expertus_set_message(t('LBL272').' '.t('MSG600').'.');
      
        // Henceforth this would be an edit operation. We need to set the new org id in form state build info, so
        // that cancel operation can fetch the new record's details from the database.
        $form_state['build_info']['args'][] = $newOrgId;
        $form_state['storage']['new_entity'] = TRUE; // To indicate to Save ajax callback to build and render additional forms
                                                     // Also to trigger refresh of jqgrid on modal close.
        $form_state['rebuild'] = TRUE;
      }
    }
    else {
      unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
      unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
      if($form_state['org_action_status']=='Suspend' || $form_state['org_action_status'] == 'Activate') {
          activateOrDeactivateOrg($form_state['values']['id'], $form_state['org_action_status'], false);
          expertus_set_message(t('MSG348'));
      }else{
        if(!empty($form_state['values']['name'])){
          updateOrganizationDetails($form, $form_state, $loggedInUserId);
          
          if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/Save Custom Attribute Values
            include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
            saveCustomAttributesInAddEditForm($form, $form_state, $form_state['values']['id'], 'cre_org', $loggedInUserId, 'Updated');
          }else{
          saveCustomFieldsInAddEditForm($form, $form_state, $form_state['values']['id'], 'organization', $loggedInUserId);
          } //#custom_attribute_0078975 - End Check module status 
          
          expertus_set_message(t('LBL272').' '.t('MSG601').'.');
        }
      }
      $form_state['storage']['edited_entity'] = TRUE; // To trigger refresh of jqgrid on modal close.
      $form_state['display_class'] = TRUE;
      $form_state['rebuild'] = TRUE;
    }
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_organization_addedit_form_submit', $ex);
  	expertusErrorThrow($ex);
  }
}

/*
 * exp_sp_administration_organization_addedit_form_validate - validate the data entered by the user in the exp_sp_administration_organization_addedit_form form
 */
function exp_sp_administration_organization_addedit_form_validate($form, &$form_state) {
	try {
  $form_state['org_action_status']='';	
  $form_state['hidden-save-submit'] = false;
  $form_state['esign_show_popup']= false;
  if (!empty($form_state['storage']['new_entity'])) {
    unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
    unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
  }
  if (!empty($form_state['storage']['edited_entity'])) {
  	unset($form_state['storage']['edited_entity']); // Unset the variable to remove it from $form_state
  }
  if ($form_state['values']['op'] == t('LBL123')) { // Close
    $form_state['input'] = array(); // Clear user input - raw
    $form_state['values'] = array(); // Clear user input - security cleared
    $form_state['rebuild'] = TRUE; // Rebuild the form. Submit handler will not be called.
    return;
  }
  include_once('exp_sp_administration_organization.inc');
  if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
    if($form_state['triggering_element']['#name']=='save')
      $triggerValue  = 'save';
    else
      $triggerValue  = 'org-activate-suspend';
  }else{
    $triggerValue  = 'hidden-save';
  }

  if ($form_state['triggering_element']['#name'] == $triggerValue) {
    $form_state['esign_show_popup']= true;
    
    // Check all mandatory fields exist
    addEditCheckMandatoryFields($form, $form_state, array('name', 'type'));
    
    // Validate description
    if (empty($form_state['values']['description']['value']) && $form_state['values']['description']['value']=='') {
    	form_set_error('description', $form['description']['#title'] . t('ERR101'));
    	$form_state['esign_show_popup']= false;
    }
    
    // Validate parent organization
    // Parent organization name pattern should match uniquely with an organization name
    unset($form_state['storage']['acvalues']['parentorg']);
    $parentOrgPattern = $form_state['values']['parent'];
  if (!empty($parentOrgPattern) && !empty($form_state['values']['parent_org_id'])) {
      $orgsList = getMatchingOrgsList($parentOrgPattern, $form_state['values']['parent_org_id'], $form_state['values']['id']);
      $orgCount = count($orgsList);
  
      if ($orgCount <= 0) {
        form_set_error('parent', t('Organization').' '.t('ERR148'));
        $form_state['esign_show_popup']= false;
      }
      else if ($orgCount > 1) {
        form_set_error('parent', t('ERR076'));
        $form_state['esign_show_popup']= false;
      }
      else {
        // Save the full location name and id in $form_state['storage']['acvalues']['org']
        $form_state['storage']['acvalues']['parentorg']['id'] = $orgsList[0]->id;
        $form_state['storage']['acvalues']['parentorg']['name'] = $orgsList[0]->name;
      }
    }elseif (!empty($parentOrgPattern) && empty($form_state['values']['parent_org_id'])){
    	form_set_error('parent', t('ERR171').' '.t('Organization'));
        $form_state['esign_show_popup']= false;
    }
    if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/Validate Custom Attributes
        include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
        validateCustomAttributesInAddEditForm($form, $form_state,'cre_org');
    }else{ // Validate the custom fields
         validateCustomFieldsInAddEditForm($form, $form_state);
    } //#custom_attribute_0078975 - End Check module status

    
    
    expDebug::dPrint(' $form_state[storage] = ' . print_r($form_state['storage'], true) , 5);
  }
  if ($form_state['triggering_element']['#name'] == 'hidden-save' || $form_state['triggering_element']['#name']=='org-status-upd-hidden-save') {
    $form_state['org_action_status'] = $form_state['triggering_element']['#ajax']['orgActionStatus'];
    $form_state['hidden-save-submit']=true;
    $form_state['esign_show_popup']= false;
    return;
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_organization_addedit_form_validate', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_administration_organization_permission() {
	try {
    return array(    
    'Organization Admin Perm' => array(
      'title' => t('Organization Admin Perm')
    )
  );
    }catch (Exception $ex) {
    	watchdog_exception('exp_sp_administration_organization_permission', $ex);
    	expertusErrorThrow($ex);
    }
} 

?>