<?php 

class Addtocart extends ExpertusWebTestCase {
    /** Authenticated but unprivileged user. */
    protected $customer_user;
    protected $customer_drupal_user;

	
	public static function getInfo() {
    return array(
      'name' => 'User Add to Cart',
      'description' => 'User Add to Cart testing',
      'group' => 'Commerce test case for Learner side',
    );
  }
  
 protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}
  
public function testAddtoCart() {

	$this->getCheckCommerceEnable();
    setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */   
    // Test the empty cart text.
    $this->drupalGet('cart');
    $this->assertText('Your shopping cart is empty. Go to the CATALOG page to purchase training.');
   	$this->setHttpReferer('learning/catalog-search');
	$this->drupalGet('learning/catalog-search');
	sleep(10);
	debug($this->customer_user);
	$priceclass_details = $this->getPricedClass($this->customer_user);
	debug($priceclass_details);
	if(empty($priceclass_details->class_id)){
		$this->fail(t('There is no priced class is available.'));
	}else{
		$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
		debug($node_id);
		$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
		// Log in and check the item is still in the cart.
	    //$this->drupalLogin($this->customer);
	    $this->drupalGet('cart');
	 
	    $this->assertFieldByName('items[0][qty]',1,t('The product quantity is 1.'));
	   // $this->assertText('Your shopping cart is empty. Go to the CATALOG page to purchase training.');
	    $this->setHttpReferer('learning/catalog-search');
	    // Test the remove item button.
	    $this->drupalPost(
	    		'cart',
	    		$edit,
	    		''
	    );
	    $this->assertText('Your shopping cart is empty. Go to the CATALOG page to purchase training.');
	}
    $this->drupalLogout();
}

private function getCheckCommerceEnable(){
  		$this->setHttpReferer('learning/catalog-search');
		$out = $this->drupalGet('learning/catalog-search');
		$this->assertRaw('<a href="/?q=cart">','Commerce cart icon Enabeled', 'exp_sp_cart');
		$webError = "Website encountered an unexpected error";
  		$this->assertNoText(t($webError),'Web errors not found','exp_sp_cart');
  }
 
  
}
class ContinueShop extends ExpertusWebTestCase {
	 /** Authenticated but unprivileged user. */
    protected $customer_user;
    protected $customer_drupal_user;
	
	public static function getInfo() {
		return array(
				'name' => 'User Continue Shopping',
				'description' => 'User Continue Shopping testing',
				'group' => 'Commerce test case for Learner side',
		);
	}

 protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testContinueShopping() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			debug($priceclass_details);
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
		    $this->drupalGet('cart');	 
		    $this->assertFieldByName(
		      'items[0][qty]',
		      1,
		      t('The product quantity is 1.')
		    );
		    $this->assertFieldById('edit-continue-shopping', t('Continue shopping'), t('Continue shopping button appears on the page.'));
		    // Test continue shopping button that sends users to a catalog page.
		    $this->drupalGet('learning/catalog-search');
		    sleep(10);
		    $this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		}
	}

}

class ChangeCurrency extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'Change Currency',
				'description' => 'User Change the Currency',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testChangeCurrency() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			debug($priceclass_details);
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$default_currency = variable_get('default_profile_currency');
			debug($_SESSION['user_preferred_currency_code']);
			$result = db_query('SELECT attr1,attr2 FROM {slt_profile_list_items} WHERE code like "cre_sys_crn_%" and attr3 = :attr3 and attr4 = :attr4 and attr1 != :default_currency ORDER BY rand() LIMIT 1', array('attr3' => 'Y','attr4'=>'Y','default_currency'=>$_SESSION['user_preferred_currency_code']))->fetchAll();
			$currrency_code = $result[0]->attr1;
			$currency_sym = $result[0]->attr2;
			debug($currrency_code);
			debug($currency_sym);
			$convertion_rate = db_query('SELECT rate FROM {slt_currency_conversion_details} WHERE base_type = :base_type and convert_type = :convert_type ORDER BY rand() LIMIT 1', array('base_type' => $_SESSION['user_preferred_currency_code'],'convert_type'=>$currrency_code))->fetchField();
			debug($convertion_rate);
			if($_SESSION['user_preferred_currency_code']!=$currrency_code && (!empty($currrency_code) && $currrency_code!=null)){
				$price = ($convertion_rate*$priceclass_details->price);
				$new_price = number_format($price,2,".",".");
				debug($new_price);
				$new_price_with_detail = $currency_sym.'&nbsp;'.$new_price.'&nbsp;&nbsp;'.$currrency_code;
				// Test continue shopping button that sends users to a catalog page.
				$this->drupalGet('ajax/currency_dropdown/update/'.$currrency_code);
				sleep(10);
				$this->drupalGet('cart');
				$checking_var = '<td class="price"><span class="uc-price currency-override-bold">'.$new_price_with_detail.'</span></td>';
				debug($checking_var);
				$this->assertRaw($checking_var,'Currency changed from '.$_SESSION['user_preferred_currency_code'].' to '.$currrency_code);
			}else{
				$this->fail('Currency Not changed');
			}
			
		}
	}

}

class ContinueShopAndAddtocart extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'User Continue Shopping And AddtoCart',
				'description' => 'User Continue Shopping  And AddtoCart testing',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testContinueShopping() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user,$this->customer_drupal_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->assertFieldById('edit-continue-shopping', t('Continue shopping'), t('Continue shopping button appears on the page.'));
			// Test continue shopping button that sends users to a catalog page.
			$this->drupalGet('learning/catalog-search');
			sleep(10);
			$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
			
			$priceclass_details = $this->getPricedClass($this->customer_user,$this->customer_drupal_user);
			if(empty($priceclass_details->class_id)){
				$this->fail(t('There is no priced class is available.'));
			}else{
				debug($priceclass_details);
				$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
				$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
				$this->drupalGet('cart');
				$this->assertFieldByName(
						'items[1][qty]',
						1,
						t('The product quantity is 2.')
				);
			}
		}
	}

}
class Removetocart extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'User Remove the added item',
				'description' => 'User Remove the added item',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testRemovetocart() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user,$this->customer_drupal_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->assertFieldById('edit-items-0-remove', '', t('Remove Item button appears on the page.'));
			$this->drupalPost('cart',array(),'');
			$this->assertText($priceclass_details->title.' removed from your shopping cart.');
		}
	}

}

class TaxAmount extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'Calculate the tax for added item',
				'description' => 'Calculate the tax for added item',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testTaxAmount() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user,$this->customer_drupal_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->gettax($priceclass_details->class_id,$priceclass_details->course_id,$priceclass_details->price);
		}		
	}
	public function gettax($class_id,$course_id,$price){

		$this->drupalPost(null, array(), 'Continue');
		sleep(10);
		$edit = array();
		$this->assertRaw('<div class="cart_head">Billing details</div>', t('Viewed cart page: Billing pane has been displayed.'));
		$address = $this->getExistBillingAddress($this->customer_drupal_user);
		debug($address);
		if(count($address)>0){
			$edit += array(
					'panes[billing][select_address]' => '-1',
					'panes[billing][billing_first_name]' => $address[0]['first_name'],
					'panes[billing][billing_last_name]' => $address[0]['last_name'],
					'panes[billing][billing_street1]' => $address[0]['street1'],
					'panes[billing][billing_street2]' => $address[0]['street2'],
					'panes[billing][billing_city]' => $address[0]['city'],
					'panes[billing][billing_zone]' => $address[0]['zone'],
					'panes[billing][billing_postal_code]' => $address[0]['postal_code'],
			);
		}else{
			$zone_id = db_query('SELECT zone_id FROM {uc_zones} WHERE zone_country_id = :country ORDER BY rand() LIMIT 1', array('country' => variable_get('uc_countries', 840)))->fetchField();
			debug($zone_id);
			$edit += array(
		
					'panes[billing][billing_first_name]' => $this->randomName(10),
					'panes[billing][billing_last_name]' => $this->randomName(10),
					'panes[billing][billing_street1]' => $this->randomName(10),
					'panes[billing][billing_street2]' => $this->randomName(10),
					'panes[billing][billing_city]' => 'mountain view',
					'panes[billing][billing_zone]' => 12,
					'panes[billing][billing_postal_code]' => '12345',
			);
		}
		// Build the panes.
		$this->setHttpReferer('cart/checkout');
		$this->drupalPost('cart/checkout', $edit, 'Continue');
		$this->assertRaw('<div class="cart_head">Payment Method</div>', t('Viewed Payment page: Payment pane has been displayed.'));
		sleep(5);
		$order_id = db_query("SELECT order_id FROM {uc_orders} WHERE uid =:uid and order_status =:inc order by order_id desc limit 0,1", array(':uid' => $this->customer_drupal_user,':inc'=>'in_checkout'))->fetchField();
		debug($order_id);
		$tax_amount = db_query("SELECT amount FROM {uc_order_line_items} WHERE order_id = :orderId", array(':orderId' => $order_id))->fetchField();
		debug($tax_amount);
		$tax_amount = number_format((float)$tax_amount, 2, '.', '');
		debug($tax_amount);
		$total = $price+$tax_amount;
		$total = number_format((float)$total, 2, '.', '');
		debug($total);
		$this->pass(t('Tax Amount = %tax has been created', array('%tax' => $tax_amount)));
		$this->pass(t('Total Amount = %total has been created', array('%total' => $total)));
		
		
	}
}
class percentageDiscountAmount extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'Calculate the Percentage Discount',
				'description' => 'Calculate the Percentage Discount',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testPercentageDiscontAmount() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user,$this->customer_drupal_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->applyDiscount($priceclass_details->class_id,$priceclass_details->course_id,$priceclass_details->price,$node_id);
		}
	}
	public function applyDiscount($class_id,$course_id,$price,$node_id){
		$this->drupalPost(null, array(), 'Continue');
		sleep(10);
		$edit_empty = array();
		$this->assertFieldById('edit-panes-uc-discounts-uc-discounts-codes', '',t('Viewed cart page: Discount box has been displayed.'));
		$discount_code = db_query("SELECT code FROM {uc_discounts} as ucd LEFT JOIN {uc_discounts_codes} as ucdc ON ucdc.discount_id = ucd.discount_id WHERE is_active =:is_active and discount_type =:type and qualifying_amount <=:class_price order by ucd.discount_id desc limit 0,1", array(':is_active' => 1,':type'=>2,':class_price'=>$price))->fetchField();
		debug($discount_code);
		$edit = array();
		// Save form
		$param = array(
				'uc-discounts-codes' => $discount_code,
		);
		$post_field = array('submit'=>$param);
		$this->setHttpReferer('cart/checkout');
		$out = $this->drupalPostAJAX(null,$edit,array(),'?q=cart/checkout/uc_discounts/calculate',array(),array(),'',$post_field);
		if(isset($out['errors'][0]))
				$this->fail($out['errors'][0]);
		else{
			$discount = db_query("SELECT discount FROM {uc_cart_products} WHERE cart_id =:uid and nid =:nid order by cart_item_id desc limit 0,1", array(':uid' => $this->customer_drupal_user,':nid'=>$node_id))->fetchField();
			debug($discount);
			$discount = number_format((float)$discount, 2, '.', '');
			debug($discount);
			$total = $price-$discount;
			$total = number_format((float)$total, 2, '.', '');
			debug($total);
			$price = number_format((float)$price, 2, '.', '');
			$this->pass(t('Before Discount total amount = %price has been created', array('%price' => $price)));
			$this->pass(t('Discount Amount = %discount has been Applied', array('%discount' => $discount)));
			$this->pass(t('After Discount total amount = %total has been created', array('%total' => $total)));
		}
	}
}
class percentageDiscountInvalid extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'Check the Invalid Percentage Discount',
				'description' => 'Check the Invalid Percentage Discount',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testInvalidDiscontAmount() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user,$this->customer_drupal_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->applyDiscount($priceclass_details->class_id,$priceclass_details->course_id,$priceclass_details->price,$node_id);
		}
	}
	public function applyDiscount($class_id,$course_id,$price,$node_id){
		$this->drupalPost(null, array(), 'Continue');
		sleep(10);
		$edit_empty = array();
		$this->assertFieldById('edit-panes-uc-discounts-uc-discounts-codes', '',t('Viewed cart page: Discount box has been displayed.'));
		$discount_code = db_query("SELECT code FROM {uc_discounts} as ucd LEFT JOIN {uc_discounts_codes} as ucdc ON ucdc.discount_id = ucd.discount_id WHERE is_active =:is_active and discount_type =:type and qualifying_amount >:class_price order by ucd.discount_id desc limit 0,1", array(':is_active' => 1,':type'=>2,':class_price'=>$price))->fetchField();
		debug($discount_code);
		$edit = array();
		// Save form
		$param = array(
				'uc-discounts-codes' => $discount_code,
		);
		$post_field = array('submit'=>$param);
		$this->setHttpReferer('cart/checkout');
		$out = $this->drupalPostAJAX(null,$edit,array(),'?q=cart/checkout/uc_discounts/calculate',array(),array(),'',$post_field);
		//debug($out);
		$this->pass(t('Total amount = %price has been created', array('%price' => $price)));
		if(isset($out['errors'][0]))
				$this->fail($out['errors'][0]);
	}
}
class fixedDiscountAmount extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'Calculate the Fixed amount Discount',
				'description' => 'Calculate the Fixed amount Discount',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testfixedPercentageDiscontAmount() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user,$this->customer_drupal_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->applyDiscount($priceclass_details->class_id,$priceclass_details->course_id,$priceclass_details->price,$node_id);
		}
	}
	public function applyDiscount($class_id,$course_id,$price,$node_id){
		$this->drupalPost(null, array(), 'Continue');
		sleep(10);
		$edit_empty = array();
		$this->assertFieldById('edit-panes-uc-discounts-uc-discounts-codes', '',t('Viewed cart page: Discount box has been displayed.'));
		$discount_code = db_query("SELECT code FROM {uc_discounts} as ucd LEFT JOIN {uc_discounts_codes} as ucdc ON ucdc.discount_id = ucd.discount_id WHERE is_active =:is_active and discount_type =:type and qualifying_amount <=:class_price and ucd.discount_amount <=:discount_price order by ucd.discount_id desc limit 0,1", array(':is_active' => 1,':type'=>3,':class_price'=>$price,':discount_price'=>$price))->fetchField();
		debug($discount_code);
		if(empty($discount_code)){
			$this->pass(t('Discount amount cannot be greater than the total order value.').' OR Discount Code is not set.');
		}else{
			$edit = array();
			// Save form
			$param = array(
					'uc-discounts-codes' => $discount_code,
			);
			$post_field = array('submit'=>$param);
			$this->setHttpReferer('cart/checkout');
			$out = $this->drupalPostAJAX(null,$edit,array(),'?q=cart/checkout/uc_discounts/calculate',array(),array(),'',$post_field);
			if(isset($out['errors'][0]))
				$this->fail($out['errors'][0]);
			else{
				$discount = db_query("SELECT discount FROM {uc_cart_products} WHERE cart_id =:uid and nid =:nid order by cart_item_id desc limit 0,1", array(':uid' => $this->customer_drupal_user,':nid'=>$node_id))->fetchField();
				debug($discount);
				$discount = number_format((float)$discount, 2, '.', '');
				debug($discount);
				$total = $price-$discount;
				$total = number_format((float)$total, 2, '.', '');
				debug($total);
				$price = number_format((float)$price, 2, '.', '');
				$this->pass(t('Before Discount total amount = %price has been created', array('%price' => $price)));
				$this->pass(t('Discount Amount = %discount has been Applied', array('%discount' => $discount)));
				$this->pass(t('After Discount total amount = %total has been created', array('%total' => $total)));
			}
		}
	}
}
class fixedDiscountInvalid extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'Check the Invalid Fixed Discount',
				'description' => 'Check the Invalid Fixed Discount',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testfixedInvalidDiscont() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user,$this->customer_drupal_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->applyDiscount($priceclass_details->class_id,$priceclass_details->course_id,$priceclass_details->price,$node_id);
		}
	}
	public function applyDiscount($class_id,$course_id,$price,$node_id){
		$this->drupalPost(null, array(), 'Continue');
		sleep(10);
		$edit_empty = array();
		$this->assertFieldById('edit-panes-uc-discounts-uc-discounts-codes', '',t('Viewed cart page: Discount box has been displayed.'));
		$discount_code = db_query("SELECT code FROM {uc_discounts} as ucd LEFT JOIN {uc_discounts_codes} as ucdc ON ucdc.discount_id = ucd.discount_id WHERE is_active =:is_active and discount_type =:type and qualifying_amount >:class_price and ucd.discount_amount >:discount_price order by ucd.discount_id desc limit 0,1", array(':is_active' => 1,':type'=>3,':class_price'=>$price,':discount_price'=>$price))->fetchField();
		debug($discount_code);
		if(empty($discount_code)){
			$this->fail(t('Discount amount cannot be greater than the total order value.').' OR Discount Code is not set.');
		}else{
			$edit = array();
			// Save form
			$param = array(
					'uc-discounts-codes' => $discount_code,
			);
			$post_field = array('submit'=>$param);
			$this->setHttpReferer('cart/checkout');
			$out = $this->drupalPostAJAX(null,$edit,array(),'?q=cart/checkout/uc_discounts/calculate',array(),array(),'',$post_field);
			$this->pass(t('Total amount = %price has been created', array('%price' => $price)));
			if(isset($out['errors'][0]))
				$this->fail($out['errors'][0]);
		}
	}
}
class fixedPercentageDiscountAmount extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'Applay Both Fixed and Percentage Discount',
				'description' => 'Applay Both Fixed and Percentage Discount',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testFixedAndPercentageDiscontAmount() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user,$this->customer_drupal_user,1);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->applyDiscount($priceclass_details->class_id,$priceclass_details->course_id,$priceclass_details->price,$node_id);
		}
	}
	public function applyDiscount($class_id,$course_id,$price,$node_id){
		$this->drupalPost(null, array(), 'Continue');
		sleep(10);
		$edit_empty = array();
		$this->assertFieldById('edit-panes-uc-discounts-uc-discounts-codes', '',t('Viewed cart page: Discount box has been displayed.'));
		$fixed_discount_code = db_query("SELECT code FROM {uc_discounts} as ucd LEFT JOIN {uc_discounts_codes} as ucdc ON ucdc.discount_id = ucd.discount_id WHERE is_active =:is_active and discount_type =:type and qualifying_amount <=:class_price order by ucd.discount_id desc limit 0,1", array(':is_active' => 1,':type'=>2,':class_price'=>$price))->fetchField();
		$percentage_discount_code = db_query("SELECT code FROM {uc_discounts} as ucd LEFT JOIN {uc_discounts_codes} as ucdc ON ucdc.discount_id = ucd.discount_id WHERE is_active =:is_active and discount_type =:type and qualifying_amount <=:class_price and ucd.discount_amount <=:discount_price order by ucd.discount_id desc limit 0,1", array(':is_active' => 1,':type'=>3,':class_price'=>$price,':discount_price'=>$price))->fetchField();
		debug($fixed_discount_code);
		debug($percentage_discount_code);
		$totla_dis_ammount = $fixed_discount_code +$percentage_discount_code;
		if(empty($fixed_discount_code) && empty($percentage_discount_code)){
			$this->pass(t('Discount amount cannot be greater than the total order value.').' OR Discount Code is not set.');
		}
		else{
			$edit = array();
			$discount_code = "$fixed_discount_code\n$percentage_discount_code";
			// Save form
			$param = array(
					'uc-discounts-codes' => $discount_code,
			);
			$post_field = array('submit'=>$param);
			$this->setHttpReferer('cart/checkout');
			$out = $this->drupalPostAJAX(null,$edit,array(),'?q=cart/checkout/uc_discounts/calculate',array(),array(),'',$post_field);
			debug($out);
			if(isset($out['errors'][0]))
				$this->fail($out['errors'][0]);
			else {
				$discount = db_query("SELECT discount FROM {uc_cart_products} WHERE cart_id =:uid and nid =:nid order by cart_item_id desc limit 0,1", array(':uid' => $this->customer_drupal_user,':nid'=>$node_id))->fetchField();
				debug($discount);
				$discount = number_format((float)$discount, 2, '.', '');
				debug($discount);
				$total = $price-$discount;
				$total = number_format((float)$total, 2, '.', '');
				debug($total);
				$price = number_format((float)$price, 2, '.', '');
				$this->pass(t('Before Discount total amount = %price has been created', array('%price' => $price)));
				$this->pass(t('Discount Amount = %discount has been Applied', array('%discount' => $discount)));
				$this->pass(t('After Discount total amount = %total has been created', array('%total' => $total)));
			}
		}
	}
}
class cartCheckOutCheck extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
    protected $customer_user;
    protected $customer_drupal_user;
	
	public static function getInfo() {
		return array(
				'name' => 'User Checkout Shopping Cart (Use Check)',
				'description' => 'User Checkout Shopping Cart (Use Check)',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		debug($user_details->uid);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testCheckOutShopping() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		debug($this->customer_user);
		
		$priceclass_details = $this->getPricedClass($this->customer_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
		    $this->drupalGet('cart');	 
		    $this->assertFieldByName(
		      'items[0][qty]',
		      1,
		      t('The product quantity is 1.')
		    );
		    $this->assertFieldById('edit-checkout', t('Continue'), t('Check out first step shopping button appears on the page.'));
		    $this->checkout($priceclass_details->class_id,$priceclass_details->course_id);
		}
	}
	
	
	
	/**
   * Executes the checkout process.
   */
  public function checkout($class_id,$course_id,$edit = array()) {
    $this->drupalPost(null, array(), 'Continue');
    sleep(10);
    
    $this->assertRaw('<div class="cart_head">Billing details</div>', t('Viewed cart page: Billing pane has been displayed.'));
	$address = $this->getExistBillingAddress($this->customer_drupal_user);
	debug($address);
	if(count($address)>0){
		    $edit += array(
		   	  'panes[billing][select_address]' => '-1',
		      'panes[billing][billing_first_name]' => $address[0]['first_name'],
		      'panes[billing][billing_last_name]' => $address[0]['last_name'],
		      'panes[billing][billing_street1]' => $address[0]['street1'],
		      'panes[billing][billing_street2]' => $address[0]['street2'],
		      'panes[billing][billing_city]' => $address[0]['city'],
		      'panes[billing][billing_zone]' => $address[0]['zone'],
		      'panes[billing][billing_postal_code]' => $address[0]['postal_code'],
		    );
	}else{
		$zone_id = db_query('SELECT zone_id FROM {uc_zones} WHERE zone_country_id = :country ORDER BY rand() LIMIT 1', array('country' => variable_get('uc_countries', 840)))->fetchField();
		debug($zone_id);
		$edit += array(
		
				'panes[billing][billing_first_name]' => $this->randomName(10),
				'panes[billing][billing_last_name]' => $this->randomName(10),
				'panes[billing][billing_street1]' => $this->randomName(10),
				'panes[billing][billing_street2]' => $this->randomName(10),
				'panes[billing][billing_city]' => 'mountain view',
				'panes[billing][billing_zone]' => 12,
				'panes[billing][billing_postal_code]' => '12345',
		);
	}
    // Build the panes.   
    

    // Submit the checkout page.
    $this->drupalPost('cart/checkout', $edit, 'Continue');
    $this->assertRaw('<div class="cart_head">Payment Method</div>', t('Viewed Payment page: Payment pane has been displayed.'));
    //$this->assertRaw(t('Your order is almost complete.'));
    $pay_arr = array('panes[payment][payment_method]'=>'check',
    				 'panes[comments][comments]'=>'test by testing',
    				 'panes[uc_termsofservice_agreement_checkout][tos_agree_terms][agreed]'=>'agreed'
    				);
    // Complete the review page.
    $this->drupalPost('cart/checkout/paymethod',$pay_arr, 'Continue');
    
    $this->assertRaw('<div class="d-cart-review-label">Billing Details</div>', t('Viewed priveiew page: Payment Details has been displayed.'));
    
    // Complete the Order page.
    $this->drupalPost('cart/checkout/review',array(), 'Submit');  
    
    
    
    $order_id = db_query("SELECT order_id FROM {uc_orders} WHERE billing_first_name = :name and order_status =:pen OR order_status =:com", array(':name' => $edit['panes[billing][billing_first_name]'],':pen'=>'pending',':com'=>'completed'))->fetchField();
    $enr_id = db_query("SELECT id FROM {slt_enrollment} WHERE user_id= :uid and class_id = :clid and reg_status = :ppm OR reg_status = :cnf", array(':uid' => $this->customer_user,':clid'=>$class_id,':ppm'=>'lrn_crs_reg_ppm',':cnf'=>'lrn_crs_reg_cnf'))->fetchField();
    debug($order_id);
    debug($enr_id);
    if ($order_id && $enr_id) {
      $this->pass(
        t('Order %order_id has been created', array('%order_id' => $order_id))
      );
    }
    else {
      $this->fail(t('No order was created.'));
    }
  }

}
class cartCheckOutInvoice extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;
	public static function getInfo() {
		return array(
				'name' => 'User Checkout Shopping Cart (Use Invoice)',
				'description' => 'User Checkout Shopping Cart (Use Invoice)',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		debug($user_details->uid);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testCheckOutShopping() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->assertFieldById('edit-checkout', t('Continue'), t('Check out first step shopping button appears on the page.'));
			$this->checkout($priceclass_details->class_id,$priceclass_details->course_id);
		}
	}



	/**
	 * Executes the checkout process.
	 */
	public function checkout($class_id,$course_id,$edit = array()) {
		$this->drupalPost(null, array(), 'Continue');
		sleep(10);

		$this->assertRaw('<div class="cart_head">Billing details</div>', t('Viewed cart page: Billing pane has been displayed.'));
		$address = $this->getExistBillingAddress($this->customer_drupal_user);
		debug($address);
		if(count($address)>0){
			$edit += array(
					'panes[billing][select_address]' => '-1',
					'panes[billing][billing_first_name]' => $address[0]['first_name'],
					'panes[billing][billing_last_name]' => $address[0]['last_name'],
					'panes[billing][billing_street1]' => $address[0]['street1'],
					'panes[billing][billing_street2]' => $address[0]['street2'],
					'panes[billing][billing_city]' => $address[0]['city'],
					'panes[billing][billing_zone]' => $address[0]['zone'],
					'panes[billing][billing_postal_code]' => $address[0]['postal_code'],
			);
		}else{
			$zone_id = db_query('SELECT zone_id FROM {uc_zones} WHERE zone_country_id = :country ORDER BY rand() LIMIT 1', array('country' => variable_get('uc_countries', 840)))->fetchField();
			debug($zone_id);
			$edit += array(

					'panes[billing][billing_first_name]' => $this->randomName(10),
					'panes[billing][billing_last_name]' => $this->randomName(10),
					'panes[billing][billing_street1]' => $this->randomName(10),
					'panes[billing][billing_street2]' => $this->randomName(10),
					'panes[billing][billing_city]' => 'mountain view',
					'panes[billing][billing_zone]' => 12,
					'panes[billing][billing_postal_code]' => '12345',
			);
		}
		// Build the panes.


		// Submit the checkout page.
		$this->drupalPost('cart/checkout', $edit, 'Continue');
		$this->assertRaw('<div class="cart_head">Payment Method</div>', t('Viewed Payment page: Payment pane has been displayed.'));
		//$this->assertRaw(t('Your order is almost complete.'));
		$pay_arr = array('panes[payment][payment_method]'=>'other',
				'panes[comments][comments]'=>'test by testing',
				'panes[uc_termsofservice_agreement_checkout][tos_agree_terms][agreed]'=>'agreed'
		);
		// Complete the review page.
		$this->drupalPost('cart/checkout/paymethod',$pay_arr, 'Continue');

		$this->assertRaw('<div class="d-cart-review-label">Billing Details</div>', t('Viewed priveiew page: Payment Details has been displayed.'));

		// Complete the Order page.
		$this->drupalPost('cart/checkout/review',array(), 'Submit');




		 $order_id = db_query("SELECT order_id FROM {uc_orders} WHERE billing_first_name = :name and order_status =:pen OR order_status =:com", array(':name' => $edit['panes[billing][billing_first_name]'],':pen'=>'pending',':com'=>'completed'))->fetchField();
	    $enr_id = db_query("SELECT id FROM {slt_enrollment} WHERE user_id= :uid and class_id = :clid and reg_status = :ppm OR reg_status = :cnf", array(':uid' => $this->customer_user,':clid'=>$class_id,':ppm'=>'lrn_crs_reg_ppm',':cnf'=>'lrn_crs_reg_cnf'))->fetchField();
	    debug($order_id);
	    debug($enr_id);
		if ($order_id && $enr_id) {
			$this->pass(
					t('Order %order_id has been created', array('%order_id' => $order_id))
			);
		}
		else {
			$this->fail(t('No order was created.'));
		}
	}

}
class cartCheckOutCC extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'User Checkout Shopping Cart (Use Cyber Source)',
				'description' => 'User Checkout Shopping Cart (Use Cyber Source)',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		debug($user_details->uid);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testCheckOutShopping() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->assertFieldById('edit-checkout', t('Continue'), t('Check out first step shopping button appears on the page.'));
			$this->checkout($priceclass_details->class_id,$priceclass_details->course_id);
		}
	}



	/**
	 * Executes the checkout process.
	 */
	public function checkout($class_id,$course_id,$edit = array()) {
		$this->drupalPost(null, array(), 'Continue');
		sleep(10);

		$this->assertRaw('<div class="cart_head">Billing details</div>', t('Viewed cart page: Billing pane has been displayed.'));
		$address = $this->getExistBillingAddress($this->customer_drupal_user);
		debug($address);
		if(count($address)>0){
			$edit += array(
					'panes[billing][select_address]' => '-1',
					'panes[billing][billing_first_name]' => $address[0]['first_name'],
					'panes[billing][billing_last_name]' => $address[0]['last_name'],
					'panes[billing][billing_street1]' => $address[0]['street1'],
					'panes[billing][billing_street2]' => $address[0]['street2'],
					'panes[billing][billing_city]' => $address[0]['city'],
					'panes[billing][billing_zone]' => $address[0]['zone'],
					'panes[billing][billing_postal_code]' => $address[0]['postal_code'],
			);
		}else{
			$zone_id = db_query('SELECT zone_id FROM {uc_zones} WHERE zone_country_id = :country ORDER BY rand() LIMIT 1', array('country' => variable_get('uc_countries', 840)))->fetchField();
			debug($zone_id);
			$edit += array(

					'panes[billing][billing_first_name]' => $this->randomName(10),
					'panes[billing][billing_last_name]' => $this->randomName(10),
					'panes[billing][billing_street1]' => $this->randomName(10),
					'panes[billing][billing_street2]' => $this->randomName(10),
					'panes[billing][billing_city]' => 'mountain view',
					'panes[billing][billing_zone]' => 12,
					'panes[billing][billing_postal_code]' => '12345',
			);
		}
		// Build the panes.


		// Submit the checkout page.
		$this->drupalPost(null, $edit, 'Continue');
		$this->assertRaw('<div class="cart_head">Payment Method</div>', t('Viewed Payment page: Payment pane has been displayed.'));
		//$this->assertRaw(t('Your order is almost complete.'));
		$pay_arr = array('panes[payment][payment_method]'=>'credit',
				'panes[comments][comments]'=>'test by testing credit',
				'panes[payment][details][cc_number]'=>'4111111111111111',
				'panes[payment][details][cc_exp_month]'=>'8',
				'panes[payment][details][cc_exp_year]'=>'2019',
				'panes[payment][details][cc_cvv]'=>'1111',				
				'panes[uc_termsofservice_agreement_checkout][tos_agree_terms][agreed]'=>'agreed'
		);
		// Complete the review page.
		$this->drupalPost(null,$pay_arr, 'Continue');

		$this->assertRaw('<div class="d-cart-review-label">Billing Details</div>', t('Viewed priveiew page: Payment Details has been displayed.'));

		// Complete the Order page.
		$this->drupalPost(null,array(), 'Submit');

		 $order_id = db_query("SELECT order_id FROM {uc_orders} WHERE billing_first_name = :name and order_status =:pen OR order_status =:com", array(':name' => $edit['panes[billing][billing_first_name]'],':pen'=>'pending',':com'=>'completed'))->fetchField();
	    $enr_id = db_query("SELECT id FROM {slt_enrollment} WHERE user_id= :uid and class_id = :clid and reg_status = :ppm OR reg_status = :cnf", array(':uid' => $this->customer_user,':clid'=>$class_id,':ppm'=>'lrn_crs_reg_ppm',':cnf'=>'lrn_crs_reg_cnf'))->fetchField();
	    debug($order_id);
	    debug($enr_id);
		if ($order_id && $enr_id) {
			$this->pass(
					t('Order %order_id has been created', array('%order_id' => $order_id))
			);
		}
		else {
			$this->fail(t('No order was created.'));
		}
	}

}
class cartCheckOutCCWithTaxAmount extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'Calculate the tax for added item and pay via cyber source',
				'description' => 'Calculate the tax for added item and pay via cyber source',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testcartCheckOutCCWithTaxAmount() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user,$this->customer_drupal_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->gettax($priceclass_details->class_id,$priceclass_details->course_id,$priceclass_details->price);
		}
	}
	public function gettax($class_id,$course_id,$price){

		$this->drupalPost(null, array(), 'Continue');
		sleep(10);
		$edit = array();
		$this->assertRaw('<div class="cart_head">Billing details</div>', t('Viewed cart page: Billing pane has been displayed.'));
		$address = $this->getExistBillingAddress($this->customer_drupal_user);
		debug($address);
		if(count($address)>0){
			$edit += array(
					'panes[billing][select_address]' => '-1',
					'panes[billing][billing_first_name]' => $address[0]['first_name'],
					'panes[billing][billing_last_name]' => $address[0]['last_name'],
					'panes[billing][billing_street1]' => $address[0]['street1'],
					'panes[billing][billing_street2]' => $address[0]['street2'],
					'panes[billing][billing_city]' => $address[0]['city'],
					'panes[billing][billing_zone]' => $address[0]['zone'],
					'panes[billing][billing_postal_code]' => $address[0]['postal_code'],
			);
		}else{
			$zone_id = db_query('SELECT zone_id FROM {uc_zones} WHERE zone_country_id = :country ORDER BY rand() LIMIT 1', array('country' => variable_get('uc_countries', 840)))->fetchField();
			debug($zone_id);
			$edit += array(

					'panes[billing][billing_first_name]' => $this->randomName(10),
					'panes[billing][billing_last_name]' => $this->randomName(10),
					'panes[billing][billing_street1]' => $this->randomName(10),
					'panes[billing][billing_street2]' => $this->randomName(10),
					'panes[billing][billing_city]' => 'mountain view',
					'panes[billing][billing_zone]' => 12,
					'panes[billing][billing_postal_code]' => '12345',
			);
		}
		// Build the panes.
		$this->setHttpReferer('cart/checkout');
		$this->drupalPost('cart/checkout', $edit, 'Continue');
		$this->assertRaw('<div class="cart_head">Payment Method</div>', t('Viewed Payment page: Payment pane has been displayed.'));
		sleep(5);
		$order_id = db_query("SELECT order_id FROM {uc_orders} WHERE uid =:uid and order_status =:inc order by order_id desc limit 0,1", array(':uid' => $this->customer_drupal_user,':inc'=>'in_checkout'))->fetchField();
		debug($order_id);
		$tax_amount = db_query("SELECT amount FROM {uc_order_line_items} WHERE order_id = :orderId", array(':orderId' => $order_id))->fetchField();
		debug($tax_amount);
		$tax_amount = number_format((float)$tax_amount, 2, '.', '');
		debug($tax_amount);
		$total = $price+$tax_amount;
		$total = number_format((float)$total, 2, '.', '');
		debug($total);
		$this->pass(t('Tax Amount = %tax has been created', array('%tax' => $tax_amount)));
		$this->pass(t('Total Amount = %total has been created', array('%total' => $total)));
		$this->cartCheckOut();

	}
	public function cartCheckOut(){
		// Submit the checkout page.
		$this->assertRaw('<div class="cart_head">Payment Method</div>', t('Viewed Payment page: Payment pane has been displayed.'));
		//$this->assertRaw(t('Your order is almost complete.'));
		$pay_arr = array('panes[payment][payment_method]'=>'credit',
				'panes[comments][comments]'=>'test by testing credit',
				'panes[payment][details][cc_number]'=>'4111111111111111',
				'panes[payment][details][cc_exp_month]'=>'8',
				'panes[payment][details][cc_exp_year]'=>'2019',
				'panes[payment][details][cc_cvv]'=>'1111',
				'panes[uc_termsofservice_agreement_checkout][tos_agree_terms][agreed]'=>'agreed'
		);
		// Complete the review page.
		$this->drupalPost(null,$pay_arr, 'Continue');

		$this->assertRaw('<div class="d-cart-review-label">Billing Details</div>', t('Viewed priveiew page: Payment Details has been displayed.'));

		// Complete the Order page.
		$this->drupalPost(null,array(), 'Submit');

		$order_id = db_query("SELECT order_id FROM {uc_orders} WHERE billing_first_name = :name and order_status =:pen OR order_status =:com", array(':name' => $edit['panes[billing][billing_first_name]'],':pen'=>'pending',':com'=>'completed'))->fetchField();
		$enr_id = db_query("SELECT id FROM {slt_enrollment} WHERE user_id= :uid and class_id = :clid and reg_status = :ppm OR reg_status = :cnf", array(':uid' => $this->customer_user,':clid'=>$class_id,':ppm'=>'lrn_crs_reg_ppm',':cnf'=>'lrn_crs_reg_cnf'))->fetchField();
		debug($order_id);
		debug($enr_id);
		if ($order_id && $enr_id) {
			$this->pass(
					t('Order %order_id has been created', array('%order_id' => $order_id))
			);
		}
		else {
			$this->fail(t('No order was created.'));
		}
	}
}
class cartCheckOutPo extends ExpertusWebTestCase {
	/** Authenticated but unprivileged user. */
	protected $customer_user;
	protected $customer_drupal_user;

	public static function getInfo() {
		return array(
				'name' => 'User Checkout Shopping Cart (Use PO)',
				'description' => 'User Checkout Shopping Cart (Use PO)',
				'group' => 'Commerce test case for Learner side',
		);
	}

	protected function setUp(){
		parent::setUp();
		$user = new stdClass();
		$user->name = $this->randomName(8);
		$user->pass_raw = 'welcome';
		$user->role_id = 2;
		$user_details = $this->expertusCreateUser($user);
		debug($user_details->uid);
		//$user->name =  'user1';
		//$user->pass_raw = 'welcome';
		$this->customer_drupal_user = $user_details->uid;
		$this->customer_user = $this->getExpUserId($user->name);
		$this->drupalLogin($user);
	}


	public function testCheckOutShopping() {
		setcookie("catalog_searchStr", '&price=%241-%2410000', time()+120);  /* expire in 2 min */
		$this->setHttpReferer('learning/catalog-search');
		$this->drupalGet('learning/catalog-search');
		$this->assertRaw('<h2 class="block-title block-catalog-search-title">CATALOG</h2>', t('CATALOG appears on the page.'));
		$priceclass_details = $this->getPricedClass($this->customer_user);
		debug($priceclass_details);
		if(empty($priceclass_details->class_id)){
			$this->fail(t('There is no priced class is available.'));
		}else{
			$node_id = $this->getNodeIdFromEntity($priceclass_details->class_id,'cre_sys_obt_cls');
			$this->drupalGet("ajax/cart/product/add/".$node_id."/".$priceclass_details->class_id."/".$priceclass_details->course_id."/0");
			$this->drupalGet('cart');
			$this->assertFieldByName(
					'items[0][qty]',
					1,
					t('The product quantity is 1.')
			);
			$this->assertFieldById('edit-checkout', t('Continue'), t('Check out first step shopping button appears on the page.'));
			$this->checkout($priceclass_details->class_id,$priceclass_details->course_id);
		}
	}


	/**
	 * Executes the checkout process.
	 */
	public function checkout($class_id,$course_id,$edit = array()) {
		$this->drupalPost(null, array(), 'Continue');
		sleep(10);

		$this->assertRaw('<div class="cart_head">Billing details</div>', t('Viewed cart page: Billing pane has been displayed.'));
		$address = $this->getExistBillingAddress($this->customer_drupal_user);
		debug($address);
		if(count($address)>0){
			$edit += array(
					'panes[billing][select_address]' => '-1',
					'panes[billing][billing_first_name]' => $address[0]['first_name'],
					'panes[billing][billing_last_name]' => $address[0]['last_name'],
					'panes[billing][billing_street1]' => $address[0]['street1'],
					'panes[billing][billing_street2]' => $address[0]['street2'],
					'panes[billing][billing_city]' => $address[0]['city'],
					'panes[billing][billing_zone]' => $address[0]['zone'],
					'panes[billing][billing_postal_code]' => $address[0]['postal_code'],
			);
		}else{
			$zone_id = db_query('SELECT zone_id FROM {uc_zones} WHERE zone_country_id = :country ORDER BY rand() LIMIT 1', array('country' => variable_get('uc_countries', 840)))->fetchField();
			debug($zone_id);
			$edit += array(

					'panes[billing][billing_first_name]' => $this->randomName(10),
					'panes[billing][billing_last_name]' => $this->randomName(10),
					'panes[billing][billing_street1]' => $this->randomName(10),
					'panes[billing][billing_street2]' => $this->randomName(10),
					'panes[billing][billing_city]' => 'mountain view',
					'panes[billing][billing_zone]' => 12,
					'panes[billing][billing_postal_code]' => '12345',
			);
		}
		// Build the panes.


		// Submit the checkout page.
		$this->drupalPost('cart/checkout', $edit, 'Continue');
		$this->assertRaw('<div class="cart_head">Payment Method</div>', t('Viewed Payment page: Payment pane has been displayed.'));
		//$this->assertRaw(t('Your order is almost complete.'));
		
		$edit_empty= array();
		// Save form
		$param = array(
				'panes[payment][payment_method]'=>'po',
				"form_id"=>"uc_cart_checkout_exp_paymethod_form",
				"_triggering_element_name"=>"panes[payment][payment_method]",
				"_triggering_element_value"=>"po",
		);
		$post_field = array('submit'=>$param,	'wrapper'=>'edit-panes-payment-payment-method');
		$this->setHttpReferer('cart/checkout/paymethod');
		//$this->drupalPostAJAX(null, $post_field, 'panes[payment][payment_method]');
		$out = $this->drupalPostAJAX(null,$edit_empty,null,'?q=system/ajax',array(),array(),'uc-cart-checkout-exp-paymethod-form',$post_field);
		$this->assertResponse(200,'Form Repainted successfully');
		sleep(5);
		$this->assertText('PO number:', 'PO found it!!');
		$webError = "Website encountered an unexpected error";
		$this->assertNoText(t($webError),'Web errors not found','payment-details');
		
		//$this->PoDetails();
		
		
		$pay_arr = array('panes[payment][payment_method]'=>'po',
				'panes[comments][comments]'=>'test by testing',
				'panes[payment][details][po_number]'=>'77979779797',
				'panes[uc_termsofservice_agreement_checkout][tos_agree_terms][agreed]'=>'agreed'
		);
		// Complete the review page.
		$this->drupalPost('cart/checkout/paymethod',$pay_arr, 'Continue');

		$this->assertRaw('<div class="d-cart-review-label">Billing Details</div>', t('Viewed priveiew page: Payment Details has been displayed.'));

		// Complete the Order page.
		$this->drupalPost('cart/checkout/review',array(), 'Submit');

		sleep(10);
		 $order_id = db_query("SELECT order_id FROM {uc_orders} WHERE billing_first_name = :name and order_status =:pen OR order_status =:com", array(':name' => $edit['panes[billing][billing_first_name]'],':pen'=>'pending',':com'=>'completed'))->fetchField();
	    $enr_id = db_query("SELECT id FROM {slt_enrollment} WHERE user_id= :uid and class_id = :clid and reg_status = :ppm OR reg_status = :cnf", array(':uid' => $this->customer_user,':clid'=>$class_id,':ppm'=>'lrn_crs_reg_ppm',':cnf'=>'lrn_crs_reg_cnf'))->fetchField();
	    debug($order_id);
	    debug($enr_id);
		if ($order_id && $enr_id) {
			$this->pass(
					t('Order %order_id has been created', array('%order_id' => $order_id))
			);
		}
		else {
			$this->fail(t('No order was created.'));
		}
	}

}

?>