; This is the Dynamic REST API Configuration File.
;	This file contains sections, one exclusive to each api.
; This file is designed after the php.ini standard, so all changes should conform to that standard.
;	Add a comment before each and every section that you add.
; Comments start with ';', as in php.ini.

;Documentation parameters
[documentation]
last_updated = Tue, 04-Jan-2012 09:08 AM	


;API for Add Organization
[AddOrganizationAPI]
category = AdminAPI
display_name = Add Organization API
description = This API is used to create a organization in the system.
ORM_file = /sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_people/exp_sp_administration_organization/exp_sp_administration_organization.inc
method_name = addNewOrganizationByRest;the name of the function that is to be executed when this api is called.
params.form_state.values.name = Y>Name of the organization>Dynamic_Org_VERSION
params.form_state.values.parent = Y>Parent Organization>Root_Org
params.form_state.values.type = Y>Type of the organization. Possible values for this field will be leveraged from profile lookup master. >cre_org_typ_ext
params.form_state.values.status = Y>Status. Possible values for this field will be leveraged from profile lookup master >cre_org_sts_act
params.form_state.values.add1 = N>Address1>
params.form_state.values.add2 = N>Address2>
params.form_state.values.city = N>City>
params.form_state.values.state = N>State>
params.form_state.values.country = Y>Country>US
params.form_state.values.zip = N>Zip>
params.form_state.values.contact = N>Contact No>
params.form_state.values.phone_no = N>Phone No>
params.form_state.values.email = N>Email address>
params.form_state.values.tax_exempted = N> Tax exempted. Possible values:- Yes, No>
params.userid = Y>User Id>1
response.id= organization id>2
api_owner.name = Sureshkumar V;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = add
testengine.category=add
testengine.apitestsequence = 1
testengine.capture_response_field = Id ; it will used to run the update org 


;API for Update Organization
[UpdateOrganizationAPI]
category = AdminAPI
display_name = Update Organization API
description = This API is used to update the organization details in the system.
ORM_file = /sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_people/exp_sp_administration_organization/exp_sp_administration_organization.inc
method_name = updateOrganizationDetailsByRest;the name of the function that is to be executed when this api is called.
params.form_state.values.id = Y>Id of the organization.>3
params.form_state.values.name = Y>Name of the organization>Dynamic_Org_Updated_VERSION
params.form_state.values.parent = Y>Parent Organization>Root_Org
params.form_state.values.type = Y>Type of the organization. Possible values for this field will be leveraged from profile lookup master. >cre_org_typ_ext
params.form_state.values.status = Y>Status. Possible values for this field will be leveraged from profile lookup master >cre_org_sts_act
params.form_state.values.add1 = N>Address1>
params.form_state.values.add2 = N>Address2>
params.form_state.values.city = N>City>
params.form_state.values.state = N>State>
params.form_state.values.country = Y>Country>US
params.form_state.values.zip = N>Zip>
params.form_state.values.contact = N>Contact No>
params.form_state.values.phone_no = N>Phone No>
params.form_state.values.email = N>Email address>
params.form_state.values.tax_exempted = N> Tax exempted. Possible values:- Yes, No> 
params.userid = N>User Id>1
response.id= organization id>1
api_owner.name = Sureshkumar.V;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 2
testengine.use_prev_response_field = Id ; it will used to run the update org



;API for List the organizations
[ListOrganizationAPI]
category = AdminAPI
display_name = List Organization API
description = This API is used to display the list of organizations which are available in the system.
ORM_file = /sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_people/exp_sp_administration_organization/exp_sp_administration_organization.inc
method_name = fetchOrganizationsAll;the name of the function that is to be executed when this api is called.
params.op = Y > Possible values COUNT or blank > 
params.start = Y >  It is used to retrieve the records from the position what we specified here > 1
params.limit = Y >  Number of records needs to be retrieved. If op param is blank then start and limit should be a mandatory parameters > 1 
params.userid = Y > User Id >1
response.id= organization id >2
response.name= Organization Name >Dynamic_Org_Updated_VERSION
response.number = Organization Number >ORG001
response.type = Organization Type >Internal
response.status = Status of the org >Active
api_owner.name = Sureshkumar.V; the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.apitestsequence = 3
testengine.verify_response_field = Id 



;API for User Creation
[UserCreationAPI]
category = AdminAPI
display_name = User Creation API
description = This API is used to create a user.
ORM_file = /sites/all/dao/UserDAO.php
method_name = createUserAPI;the name of the function that is to be executed when this api is called.
params.insobj.FirstName= Y> User First Name>Firstname_VERSION
params.insobj.MiddleName= N> User Middle Name>
params.insobj.LastName = Y> User Last Name>Lastname_VERSION
params.insobj.UserName = Y> User Name>username_VERSION
params.insobj.Password = Y> User Password>welcome
params.insobj.Email = Y> User Email>username_VERSION@eee.com
params.insobj.PhoneNo = N>User Phone No>
params.insobj.IsManager = N> User Is A Manager. Possible values 0,1 >0
params.insobj.Status = N> User Status. Possible values for this field will be leveraged from profile lookup master. >cre_usr_sts_atv
params.insobj.Address1 = N> User Address1>
params.insobj.Address2 = N> User Address2>
params.insobj.City = N> User City>
params.insobj.State = N> User State>
params.insobj.Country = N> User Country>India
params.insobj.PostalCode = N> User Postal Code>
params.insobj.UserType = N> User Type. Possible values for this field will be leveraged from profile lookup master.>
params.insobj.JobRole = N> User Job Role. Possible values for this field will be leveraged from profile lookup master.>
params.insobj.EmpNo = N> User Employee No>
params.insobj.EmploymentType = N> User Employment Type.Possible values for this field will be leveraged from profile lookup master.>
params.insobj.JobTitle = N> User Job Title. Possible values for this field will be leveraged from profile lookup master.>
params.insobj.HireDate = N> Hire Date. Format:- 2012-02-20 00:00:00> 
params.insobj.TerminationDate = N> Termination Date. Format:- 2012-02-21 00:00:00> 
params.insobj.IsRehire = N> Is Rehire. Possible values Y or N >Y
params.insobj.IsInstructor = N> User Is Instructor. Possible values Y,N >N
params.insobj.ManagerId = N> User Manager Id>
params.insobj.OrganizationId = N> User Organization Id>
params.insobj.DottedManager = N> User Dotted Manager>
params.insobj.DottedOrg = N> User Dotted Organization>
params.insobj.DepartmentId = N> User Department Id>
params.insobj.TimeZone = N> User TimeZone.Possible values for this field will be leveraged from profile lookup master.>
params.insobj.AddInfoNotes = N> Addionational Info>
params.insobj.LocationId = N> Location Id>
params.insobj.LocationName = N> LocationName>
params.insobj.Subscription= N> Mail Subscription>
params.Notification=Y>Possible value "sendnotification","" >sendnotification
params.userid = Y > User Id >1
response.Id= Created User Id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = add
testengine.category= add
testengine.apitestsequence = 4
testengine.capture_response_field = Id ; it will used to run the update org 


;API for User Update
[UserUpdationAPI]
category = AdminAPI
display_name = User Updation API
description = This API is used to update a user.
ORM_file = /sites/all/dao/UserDAO.php
method_name = updateUserAPI;the name of the function that is to be executed when this api is called.
params.insobj.Id= Y> User Id>2
params.insobj.FirstName= Y> User First Name>Firstname_Updated_VERSION
params.insobj.MiddleName= N> User Middle Name>
params.insobj.LastName = Y> User Last Name>Lastname_Updated_VERSION
params.insobj.UserName = Y> User Name>username_VERSION
params.insobj.Password = Y> User Password>welcome
params.insobj.Email = Y> User Email>username_VERSION@eee.com
params.insobj.PhoneNo = N> User Phone No>
params.insobj.IsManager = N> User Is A Manager. Possible values 0 or 1 >0
params.insobj.Status = N> User Status. Possible values for this field will be leveraged from profile lookup master.>cre_usr_sts_atv
params.insobj.Address1 = N> User Address1>
params.insobj.Address2 = N> User Address2>
params.insobj.City = N> User City>
params.insobj.State = N> User State>
params.insobj.Country = N> User Country>
params.insobj.PostalCode = N> User Postal Code>
params.insobj.UserType = N> User Type. Possible values for this field will be leveraged from profile lookup master.>
params.insobj.JobRole = N> User Job Role. Possible values for this field will be leveraged from profile lookup master.>
params.insobj.EmpNo = N> User Employee No>
params.insobj.EmploymentType = N> User Employment Type. Possible values for this field will be leveraged from profile lookup master.>
params.insobj.JobTitle = N> User Job Title.  Possible values for this field will be leveraged from profile lookup master.>
params.insobj.HireDate = N> Hire Date. Format:- 2012-02-20 00:00:00 >
params.insobj.TerminationDate = N> Termination Date. Format:- 2012-02-21 00:00:00>
params.insobj.IsRehire = N> Is Rehire. Possible values Y or N >Y
params.insobj.IsInstructor = N> User Is Instructor>0
params.insobj.ManagerId = N> User Manager Id>
params.insobj.OrganizationId = N> User Organization Id>
params.insobj.DottedManager = N> User Dotted Manager>
params.insobj.DottedOrg = N> User Dotted Organization>
params.insobj.DepartmentId = N> User Department Id>
params.insobj.TimeZone = N> User TimeZone. Possible values for this field will be leveraged from profile lookup master.>
params.insobj.AddInfoNotes = N> Addionational Info>
params.insobj.LocationId = N> Location Id>
params.insobj.LocationName = N> LocationName>
params.insobj.Subscription= N> Mail Subscription>
;params.insobj.AssignedRoles= N> Assigned Roles For User>  ; refer ticket 9699
params.Notification=Y>Possible value "sendnotification","" >sendnotification
params.userid = Y > User Id >1
response.Id= Updated User Id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 5
testengine.use_prev_response_field = Id ; it will used to run the update org


;API for User Search
[UserSearchAPI]
category = AdminAPI
display_name = User Search API
description = This API is used to get the list of users.
ORM_file = /sites/all/dao/UserDAO.php
method_name = getUserAPI;the name of the function that is to be executed when this api is called.
params.userobj.username = Y> User Name>username_VERSION
params.userobj.name = Y> User Full Name>
params.userobj.status = Y> User Status. Possible values for this field will be leveraged from profile lookup master.>cre_usr_sts_atv
params.userobj.emptype = Y> User Employee Type. Possible values for this field will be leveraged from profile lookup master.>
params.userobj.usertype = Y> User Type. Possible values for this field will be leveraged from profile lookup master. >
params.userobj.rehired = Y> User Rehired. Possible value Y,N >
params.userobj.instructor = Y> Is User Instructor? Possible value Y, N>
params.userobj.startdate = Y> Rehired Start Date Format:- 2012-02-20 00:00:00>
params.userobj.enddate = Y> Rehired End Date Format:- 2012-02-20 00:00:00>
params.limit= Y > limit > 1
params.userid = Y > User Id >1
response.Id= User Id>1
response.UserName= User>Admin
response.Name= User Full Name>Administer
response.Email= User Email Id>admin@expertus.com
response.OrgId= User Organization Id>1
response.Status= User Status>Active
response.DottedOrgId= User DottedOrgId>1
response.ManagerId= User Manager Id>Active
response.DottedManagerId= User Dotted ManagerId>1
response.UserType= User Type>Employee
response.EmploymetType= User Employmet Type>
response.JobTitle= User Job Title>Economist
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 6
testengine.verify_response_field = Id 

;API for Create Course
[CreateCourseAPI]
category = AdminAPI
display_name = Create Course API
description = This API is used to create a course.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = insertCatalogAPI;the name of the function that is to be executed when this api is called.
params.insobj.Action= Y> Catalog Create Action>CreateCourse
params.insobj.Title = Y> Course Title>REST_API_Course_Title_VERSION
params.insobj.Code = Y> Course Code>REST_API_Course_Code_VERSION
params.insobj.Description = Y> Course Description>Sample Description
params.insobj.ShortDescription = Y> Course Short Description>Sample Short Description
params.insobj.Status = Y> Course Status. Possible values for this field will be leveraged from profile lookup master >lrn_crs_sts_atv
params.insobj.LanguageId = Y> Language code. Possible values for this field will be leveraged from profile lookup master>cre_sys_lng_eng
params.userid=Y > User Id >1
response.Id= Created Course Id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = add
testengine.category=add
testengine.apitestsequence = 7
testengine.capture_response_field = Id ; it will used to run the update org 


;API for Update Course
[UpdateCourseAPI]
category = AdminAPI
display_name = Update Course API
description = This API is used to update a course.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = updateCatalogAPI;the name of the function that is to be executed when this api is called.
params.insobj.Flag= Y> Catalog Update Action>CourseUpdate
params.insobj.Id= Y> Course Id>
params.insobj.Title = Y> Course Title>REST_API_Course_Title_VERSION
params.insobj.Code = Y> Course Code>REST_API_Course_Code_VERSION
params.insobj.Description = Y> Course Description> This is test description.
params.insobj.ShortDescription = Y> Course Short Description> This is test short description
params.insobj.Status = Y> Course Status. Possible values for this field will be leveraged from profile lookup master. >lrn_crs_sts_atv
params.insobj.LanguageId = Y> Language code. Possible values for this field will be leveraged from profile lookup master.>cre_sys_lng_eng
params.userid = Y > User Id >1
response.Id= Created Course Id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 8
testengine.use_prev_response_field = Id ; it will used to run the update org


;API for List Courses
[ListCoursesAPI]
category = AdminAPI
display_name = List Courses Admin API
description = This API is used to get the list of courses which are available in the system.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = getCatalogAPI;the name of the function that is to be executed when this api is called.
params.catalogobj.Code = Y> Course Code>
params.catalogobj.Title = Y> Course Title>
params.catalogobj.type = Y> Catalog Type>Course
params.catalogobj.language = Y> Language code. Possible values for this field will be leveraged from profile lookup master. >cre_sys_lng_eng
params.catalogobj.status = Y> Course Status.Possible values for this field will be leveraged from profile lookup master.>lrn_crs_sts_atv
params.limit= Y > limit >1
params.userid = Y > User Id >1
response.pk= Course Id>1
response.Title= Course Title>>Web-based training course
response.Code= Course Code>Crs001
response.Description= Course description>Sample Description
response.Status= Course Status>Active
response.Language= Course Language>English
response.Rating= Course Ratings>90
response.Stats1= Course Filed Stats1>
response.Stats2= Course Filed Stats2>
response.Stats3= Course Filed Stats3>
response.Stats4= Course Filed Stats4>
response.Stats5= Course Filed Stats5>
response.Stats6= Course Filed Stats6>
response.Stats7= Course Filed Stats7>
response.Stats8= Course Filed Stats8>
response.Stats9= Course Filed Stats9>
response.Stats10= Course Filed Stats10>
response.Id= Course Master Search Id>
response.IsBlended= Course Blended Status>
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category = list
testengine.apitestsequence = 9
testengine.verify_response_field = Id 



;API for Create Class
[CreateClassAPI]
category = AdminAPI
display_name = Create Class API
description = This API is used to create a class.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = insertCatalogAPI;the name of the function that is to be executed when this api is called.
params.insobj.Action= Y> Catalog Create Action>CreateClass
params.insobj.Id= Y> Course Id> 
params.insobj.Title = Y> Class Title>REST_API_Class_Title_VERSION
params.insobj.Code = Y> Class Code>REST_API_Class_Code_VERSION
params.insobj.Description = Y> Class Description>Sample Description
params.insobj.ShortDescription = Y> Class Short Description>Sample Short Description
params.insobj.Status = Y> Class Status>lrn_cls_sts_atv
params.insobj.LanguageId = Y> Class Language. Possible values for this field will be leveraged from profile lookup master. >cre_sys_lng_eng
params.insobj.DeliveryTypeId = Y> Class Delivery Type. Possible values for this field will be leveraged from profile lookup master.>lrn_cls_dty_wbt
params.insobj.Duration = N> Class Duration>0
params.insobj.RegistrationEnd = N> Class Registration End Date. Format YYYY-MM-DD >
params.insobj.RegDeadLineDate = N> Class Cancellation DeadLine Date. Format YYYY-MM-DD >
params.insobj.Price = N> Class Price>0
params.insobj.CurrencyType = N> Class Price Currency Type>cre_sys_crn_usd
params.insobj.TrainingUnits = N> Class TrainingUnits>
params.insobj.CancellationFee = N> Class Cancellation Fee>
params.insobj.LateCancellationFee = N> Class Late Cancellation Fee>
params.insobj.ExportCompliance = N> Class Export Compliance Check. Possible value N >N
params.insobj.NoShowFee = N> Class NoShow Fee>
params.userid = Y > User Id >1
response.Id= Created Class Id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = add
testengine.category=add
testengine.apitestsequence = 10
testengine.capture_response_field = Id ; it will used to run the update org 



;API for Update Class
[UpdateClassAPI]
category = AdminAPI
display_name = Update Class API
description = This API is used to update a class.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = updateCatalogAPI;the name of the function that is to be executed when this api is called.
params.insobj.Flag= Y> Catalog Create Action>ClassUpdate
params.insobj.Id= Y> Course Id>
params.insobj.ClassId= Y> Class Id>
params.insobj.Title = Y> Class Title>REST_API_Class_Title_Updated_VERSION
params.insobj.Code = Y> Class Code>REST_API_Class_Code_Updated_VERSION
params.insobj.Description = Y> Class Description>Sample Description
params.insobj.ShortDescription = Y> Class Short Description>Sample Short Description
params.insobj.Status = Y> Class Status. Possible values for this field will be leveraged from profile lookup master. >lrn_cls_sts_atv
params.insobj.LanguageId = Y> Class Language. Possible values for this field will be leveraged from profile lookup master. >cre_sys_lng_eng
params.insobj.DeliveryTypeId = Y> Class Delivery Type. Possible values for this field will be leveraged from profile lookup master. >lrn_cls_dty_wbt
params.insobj.Duration = N> Class Duration>0
params.insobj.RegistrationEnd = N> Class Registration End Date. Format YYYY-MM-DD >
params.insobj.RegDeadLineDate = N> Class Registration DeadLine Date. Format YYYY-MM-DD >
params.insobj.Price = N> Class Price>0
params.insobj.CurrencyType = N> Class Price Currency Type>cre_sys_crn_usd
params.insobj.TrainingUnits = N> Class TrainingUnits>
params.insobj.CancellationFee = N> Class Cancellation Fee>
params.insobj.LateCancellationFee = N> Class Late Cancellation Fee>
params.insobj.ExportCompliance = N> Class Export Compliance Check>N
params.insobj.NoShowFee = N> Class NoShow Fee>
params.userid = Y > User Id >1
response.Id= Created Class Id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 11
testengine.capture_response_field = Id ; it will used to run the update org 



;API for List Classes
[ListClassesAPI]
category = AdminAPI
display_name = List Classes Admin API
description = This API is used to get the list of classes.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = getCatalogAPI;the name of the function that is to be executed when this api is called.
params.catalogobj.Code = Y> Class Code>
params.catalogobj.Title = Y> Class Title>
params.catalogobj.type = Y> Catalog Type>Class
params.catalogobj.language = Y> Class Language code. Possible values for this field will be leveraged from profile lookup master.>cre_sys_lng_eng
params.catalogobj.status = Y> Class Status. Possible values for this field will be leveraged from profile lookup master. >lrn_crs_sts_atv
params.limit= Y > limit >1
params.userid = Y > User Id >1
response.parentpk= Class Id>1
response.pk= Course Id>1
response.Title= Class Title>Web-based training Class
response.Code= Class Code>Crs001
response.Description= Class description>Sample Description
response.Status= Class Status>Active
response.Language= Class Language>English
response.Rating= Class Ratings>90
response.Stats1= Class Filed Stats1>
response.Stats2= Class Filed Stats2>
response.Stats3= Class Filed Stats3>
response.Stats4= Class Filed Stats4>
response.Stats5= Class Filed Stats5>
response.Stats6= Class Filed Stats6>
response.Stats7= Class Filed Stats7>
response.Stats8= Course Filed Stats8>
response.Stats9= Class Filed Stats9>
response.Stats10= Class Filed Stats10>
response.Id= Class Master Search Id>
response.IsBlended= Course Blended Status>
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 12
testengine.capture_response_field = Id ; it will used to run the update org 

;API for Associate Content with WBT Class
[AssociateContentwithWBTClassAPI]
category = AdminAPI
display_name = Associate Content with WBT Class API
description = This API is used to associate content with WBT class.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = associateCatalogAPI;the name of the function that is to be executed when this api is called.
params.insobj.CourseId= Y> Course Id>
params.insobj.ClassId = Y> Class Id>
params.insobj.ContentId = Y> Content Id>
params.insobj.DTType = Y> Class Delivery Type>WBT
params.insobj.Title = Y> Content Title>WBT Content 1
params.insobj.MasteryScore = Y> Score>100
params.insobj.MaxAttempts = Y> Maximum Attempts>5
params.insobj.ValidityDays = Y> Validity Days>30
params.insobj.ContentCode = Y> Content Code>Web content 1
params.insobj.SequenceNo = Y> Content Sequence No>1
params.insobj.action = Y> Possible value:- associatecontent >associatecontent
params.userid = Y > User Id >1
response.Id= Associated Session Id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 13
testengine.capture_response_field = Id ; it will used to run the update org 



;API for Edit Associated Content with WBT Class
[EditAssociatedContentwithWBTClassAPI]
category = AdminAPI
display_name = Edit Associated Content with WBT Class API
description = This API is used to edit associated content with WBT class.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = associateCatalogAPI;the name of the function that is to be executed when this api is called.
params.insobj.CourseId= Y> Course Id>29
params.insobj.ClassId = Y> Class Id>2
params.insobj.SessionId = Y> Session Id. Use the id which created when associate content with class.>
params.insobj.ContentId = Y> Content Id>
params.insobj.DTType = Y> Class Delivery Type>WBT
params.insobj.Title = Y> Content Title>Web Content 1 Updated
params.insobj.MasteryScore = Y> Score>100
params.insobj.MaxAttempts = Y> Maximum Attempts>50
params.insobj.ValidityDays = Y> Validity Days>30
params.insobj.ContentCode = Y> Content Code>Web content 1
params.insobj.SequenceNo = Y> Content Sequence No>1
params.insobj.action = Y> Associate Action>edit_associated_resources
params.userid = Y > User Id > 1
response.Id= Associated Id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 14
testengine.capture_response_field = Id ; it will used to run the update org 


;API for Associate Facility,Location and Room with Class
[AssociateFacilityLocationRoomAPI]
category = AdminAPI
display_name = Associate Facility,Location and Room with Class API
description = This API is used to associate facility,location and room with class.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = associateCatalogAPI;the name of the function that is to be executed when this api is called.
params.insobj.CourseId= Y> Course Id>
params.insobj.ClassId = Y> Class Id>
params.insobj.StartDate = Y> Session Start Date. Format:- YYYY-MM-DD > 2013-02-02
params.insobj.StartTime = Y> Session Start Time>10:00
params.insobj.EndTime = Y> Session End Time>12:00
params.insobj.LocationId = Y> Session Location Id>
params.insobj.ClassRoomId = N> Class Room Id>
params.insobj.InstructorId = N> Instructor Id>
params.insobj.FacilityId = Y> Facility Id>
params.insobj.CapacityMin = N> Capacity Minimum Seats>1
params.insobj.CapacityMax = Y> Capacity Max Seats>100
params.insobj.TotalWaitlist = N> Waitlist Seats>2
params.insobj.DocumentURL = Y> Document URL>
params.insobj.ContentURL = N> Recorded URL>
params.insobj.PresenterURL = Y> Presenter URL>
params.insobj.AttendeeURL = Y> Attendee URL>
params.insobj.Type = Y> Session Type>lrn_cls_vct_lmt
params.insobj.TimeZone = Y> Session Timezone>cre_sys_tmz_001
params.insobj.Title = Y> Session Title>Session 1
params.insobj.Size = Y> Session Size> 
params.insobj.action = Y> Action need to perform. Example:- associateresources >associateresources
params.userid = Y > User Id > 1
response.Id= Associated Session Id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = add
testengine.category=update
testengine.apitestsequence = 15
testengine.capture_response_field = Id ; it will used to run the update org 




;API for Edit Associated Facility,Location and Room with Class
[EditAssociatedFacilityLocationRoomAPI]
category = AdminAPI
display_name = Edit Associated Facility,Location and Room with Class API
description = This API is used to edit associated facility,location and room with class.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = associateCatalogAPI;the name of the function that is to be executed when this api is called.
params.insobj.CourseId= Y> Course Id>
params.insobj.ClassId = Y> Class Id>
params.insobj.SessionId = Y> Session Id. Use the id which created while associating facility to the class.>
params.insobj.StartDate = Y> Session Start Date Format:- YYYY-MM-DD >2014-02-02
params.insobj.StartTime = Y> Session Start Time>10:00
params.insobj.EndTime = Y> Session End Time>12:00
params.insobj.LocationId = Y> Session Location Id>
params.insobj.ClassRoomId = N> Class Room Id>
params.insobj.InstructorId = N> Instructor Id>
params.insobj.FacilityId = N> Facility Id>
params.insobj.CapacityMin = Y> Capacity Minimum Seats>1
params.insobj.CapacityMax = Y> Capacity Max Seats>
params.insobj.TotalWaitlist = Y> Waitlist Seats>
params.insobj.DocumentURL = Y> Document URL>
params.insobj.ContentURL = N> Recorded URL>
params.insobj.PresenterURL = Y> Presenter URL>
params.insobj.AttendeeURL = Y> Attendee URL>
params.insobj.Type = Y> Session Type>lrn_cls_vct_lmt
params.insobj.TimeZone = Y> Session Timezone>cre_sys_tmz_001
params.insobj.Title = Y> Session Title>Session 1
params.insobj.Size = Y> Session Size>
params.insobj.action = Y> Action which need to perform. Possible value:- edit_associated_resources >edit_associated_resources
params.userid = Y > User Id > 1
response.Id= Associated Id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 16
testengine.capture_response_field = Id ; it will used to run the update org 



;API for Remove Content,Facility,Location and Room with Class
[RemoveContentFacilityLocationRoomAPI]
category = AdminAPI
display_name = Remove Content,Facility,Location and Room with Class API
description = This API is used to remove content,facility,location & room with Class.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = associateCatalogAPI;the name of the function that is to be executed when this api is called.
params.insobj.SessionId= Y> Class Session Id>
params.insobj.Type = N> Session Type>
params.insobj.action = Y> Possible value:- unassociateresources >unassociateresources
params.userid = Y > User Id >1
response.Status= Remove Status>Success
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 17
testengine.capture_response_field = Id ; it will used to run the update org 





;API for Course Pre-Requisites 
[CoursePreRequisitesAPI]
category = AdminAPI
display_name = Course Pre-Requisites  API
description = This API is used to attach the pre-requisites for the course.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = addPreRequisiteAPI;the name of the function that is to be executed when this api is called.
params.insobj.id1= Y> Course Id for Pre-Requisites>
params.insobj.id2= Y> Pre-Requisite Course Id>
params.userid = Y > User Id >1
response.id= Created Pre-Requisites mapping id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 18
testengine.capture_response_field = Id ; it will used to run the update org 




;API for Remove Course Pre-Requisites 
[RemoveCoursePreRequisitesAPI]
category = AdminAPI
display_name = Remove Course Pre-Requisites  API
description = This API is used to remove pre-requisite from the course.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = removePreRequisiteAPI;the name of the function that is to be executed when this api is called.
params.insobj.id= Y> Id - It is created while attaching pre-req to course.>
params.userid = Y > User Id >1
response.Status= Status>success
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 19
testengine.capture_response_field = Id ; it will used to run the update org 


;API for Course Equivalence 
[CourseEquivalenceAPI]
category = AdminAPI
display_name = Course Equivalence API
description = This API is used to attach equivalence for the course.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = addEquivalenceAPI;the name of the function that is to be executed when this api is called.
params.insobj.id1= Y> Course Id for Equivalence>
params.insobj.id2= Y> Equivalence Course Id>
params.userid = Y > User Id >1
response.id= Created Equivalence Id>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 20
testengine.capture_response_field = Id ; it will used to run the update org 


;API for Remove Course Equivalence
[RemoveCourseEquivalenceAPI]
category = AdminAPI
display_name = Remove Course Equivalence API
description = This API is used to remove equivalence for the course.
ORM_file = /sites/all/dao/CatalogDAO.php
method_name = removeEquavalenceAPI;the name of the function that is to be executed when this api is called.
params.insobj.id= Y> Id - It is created while attaching equivalence to course.>
params.userid = Y > User Id >1
response.Status= Status>success
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 21
testengine.capture_response_field = Id ; it will used to run the update org 



;API for Catalog Search
[CatalogSearchAPI]
category = LearnerAPI
display_name = Catalog Search API
description = This API is used to get the list of catalogs which are available in the system.
ORM_file = /sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/modules/exp_sp_lnrsearch/exp_sp_lnrsearch.inc
method_name = getCatalogSearchWrapperAPI;the name of the function that is to be executed when this api is called.
params.selobj.limit= Y> Number Of records need to be retrieved. >1
params.selobj.userid= Y> User Id>
params.selobj.title= N> Catalog Title>
params.selobj.startdate= N> Class Session Start Date. Format:- MM-DD-YYYY >
params.selobj.enddate= N> Class Session End Date. Format:- MM-DD-YYYY >
params.selobj.dl_type= N> Catalog Delivery Type Code - Possible values for this field will be leveraged from profile lookup master. Multiple values allowed by pipe operator >  lrn_cls_dty_ilt
params.selobj.lg_type= N> Catalog Language Code - Possible values for this field will be leveraged from profile lookup master > 
params.selobj.location= N> Class Session Location - Provide name of the location > 
params.selobj.region= N> Class Region>
params.selobj.price_start= N> Catalog Starting Price - Example $20 >
params.selobj.price_end= N> Catalog End Price - Example $200 >
params.selobj.sortby= N> Catalog Sort By AZ, ZA,Time and ClassStartDate>AZ
params.selobj.ob_type= N > Object Type - cre_sys_obt_crt Possible values for this field will be leveraged from profile lookup master.Multiple values allowed by pipe operator >
 
params.userid =Y > User Id > 1
response.object_type = Object type Example:- Course,Class>Class
response.crs_id = Course Id>1
response.cls_id = Class Id>1
response.cls_code = Class Code>Class001
response.cls_title = Class Title>Class 1
response.cls_short_description = Short Description>Sample Description
response.delivery_type_code = Delivery Type Code>lrn_cls_dty_wbt
response.export_compliance = Export Compliance Check>N
response.delivery_type_name = Delivery Type Name>Web-Based
response.status = Catalog Status>Active
response.language = Catalog Language>Class
response.language_code = Catalog Language Code>cre_sys_lng_eng
response.location = Catalog location>Class
response.node_id = Catalog Node Id>1
response.price = Catalog Price>10
response.session_id = Session Id>1
response.sess_start_date = Session Start Date>
response.sess_start_time = Session Start Time>
response.sess_end_time = Session End Time>
response.sess_timezone = Session Timezone>
response.country_name = Catalog Country Name>India
response.country_code = Catalog Country Code>IN
response.prm_end_date = Catalog End Date>
response.mro_id = Catalog MRO ID>
response.mro= Catalog MRO>
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 22
testengine.capture_response_field = Id ; it will used to run the update org 




;API for Registration
[RegistrationAPI]
category = LearnerAPI
display_name =  Registration API
description = This API is used to register the catalog items.
ORM_file = /sites/all/modules/core/exp_sp_learning/exp_sp_learning.inc
method_name = classRegisterAPI;the name of the function that is to be executed when this api is called.
params.Learnerid = Y> Learner Id>
params.Courseid = Y> Course Id>
params.Classid = Y> Class Id>
params.Waitlist = Y> Possible value 0 >0
params.Response = Y> Possible value 'false' >false
params.userid = Y> User Id>1
response.id= Registration Id>1
response.status= Registration Status>Reserved
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 23
testengine.capture_response_field = Id ; it will used to run the update org 





;API for List Enrollments
[ListEnrollmentsAPI]
category = LearnerAPI
display_name = List Enrollments API
description = This API is used to get the user enrollments.
ORM_file = /sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/modules/exp_sp_lnrenrollment/exp_sp_lnrenrollment.inc
method_name = getListEnrollmentApiResultSet;the name of the function that is to be executed when this api is called.
params.UserID = Y> User Id>1
params.regstatuschk = Y> Registration status. Possible value for this field will be leveraged from Profile Lookup Master.>lrn_crs_cmp_enr
params.page = N>Page number>1
params.rows = N>Number of Rows>10
params.sord = N>Order by asc, desc >asc
params.limit= Y > limit >1
params.userid = Y > User Id >1
response.id = Enroll Id>1
response.user_id= User Id>1
response.user_name= User Name>admin
response.class_id= Class Id>1
response.course_id= Course Id>1
response.reg_status= Reg Status>Enrolled
response.comp_status= Complition Status>lrn_crs_cmp_enr
response.valid_from= Class valid from>2012-02-14
response.valid_to= Class valid to>2012-03-14
response.score= Course Score>80
response.Grade= Course Grade>Pass
response.title= Course Title>Web designing
response.cls_title= CLass Title>3D Studio Max
response.code= Class Code>3d
response.description= Description>Test desc
response.delivery_type= Delivery Type>Web-based
response.basetype= Class Base Type>ILT
response.classprice= Class Price>0.00
response.language= Language>English
response.created_by= Created By>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 24
testengine.capture_response_field = Id ; it will used to run the update org 




;API for Launch Modules
[GetLaunchModulesAPI]
category = LearnerAPI
display_name = Launch Modules API
description = This API is used to get the launch modules of the given enroll id.
ORM_file = /sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/modules/exp_sp_lnrenrollment/exp_sp_launch.inc
method_name = getLaunchDetailWrapperAPI;the name of the function that is to be executed when this api is called.
params.enrollid = Y> Enrollment Id>
params.userid = Y> User Id>1
response.ID= Launch Id>1
response.ValidTo= Launch Valid To>
response.Code= Content Code>Cnt1
response.Title= Lession Title>Lesson1
response.LaunchType= Launch Type>WBT
response.ContentType= Content Type>AICC Course Structure
response.LearnerLaunchURL= Learner Launch URL>http://content.expertus.com/Overview/index_lms.html
response.PresenterLaunchURL= Presenter Launch URL>http://content.expertus.com/Overview/index_lms.html
response.MaxAttempt= MaxAttempt>3
response.AttemptLeft= Attempt Left>2
response.Handler= Handler Type>
response.IsLaunchable= Launchable>true
response.LessonLocation= Lesson Location >test
response.contValidateMsg= Content Message > 22 Attempts left
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=update
testengine.apitestsequence = 25
testengine.capture_response_field = Id ; it will used to run the update org 



;API for Update Score
[UpdateScoreAPI]
category = LearnerAPI
display_name =  Update Score API
description = This API is used to update the score in the system.
ORM_file = /sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/modules/exp_sp_lnrenrollment/exp_sp_launch.inc
method_name = updateLaunchWrapper;the name of the function that is to be executed when this api is called.
params.stid = Y> Learner Id>
params.regid = Y> Enrollment Id>
params.courseid = Y> Course Id>
params.classid = Y> Class Id>
params.lessonid = Y> Lession Id>
params.status = Y> Completion Status>lrn_crs_cmp_cmp
params.sestime = N> Session Time>
params.score = N> Class Score>80
params.grade = N> Class Grade>Pass
params.location = N> Location>
params.contentstatus = N> Content Status>Completed, failed
params.userid = Y> User Id>1
response.ID= User Id>1
response.ValidTo= Valid To>1
response.Code= Code>1
response.Title= Title>1
response.LaunchType= Launch Type>WBT
response.ContentType= Content Type>AICC Course Structure
response.MaxAttempt= Max Attempt>3
response.AttemptLeft= Attempt Left>1
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 26
testengine.capture_response_field = Id ; it will used to run the update org 



;API for Cancel Enrollment
[CancelEnrollmentAPI]
category = LearnerAPI
display_name = Cancel Enrollment API
description = This API is used to cancel the user enrollment.
ORM_file = /sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/modules/exp_sp_lnrenrollment/exp_sp_lnrenrollment.inc
method_name = getDropEnrollmentWrapperByRest;the name of the function that is to be executed when this api is called.
params.userid = Y> User Id>1
params.enrollId = Y> Enroll Id>
response.status= Cancel Status>Success
response.msg= Cancel Message>
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 27
testengine.capture_response_field = Id ; it will used to run the update org 



;API for Get Course Details
[GetCourseDetailsAPI]
category = LearnerAPI
display_name = Get Course Details API
description = This API is used to get the course details.
ORM_file = /sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/modules/exp_sp_coursedetail/exp_sp_coursedetail.inc
method_name = getCourseDetailsWrapperApi;the name of the function that is to be executed when this api is called.
params.courseId = Y> Course Id>1
params.courseCode = Y> Course Code>
params.userid= Y > User Id >1
response.id= Course Id>1
response.title= Course Title>>Web-based training course
response.code= Course Code>WBT001
response.description= Course description>Sample Description
response.short_description= Course short description>Sample Short Description
response.view_count= Course View Count>10
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 28
testengine.capture_response_field = Id ; it will used to run the update org 



;API for Get Class Details
[GetClassDetailsAPI]
category = LearnerAPI
display_name = Get Class Details API
description = This API is used to get the class details.
ORM_file = /sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/modules/exp_sp_classdetail/exp_sp_classdetail.inc
method_name = getClassDetails;the name of the function that is to be executed when this api is called.
params.classId = Y> Class Id>1
params.sessionId = N> Session Id>
params.userid= Y > User Id >1
response.Title= Title>2
response.Code= Class Code>crs1c1
response.classid=Class Id >1
response.crs_id=Course Id >1
response.description= Description > Test Description
response.export_compliance= Export Compliance > N
response.duration= Duration > 0
response.clslang= Language > cre_sys_lng_eng
response.delivery_type_code= Delivery Type > lrn_cls_dty_wbt
response.price= price > 10
response.currency_type= currency_type > $
response.maxcapacity= maxcapacity > 55
response.availablibleseatcount= availablibleseatcount > 5
response.enrollmentvalidity= enrollmentvalidity > 0
response.mro_id= mro_id > 
response.prerequisites= Pre requisites details > 
response.equivalence= Equivalence details > 
response.sessionDetailInfo= sessiondetails >
response.available_seats= available_seats > 
response.waitlist_seats= waitlist_seats > 
response.multi_register= multi_register >  
api_owner.name = sureshkumar;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 29
testengine.capture_response_field = Id ; it will used to run the update org 



;API for List Delivery Types
[ListDeliveryTypes]
category = LearnerAPI
display_name = List DeliveryTypes API
description = This API is used to get the list of delivery types which are available in the system.
ORM_file = /sites/all/modules/core/exp_sp_core/exp_sp_core.inc
method_name = listProfileValues;the name of the function that is to be executed when this api is called.
params.deliveryTypeCode = Y> Possible values for this field will be leveraged from profile lookup master.Example:- lrn_cls_dty >lrn_cls_dty
params.limit= Y > limit >1
params.userid = Y > User Id >1
response.name = Delivery Type Name>Classroom
response.code= Delivery Type Code>lrn_cls_dty_ilt
response.attr1= Delivery Type attr1>ILT
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 30
testengine.capture_response_field = Id ; it will used to run the update org 


;API for List Locations
[ListLocationsAPI]
category = LearnerAPI
display_name = List Locations API 
description = This API is used to list  the  locations which are configured in the system.
ORM_file = /sites/all/dao/ResourceDAO.php
method_name = callResourceValuesAPI;the name of the function that is to be executed when this api is called.
params.type = Y> Resource Type - Possible values 'Location' >Location
params.title = Y> Resource Title>
params.limit= Y > limit >1
params.userid = Y > User Id >1
response.PID = Location Id>1
response.Title= Location Name>India
response.Code= Location Code>Ind001
response.Description= Location Address>Address : address1, State : Tamil Nadu, City : chennai, Country : IN, Zip Code : 690056
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 31
testengine.capture_response_field = Id ; it will used to run the update org 



;API for List Facilities  
[ListFacilitiesAPI]
category = LearnerAPI
display_name = List Facilities API 
description = TThis API is used to list  the facilities which are configured in the system.
ORM_file = /sites/all/dao/ResourceDAO.php
method_name = callResourceValuesAPI;the name of the function that is to be executed when this api is called.
params.type = Y> Resource Type - Possible values 'Facility' >Facility
params.title = Y> Resource Title>
params.limit= Y > limit >1
params.userid = Y > User Id >1
response.PID = Facility Id>1
response.Title= Facility Name>India
response.Description= Facility Address>Address : address1, State : Tamil Nadu, City : chennai, Country : IN, Zip Code : 690056
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 32
testengine.capture_response_field = Id ; it will used to run the update org 



;API for List Available Contents
[ListAvailableContents]
category = LearnerAPI
display_name = List Available Contents API
description = This API is used to list the contents which are configured in the system.
ORM_file = /sites/all/dao/ContentMasterDAO.php
method_name = getClassContents;the name of the function that is to be executed when this api is called.
params.searchobj.type = Y> Content Type>
params.searchobj.language_code = Y> Content Language Code - Possible values for this field will be leveraged from profile lookup master. >cre_sys_lng_eng
params.searchobj.status = Y> Content Status - Possible values for this field will be leveraged from profile lookup master. >lrn_cnt_sts_atv
params.searchobj.sort = Y> Content Order by>code
params.limit= Y > limit >1
params.userid = Y > User Id >1
response.id = Content Id>1
response.code= Content Code>Content001
response.type= Content Type Code>lrn_cnt_typ_knc
response.content_type_name= Content Type Name>Knowledge Content
response.description= Content Short Description>Sample Description
response.lang_code= Content Language Code>cre_sys_lng_eng
response.language_name= Content Language Name>English
response.status= Content Status>lrn_cnt_sts_atv
response.title= Content Title>Content 1
response.contentversionid= Content Version Id>5
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 33
testengine.capture_response_field = Id ; it will used to run the update org 



;API for Add Roster
[AddRosterAPI]
category = AdminAPI
display_name = Add Roster API 
description = This API is used to add the enrollment.
ORM_file = /sites/all/dao/learner/LnrEnrollmentDAO.php
method_name = addRosterAPI;the name of the function that is to be executed when this api is called.
params.rosterobj.LnrUserStr = Y> Learner User Id>1
params.rosterobj.CourseId = Y> Registration Course Id>1
params.rosterobj.ClassId = Y> Registration Class Id>1
response.Id= Enrollment Id>1
response.Status= Registration Status>Success
response.Description= Registration Message>Registration is successful
response.UserId= Registration User Id>1
response.UserName= Registration User Name>admin
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = add
testengine.category=add
testengine.apitestsequence = 34
testengine.capture_response_field = Id ; it will used to run the update org 


;API for Update Roster
[UpdateRosterAPI]
category = AdminAPI
display_name = Update Roster API 
description = This API is used to Update the enrollment.
ORM_file = /sites/all/dao/BulkRegistrationDAO.php
method_name = updateRosterAPI;the name of the function that is to be executed when this api is called.
params.rosterobj.EnrollIds = Y> Enrollment Id>
params.rosterobj.RegistrationStatus = Y> Registration Status>
params.rosterobj.RegistrationDate = Y> Registration Date>
params.rosterobj.CompletionStatus = Y> Completion Status>
params.rosterobj.CompletionDate = Y> Completion Date>
params.rosterobj.Score = Y> Class Score>
params.rosterobj.Grade = Y> Class Grade>
params.rosterobj.PaymentStatus = Y> Payment Status>
params.rosterobj.ValidFrom = Y> Content Valid From>
params.rosterobj.ValidTo = Y> Content Valid To>
params.rosterobj.ClassId = Y> Enrollment Class Id>
params.rosterobj.CourseId = Y> Enrollment Course Id>
response.EnrollId= Updated Enroll Id>1
response.UserId= User Id>1
response.UserName= User Name>Admin
response.UpdateStatus= User Name>"RegStatus = OK | CompStatus = OK | PayStatus =NULL | ValStatus =NULL | ScoreGradeStatus = NULL"
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = update
testengine.category=update
testengine.apitestsequence = 35
testengine.capture_response_field = Id ; it will used to run the update org 



;API for List Roster
[ListRosterAPI]
category = AdminAPI
display_name = List Roster API 
description = This API is used to get the roster enrollment list.
ORM_file = /sites/all/dao/BulkRegistrationDAO.php
method_name = listRosterAPI;the name of the function that is to be executed when this api is called.
params.rosterobj.ClassId = Y> Class Id>
params.rosterobj.CourseId = Y> Course Id>
params.limit= Y > limit >1
params.userid=Y > User Id >1
response.enrol_pid = Enroll Id>1
response.user_id= User Id>1
response.class_id= Enroll Class Id>1
response.course_id= Enroll Course Id>1
response.reg_status= Enroll Reg Status>lrn_crs_reg_cnf
response.reg_date= Enroll Reg Date>2012-02-15 08:41:37
response.comp_status= Enroll Completion Status Code>lrn_crs_cmp_cmp
response.comp_date= Enroll Completion Date>2012-02-16 08:41:37
response.userfullname= User Full Name>Admin
response.email= User Email Id>expertusone_idev@expertus.com
response.score= Class Score>80
response.grade= Class Grade Code>
response.comp_status_name= Enroll Complition Status>Completed
response.grade_name= Class Grade>Pass
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 36
testengine.capture_response_field = Id ; it will used to run the update org 




;API for Get Profile lookup
[ListProfileValues]
category = AdminAPI
display_name = List Profile Values API
description = This API is used to list the profile values.
ORM_file = /sites/all/dao/ProfileDAO.php
method_name = callProfileValuesAPI;the name of the function that is to be executed when this api is called.
params.paramsobj.level = Y> Level Id>0
params.paramsobj.id = Y> Profile Id>0
params.paramsobj.root = Y> Root value>R
params.userid=Y > User Id >1
params.limit= Y > limit >1
response.id= Profile Id>2
response.name= Profile Name>2
response.attr3= attr3>2
response.attr4= attr4>2
response.children= children>2
api_owner.name = Vincent;the developer's name who develops the functionality
api_owner.email = vincents@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 37
testengine.capture_response_field = Id ; it will used to run the update org 






;API for get most popular courses.
[GetMostPopularCoursesAPI]
category = LearnerAPI
display_name = Get Most Popular Courses API
description = This api is used to get the most popular courses in the system.
ORM_file = /sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/modules/exp_sp_learning_spotlight/exp_sp_learning_spotlight.inc
method_name = getMostPopular;the name of the function that is to be executed when this api is called.
params.userid= Y> User Id>1
params.limit= Y > limit >1
response.id= Id>1
response.title=Title of the course > Test Course
response.shortdescription= Decription of the course > This is the test course.
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 38
testengine.capture_response_field = Id ; it will used to run the update org 





;Get Online Users API
[GetOnlineUsersAPI]
category = LearnerAPI
display_name = Get Online Users API
description = This api is used to get the list of users who is logged in.
ORM_file = /sites/all/modules/core/exp_sp_collaboration/exp_sp_collaboration_learner/modules/exp_sp_whoisonline/exp_sp_whoisonline.inc 
method_name = fetch_online_users_list_rs;the name of the function that is to be executed when this api is called.
params.userid= Y> User Id>1
response.id= Id>1
response.title=Title of the user > Software Engineer
response.shortdescription= Decription of the user > Handling web application development.
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 40
testengine.capture_response_field = Id ; it will used to run the update org 




;List Announcements API
[ListAnnouncementsAPI]
category = LearnerAPI
display_name = List Learner Announcements API
description = This api is used to list the active announcements in the system.
ORM_file = /sites/all/modules/core/exp_sp_collaboration/exp_sp_collaboration_learner/modules/exp_sp_announcement/exp_sp_announcement.inc
method_name = getAnnouncementByrest;the name of the function that is to be executed when this api is called.
params.userid= Y> User Id>1
params.limit= Y > limit >1
response.id= Id > Primary id >1
response.title= Title of the announcement > Webinar about LMS tricks
response.shortdesc= Short Decription of the announcement > This helps lms administrator to understand the system.
response.banner_thumbnail= Banner thumbnail > learn.png
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 41
testengine.capture_response_field = Id ; it will used to run the update org 


;API for get highly rated courses.
[GetHighlyRatedCoursesAPI]
category = LearnerAPI
display_name = Get Highly Rated Courses API
description = This api is used to get the highly rated courses in the system.
ORM_file = /sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/modules/exp_sp_learning_spotlight/exp_sp_learning_spotlight.inc
method_name = getHighlyRatedRating;the name of the function that is to be executed when this api is called.
params.userid= Y> User Id>1
params.limit= Y > limit >1
response.id=Id of the course > 1
response.title=Title of the course > Test Course
response.shortdescription= Decription of the course > This is the test course.
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 42
testengine.capture_response_field = Id ; it will used to run the update org
Manymoon - Create a task or project from this email

;API for get upload file info.
[GetUploadFileInfoAPI]
category = LearnerAPI
display_name = Get Upload File Info API
description = This api is used to get the upload file information.
ORM_file = /sites/all/dao/ContentMasterDAO.php
method_name = getUploadFileInfo;the name of the function that is to be executed when this api is called.
params.filepath= Y> File Path>http://www.sitename.com/sites/default/files/contentupload/golf.zip
response.filesize=File size > 1024
response.lastaccess=File last access date > May 02 2012 14:59:38 IST
response.lastmodified=File last modified date > May 02 2012 15:59:38 IST
api_owner.name = Suresh;the developer's name who develops the functionality
api_owner.email = smart_portal@expertus.com ;the developer's mail id who develops the functionality
test_category = list
testengine.category=list
testengine.apitestsequence = 43

