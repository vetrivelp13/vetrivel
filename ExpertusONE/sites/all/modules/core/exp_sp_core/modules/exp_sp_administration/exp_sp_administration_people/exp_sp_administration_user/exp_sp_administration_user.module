<?php

function exp_sp_administration_user_init() {
	try {
	$request_uri = request_uri();
	if(stripos(request_uri(),'administration/people/user')!==false){
	  global $theme_key;
	  // Multiselect
	  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
	  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
	  $css_theme_optional1 = array('type' => 'file', 'group' => CSS_THEME, 'weight'=> 1300);
	  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.css');
	  drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.filter.css');
	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.filter.js', $js_module_optional);
	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.js', $js_module_optional);
	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
	  if($theme_key == "expertusoneV2"){
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user_v2.css', $css_theme_optional1);
        
        if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status
          drupal_add_css(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_v2.css', $css_theme_optional1);
        } //#custom_attribute_0078975 - End Check module status
        
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning_v2.css');
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_view_v2.css', $css_theme_optional);
	  }else{
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user.css', $css_theme_optional1);
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.css');
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_view.css', $css_theme_optional);
	  }
	  //drupal_add_js(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user.js', $js_module_optional);
	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user_addedit_behaviours.js', $js_module_optional);
	  //CUSTOM SCROLLBAR "JSscrollbar"
	  drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.jscrollpane.js', $js_module_optional);
	  include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_custom_fields.inc');
    
      if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status 
        include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
      } //#custom_attribute_0078975 - End Check module status
      
	//Added by vetrivel.P for #0070900
	  if(isset($_POST['user_upload_done_btn'])){
	  	include_once('exp_sp_administration_user.inc');
	  	$message = exp_sp_administration_upload();
	  	setcookie("user_upload_message", $message,null,'','','','');
	  	drupal_goto('administration/people/user');
	  }
	  //End for #0070900 by vetrivel.P
	}
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_user_init', $ex);
  	expertusErrorThrow($ex);
  }
}
/**
 * Implementation of hook_menu().
 */
function exp_sp_administration_user_menu() {
 try {
  $items = array();
  /*
   $items['administration/people/user'] = array(
   'title' => t('LBL166'),
   'page callback' => 'getUserTabContent',
   'access callback' => 'user_access',
   'type' => MENU_CALLBACK,
   'weight' => 10,
   'access arguments' => array('Users Admin Perm'),
   'file' => 'exp_sp_administration_user.inc'
   );
   */

  $items['administration/people/user'] = array(
    'title' => t('User'),
    'page callback' => 'empty_value',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'weight' => 1,
    'access arguments' => array('Users Admin Perm'),
  );

  $items['administration/people/user/search/all'] = array(
    'title' => 'Fetch Users List to display in JQGrid',
    'page callback' => 'sendUsersListToJqGrid',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_user.inc'
    );

    $items['administration/people/user/textfilter-autocomplete'] = array(
    'title' => 'Search By Text Filter Autocomplete',
    'page callback' => 'getUserTextFilterAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_user.inc',
    );

    $items['administration/people/user/username-autocomplete'] = array( // Needed for search by manager username
    'title' => 'Search by Manager username autocomplete',
    'page callback' => 'getUsernameAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    );

    $items['administration/people/user/organization-autocomplete'] = array(
    'title' => 'Search by User Organization Autocomplete',
    'page callback' => 'getOrganizationAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK
    );

    $items['administration/people/user/export'] = array(
    'title' => 'User Search Results CSV Export',
    'page callback' => 'fetchUsersAll',
    'page arguments' => array('CSV'),
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_user.inc',
    );

    $items['administration/people/user/print'] = array(
    'title' => 'User Search Results Print to PDF',
    'page callback' => 'fetchUsersAll',
    'page arguments' => array('PDF'),
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_user.inc',
    );

    $items['administration/people/user/get-password-policy-details'] = array(
    'title' => t('LBL165'),
    'page callback' => 'get_password_policy_details',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK
    );

    $items['administration/people/user/validate-password-policy-details/%'] = array(
    'page callback' => 'validate_passwords_policy',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK
    );

    $items['administration/people/user/%ctools_js/addedit'] = array(
    'title' => 'Add / Edit User',
    'page callback' => 'exp_sp_administration_user_display_addedit_form',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_user.inc'
    );

    $items['administration/people/user/manager-autocomplete'] = array(
    'title' => 'Manager Autocomplete',
    'page callback' => 'getPersonAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK
    );

    $items['administration/people/user/org-autocomplete'] = array(
    'title' => 'Organization Autocomplete',
    'page callback' => 'getOrganizationAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK
    );

    $items['administration/people/user/location-autocomplete'] = array(
    'title' => 'Location Autocomplete',
    'page callback' => 'getAdminUserCityStateAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
  	'file path' => drupal_get_path('module','exp_sp_administration'),
    'file' => 'exp_sp_administration.inc',
    );

    $items['administration/people/user/admin-facility-autocomplete'] = array(
    'title' => 'Location Autocomplete',
    'page callback' => 'getFacilityNameAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_user.inc',
    );

    $items['administration/people/user/usernamecheck/%'] = array(
  	'title' => 'checkusername',
    'page callback' => 'usernamecheckadmin',
	'page arguments' => array(4),
    //'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    );

    $items['ajax/administration/people/activate-and-deactivate/%'] = array (
    'title' => 'Activate Or Deactivate people',
    'page callback' => 'activateOrDeactivatePeople',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('Users Admin Perm'),
    'file' => 'exp_sp_administration_user.inc'
    );

    $items['ajax/administration/people/reset-password/%'] = array (
    'title' => 'Reset password for the user',
    'page callback' => 'resetUserPassword',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('Users Admin Perm'),
    'file' => 'exp_sp_administration_user.inc'
    );

    $items['administration/people/user/empltype-autocomplete'] = array(
    'title' => 'User Admin Employee Type Autocomplete',
    'page callback' => 'getAdminUserEmplTypeAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_user.inc',
    );

    $items['administration/people/user/dept-autocomplete'] = array(
    'title' => 'User Admin Department Autocomplete',
    'page callback' => 'getAdminUserDeptAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_user.inc',
    );

    $items['administration/people/user/jobtitle-autocomplete'] = array(
    'title' => 'User Admin Job Title Autocomplete',
    'page callback' => 'getAdminUserJobTitleAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_user.inc',
    );

    $items['administration/people/user/jobrole-autocomplete'] = array(
    'title' => 'User Admin Job Role Autocomplete',
    'page callback' => 'getAdminUserJobRoleAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_user.inc',
    );

    $items['administration/people/user/usertype-autocomplete'] = array(
    'title' => 'User Admin User Type Autocomplete',
    'page callback' => 'getAdminUserTypeAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_user.inc',
    );
    $items['administration/people/user/get-user-enrollments/%'] = array(
    'title' => 'Get enrolled class/tp list for user',
    'page callback' => 'getClassTpEnrollmentsResultForGrid',
    'page arguments' => array(4,5),
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_learning.inc',
    'file path' => drupal_get_path('module', 'exp_sp_administration_learning'),
    );

    $items['administration/people/user/user-enrollment-autocomplete/%'] = array (
    'title' => 'Get enrolled class/tp list of user for the matching keyword',
    'page callback' => 'getClassTpEnrollmentResultForAutoComplete',
	'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_learning.inc',
    'file path' => drupal_get_path('module', 'exp_sp_administration_learning'),
    );
    $items['ajax/administration/people/user/get-enrollment-count/%'] = array (
    'title' => 'Get user enrolled status count',
    'page callback' => 'fetchUserEnrollmentStatusCount',
	'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('Users Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_learning.inc',
    'file path' => drupal_get_path('module', 'exp_sp_administration_learning'),
    );
    $items['administration/view-user/%ctools_js/addedit/%'] = array(
    		'title' => 'View User',
    		'page callback' => 'exp_sp_administration_viewuser_addedit_form',
    		'page arguments' => array(3,4),
    		'access callback' => 'user_access',
    		'access arguments' => array('Users Admin Perm'),
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_administration_user.inc'
    );
    $items['administration/view/groups/%/%'] = array(
    		'title' => 'View User',
    		'page callback' => 'exp_sp_administration_grp_view',
    		'page arguments' => array(3,4),
    		'access callback' => 'user_access',
    		'access arguments' => array('Users Admin Perm'),
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_administration_user.inc'
    );
    /* $items['administration/view/owner_groups/%/%'] = array(
    		'title' => 'View User',
    		'page callback' => 'exp_sp_administration_grp_owner_view',
    		'page arguments' => array(3,4),
    		'access callback' => 'user_access',
    		'access arguments' => array('Users Admin Perm'),
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_administration_user.inc'
    ); */
    $items['administration/people/user/org/%'] = array(
    		'title' => 'Organization Autocomplete',
    		'page callback' => 'getOrganizationListForUser',
    		'page arguments' => array(4, 5),
    		'access callback' => 'user_access',
    		'access arguments' => array('Users Admin Perm'),
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_administration_user.inc'
    );
    $items['administration/people/user/jobrole/%'] = array(
    		'title' => 'Jobrole Autocomplete',
    		'page callback' => 'getJobRoleListForUser',
    		'page arguments' => array(4, 5),
    		'access callback' => 'user_access',
    		'access arguments' => array('Users Admin Perm'),
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_administration_user.inc'
    );
    $items['administration/people/user/jobrole-autocomplete'] = array(
    		'title' => 'Organization Autocomplete',
    		'page callback' => 'getJobRoleAutoComplete',
    		'access callback' => 'user_access',
    		'access arguments' => array('Users Admin Perm'),
    		'type' => MENU_CALLBACK
    );
    $items['administration/people/user/othermanagers/%'] = array(
    		'title' => 'Other Managers',
    		'page callback' => 'otherManagerListForUser',
    		'page arguments' => array(4, 5),
    		'access callback' => 'user_access',
    		'access arguments' => array('Users Admin Perm'),
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_administration_user.inc'
    );
    $items['administration/people/user/othermanagers-autocomplete'] = array(
    		'title' => 'Organization Autocomplete',
    		'page callback' => 'getOtherManagerAutoComplete',
    		'access callback' => 'user_access',
    		'access arguments' => array('Users Admin Perm'),
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_administration_user.inc'
    );
    //#custom_attribute_0078975
    $items['administration/userfeed/download/csv'] = array(
            'title' => 'User feed',
            'page callback' => 'exp_sp_userfeed_csv',
            'page arguments' => array(5),
            'access callback' => 'user_access',
            'access arguments' => array('Users Admin Perm'),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_user.inc'
    );
    expDebug::dPrint(' $items = ' . print_r($items, true) , 4);
    return $items;
    } catch (Exception $ex) {
    	watchdog_exception('exp_sp_administration_user_menu', $ex);
    	expertusErrorThrow($ex);
    }
}


/**
 * To get the list of password policies configured
 */
function get_password_policy_details(){
	try {
  $policy = _password_policy_load_active_policy(array(DRUPAL_AUTHENTICATED_RID));
  $policy_constraints = array();
  if (!empty($policy['policy'])) {
    // Some policy constraints are active.
    foreach ($policy['policy'] as $key => $value) {
      $constraints = _password_policy_constraint_error($key, $value);
      if(trim($constraints)!='') $policy_constraints[] = $constraints;
    }
    echo str_replace('., ', ', ', implode(', ', $policy_constraints));
  }
  } catch (Exception $ex) {
  	watchdog_exception('get_password_policy_details', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * To validate the password from the configured password policy
 */
function validate_passwords_policy($userpassword){
	try {
  expDebug::dPrint('Password: ' .$userpassword , 4);
  global $user;
  if (!empty($userpassword)) {
    $error = _password_policy_constraint_validate($userpassword, $user);
    if ($error) {
      echo str_replace('.', '',implode(', ',$error));
    }
  }
  } catch (Exception $ex) {
  	watchdog_exception('validate_passwords_policy', $ex);
  	expertusErrorThrow($ex);
  }
}


function exp_sp_administration_user_display_addedit_form($js = NULL, $userId) {
	try {
  if ($js) {
    // Prepare list of forms to be displayed in the modal
    $formIdList = array(
    array('id' => 'exp_sp_administration_user_basic_addedit_form', 'title' => t('User')),
    );

    // Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
    $argsList = array();
    if (!empty($userId)) {
      $argsList[] = $userId;
    }
    exp_ctools_modal_multi_ajaxonly_forms_display($formIdList, $argsList);
  }
  else {
    throw new Exception('exp_sp_administration_user.module: exp_sp_administration_user_display_addedit_form() : nojs');
  }
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_user_display_addedit_form', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * exp_sp_administration_user_basic_addedit_form() - Build the addedit form.
 */
function exp_sp_administration_user_basic_addedit_form($form, &$form_state, $renderMode, $userId) {
	try {
  expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
  expDebug::dPrint(' $form_state = ' . print_r($form_state, true) , 5);
  expDebug::dPrint(' $form_state[values] = ' . print_r($form_state['values'], true) , 5);
  expDebug::dPrint(' $form_state[build_info] = ' . print_r($form_state['build_info'], true) , 5);

  expDebug::dPrint(' $renderMode = ' . print_r($renderMode, true) , 4);
  expDebug::dPrint(' $userId = ' . print_r($userId, true) , 4);

  include_once('exp_sp_administration_user.inc');

  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
  global $theme_key;
 	if($theme_key == 'expertusoneV2') {
  		//NEWUI THEME STYLE SHEET
  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', $css_theme_optional);
  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user_v2.css', $css_theme_optional);
  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access_v2.css', $css_theme_optional);
  	} else {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access.css', $css_theme_optional);
  	}
  //drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
  //drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user.css', $css_theme_optional);

  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access.js', $js_module_optional);
  $userDetails = array();
  $passwordMandatoryStatus = TRUE;

  expDebug::dPrint(' $buildinfo = ' . print_r($form_state['build_info']['args'], true) , 5);

  if (!empty($userId)) {
    // An edit operation. Is not form rebuild after save, in which case we can fetch values from $form_state.
    $passwordMandatoryStatus = FALSE;
    // Fetch user details to be displayed in the form
    $userDetails = getPersonDetails($userId, array('id', 'first_name', 'last_name', 'middle_name', 'user_name', 'email', 'status', 'in_active_reason', 'addr1', 'addr2', 'country', 'state', 'city', 'zip','time_zone','preferred_language', 'phone_no',
                                                          'mobile_no','user_type', 'employment_type', 'job_title','hire_date', 'terminated_date', 'is_rehire',
                                                          'is_manager', 'manager_id', 'org_id', 'dept_code','is_instructor','employee_no',
                                                                'preferred_loc_id','is_mobileadmin','webex_name','webex_pass'));
    $userDetails['drupal_uid'] = getDrupalIdOfUser($userId);
    $userDetails['drupal_picture'] = getDrupalUserAvator($userDetails['drupal_uid']);

    expDebug::dPrint(' $userDetails = ' . print_r($userDetails, true) , 4);

  }

  // Create a new add/edit form
  $form = newAddEditFormWithCancelAndSave('user-basic-addedit-form');

  // Define the form fields
  $userId =  getDefaultUserAddEditFormFieldValue('id', $form_state, $userDetails);
  addHiddenValueToAddEditForm($form, 'id', $userId);

  $drupalUid =  getDefaultUserAddEditFormFieldValue('drupal_uid', $form_state, $userDetails);
  addHiddenValueToAddEditForm($form, 'drupal_uid', $drupalUid);

  addTwoColumnRowToAddEditForm($form, 'firstname_lastname');

  $defaultValue =  getDefaultUserAddEditFormFieldValue('first_name', $form_state, $userDetails);
  addTextFieldToAddEditForm($form, 'first_name', t('LBL056'), $defaultValue, 1, true);

  $defaultValue =  getDefaultUserAddEditFormFieldValue('last_name', $form_state, $userDetails);
  addTextFieldToAddEditForm($form, 'last_name', t('LBL058'), $defaultValue, 2, true);

  endAddEditTwoColumnRow($form);

  /*
   $defaultValue =  getDefaultUserAddEditFormFieldValue('middle_name', $form_state, $userDetails);
   addTextFieldToAddEditForm($form, 'middle_name', t('LBL169'), $defaultValue, 2);
   */

  addTwoColumnRowToAddEditForm($form, 'username_pass');

  $defaultValue =  getDefaultUserAddEditFormFieldValue('user_name', $form_state, $userDetails);
  //if(!empty($userId)){$readonly=true;}else{$readonly=false;}
  addTextFieldToAddEditForm($form, 'user_name', t('LBL054'), $defaultValue, 3, true,false,60,61);
  //addUsernameFieldToAddEditForm($form, 'user_name', t('LBL054'), $defaultValue, 4, true, $readonly);

  if ($defaultValue=='')
  $sendNotificationTitle = t('LBL214');
  else
  $sendNotificationTitle = t('LBL215');

  $form['user-basic-addedit-form-username'] = array(
    '#prefix' => '<div class="addedit-new-field" id="username-mismatch"><div class="addedit-new-field-title">&nbsp;</div><div class="addedit-new-field-value messerror ">'.t('ERR016').'</div></div>',
  );

  /*
   $defaultValueSendNotificationCheckbox =  getDefaultUserAddEditFormFieldValue('notify_user', $form_state, $userDetails);
   addNotifyUserToAddEditForm($form, 'notify_user', $sendNotificationTitle , $defaultValueSendNotificationCheckbox);
   */

  $defaultValuePasswordField =  getDefaultUserAddEditFormFieldValue('password', $form_state, $userDetails);
  addPasswordFieldToAddEditForm($form, 'password', t('LBL060'), $defaultValuePasswordField, 4, false);
  /*$defaultValueConfirmPasswordField =  getDefaultUserAddEditFormFieldValue('confirm_password', $form_state, $userDetails);
   $defaultValueSendNotificationCheckbox =  getDefaultUserAddEditFormFieldValue('notify_user', $form_state, $userDetails);
   addPasswordEntryFieldsToAddEditForm($form, 'password', t('LBL060'), $defaultValuePasswordField,
   'confirm_password', t('LBL075'), $defaultValueConfirmPasswordField,
   'notify_user', $sendNotificationTitle , $defaultValueSendNotificationCheckbox,
   5, $passwordMandatoryStatus); //Tab index 5 and 7 would be used by the 3 form fields that are added by this API
   */
  /*   $form['user-basic-addedit-form-password'] = array(
   '#prefix' => '<div class="addedit-new-field" id="password-mismatch" ><div class="addedit-new-field-title">&nbsp;</div><div class="addedit-new-field-value messerror">'.t('ERR086').'</div></div>',
   );*/

  endAddEditTwoColumnRow($form);

  addTwoColumnRowToAddEditForm($form, 'email_contactno');

  $defaultValue =  getDefaultUserAddEditFormFieldValue('email', $form_state, $userDetails);
  addTextFieldToAddEditForm($form, 'email', t('LBL061'), $defaultValue, 5, true);

  $defaultValue =  getDefaultAddEditFormFieldValue('phone_no', $form_state, $userDetails);
  addTextFieldToAddEditForm($form, 'phone_no', t('LBL172'), $defaultValue, 6);

  endAddEditTwoColumnRow($form);

  $userId =  getDefaultAddEditFormFieldValue('id', $form_state, $userDetails);
  addHiddenValueToAddEditForm($form, 'id', $userId);

  //addOneColumnRowToAddEditForm($form, 'add1');
  $defaultValue =  getDefaultAddEditFormFieldValue('addr1', $form_state, $userDetails);
  addTextFieldToAddEditForm($form, 'addr1', t('LBL064'), $defaultValue, 7);
  //endAddEditOneColumnRow($form);

  $defaultValue =  getDefaultAddEditFormFieldValue('addr2', $form_state, $userDetails);
  addTextFieldToAddEditForm($form, 'addr2', t('LBL065'), $defaultValue, 8);

  addTwoColumnRowToAddEditForm($form, 'city_state');

  $defaultValue =  getDefaultAddEditFormFieldValue('city', $form_state, $userDetails);
  addTextFieldToAddEditForm($form, 'city', t('LBL066'), $defaultValue, 9);
  
  $userLocation = getUserCurrentLocation();
  $userLocation['country_code'] = empty($userLocation) ? 'US' : $userLocation['country_code'];
  $defaultAffectorValue =  getDefaultAddEditFormFieldValue('country', $form_state, $userDetails);
  $defaultAffectedValue =  getDefaultAddEditFormFieldValue('state', $form_state, $userDetails);
  // If this form rebuild is due to a country selected by the user, we need to set '' as default selection in the state dropdown
  if ($form_state['triggering_element']['#name'] == 'country') {
    $defaultAffectedValue = '';
  }

  $affector = array(
    'id' => 'country',
    'title' => t('LBL039'),
    'fetch_options' => getCountries,
    'default_value' => empty($defaultAffectorValue) ? $userLocation['country_code'] : $defaultAffectorValue,
    'tab_index' => 10,
    'mandatory' => false,
  );

  $affected = array(
    'id' => 'state',
    'wrapper_id' => 'adddedit-state-wrapper',
    'title' => t('LBL152'),
    'fetch_options' => getStatesForCountry,
    'default_value' => $defaultAffectedValue,
    'tab_index' => 11,
    'mandatory' => false,
  );

   addAjaxDependantDropDownPairToUserFormState($form, $affector, $affected);

  endAddEditTwoColumnRow($form);

  addTwoColumnRowToAddEditForm($form, 'country_zip');
  
  addAjaxDependantDropDownPairToUserFormCountry($form, $affector, $affected);

  $defaultValue =  getDefaultAddEditFormFieldValue('zip', $form_state, $userDetails);
  addTextFieldToAddEditForm($form, 'zip', t('LBL562'), $defaultValue, 12);

  endAddEditTwoColumnRow($form);

  addTwoColumnRowToAddEditForm($form, 'preferred_time_lang');

  $defaultValue = getDefaultAddEditFormFieldValue('time_zone', $form_state, $userDetails);
  $defaultTimezone = defaultSiteTimeZone();
  $defaultValue = !empty($defaultValue) ? $defaultValue : $defaultTimezone['time_zone'];
  $timeZoneList = getTimeZonesList();
  foreach ($timeZoneList as $id => $row) {
  	$timeZone[$row->zonecode] = $row->zonename;
  }
  $pfTimeZone = $timeZone;
  addDropDownToAddEditForm($form, 'preferred_timezone', t('LBL297'), $pfTimeZone, $defaultValue, 13);

  $defaultValue =  getDefaultAddEditFormFieldValue('preferred_language', $form_state, $userDetails);
  $siteLmsDefaultLanguage        = !empty($defaultValue) ? $defaultValue :  getSiteDefaultLanguageCode();
  $languageList = getMyAccountAllLanguage();
  $drupalLanguageList = locale_language_list('native');
  foreach ($languageList as $id => $row) {
  	if (array_key_exists($row->drupallangcode, $drupalLanguageList)) {
  		$ptLanguage[$row->langcode] = t($row->langname);
  	}
  }
  addDropDownToAddEditForm($form, 'preferred_language', t('LBL038'), $ptLanguage, $siteLmsDefaultLanguage, 14);

  endAddEditTwoColumnRow($form);

  //Start # Added by Velu #0030384
  addTwoColumnRowToAddEditForm($form, 'mobile_number');

  $defaultValue =  getDefaultUserAddEditFormFieldValue('mobile_no', $form_state, $userDetails);
  addTextFieldToAddEditForm($form, 'mobile_no', t('Mobile'), $defaultValue, 14);

  //Added by Subin. Ticket #59698
  //Get the config value for default Currency and flag for edit currency
  $default_profile_currency = getCurrencyDefDetails();
  //Added by simbu Sep 25, 2015
  //$defaultValue =  getDefaultAddEditFormFieldValue('preferred_currency', $form_state, $userDetails);
  //$siteLmsDefaultCurrency = !empty($defaultValue) ? $defaultValue :  getDefaultSiteCurrencyCode($userId);
  $getUserCurrency = getDefaultSiteCurrencyCode($userId);
  $siteLmsDefaultCurrency = empty($form_state['values']['preferred_currency'])? (empty($getUserCurrency) ? $default_profile_currency : $getUserCurrency) : $form_state['values']['preferred_currency'];
  
  $currencyList = getSiteCurrencyCode();
  foreach ($currencyList as $id => $row) {
  		$ptCurrency[$row->currency_code] = t($row->currency_code." ".$row->currency_symbol." ".$row->currency_name);
  }
  addDropDownToAddEditForm($form, 'preferred_currency', t('LBL101'), $ptCurrency, $siteLmsDefaultCurrency, 14);

  endAddEditTwoColumnRow($form);
  //End # Added by Velu #0030384

  $form['separator1'] = array(
    '#prefix' => '<div class="separator"></div>',
  );

  $orgName = '';
  $orgId = '';
  $managerId = '';
  if (!empty($userId)) {
    $orgName = getOrganizationNameDetails($userDetails['org_id'], false);
  } else {
    $orgName =  empty($form_state['values']['org']) ? '' : $form_state['values']['org'];
  }


  $userId =  getDefaultUserOrgAddEditFieldValue('id', $form_state, $userDetails);
  addHiddenValueToAddEditForm($form, 'id', $userId);

  addTwoColumnRowToAddEditForm($form, 'manager_organization');

  $defaultValue = getDefaultUserOrgAddEditFieldValue('org', $form_state, $userDetails);
  $orgId =  getDefaultAddEditFormFieldValue('org_id', $form_state, $userDetails);
  $addlACDependencies = array('id' => '"org_id"');
  // data[0] is id, data[1] is orgname
  $acOptionsList = array('formatItem' => 'function(data){return data[1];}', // orgname is displayed in AC dropdown
                         'formatResult' => 'function(data){return data[1];}' //orgname is returned from AC dropdown on selection into textfield
  );
  $emptyId = '' ;
  if(empty($userId))
  	$emptyId        = empty($form_state['values']['empty_id']) ? microtime(false) : $form_state['values']['empty_id'];

  addHiddenFieldToAddEditForm($form, 'empty_id', $emptyId);
  addHiddenFieldToAddEditForm($form, 'entity_value', 'cre_usr');
  addHiddenFieldToAddEditForm($form, 'org_id', $orgId);
  addACFieldToAddEditFormInitViaBehavior($form, 'org', 'administration/people/user/org-autocomplete', t('Organization'), $defaultValue, 15,
  array(), $addlACDependencies, $acOptionsList);

  $excludedUserId = empty($userId) ? 0 : $userId;
  $defaultValue =  getDefaultUserOrgAddEditFieldValue('manager', $form_state, $userDetails);
  $managerId =  getDefaultAddEditFormFieldValue('manager_id', $form_state, $userDetails);
  $addlACDependencies = array('id' => '"manager_id"', 'search_by_username' => 1, 'fetch_username' => 1, 'excluded_user_id' => '"'.core_encrypt($excludedUserId).'"',
                                                                       'exclude_reportees_of_excluded_user' => 1);
  // data[0] is id, data[1] is fullname, data[2] is username.
  $acOptionsList = array('formatItem' => 'function(data){return data[1] + " (" + data[2] + ")";}', // fullname (username) displayed in AC dropdown
                         'formatResult' => 'function(data){return data[1];}' //On selecting a name from AC dropdown, fullname is entered in textfield
  );
  addHiddenFieldToAddEditForm($form, 'manager_id', $managerId); // field name is same as id in $addlDependencies
  addACFieldToAddEditFormInitViaBehavior($form, 'manager', 'administration/people/user/manager-autocomplete', t('Manager'), $defaultValue, 16,
  array(), $addlACDependencies, $acOptionsList);

  endAddEditTwoColumnRow($form);

  addTwoColumnRowToAddEditForm($form, 'emptype_empno');

  $defaultValue =  getDefaultUserOrgAddEditFieldValue('empltype', $form_state, $userDetails); // employment_type
  //addDropDownToAddEditForm($form, 'employment_type', t('LBL174'), getProfileItemNamesKeyed('cre_usr_etp_'), $defaultValue, 15);
  addACFieldToAddEditFormInitViaBehavior($form, 'empltype', 'administration/people/user/empltype-autocomplete', t('LBL174'), $defaultValue, 17);

  $defaultValue =  getDefaultUserOrgAddEditFieldValue('employee_no', $form_state, $userDetails);
  addTextFieldToAddEditForm($form, 'employee_no', t('LBL294'), $defaultValue, 18, false);

  endAddEditTwoColumnRow($form);

  addTwoColumnRowToAddEditForm($form, 'deptcode_jobtitle');

  $defaultValue =  getDefaultUserOrgAddEditFieldValue('deptcode', $form_state, $userDetails); // dept_code
  //addDropDownToAddEditForm($form, 'dept_code', t('LBL179'), getProfileItemNamesKeyed('cre_usr_dpt_'), $defaultValue, 17);
  addACFieldToAddEditFormInitViaBehavior($form, 'deptcode', 'administration/people/user/dept-autocomplete',t('LBL179'), $defaultValue, 19);

  $defaultValue =  getDefaultUserOrgAddEditFieldValue('jobtitle', $form_state, $userDetails); // job_title
//   $jobTitleList1 = getProfileItemNamesKeyed('cre_usr_jtl_', 'cre_sys_lng_eng', false, 'cre_usr_jtl_oth');	//these variables never used through out the code. for 44653
//   $jobTitleList2 = getProfileItemNamesKeyed('cre_usr_jtl_oth');
  //addDropDownToAddEditForm($form, 'job_title', t('LBL073'), ($jobTitleList1 + $jobTitleList2), $defaultValue, 18);
  addACFieldToAddEditFormInitViaBehavior($form, 'jobtitle', 'administration/people/user/jobtitle-autocomplete',t('LBL073'), $defaultValue, 20);

  endAddEditTwoColumnRow($form);

  addTwoColumnRowToAddEditForm($form, 'jobrole_usertype');

//   $defaultValue =  getDefaultUserOrgAddEditFieldValue('oorgs', $form_state, $userDetails);
//   //expDebug::dPrint('$defaultValue'.print_r($defaultValue, 1));
//   $selectedOrgId = empty($userDetails['org_id']) ? $userOrgId['org_id'] : $userDetails['org_id'];
//   //     change by ayyappans for 33432: Issue in Users
//   //$otherOrganizationsOptions = getAllOrganizationSelectOptionsListForCustomDropdown($selectedOrgId, 0, $userDetails['dotted_org_id']);
//   addMultiselectDropDownToAddEditForm($form, 'oorgs', t('LBL136'), array(), $defaultValue, 24, false, false, array('style'=>'display: none;'), array('code' => 'ste_con_org', 'user_id' => $userDetails['id']));


	//7306: Support of users to have more than 1 job role association
  $defaultValue =  getUserAttributeValues($userId);//getDefaultUserOrgAddEditFieldValue('jobrole', $form_state, $userDetails); // job_role
  //addDropDownToAddEditForm($form, 'job_role', t('LBL133'), getProfileItemNamesKeyed('cre_usr_jrl_'), $defaultValue, 19);
  //addACFieldToAddEditFormInitViaBehavior($form, 'jobrole', 'administration/people/user/jobrole-autocomplete',t('LBL133'), $defaultValue, 21);
  $jobRolesOption = getProfileItemNamesKeyed('cre_usr_jrl_');
  expDebug::dPrint('JOB ROLES MULTI SELECT-->'.print_r($jobRolesOption,1),4);
  addMultiselectDropDownToAddEditForm($form, 'jobrole', t('LBL133'), $jobRolesOption, $defaultValue, 22, false, false, array('style'=>'display: none;'), array('code' => 'cre_usr_jrl', 'user_id' => $userDetails['id']));

  $defaultValue =  getDefaultUserOrgAddEditFieldValue('usertype', $form_state, $userDetails); // user_type
  //addDropDownToAddEditForm($form, 'usertype', t('LBL173'), getProfileItemNamesKeyed('cre_usr_ptp_'), $defaultValue, 20);
  addACFieldToAddEditFormInitViaBehavior($form, 'usertype', 'administration/people/user/usertype-autocomplete',t('LBL173'), $defaultValue, 22);

  endAddEditTwoColumnRow($form);

  addTwoColumnRowToAddEditForm($form, 'roles_securityrole');

  $defaultValue = array();
  if(isset($userDetails['is_instructor']) && $userDetails['is_instructor'] == 'Y'){
    $defaultValue[] = 'is_instructor';
  }
  if(isset($userDetails['is_manager']) && $userDetails['is_manager'] == 'Y'){
    $defaultValue[] = 'is_manager';
  }
  $is_manager_validtaion = false;
  if($userDetails['is_manager']=='Y'){
  	//60208: Other Manager is not getting removed in the reportee profile
  	$resource_count = getDirectReporteeIds($userDetails['id']);
  	if($resource_count>0)
  		$is_manager_validtaion = true;
  }
  $is_instructor_validation = false;
  if(variable_get('webex_User') == 1){
  	$is_instructor_validation = true;
  }
  $rolesOption = array('is_instructor' => 'Instructor', 'is_manager' => 'Manager');
  addMultiselectDropDownToAddEditForm($form, 'roles', t('LBL579'), $rolesOption, $defaultValue, 21,false,false,array(),array(),0,$is_manager_validtaion,'',$is_instructor_validation);

 /*  $defaultValue = array();
  $srtyroles = array();
  //$uid = getDrupalIdOfUser($userId);
  $defaultValue = getSecurityDefDetails($userId,array('id','name'));
  $srtyroles = getSecurityDetails($userId,array('id','name'));

  $defaultOption = array();

  foreach($defaultValue as $key => $value)
  {
    if(isset($value->name))
    {
      $defaultOption[] = $value->id;
    }
  }
  expDebug::dPrint('default value-->'.print_r($defaultOption, true),4);
  foreach($srtyroles as $key => $value)
  {
    $srtyrolesOption[$value->id] = $value->name;
  }
  expDebug::dPrint(' user.module - $srtyrolesOption = ' . print_r($srtyrolesOption, true) , 5);
  expDebug::dPrint(' user.module - $defaultOption = ' . print_r($defaultOption, true) , 5);

  addMultiselectDropDownToAddEditForm($form, 'securityrole', t('LBL652'), $srtyrolesOption ,$defaultOption , 23); */

  /*0051815 for adding register sms*/
		  global $theme_key;
		  if($theme_key == 'expertusoneV2') {
			  $newuiPrefix = '<div class="expertus-dropdown-bg crs-compliance-dropdown"><div class="expertus-dropdown-icon ">';
			  $newuiSuffix = '</div></div>';
		  } else {
			  $newuiPrefix = '';
			  $newuiSuffix = '';
		  }
           $defaultValue =  getDefaultUserAddEditFormFieldValue('is_mobileadmin', $form_state, $userDetails);
  			expDebug::dPrint(' is_mobileadminis_mobileadminis_mobileadmin' . print_r($defaultValue, true) , 5);
		  $options                         = array('0' => t('No'), '1' => t('Yes'));
		  $attributes                      = array();
		  $attributes['class']             = array('addedit-edit-register-sms');
		  $attributes['class'][]           = 'addedit-edit-dropdown';
		  $attributes['tabindex']          = 21;
		  $finalOptions                    = $options;
		  $defaultOption                   =  !empty($defaultValue) ? $defaultValue: 0;

		  $form['addedit_tmp_storage']['two_column']['current_column'] = 2;
		  $form['register_sms'] = array(
          '#type'        => 'select',
          '#name'		 => 'register_sms',
          '#id'		     => 'register_sms',
          '#prefix'        => addEditGetPrefix('TWOCOL_SECONDCOL_FIELD', substr(t('LBL1234'),0,-1), FALSE) . $newuiPrefix,
          '#suffix'        => $newuiSuffix . addEditGetSuffix('TWOCOL_SECONDCOL_FIELD'),
          '#title'         => 'Register SMS',
          '#title_display' => 'invisible',
          '#options'       => $finalOptions,
          '#default_value' => $defaultOption,
          '#attributes'    => $attributes,

                          );
    /* for adding register sms*/

  endAddEditTwoColumnRow($form);

  $webex_module=getProfileListItemByCode('lrn_cls_vct_web');
  $instructor=(isset($userDetails['is_instructor']) && $userDetails['is_instructor'] == 'Y')?'Y':'N';
  if((variable_get('webex_User') == 1) && $webex_module[0]->status == 'Y'){
  
  	/*global $base_url;
	$form[$formName]['on_load'] = array(          
		'#type' => 'markup',
		'#prefix' => '<div style="display:none"><img src="'.$base_url.'/sites/all/themes/core/expertusoneV2/logo.png" width="0" height="0" onload="checkInstructor(\''. $instructor . '\');return false;"/></div>',
	);*/
 	
  	addTwoColumnRowToAddEditForm($form, 'webexname_webexpass');
  	
  	$defaultValue =  getDefaultUserAddEditFormFieldValue('webex_name', $form_state, $userDetails);
  	addTextFieldToAddEditForm($form, 'webex_name', t('Webex').t(" ").t('LBL054'), $defaultValue, 22, false);
	
	$enc = new Encrypt();
  	$defaultValuepass =  getDefaultUserAddEditFormFieldValue('webex_pass', $form_state, $userDetails);
  	//$defaultValuepass = $userDetails['webex_pass'];
  	addPasswordFieldToAddEditForm($form, 'webex_pass', t('Webex').t(" ").t('LBL060'), $enc->decrypt($defaultValuepass), 23, false);

  	$form['hid'] = array(
  			'#type' => 'hidden',
  			'#default_value' => $defaultValuepass,
  			);
  	endAddEditTwoColumnRow($form);
  }
 // addTwoColumnRowToAddEditForm($form, 'hire_date');
    $defaultValue1 =  getDefaultAddEditFormFieldValue('hire_date', $form_state, $userDetails);
    //addTextFieldToAddEditForm($form, 'hire_date', t('LBL175'), $defaultValue, 23);
    if($defaultValue1!='') $defaultValue1 = date('m-d-Y', strtotime($defaultValue1));
	//date_format(date_create($old_dateformat), 'Y-m-d')
	//$old_dateformat = str_replace("-", "/", $form_state['values']['end_date']);
		//		$end_date = date_format(date_create($old_dateformat), 'Y-m-d H:i');

				$attributes = array();
                $attributes['class'][] = 'addedit-edit-end_date';
                $attributes['data-datePickerDatesDisplayOption'] = 'hiredate';
                $attributes['data-emptyDateFieldText'] =t('LBL112');
                $attributes['data-datePickerTooltip'] = t('LBL218');
                $attributes['class'][] = 'addedit-edit-datefield';
               // $attributes['readonly'] = '';
                if ($readOnly) {
                  $attributes['class'][] = 'addedit-readonly-datefield';
                }
                $attributes['autocomplete'] = 'off';
                $attributes['tabindex'] = 25;
                $viewWidthInChars = 10;
                $maxChars = 40;
                $form['hire_date'] = array(
                  '#type' => 'textfield',
                //  '#title' => t('LBL175'),
                '#prefix' =>'<div class="addedit-new-field-title">' .
                               t('LBL175') . ':' .
                             '</div>' ,
                  '#default_value' => $defaultValue1,
                  '#disabled' => $readOnly,
                  '#attributes' => $attributes,
                  '#size' => $viewWidthInChars,
                  '#maxlength' => $maxChars
                 );
  
  $form['separator2'] = array(
    '#prefix' => '<div class="separator"></div>',
  );
    addTwoColumnRowToAddEditForm($form, 'othermanager_otherorganization');

    $defaultValue = getUserOtherOrganizationIds($userDetails['id']);
    expDebug::dPrint(' $defaultValue ----> = ' . print_r($defaultValue, true) ,4);
    addMultiselectDropDownToAddEditForm($form, 'oorgs', t('LBL136'), array(), $defaultValue, 24, false, false, array('style'=>'display: none;'), array('code' => 'ste_con_org', 'user_id' => core_encrypt($userDetails['id'])));

//     $defaultValue =  getDefaultUserOrgAddEditFieldValue('omanagers', $form_state, $userDetails);
//     if(!empty($defaultValue)){
//     	$demanagers_new_arr = array();
//     	foreach ($defaultValue as $v){
//     		    $demanagers_new_arr[] = $v;
//     	}
//     	$defaultValue = $demanagers_new_arr;
//     }
    $defaultValue = getUserOthManagerIds($userDetails['id']);
    expDebug::dPrint(' $defaultValue ----> = ' . print_r($defaultValue, true) ,4);
    //addMultiselectDropDownToAddEditForm($form, 'omanagers', t('LBL135'), $otherManagersOptions, $defaultValue, 25, false, false, array(), array(), 15);
    //endAddEditTwoColumnRow($form);
    addMultiselectDropDownToAddEditForm($form, 'omanagers', t('LBL135'), array(),$defaultValue, 24, false, false, array('style'=>'display: none;'), array('code' => 'ste_con_mgr', 'user_id' => core_encrypt($userDetails['id'])));

    endAddEditTwoColumnRow($form);

  if(!empty($userDetails['drupal_picture'])) {
    $headerProfileImage = file_create_url($userDetails['drupal_picture']);
    // Create the form element
    $form['load_uploaded_image'] = array(
      '#type' => 'markup',
      '#prefix' => addEditGetPrefix('FIELD', t('LBL062')).'<table border="0" cellpadding="0" cellspacing="0"><tr><td valign="middle"><img class="admin-user-load-picture" src="'.$headerProfileImage.'" />',
      '#suffix' => '</td>',
    );
    /*$form['rem_link'] = array(
   		'#type' => 'checkbox',
   		'#title' => t('Delete Picture'),
   		'#prefix' => '<td>',
   		'#suffix' => '</td></tr></table>'.addEditGetSuffix('FIELD'),
   		'#attributes' => array('tabindex' => '24'),
   		);*/
    $delProfileAttributes['class'] = array();
    $delProfileAttributes['class'][] = 'addedit-form-expertusone-throbber';
    $delProfileAttributes['class'][] = 'admin-save-button-middle-bg';
    $delProfileAttributes['class'][] = 'admin-delete-img input-field-set';
    $delProfileAttributes['tabindex'][] = '17';
    // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
    $delProfileAttributes['data-wrapperid'] = array('user-basic-addedit-form');
    $form[$formName]['user_profile_image_details'] = array(
    //'#type' => 'submit',
                 '#type' => 'image_button', '#src' => base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/close.png',
    //'#value' => 'Delete'.$i,
                  '#name' => 'Delete Image',
                  '#prefix' => '<td> &nbsp;',
		          '#suffix' => '</td></tr></table>'.addEditGetSuffix('FIELD'),
                  '#submit' => array('delete_profile_images'),
                  '#attributes' => $delProfileAttributes,
                  '#ajax' => array(
                    'callback' => 'addEditRepaintForm',
                    'wrapper' => 'user-basic-addedit-form',
                    'user_id' =>$userDetails['id']
    ),
    );

  }else {
    addTwoColumnRowToAddEditForm($form, 'upload');//endAddEditTwoColumnRow($form);
    $form['uploaded1'] = array(
    '#prefix' => '<div class="admin-user-upload-picture">',
     );

    // Upload picture
    $defaultValue =  getDefaultUserAddEditFormFieldValue('picture', $form_state, $userDetails);
    addFileUploadControlToAddEditForm($form, 'picture', t('LBL170'), $defaultValue, 26,false,false,15);
    $form['uploaded2'] = array(
  	'#suffix' => '</div>',
    );
    endAddEditTwoColumnRow($form);
  }
  
  if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/To render the custom attributes for related user entity in User Screen
      include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');                 
      renderCustomAttributesInAddEditForm($form, $form_state,'cre_usr',$userDetails['id']);    
  } //#custom_attribute_0078975 - End Check module status
  
  if((variable_get('webex_User') == 1) && $webex_module[0]->status == 'Y'){
  
  	global $base_url;
  	$form[$formName]['on_load'] = array(
  			'#type' => 'markup',
  			'#prefix' => '<div style="display:none"><img src="'.$base_url.'/sites/all/themes/core/expertusoneV2/logo.png" width="0" height="0" onload="checkInstructor(\''. $instructor . '\');return false;"/></div>',
  	);
  }
 
  if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status  
     addCustomAttributesBlockToAddEditForm($form, $form_state, $userId, 'user', 'userbasic-custom-attributes', 'user-basic-addedit-form');  
  }else{
  addCustomFieldsBlockToAddEditForm($form, $form_state, $userId, 'user', 'userbasic-custom-fields', 'user-basic-addedit-form', 27);
  } //#custom_attribute_0078975 - End Check module status 
  
  $passwordPolicyRestrictionsHTML = userAddEditGetPasswordPolicyRestrictionsHTML($drupalUid);
  userorganizationAddEditFormWithCancelAndSaveClose($form, 'user-basic-addedit-form', 'user-basic-save', 'user-basic-cancel', $passwordPolicyRestrictionsHTML, $userDetails,$emptyId);

  return $form;
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_user_basic_addedit_form', $ex);
  	expertusErrorThrow($ex);
  }
}


/*
 * exp_sp_administration_user_basic_addedit_form_validate - validate the data entered by the user in the exp_sp_administration_user_basic_addedit_form form
 */
function exp_sp_administration_user_basic_addedit_form_validate($form, &$form_state,$userId) {
	try {
  $form_state['hidden-save-submit'] = false;
  $form_state['esign_show_popup']= false;
  $form_stat['user_action_status']='';
  if ($form_state['values']['op'] == t('LBL109')) {
    $form_state['input'] = array(); // Clear user input - raw
    $form_state['values'] = array(); // Clear user input - security cleared
    $form_state['rebuild'] = TRUE; // Rebuild the form. Submit handler will not be called.
    return;
  }

  if ($form_state['triggering_element']['#name'] == 'country') {
    // Since country has changed, we need to unset any selection for state made by the user
    unset($form_state['values']['state']);
    unset($form_state['input']['state']);
    $form_state['storage']['affected_dropdown'] = 'state';
    return;
  }

  //$eSignatureAvailable = false;
  if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
    $form_state['storage']['password'] = $form_state['values']['password'];
    if(!empty($form_state['storage']['password'])){
      $form_state['storage']['newpassword'] = $form_state['storage']['password'];
      unset($form_state['storage']['password']);
    }
    if($form_state['triggering_element']['#name']=='save')
    $triggerValue  = 'save';
    else
    $triggerValue  = 'usr-activate-suspend';
  } else {
    $triggerValue  = 'hidden-save';
  }

  if ($form_state['triggering_element']['#name'] == $triggerValue){
    $form_state['esign_show_popup']= true;
    // Check all mandatory fields exist
    addEditCheckMandatoryFields($form, $form_state, array('first_name', 'last_name', 'user_name', 'email')); //'password', 'confirm_password',
    if(!empty($form_state['values']['first_name']) && (preg_match('/[\\\\<>"]/',$form_state['values']['first_name'])) ) {
    		form_set_error('first_name', t('ERR171').' '.t('LBL056').'.');
    		$form_state['esign_show_popup']= false;
    }
    if(!empty($form_state['values']['last_name']) && (preg_match('/[\\\\<>"]/',$form_state['values']['last_name'])) ) {
    		form_set_error('last_name', t('ERR171').' '.t('LBL058').'.');
    		$form_state['esign_show_popup']= false;
    }
    expDebug::dPrint('USER NAME--->'.$form_state['values']['user_name'],1);
    // Verify username (TBD only when changed for edit during edit record)
    if (!empty($form_state['values']['user_name'])) {
      if (strpos($form_state['values']['user_name'], ' ') !== FALSE) { // There should be no space in username (there should be other checks as well TBC)
        form_set_error('user_name', t('ERR015'));
        $form_state['esign_show_popup']= false;
      } else if (existsUserName($form_state['values']['user_name'], $form_state['values']['drupal_uid'])) { // Confirm user name has not already been used
        form_set_error('user_name', t('ERR016'));
        $form_state['esign_show_popup']= false;
      }else if(preg_match('/[\\\\<>"]/',$form_state['values']['user_name'])){
      	form_set_error('user_name', t('ERR068'));
      	$form_state['esign_show_popup']= false;
      }
    }

    // Validate email address
    if (!empty($form_state['values']['email'])) {

      if (!validateEmail($form_state['values']['email'])) { // Check email address format
        form_set_error('email', t('ERR002'));
        $form_state['esign_show_popup']= false;
      } else if (existsUserEmail($form_state['values']['email'], $form_state['values']['drupal_uid'])) { // Confirm email address is new
        form_set_error('email', t('ERR001'));
        $form_state['esign_show_popup']= false;
      }
    }
    if(!isset($form_state['storage']['new_user_id'])){
    	$form_state['values']['is_instructor'] = isset($form_state['values']['roles']['is_instructor']) ? 'Y' : 'N';
    	if(($form_state['values']['is_instructor'] == 'N') && (!empty($form_state['values']['id']))) {
    		$checkSessionIns = checkInstructorAssignedSession($form_state['values']['id']);
    		if($checkSessionIns > 0) {
    			form_set_error('is_instructor', t('MSG768'));
    			$form_state['esign_show_popup']= false;
    		}
    	}
    }
    // Validate Employee id
    if (!empty($form_state['values']['employee_no'])) {
      if (existsUserEmpid($form_state['values']['employee_no'],$form_state['values']['id'])) { // Check Employee id
        form_set_error('employee_no', t('ERR159'));
        $form_state['esign_show_popup']= false;
      }
    }
    //59995: System hangs when trying to save an edit to a user account (Administer tab > User)
    expDebug::dPrint(' User Default Manager ID---> '. print_r($form['manager_id']['#default_value'], true) , 4);
    expDebug::dPrint(' User Default Manager Other ID---> '. print_r($form['load_multiselect_omanagers']['#default_value'], true) , 4);   
    $manager_ids_arr = array();
    if(!empty($form['load_multiselect_omanagers']['#default_value']))
    	$manager_ids_arr = explode(',', $form['load_multiselect_omanagers']['#default_value']);
    if(!empty($form_state['values']['manager_id']))
    	$manager_ids_arr[] = $form['manager_id']['#default_value'];
    expDebug::dPrint(' User Default Manager List---> '. print_r($manager_ids_arr, true) , 4);
    $post_manager_ids = array();
    if(!empty($form_state['values']['load_multiselect_omanagers']))
    	$post_manager_ids = explode(',',$form_state['values']['load_multiselect_omanagers']);
    if(!empty($form_state['values']['manager_id']))
    	$post_manager_ids []= $form_state['values']['manager_id'];
    expDebug::dPrint(' User Post Manager List---> '. print_r($post_manager_ids, true) , 4);
    expDebug::dPrint('Manager List Default value---> '. print_r($form['manager']['#default_value'], true) , 4);
    expDebug::dPrint('Manager List New---> '. print_r($form_state['values']['manager'], true) , 4);
    
    if(!check_two_array_equal($manager_ids_arr,$post_manager_ids) ||  $form['manager']['#default_value']!= $form_state['values']['manager']){
	    // Validate manager name
	    unset($form_state['storage']['acvalues']['manager']);
	    $mgrPattern = $form_state['values']['manager'];
	    if (!empty($mgrPattern)) {
	      $mgrList = getUserAdminMatchingManagersList($mgrPattern, $form_state['values']['manager_id'], $form_state['values']['id']);
	      $mgrCount = count($mgrList);
	      if ($mgrCount <= 0) {
	        form_set_error('manager',t('ERR251'));
	        $form_state['esign_show_popup']= false;
	      } else if ($mgrCount > 1) {
	        form_set_error('manager', t('ERR081'));
	        $form_state['esign_show_popup']= false;
	      } else {
	        // Save the full manager name and id in $form_state['storage']['acvalues']['manager']
	        $form_state['storage']['acvalues']['manager']['id'] = $mgrList[0]->id;
	        $form_state['storage']['acvalues']['manager']['name'] = $mgrList[0]->full_name;
	
	        // Validate Other Managers
	        // User's selection for manager cannot be present in Other Managers selections
	        if (!empty($form_state['values']['load_multiselect_omanagers']) && in_array($mgrList[0]->id, explode(',',$form_state['values']['load_multiselect_omanagers']))) {
	          form_set_error('manager', t('ERR111'));
	          form_set_error('omanagers', ' ');
	          $form_state['esign_show_popup']= false;
	          unset($form_state['storage']['acvalues']['manager']);
	        }
	      }
	    }
	    $post_other_manager_ids = array();
        if(!empty($form_state['values']['load_multiselect_omanagers'])) {
			$post_other_manager_ids = explode(',', $form_state['values']['load_multiselect_omanagers']);
        }
        expDebug::dPrint(' Post Manager List -> '. print_r($post_other_manager_ids, true) , 4);
        if(count($post_other_manager_ids) > 0 && !empty($form_state['values']['id'])) {
            // expDebug::dPrint('comes here');
	    	$reporte_arr= getDirectReporteeIds($form_state['values']['id']);
	    	expDebug::dPrint(' REportee List---> '. print_r($reporte_arr, true) , 4);
	    	$common_result=array_intersect($post_other_manager_ids,$reporte_arr);
	    	if(count($common_result)>0){
	    		$common_result = array_unique($common_result);
	    		$name = '';
	    		foreach ($common_result as $UserId){
	    			$user_det_arr = getUserInformations($UserId);
	    			expDebug::dPrint(' $user_det_arr  REportee List---> '. print_r($user_det_arr, true) , 4);
	    			if($name=='')
	    				$name = $user_det_arr['first_name'].' '.$user_det_arr['last_name'];
	    			else
	    				$name .= ', '.$user_det_arr['first_name'].' '.$user_det_arr['last_name'];
	    		}
	    		form_set_error('load_multiselect_omanagers',$name.'-'.t('ERR251'));
	    		$form_state['esign_show_popup']= false;
	    	}
	    	expDebug::dPrint(' common Manager List---> '. print_r($post_manager_ids, true) , 4);
	    }
  	}else{
  		// Save the full manager name and id in $form_state['storage']['acvalues']['manager']
  		$form_state['storage']['acvalues']['manager']['id'] = $form_state['values']['manager_id'];
  		$form_state['storage']['acvalues']['manager']['name'] = $form_state['values']['manager'];
  	}

  	$defaultcode =  getPersonDetails($form_state['values']['id'], array('dept_code','user_type', 'employment_type', 'job_title','webex_name','webex_pass'));
  	$defaultemplType = getProfileListItemByCode($defaultcode['employment_type']);
    // Validate employment type
    $emplType = t(trim($form_state['values']['empltype'])); // #0048058 t() added For checking condition
    if (!empty($emplType) && ($defaultemplType[0]->name != $emplType)) {
      $itemsList = getProfileItemNamesKeyed('cre_usr_etp_');
      $matchFound = false;
      foreach ($itemsList as $code => $name) {
        if ($name == $emplType) {
          $matchFound = true;
          break;
        }
      } // end foreach
      if (!$matchFound) {
        form_set_error('empltype', t('LBL174').' '.t('ERR148'));
        $form_state['esign_show_popup']= false;
      }
    }
	
	//expDebug::dPrint("default code >>> ".print_r($defaultcode,1),5);
	$defaultDepartment = getProfileListItemByCode($defaultcode['dept_code']);
    // Validate department
    $deptCode = t(trim($form_state['values']['deptcode'])); // #0048058 t() added For checking condition
    if (!empty($deptCode) && ($defaultDepartment[0]->name != $deptCode)) {
      $itemsList = getProfileItemNamesKeyed('cre_usr_dpt_');
      $matchFound = false;
      foreach ($itemsList as $code => $name) {
        if ($name == $deptCode) {
          $matchFound = true;
          break;
        }
      } // end foreach
      if (!$matchFound) {
        form_set_error('deptcode', t('LBL179').' '.t('ERR148'));
        $form_state['esign_show_popup']= false;
      }
    }
	$defaultjobtitle = getProfileListItemByCode($defaultcode['job_title']);
    // Validate job title
    $jobTitle = t(trim($form_state['values']['jobtitle'])); // #0048058 t() added For checking condition
    if (!empty($jobTitle) && ($defaultjobtitle[0]->name != $jobTitle)) {
      $itemsList = getProfileItemNamesKeyed('cre_usr_jtl_');
      $matchFound = false;
      foreach ($itemsList as $code => $name) {
        if ($name == $jobTitle) {
          $matchFound = true;
          break;
        }
      } // end foreach
      if (!$matchFound) {
        form_set_error('jobtitle', t('LBL073').' '.t('ERR148'));
        $form_state['esign_show_popup']= false;
      }
    }
   // 7306: Support of users to have more than 1 job role association -- No need validate bcz changed the multi dropdown
    // Validate job role
//     $jobRole = trim($form_state['values']['jobrole']);
//     if (!empty($jobRole)) {
//       $itemsList = getProfileItemNamesKeyed('cre_usr_jrl_');
//       $matchFound = false;
//       foreach ($itemsList as $code => $name) {
//         if ($name == $jobRole) {
//           $matchFound = true;
//           break;
//         }
//       } // end foreach
//       if (!$matchFound) {
//         form_set_error('jobrole', t('LBL133').' '.t('ERR148'));
//         $form_state['esign_show_popup']= false;
//       }
//     }

    $defaultusrtype = getProfileListItemByCode($defaultcode['user_type']);

    // Validate user type
    $userType = t(trim($form_state['values']['usertype'])); // #0048058 t() added For checking condition
    if (!empty($userType)&& ($defaultusrtype[0]->name != $userType)) {
      $itemsList = getProfileItemNamesKeyed('cre_usr_ptp_');
      $matchFound = false;
      foreach ($itemsList as $code => $name) {
        if ($name == $userType) {
          $matchFound = true;
          break;
        }
      } // end foreach
      if (!$matchFound) {
        form_set_error('usertype', t('LBL173').' '.t('ERR148'));
        $form_state['esign_show_popup']= false;
      }
    }
	//Validate hire date
// 	if($form_state['values']['hire_date']=='' || $form_state['values']['hire_date']==t('LBL112')){
//             form_set_error('hire_date', t('LBL175').t('ERR101'));
//             $form_state['esign_show_popup']= false;
// 	 	    $old_dateformat=str_replace("-","/",$form_state['values']['hire_date']);
//             $end_date= date_format(date_create( $old_dateformat),'Y-m-d');
// 	}

   if (!empty($form_state['values']['hire_date']) && $form_state['values']['hire_date'] != t('LBL112')) {
    	if(!validateDateFormat($form_state['values']['hire_date'],'m-d-Y') || !validateDateMonthYear($form_state['values']['hire_date'],'m-d-Y',now(),5)){
    			form_set_error('hire_date', t('ERR242'));
          	$form_state['esign_show_popup']= false;
    	}
    }
    // If no error in manager name, validate Other Managers
    // Other managers cannot have the name selected as manager name.

    // Validate Organization
    // Organization name pattern should match uniquely with an organization name
    unset($form_state['storage']['acvalues']['org']);
    $orgpattern = $form_state['values']['org'];
    if (!empty($orgpattern)) {
      $orgsList = getMatchingOrgsList($orgpattern, $form_state['values']['org_id']);
      $orgCount = count($orgsList);

      if ($orgCount <= 0) {
        form_set_error('org', t('Organization').' '.t('ERR148'));
        $form_state['esign_show_popup']= false;
      }
      else if ($orgCount > 1) {
        form_set_error('org', t('ERR076'));
        $form_state['esign_show_popup']= false;
      }
      else {
        // Save the full location name and id in $form_state['storage']['acvalues']['org']
        $form_state['storage']['acvalues']['org']['id'] = $orgsList[0]->id;
        $form_state['storage']['acvalues']['org']['name'] = $orgsList[0]->name;

        // Validate Other Organization
        // User's selection for organization cannot be present in Other Organizations selections
        // change by ayyappans for 33432: Issue in Users
        $selectedOorgs = explode(',', $form_state['values']['load_multiselect_oorgs']);
        if (!empty($form_state['values']['load_multiselect_oorgs']) && in_array($orgsList[0]->id, $selectedOorgs)) {
          form_set_error('org', t('ERR112'));
          form_set_error('oorgs', ' ');
          $form_state['esign_show_popup']= false;
          unset($form_state['storage']['acvalues']['org']);
        }
      }
    }

    // Validate Location
    // Location pattern has to uniquely match a location
    if (!empty($form_state['input']['locationset_fieldset']['locationset']['locationset_name_0'])) {
      if(!empty($form_state['input']['locationset_fieldset']['locationset']['hid_locationset_id_0'])){
        $form_state['storage']['acvalues']['location']['name'] = $form_state['input']['locationset_fieldset']['locationset']['locationset_name_0'];
        $form_state['storage']['acvalues']['location']['id'] = $form_state['input']['locationset_fieldset']['locationset']['hid_locationset_id_0'];
      } else {
        form_set_error('locationset_fieldset', t('Location does not exist.'));
        $form_state['esign_show_popup']= false;
      }
    }

    //Validate Webex credentials if the User has instructor role
	
	if(isset($form_state['values']['roles']['is_instructor'])){
	   if(empty($form_state['values']['webex_name']) && !empty($form_state['values']['webex_pass'])){
    	form_set_error('webex_name', t('WebEx').t(' ').t('LBL054').t(' ').t('ERR101'));
    	$form_state['esign_show_popup']= false;
    }
    if(!empty($form_state['values']['webex_name']) && !empty($form_state['values']['id'])){
    	if(empty($form_state['values']['webex_pass']) && empty($defaultcode['webex_pass'])){
    	form_set_error('webex_pass', t('WebEx').t(' ').t('LBL060').t(' ').t('ERR101'));
    	$form_state['esign_show_popup']= false;
    	} else if($form_state['values']['webex_name'] != $defaultcode['webex_name'] && empty($form_state['values']['webex_pass'])){
			form_set_error('webex_pass', t('WebEx').t(' ').t('LBL060').t(' ').t('ERR101'));
    		$form_state['esign_show_popup']= false;
			}
		}
	if(!empty($form_state['values']['webex_name']) && empty($form_state['values']['id']) && empty($form_state['values']['webex_pass'])){
		form_set_error('webex_pass', t('WebEx').t(' ').t('LBL060').t(' ').t('ERR101'));
    	$form_state['esign_show_popup']= false;
	}
	}
    if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/Validate custom fields
       include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
        validateCustomAttributesInAddEditForm($form, $form_state,'cre_usr'); 
    }else{
        validateCustomFieldsInAddEditForm($form, $form_state);
    } //#custom_attribute_0078975 - End Check module status

    // Validate custom fields
    

    expDebug::dPrint(' $form_state[storage][acvalues] = ' .
    print_r($form_state['storage']['acvalues'], true) , 5);
  }//End if

  // For uploading the picture
  if($form_state['esign_show_popup'] == true && empty($form_state['values']['id'])){
    $loggedInUserId = getIdOfLoggedInUser();
    $userId = addNewUser($form, $form_state, $loggedInUserId, $pictureId);
    $form_state['storage']['drupal_uid'] = getDrupalIdOfUser($userId);
    $form_state['storage']['new_user_id'] = $userId;
    $form_state['storage']['password_policy'] = $form_state['values']['password'];
    if(!empty($_FILES['files']['name']['picture'])){
      $pictureId = uploadUserPictureSeparately($form, $form_state, $loggedInUserId, $form_state['storage']['drupal_uid']);
      if(!$pictureId){
        $form_state['esign_show_popup']= false;
      }
      $form_state['storage']['picture_params'] = empty($pictureId) ? '' : $pictureId;
    }
  } else if(!empty($_FILES['files']['name']['picture']) && $form_state['esign_show_popup'] == true){
    $pictureId = uploadUserPictureSeparately($form, $form_state, $loggedInUserId, $form_state['values']['drupal_uid']);
    if(!$pictureId){
      $form_state['esign_show_popup']= false;
    }
    $form_state['storage']['picture_params'] = empty($pictureId) ? '' : $pictureId;
  }

  if ($form_state['triggering_element']['#name'] == 'hidden-save' || $form_state['triggering_element']['#name']=='usr-status-upd-hidden-save') {
    $form_state['user_action_status'] = $form_state['triggering_element']['#ajax']['userActionStatus'];
    expDebug::dPrint('Ilayaraja user status : '.$form_state['user_action_status'] , 5);
		if($form_state['user_action_status'] == 'Suspend'){
			$checkSessionIns = checkInstructorAssignedSession($form_state['values']['id']);
			if($checkSessionIns > 0) {
				form_set_error('is_instructor', t('MSG768'));
				$form_state['esign_show_popup']= false;
			}
		}
    $form_state['hidden-save-submit']=true;
    $form_state['esign_show_popup']= false;
  }
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_user_basic_addedit_form_validate', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Added by Subin ->> User Address Verification using USPS Web tool API and returns if the address
 * is valid or not
 */
function getAddressVerified($form_state){
    try{
        include_once(drupal_get_path('module', 'exp_sp_administration_module_info') .'/exp_sp_administration_module_info.inc');
        include_once(drupal_get_path('module', 'exp_sp_usps_integration') .'/exp_sp_usps_integration.module');
                $uspsValidate = getDrupalModuleStatus(array('exp_sp_usps_integration'));
                $countryCode = strtolower(trim($form_state['values']['country']));
                $is_verified_add = 'No';
                $is_valid_add = '';
                $invalid_add_reason = '';
                expDebug::dPrint(' Module status() form state values '.$uspsValidate , 4);
                expDebug::dPrint(' country code() form state values '.$countryCode , 4);
                if($uspsValidate == 1 && $countryCode == 'us'){
                                        $address_info = array(
                                                'apt' => trim($form_state['values']['addr1']),
                                                'address' => trim($form_state['values']['addr2']),
                                                'city' => trim($form_state['values']['city']),
                                                'state' => trim($form_state['values']['state']),
                                                'zip5' => trim($form_state['values']['zip']),
                                        );
                                        if($address_info['apt']=='' && $address_info['address']=='' && $address_info['city']=='' && $address_info['state']=='' && $address_info['zip5']==''){
                                            $addressVerify = '';
                                        }else{
                                            $addressVerify = exp_sp_usps_integration_verify_address($address_info);
                                        }
                                        $response = end($addressVerify);
                                        $is_verified_add = (!empty($response)) ? 'Yes' : 'No';
                                        $isuspsError = $response['Address']['Error']['Description'];
                                        if(empty($isuspsError) && !empty($response)){
                                                $resCity = strtolower($response['Address']['City']);
                                                $inpCity = strtolower($address_info['city']);
                                                $isuspsError = ($resCity == $inpCity) ? '' : 'Invalid City';
                                        }
                                        $is_valid_add = (!empty($isuspsError)) ? 'Invalid' : (empty($response) ? '': 'Valid');
                                        $invalid_add_reason = (!empty($isuspsError)) ? $isuspsError : null;
                        }
    	return array('is_verified_add' => $is_verified_add, 'is_valid_add' => $is_valid_add, 'invalid_add_reason' => $invalid_add_reason);
    } catch (Exception $ex) {
        watchdog_exception('getAddressVerify', $ex);
  	expertusErrorThrow($ex);
    }
 }

/*
 * exp_sp_administration_user_basic_addedit_form_submit() - Save the data entered by the user in the exp_sp_administration_user_basic_addedit_form form
 */
function exp_sp_administration_user_basic_addedit_form_submit($form, &$form_state) {
	try {
  expDebug::dPrint(' exp_sp_administration_user_basic_addedit_form_submit() called.'. $form_state['storage']['drupal_uid']. ' - '.$form_state['storage']['picture_params'] , 5);
  expDebug::dPrint(' $_FILES[files] = ' . print_r($_FILES['files'], true) , 4);
  expDebug::dPrint(' $form_state[build_info] = ' . print_r($form_state['values'], true) , 5);
//   if(!empty($form_state['values']['omanagers'])){
//   	$omanagers_new_arr = array();
//   	foreach ($form_state['values']['omanagers'] as $v){
//   		$k = (int) core_decrypt($v);
//   		$omanagers_new_arr[$k] = $k;
//   	}
//   	$form_state['values']['omanagers'] = $omanagers_new_arr;
//   }
//   expDebug::dPrint(' $form_state[build_info] = ' . print_r($form_state['values'], true) , 5);

  if(!empty($form_state['values']['load_multiselect_omanagers'])){
  	$omanagers_new_arr = array();
  	foreach ($form_state['values']['load_multiselect_omanagers'] as $v){
  		$k = (int) core_decrypt($v);
  		$omanagers_new_arr[$k] = $k;
  	}
  	$form_state['values']['omanagers'] = $omanagers_new_arr;
  }
  expDebug::dPrint(' $form_state[build_info] = ' . print_r($form_state['values'], true) , 5);
  include_once('exp_sp_administration_user.inc');

		//validate Address using USPS API
		$verifyAddress = getAddressVerified($form_state);
		//generate form_state values for the is_verified_add, is_valid_add, & invalid_add_reason
		$form_state['values']['is_verified_add'] = $verifyAddress['is_verified_add'];
		$form_state['values']['is_valid_add'] = $verifyAddress['is_valid_add'];
		$form_state['values']['invalid_add_reason'] = $verifyAddress['invalid_add_reason'];

  if($form_state['hidden-save-submit']==true){
    $loggedInUserId = getIdOfLoggedInUser();

    $pictureId = $form_state['storage']['picture_params'];
   // $srtyrle = $form_state['values']['securityrole'];
    unset($form_state['storage']['picture_params']);

    // Check whether add or edit
    //if (empty($form_state['values']['id'])) { // Add
    if(isset($form_state['storage']['new_user_id'])){
      $newUserId = $form_state['storage']['new_user_id'];
      $drupalUserId = getDrupalIdOfUser($newUserId);
      $form_state['values']['id'] = $newUserId;
      unset($form_state['storage']['new_user_id']);
      $isNotify = empty($form_state['storage']['password_policy']) ? 1 : 0;
      unset($form_state['storage']['password_policy']);
      updateUserActivateFromDelete($newUserId,$form_state['storage']['drupal_uid'], $form_state['values']['email'],$isNotify,$form_state['values'],$loggedInUserId);
      updateUserAddressDetails($form, $form_state, $loggedInUserId ,'Inserted');
      updateUserOrgDetails($form, $form_state, $loggedInUserId, $newUserId, 'Inserted'); // The form_state is received by reference in this function. Calues

      if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/Save Custom Attribute Values
        include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
        saveCustomAttributesInAddEditForm($form, $form_state, $newUserId, 'cre_usr', $loggedInUserId,'Inserted'); 
      }else{
      saveCustomFieldsInAddEditForm($form, $form_state, $newUserId, 'user', $loggedInUserId);
      } //#custom_attribute_0078975 - End Check module status 
          
      $emptyId = $form_state['values']['empty_id'];
      _updateAccessEntity($newUserId, "cre_usr", $emptyId);
     // expDebug::dPrint(' $form_state[build_info] = $srtyrle ' . print_r($srtyrle, true) , 5);
      $newGrpList = getGroupsDetails($newUserId,'',1,'',0);
      foreach($newGrpList as $key => $value)
      {
      	if(isset($value->name))
      	{
      		$newGrpListarr[] = $value->id;
      	}
      }
      $delUserGrp = 'Delete'; // While populat flat table the existing entry should be delete once/very first call
      if(count($newGrpListarr) > 0){
	    	foreach($newGrpListarr as $grpId){
	    		updatesGrpList($drupalUserId, $grpId,$newUserId,$loggedInUserId);
	    		//Added by Vincent on 24 Jan, 2017 for #0071187
	    		populateGroupUsersInFlatTable($grpId,$newUserId,$delUserGrp); // For Admin groups
	    		$delUserGrp = '';
	    	}
	  }
	  //Added by Vincent on 24 Jan, 2017 for #0071187
      populateGroupUsersInFlatTable(null,$newUserId,$delUserGrp); // For learner groups

      if(!empty($pictureId)){
        updateUserAndPictureId($drupalUserId, $pictureId);
        unset($form_state['storage']['drupal_uid']);
      }
            $is_valid_add = $form_state['values']['is_valid_add'];
            $invalid_add_reason = $form_state['values']['invalid_add_reason'];
      if($is_valid_add == 'Invalid' && !empty($invalid_add_reason)){
          expertus_set_message($invalid_add_reason);
      }
      expertus_set_message(t('LBL272').' '.t('MSG600').'.');

      // Henceforth this would be an edit operation. We need to set the new user id in form state build info, so
      // that cancel operation can fetch the new record's details from the database.
      $form_state['build_info']['args'][] = $newUserId;
      $form_state['storage']['new_entity'] = TRUE; // To indicate to Save ajax callback to build and render additional forms
      $form_state['rebuild'] = TRUE;
      // Also to trigger refresh of jqgrid on modal close.
    }
    else { //Edit
      unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
      unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
      $entityId = $form_state['values']['id'];
      $drupalUserId = getDrupalIdOfUser($entityId);

      $entityType = 'user';
      $uniqueId = $entityId.'-'.$entityType;
      $defUserdetails = getUserAccessPriviledges($entityId);
      expDebug::dPrint('Ilayaraja user status on submit: '.$form_stat['user_action_status'] , 5);
      if($form_state['user_action_status']=='Suspend' || $form_state['user_action_status']=='Activate'){
        activateOrDeactivatePeople($entityId,$form_state['user_action_status'],false);
        expertus_set_message(t('MSG348'));
      }else{
        if(!empty($form_state['storage']['newpassword'])){
          $form_state['values']['password'] = $form_state['storage']['newpassword'];
        }
		$enc1 = new Encrypt();
        $user_webex_pass = getPersonDetails($entityId, array('webex_pass'));
        $hid = $user_webex_pass['webex_pass'];
        if(empty($form_state['values']['webex_pass'])){
        	$form_state['values']['webex_pass'] = $hid;
        }else{
        	$form_state['values']['webex_pass'] = $enc1->encrypt($form_state['values']['webex_pass']);
        }
        updateUserBasicDetails($form, $form_state, $loggedInUserId, 0, $pictureId);
        unset($form_state['storage']['newpassword']);
        updateUserAddressDetails($form, $form_state, $loggedInUserId ,'Updated');
        updateUserOrgDetails($form, $form_state, $loggedInUserId, $entityId, 'Updated'); // The form_state is received by reference in this function. Calues
        
        if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/Update custom attribute values
            include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
            saveCustomAttributesInAddEditForm($form, $form_state, $form_state['values']['id'], 'cre_usr', $loggedInUserId,'Updated'); 
        }else{
        saveCustomFieldsInAddEditForm($form, $form_state, $form_state['values']['id'], 'user', $loggedInUserId);
        } //#custom_attribute_0078975 - End Check module status
        
        

		$attributes = getEnabledAttrForVisibility();// list of attributes in site configuration
		//Over ride form_state value to code
		//7306: Support of users to have more than 1 job role association
		expDebug::dPrint('yogaraja status on submit: '.$form_state['values']['load_multiselect_jobrole'] , 4);
		//$form_state['values']['jobrole'] = key(getMatchingProfileItemNamesKeyed($form_state['values']['load_multiselect_jobrole'], 'cre_usr_jrl_'));
		$form_state['values']['deptcode'] = key(getMatchingProfileItemNamesKeyed($form_state['values']['deptcode'], 'cre_usr_dpt_'));
		$form_state['values']['empltype'] = key(getMatchingProfileItemNamesKeyed($form_state['values']['empltype'], 'cre_usr_etp_'));
		$form_state['values']['usertype'] = key(getMatchingProfileItemNamesKeyed($form_state['values']['usertype'], 'cre_usr_ptp_'));
		$form_state['values']['is_manager'] = isset($form_state['values']['roles']['is_manager']) ? 'Y' : 'N';
		$form_state['values']['is_instructor'] = isset($form_state['values']['roles']['is_instructor']) ? 'Y' : 'N';
		//Array formation for equating form state value and attribute value
		$fieldformat['user_type'] = 'usertype';
		$fieldformat['is_manager'] = 'is_manager';
		$fieldformat['is_instructor'] = 'is_instructor';
		$fieldformat['org_id'] = 'org_id';
		//$fieldformat['job_role'] = 'jobrole';
		$fieldformat['employment_type'] = 'empltype';
		$fieldformat['department'] = 'deptcode';
		$fieldformat['country'] = 'country';
		$fieldformat['state'] = 'state';
		$fieldformat['language'] = 'preferred_language';
		$fieldformat['is_mobileadmin'] = 'register_sms';
		$fieldformat['hire_date'] = 'hire_date';
		$attrChangeflag = false;
		foreach($attributes as $key => $attr){
			if(	$attr == 'job_role'){
				$defa_job_role_arr = explode(',',$defUserdetails->job_role);
				foreach ($form_state['values']['load_multiselect_jobrole'] as $jobcodeval){
					if(!in_array($jobcodeval,$defa_job_role_arr)){
						$attrChangeflag = true;//set the flag as true when users attributes updated
						break;
					}
				}
				foreach ($defa_job_role_arr as $jobcodeval){
					if(!in_array($jobcodeval,$form_state['values']['load_multiselect_jobrole'])){
						$attrChangeflag = true;//set the flag as true when users attributes updated
						break;
					}
				}
			}
			else
			if($attr != 'role'){
				 if($defUserdetails->$attr != $form_state['values'][$fieldformat[$attr]]){
				 			$attrChangeflag = true;//set the flag as true when users attributes updated
				 			break;
				 }
			}else{
				if($defUserdetails->is_manager != $form_state['values']['is_manager'] || $defUserdetails->is_instructor != $form_state['values']['is_instructor']){
					$attrChangeflag = true;//set the flag as true when users attributes updated
					break;
				}
			}
		}
		if($attrChangeflag){
			expDebug::dPrint('TEST INSIDE---->> '.$entityId);
	        $exroleList = getExistingGrpList($entityId);
	        $newGrpList = getGroupsDetails($entityId,'',1,'',0);
	      	$ExistingRoleList = array();
			$newGrpListarr = array();
  			foreach($exroleList as $key => $value){
  				if(isset($value->name)){
  				$ExistingRoleList[] = $value->id;
  				}
 		 	}
 			foreach($newGrpList as $key => $value){
 		 		if(isset($value->name)){
 		 			$newGrpListarr[] = $value->id;
 		 		}
 			}
	 		$delUserGrp = 'Delete'; // While populat flat table the existing entry should be delete once/very first call
      		foreach($newGrpListarr as $grpId){
      			if(($keyval = array_search($grpId, $ExistingRoleList)) !== false) {
    				unset($ExistingRoleList[$keyval]);
				}else{
					updatesGrpList($drupalUserId, $grpId,$entityId,$loggedInUserId);
				}
				//Added by Vincent on 24 Jan, 2017 for #0071187
				populateGroupUsersInFlatTable($grpId,$entityId,$delUserGrp); // For Admin groups
				$delUserGrp = '';
      		}
	      	if(!empty($ExistingRoleList)){
	      		foreach($ExistingRoleList as $grpId){
								deleteGrpList($drupalUserId,$grpId,$entityId);
	      		}
	      	}
		}
		//Added by Vincent on 24 Jan, 2017 for #0071187
		populateGroupUsersInFlatTable(null,$entityId,$delUserGrp); // For Learner groups
			$is_valid_add = $form_state['values']['is_valid_add'];
			$invalid_add_reason = $form_state['values']['invalid_add_reason'];
      if($is_valid_add == 'Invalid' && !empty($invalid_add_reason)){
          expertus_set_message($invalid_add_reason);
      }
        expertus_set_message(t('LBL272').' '.t('MSG601').'.');
        
        if(!module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status,Below thing should be apply if not enable the custom attribute module
        customfieldsOperationsForDropdown($form, $form_state,$entityId,$entityType);
      }
      }
      if(!empty($pictureId)){
        updateUserAndPictureId($form_state['values']['drupal_uid'], $pictureId);
        // If any module has implemented hook_user_picture_updated invoke it
        foreach (module_implements('user_picture_updated') as $module) {
          $function = $module . '_user_picture_updated';
          expDebug::dPrint('$function = ' . $function, 4);
          $function($drupalUserId);
        }
      }

      $form_state['storage']['edited_entity'] = TRUE; // To trigger refresh of jqgrid on modal close.
      $form_state['display_class'] = TRUE;
      $form_state['rebuild'] = TRUE;
      $uid = getIdOfLoggedInUser();
      if($uid == $form_state['values']['id'] ) {
      	unsetSessionValues();
      }
    }
  }
  //To sync solr
  syncSolrData('User','','',$form_state['values']['id']);
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_user_basic_addedit_form_submit', $ex);
  	expertusErrorThrow($ex);
  }
}


function usernamecheckadmin($name){
	try {
  print existsUserName($name);
  } catch (Exception $ex) {
  	watchdog_exception('usernamecheckadmin', $ex);
  	expertusErrorThrow($ex);
  }
};
function addUsernameFieldToAddEditForm(&$form, $id, $title = '', $defaultValue = '', $tabIndex = null, $mandatory = false, $readOnly = false, $maxChars = 99999, $viewWidthInChars = 60, $description = false) {
 try {
  // Prepare the additional HTML attributes for the textfield
  $attributes = array();
  $attributes['autocomplete'] = 'off'; // Prevent browser autocomplete

  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $attributes['class'] = array('addedit-edit-' . $id); // This class must be prefixed with 'addedit-edit-' followed by the form field id.

  // Add class to apply common style to all text fields.
  $attributes['class'][] = 'addedit-edit-textfield';

  //'onblur'=>'checkusernameadmin(this)'
  if(empty($defaultValue)){
    $attributes['onblur'][] = 'checkusernameadmin(this)';
  }
  if ($readOnly) {
    $attributes['class'][] = 'addedit-readonly-textfield';
  }

  if (isset($tabIndex) && $tabIndex > 0) {
    $attributes['tabindex'] = $tabIndex;
  }

  // If the view width is larger than max allowed characters, make view width equal to the max allowed characters
  if ($viewWidthInChars > $maxChars) {
    $viewWidthInChars = $maxChars;
  }

  $prefix = '';
  $suffix = '';
  if (empty($form['addedit_tmp_storage']['two_column'])) {
    $prefix = addEditGetPrefix('FIELD', $title, $mandatory);
    $suffix = addEditGetSuffix('FIELD');
  }
  else {
    if ($form['addedit_tmp_storage']['two_column']['current_column'] == 0) {
      $prefix = addEditGetPrefix('TWOCOL_FIRSTCOL_FIELD', $title, $mandatory);
      $suffix = addEditGetSuffix('TWOCOL_FIRSTCOL_FIELD');
      $form['addedit_tmp_storage']['two_column']['current_column'] = 1; // increment current column
    } else if ($form['addedit_tmp_storage']['two_column']['current_column'] == 1) {
      $prefix = addEditGetPrefix('TWOCOL_SECONDCOL_FIELD', $title, $mandatory);
      $suffix = addEditGetSuffix('TWOCOL_SECONDCOL_FIELD');
      $form['addedit_tmp_storage']['two_column']['current_column'] = 2; // increment current column
    } else {
      throw new Exception('exp_sp_administration.inc : addTextFieldToAddEditForm() : Attempt to add a third field to a two column row.');
    }
  }

  // Create the form element
  $form[$id] = array(
    '#type' => 'textfield',
    '#prefix' => $prefix,
    '#suffix' => $suffix,
    '#title' => $title,
    '#title_display' => 'invisible',
    '#default_value' => $defaultValue,
    '#disabled' => $readOnly,
    '#attributes' => $attributes,
    '#size' => $viewWidthInChars,
    '#maxlength' => $maxChars,
    '#description' => $description
  );
  } catch (Exception $ex) {
  	watchdog_exception('addUsernameFieldToAddEditForm', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_administration_user_permission() {
	try {
  return array(
    'Users Admin Perm' => array(
      'title' => t('Users Admin Perm')
  )
  );
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_user_permission', $ex);
  	expertusErrorThrow($ex);
  }
}
// change by ayyappans for 33432: Issue in Users
function getOrganizationListForUser($userId, $formSelectedOrgList) {
	try {
		//change by ayyappans for 41196: Can't able to save the page,system gets hang for a while
		if($userId == "undefined" || empty($userId)) {
			$otherOrganizationsOptions = getAllOrganizationSelectOptionsList(null, 0, true, $formSelectedOrgList);
		}
		else {
			$userDetails = getPersonDetails($userId);
			$already_organization_list = implode(',', getUserOtherOrganizationIds($userId));
			$orgsCombined = ($already_organization_list=='')?$formSelectedOrgList:$already_organization_list.','.$formSelectedOrgList;
		$otherOrganizationsOptions = getAllOrganizationSelectOptionsList($userDetails['org_id'], 0, true, $orgsCombined);
		}
		echo drupal_json_output($otherOrganizationsOptions);
	} catch (Exception $e) {
	}

}
function getJobRoleListForUser($userId, $formSelectedJobroleList) {
	try {
		//change by ayyappans for 41196: Can't able to save the page,system gets hang for a while
		if($userId == "undefined" || empty($userId)) {
			$otherOrganizationsOptions = getAllJobRoleSelectOptionsList(null, 0, true, $formSelectedJobroleList);
		}
		else {
			$userJobroleDetails = getUserAttributeValues($userId);
			$otherOrganizationsOptions = getAllJobRoleSelectOptionsList($userJobroleDetails, 0, true, $formSelectedJobroleList);
		}
		echo drupal_json_output($otherOrganizationsOptions);
	} catch (Exception $e) {
		watchdog_exception('getJobRoleListForUser', $ex);
		expertusErrorThrow($ex);
	}

}

function otherManagerListForUser($userId, $formSelectedMngrList) {
	try {
		expDebug::dPrint(' status of other manager: '.print_r($userId,1) , 4);
		
		
		//change by ayyappans for 41196: Can't able to save the page,system gets hang for a while
		if($userId == "undefined" || empty($userId)) {
			$otherManagerOptions = getAllManagersSelectOptionsList(null, 0, true, $formSelectedMngrList);
		}
		else {
			expDebug::dPrint(' status of other manager: '.print_r($otherManagerOptions,1) , 4);
				
			//$userJobroleDetails = getUserAttributeValues($userId);
			$userDetails = getPersonDetails($userId);
			$already_mngr_list = implode(',', getUserOthManagerIds($userId));			
			$mngrCombined = ($already_mngr_list=='')?$formSelectedMngrList:$already_mngr_list.','.$formSelectedMngrList;
			$otherManagerOptions = getAllManagersSelectOptionsList($userDetails['manager_id'], 0, true, $mngrCombined,$userId);
		}
		expDebug::dPrint(' status of other manager: '.print_r($otherManagerOptions,1) , 4);
		echo drupal_json_output($otherManagerOptions);
	} catch (Exception $e) {
		watchdog_exception('otherManagerListForUser', $ex);
		expertusErrorThrow($ex);
	}

}

?>
