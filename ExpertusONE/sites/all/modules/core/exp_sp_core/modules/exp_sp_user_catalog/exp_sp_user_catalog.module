<?php

/**
 * Implements hook_block_info().
 */
function exp_sp_user_catalog_block_info() {
	try{
  global $user;
  
  $blocks['online'] = array(
  	'info'  => t('User Catalog'),
    'cache' => DRUPAL_NO_CACHE,
  	'visiblity' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'learning/my-profile'
  );
  return $blocks;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_user_catalog_block_info', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_block_configure().
 */

function exp_sp_user_catalog_theme() {
	try{
  return array(
    'user_catalog_online' => array(
      'variables' => array('result' => array()),
      'template' => 'exp_sp_user_profile_catalog_online-view',//exp_sp_user_profile_online-view
  )
  );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_user_catalog_theme', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_user_catalog_block_configure($delta = '') {
	try{
  global $user;
 
  switch ($delta) {
    case 'online':
      $period = drupal_map_assoc(array(30, 60, 120, 180, 300, 600, 900, 1800, 2700, 3600, 5400, 7200, 10800, 21600, 43200, 86400), 'format_interval');
      $form['exp_sp_user_catalog_block_seconds_online'] = array('#type' => 'select', '#title' => t('User activity'), '#default_value' => variable_get('exp_sp_user_catalog_block_seconds_online', 900), '#options' => $period, '#description' => t('A user is considered online for this long after they have last viewed a page.'));
      $form['exp_sp_user_catalog_block_max_list_count'] = array('#type' => 'select', '#title' => t('User list length'), '#default_value' => variable_get('exp_sp_user_catalog_block_max_list_count',10), '#options' => drupal_map_assoc(array(3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 40, 50, 75, 100)), '#description' => t('Maximum number of currently online users to display.'));
      $form['exp_sp_user_catalog_block_refresh_interval'] = array('#type' => 'select', '#title' => t('Refresh interval'), '#default_value' => variable_get('exp_sp_user_catalog_block_refresh_interval', 60), '#options' => $period, '#description' => t('Automatically refresh online users list every this interval.'));
      return $form;
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_user_catalog_block_configure', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_block_save().
 */

function exp_sp_user_catalog_block_save($delta = '', $edit = array()) {
	try{
  global $user;

  switch ($delta) {
    case 'online':
      variable_set('exp_sp_user_catalog_block_seconds_online', $edit['exp_sp_user_catalog_block_seconds_online']);
      variable_set('exp_sp_user_catalog_block_max_list_count', $edit['exp_sp_user_catalog_block_max_list_count']);
      variable_set('exp_sp_user_catalog_block_refresh_interval', $edit['exp_sp_user_catalog_block_refresh_interval']);
      break;
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_user_catalog_block_save', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_block_view().
 */

function exp_sp_user_catalog_block_view($delta = '') {
	try{
  global $user;
  global $theme_key;
  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  $css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
  
  $block = array();
  switch ($delta) {
    case 'online':
      //drupal_add_js(drupal_get_path('module', 'exp_sp_administration').'/exp_sp_administration.js', $js_module_optional);
      //drupal_add_css(drupal_get_path('module', 'exp_sp_administration').'/exp_sp_administration.css', $css_module_optional);
      drupal_add_js(drupal_get_path('module', 'exp_sp_user_catalog').'/exp_sp_user_catalog.js',$js_module_optional);
      drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
      includeJqGridJsCss();
      if($theme_key == 'expertusoneV2') {
      //NEWUI THEME STYLE SHEET	
      drupal_add_css(drupal_get_path('module', 'exp_sp_user_catalog').'/exp_sp_user_catalog_v2.css', $css_module_optional);
      }else{
      drupal_add_css(drupal_get_path('module', 'exp_sp_user_catalog').'/exp_sp_user_catalog.css', $css_module_optional);
      }
      
      $block['subject'] = t('Users');
      $block['content'] =  " ";
      break;
  }
  expDebug::dPrint(' $block = ' . print_r($block, true),4);
  
  return $block;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_user_catalog_block_view', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_menu().
 */
function exp_sp_user_catalog_menu($delta = '') {
  try{
  $items = array();
    
  $items['learning/fetch-catalog-users-list/%'] = array (
  	'title' => 'Fetch the list of online users',
	'page callback' => 'fetch_catalog_users_list',
  	'page arguments' => array(2),
  	'access arguments' => array('access content'),  
	'type' => MENU_CALLBACK,
	'file' => 'exp_sp_user_catalog.inc'
  );
  
  $items['learning/user-catalog-autocomplete'] = array(
    'title' => 'Search User Catalog Autocomplete',
    'page callback' => 'getUserCatalogAutoComplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),    
    'file' => 'exp_sp_user_catalog.inc'
    );
    
 $items['learning/user/catalog/%']=array(
		'title' => 'User Profile',
		'page callback' => 'user_profile_detail_callback',
		'page arguments' => array(3),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	    'file' => 'exp_sp_user_catalog.inc'		
	    );   
  expDebug::dPrint(" items = ". print_r($items, true),4);
	
  return $items;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_user_catalog_menu', $ex);
  	expertusErrorThrow($ex);
  }
}

function user_profile_detail_callback($user_id)
{
	try{
  print theme('user_catalog_online', array('result' => getUserProfileDetails($user_id)));
  }catch (Exception $ex) {
  	watchdog_exception('user_profile_detail_callback', $ex);
  	expertusErrorThrow($ex);
  }
}
?>