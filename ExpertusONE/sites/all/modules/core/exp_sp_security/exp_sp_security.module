<?php
global $secure_path, $common_path, $secure_entities, $secure_entities_name, $secure_common_path, $conf_arr;
/* Encryption and decryption related work started here */
$confDir = !empty($_SERVER["SERVER_NAME"]) && is_dir($_SERVER["DOCUMENT_ROOT"]."/sites/".$_SERVER["SERVER_NAME"])?$_SERVER["SERVER_NAME"]:'default';
$conf_arr=parse_ini_file($_SERVER["DOCUMENT_ROOT"]."/sites/$confDir/exp_sp.ini");
//56136: Undefined error while edit the class under administer section.
include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/services/Encryption.php";
/**
 * Core API compatibility.
 */
define('SECRET_KEY', $conf_arr['secret_key']);
define('SECRET_IV', $conf_arr['secret_iv']);
define('VAR_START_CHAR', 'ZZ34ZZ');


/**
 * @var secure_path contain a path and arguments encrypted on the path
 */
$secure_path = array(
       // learning section
       'administration/learning/course-class/ajax/addedit' => '5',
       'administration/view-course/%/addedit/%' => '4',
       'administration/view-class/%/addedit/%' => '4',
       'administration/catalog-class-enroll/%/%/%' => '2|3',
       'administration/class-pagination/%/%/%' => '2',
       'administration/class-addedit/%/%/%/%' => '2|3',
       'ajax/administration/learning/catalog/show-catalog/%' => '5',
       'ajax/administration/learning/catalog/publish-and-unpublish/%/%/%' => '5',
       //content section
       'administration/manage/content/%/addedit/%' => '5',
       'administration/manage/view-content/%/addedit/%' => '5',
       // people section
       'administration/people/user/%/addedit' => '5',
       'ajax/administration/people/activate-and-deactivate/%' => '4',
       'ajax/administration/people/reset-password/%' => '4',
       'ajax/administration/people/user/get-enrollment-count/%' => '5',
       'administration/people/user/get-user-enrollments/%' => '4',
       'ajax/class-add-session/%/%/%/%/%/%' => '2|3|6|7',

       //user section
			 'learning/ajax/myprofile/user/%' =>'4',
);

$secure_entities = array('cre_usr', 'cre_sys_obt_crs', 'cre_sys_obt_cls');
$secure_entities_name = array('User', 'Course', 'Class');

/*--- Common encrypted path value as array value ---*/
$secure_common_path = array(
	    //common section
       'ajax/admincore/deleteprocessobject/%/%' => '3',
		   'administration/catalog-attachment/%/%' => '2',
       'administration/catalog-tags/%/%/%/%' => '3',
       'administration/clone/popup/%/%/%' => '4',
       'administration/print-certificate/%/%/%' => '2',
	     'administration/multiselect-grid/%/%/%/%/%/%' => '5',
);

/*--- Common conflict path entity_name and entity_type as array value ---*/
$common_path = array(
	//common section
    'ajax/admincore/deleteprocessobject/%/%' => '4',
    'administration/catalog-tags/%/%/%/%' => '4',
    'administration/clone/popup/%/%/%' => '5',
		'administration/catalog-attachment/%/%' => '3',
    'administration/print-certificate/%/%/%' => '3',
	  'administration/multiselect-grid/%/%/%/%/%/%' => '7',
);
/**
 * Implementation of hook_boot()
 */
function exp_sp_security_boot() {
	drupal_load('module', 'exp_sp_security');
	drupal_load('module', 'exp_sp_core'); // to call escape string core module included
	$path = $_GET['q'];
	if(isset($path)) {
		$args 			= explode('/', $path);
		$get_new_args 	= alterArg($args);
		$get_new  		= implode('/', $get_new_args);
		$_GET['q']		= $get_new;
	}
}


/**
 * Implementation of hook_init()
 */
/*function exp_sp_security_init() {
	global $secure_path, $common_path, $secure_common_path;
	$path = $_GET['q'];
	$cid = 'menu_item:' . hash('sha256', $path);
	//  Retrive path info from the cache menu
	if ($cached = cache_get($cid, 'cache_menu')) {
		$router_item = $cached->data;
	}
	else {
		$original_map = arg(NULL, $path);
		$parts = array_slice($original_map, 0, MENU_MAX_PARTS);
		$ancestors = menu_get_ancestors($parts);
		$router_item = db_query_range('SELECT * FROM {menu_router} WHERE path IN (:ancestors) ORDER BY fit DESC', 0, 1, array(':ancestors' => $ancestors))->fetchAssoc();
		cache_set($cid, $router_item, 'cache_menu');
	}
	$drupal_path = $router_item['path'];
	//print '$drupal_path:' . $drupal_path. "<br>";
	$isCommonPath = array_key_exists($drupal_path, $common_path);
	//print '$isCommonPath:' . $isCommonPath. "<br>";

	if ($isCommonPath) {
		$isSecureEnabled = checkModuleEncryptedPath($drupal_path, $path);
		//print '$$isSecureEnabled:' . $isSecureEnabled . "<br>";
		if (array_key_exists($drupal_path, $secure_common_path) && $isSecureEnabled){ // Check the path against secure paths
			$path_array = explode('/', $path);
			//print_r($path_array). "<br>";
			$path_key = explode("|", $secure_common_path[$drupal_path]);
			//print_r($path_key) . "<br>";
			foreach ($path_key as $val){
				if ((strpos($path_array[$val], VAR_START_CHAR) === false && !empty($path_array[$val])) || detectUTF8(trim(core_decrypt($path_array[$val])))==1 ) {
					drupal_not_found();
					exit();
				}
			}
		}
	} else {
		if (array_key_exists($drupal_path, $secure_path)){ // Check the path against secure paths
			$path_array = explode('/', $path);
			//print_r($path_array). "<br>";
			$path_key = explode("|", $secure_path[$drupal_path]);
			//print_r($path_key) . "<br>";
			foreach ($path_key as $val){
				if ((strpos($path_array[$val], VAR_START_CHAR) === false && !empty($path_array[$val])) || detectUTF8(trim(core_decrypt($path_array[$val])))==1 ) {
					drupal_not_found();
					exit();
				}
			}
		}
	}

}

function checkModuleEncryptedPath($drupal_path, $current_path) {
	global $common_path, $secure_entities, $secure_entities_name;
	$current_path_parts = explode('/', $current_path);
	if (in_array($current_path_parts[$common_path[$drupal_path]], $secure_entities)
			|| in_array($current_path_parts[$common_path[$drupal_path]], $secure_entities_name)) { // Check the name exist on the same conflict path
		return true;
	} else {
		return false;
	}

}*/
/**
 * Find string having UTF8
 */
function detectUTF8($string)
{
	return preg_match('%(?:
			[\xC2-\xDF][\x80-\xBF]        # non-overlong 2-byte
			|\xE0[\xA0-\xBF][\x80-\xBF]               # excluding overlongs
			|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}      # straight 3-byte
			|\xED[\x80-\x9F][\x80-\xBF]               # excluding surrogates
			|\xF0[\x90-\xBF][\x80-\xBF]{2}    # planes 1-3
			|[\xF1-\xF3][\x80-\xBF]{3}                  # planes 4-15
			|\xF4[\x80-\x8F][\x80-\xBF]{2}    # plane 16
	)+%xs', $string);
}

/**
 * URL Core Encryption
 * @return mixed encrypted hash
 */
function core_encrypt($data){
		global $user;
		$userId = ($user->uid) ? $user->uid : '00';
		$key = $userId.SECRET_KEY;
		//56136: Undefined error while edit the class under administer section.
		$enc = new Encrypt($key,SECRET_IV);
		$encVal = VAR_START_CHAR.$enc->encrypt($data);
		return $encVal;
}

/**
 * URL Core Decryption
 * @return mixed decrypted plain text
 */
function core_decrypt($data){
	if (strpos($data, VAR_START_CHAR) !== 0) { // Find Start char ar first of the value
		return $data;
	}
	global $user;
	$userId = ($user->uid) ? $user->uid : '00';
	$key = $userId.SECRET_KEY;
	//56136: Undefined error while edit the class under administer section.
	$dec = new Encrypt($key,SECRET_IV);
	$data = substr($data, strlen(VAR_START_CHAR));
	$decVal = $dec->decrypt($data);
	return trim($decVal);
}

function core_decrypt_ptp($data,$userId){
	if (strpos($data, VAR_START_CHAR) !== 0) { // Find Start char ar first of the value
		return $data;
	}
	//global $user;
	$userId = ($userId != '') ? $userId : '00';
	$key = $userId.SECRET_KEY;
	$dec = new Encrypt($key,SECRET_IV);
	$data = substr($data, strlen(VAR_START_CHAR));
	$decVal = $dec->decrypt($data);
	return trim($decVal);
}

/**
 * Alter Drupal arg() function aruguments value.
 * please check bootstrap.inc arg() function.
 */
function alterArg($arguments){
	foreach ($arguments as $key => $value) {
		if (strpos($value, VAR_START_CHAR) !== false) { // argument with encrypted values
			$arguments[$key] = escape_string(trim(core_decrypt($value)));
		} else {
			$arguments[$key] = escape_string($value);
		}
	}
	return $arguments;
}

function base64url_encode($data) {
	//str_replace("%body%", "black", "<body text='%body%'>");
	$data = base64_encode($data);
	$data = str_replace('+','X6DX',$data);
	$data = str_replace('/','DX6D',$data);
	return urlencode(rtrim($data,'='));
}

function base64url_decode($data) {
	//return base64_decode(str_pad(strtr($data, '-_', '+/'), strlen($data) % 4, '=', STR_PAD_RIGHT));
	$data = str_replace('X6DX','+',$data);
	$data = str_replace('DX6D','/',$data);
	return urldecode(base64_decode(str_pad($data, strlen($data) % 4, '=', STR_PAD_RIGHT)));
}
