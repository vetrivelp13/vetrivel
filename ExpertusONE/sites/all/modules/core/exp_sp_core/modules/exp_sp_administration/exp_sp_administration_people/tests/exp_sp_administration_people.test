<?php 

class AdministrationUserTestHelper extends ExpertusWebTestCase {
	private $searchResultContent=null;
	
	protected $testcases = array();

	protected $checkBoxGroupList = array();
	
	protected $entityOrgList = array();
	
	private $srcParam = array(
			'title'=>'',		// Title base search
			'announcementdaterange'=>'',		// date range on announcement
			'announcementlang'=>'cre_sys_lng_eng', 	// Selected languages pipe separated
			'sortby'=> 'desc',		//	Sort by option
			'announcemanage' => 'cre_sys_fop_me'
	);

	public function setUp() {
		parent::setUp();
		if($this->loggedInUser === FALSE){
			$this->drupalLogin($this->admin); // login as admin
		}
		if(empty($this->checkBoxGroupList)){
			$this->getGroupsList();
		}
		if(empty($this->entityOrgList)){
			$this->getOrgsList();
		}
		
		if(empty($this->testcases)){
			$this->getUserTestCases();
		}
		// set refer to prevent access denied error
		$this->setHttpReferer('admin/config/development/testing');
	}
	
	protected function getGroupsList(){
		include_once(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.inc');
		$start = 0;
		$limit = fetchRolesAll('COUNT');
		$fetchRoleAllList = fetchRolesAll('LISTS',$start,$limit,'', 'AZ');
		foreach($fetchRoleAllList as $key =>$value) {
			if ($value->status_code == 'cre_sec_sts_atv') {
				$this->checkBoxGroupList[$key+1] = $value->id;
			}
		}
		expDebug::dPrint(' getGroupDetail merged = ' . print_r($this->checkBoxGroupList, true) , 4);
	}
	
	protected function getOrgsList(){
		include_once(drupal_get_path('module', 'exp_sp_administration_organization') .'/exp_sp_administration_organization.inc');
		$start = 0;
		$numOrg = fetchOrganizationsAll('COUNT');
  		expDebug::dPrint(' $numOrg = ' . print_r($numOrg, true) ,4);
		$limit = ($numOrg < 5) ? $numOrg : 5;
		$fetchOrganizationsAll = fetchOrganizationsAll('LISTS',$start,$limit,'', 'AZ');
		expDebug::dPrint(' $numOrg = ' . print_r($fetchOrganizationsAll, true) ,4);
		foreach($fetchOrganizationsAll as $key =>$value) {
			//if ($value->status_code == 'cre_sec_sts_atv') {
				$this->entityOrgList[$value->id] = $value->name;
			//}
		}
		expDebug::dPrint(' getOrgsList  = ' . print_r($this->entityOrgList, true) ,4);
	}
	
	protected function getOrgDetails(){
		return $this->entityOrgList;
	}
	
	public function manageAdminUser($scope = 'basic') {
		expDebug::dPrint("Manage Admin User Param:: ".print_r($scope,true),4);
		// Get Main HTML content
		$this->drupalPost('administration/people/user');
		$content = $this->content;
		$condition_params = array();
		// Get Filters
		$this->drupalGetAJAX('administration/search-filter/user');
		$this->content = drupal_json_decode($this->content);
			
		//Update filters with existing response
		$replArray = array(
				'rendered_narrow_search_filters' => 'narrow-search',
				'rendered_main_div' => 'root-admin-results',
				'rendered_tab_content_main' => 'tab-content-main',
				'rendered_narrow_search_sortbar' => 'admin-maincontent_tab',
				'rendered_narrow_search_actionbar' => 'sort-bar-V2'
		);
			
		$this->updateSearchFilters($content, $replArray, 'div', 'tag', 'div' );
	
		$this->displayTagsById('narrow-search');
		$this->displayTagsById('root-admin-results');
		// Based on the scope set the data to test
		if ($scope == 'basic') {
			$testCases = $this->testcases['userList']['basic'];
		} else {
			$testCases = array($this->testcases['userList'][$scope]);
		}
		if(empty($testCases)){
			$this->getAdministrationUserList();
		}else{
			//Get search results
			foreach($testCases as $test){
				$this->getAdministrationUserList($test);
				foreach ($test as $key => $val){
					if($key == 'userstatus'){
						$key='status';
					}
					if($key == 'group'){
						if($val == '1'){
							$key = 'is_instructor';
							$val = 'Y';
						}
						if($val == '2'){
							$key = 'is_manager';
							$val = 'Y';
					
						}
						if($val== '1|2'){
							//instructor || manager
							$key = 'is_instructor | is_manager';
							$val = 'Y';
						}
					}
					$condition_params['condition'][] = array('per.'.$key,$val,'=');
				}				
			}				
		}
		$this->assertMessages($condition_params);
	}
	
	public function getAdministrationUserList($opt = array()){
		$optParam = $opt;
		$opt = array_merge($this->basicParam, $opt);
		$content = $this->content;
		$srcRc = $this->drupalGetAJAX('administration/people/user/search/all/',array('query'=>$opt));
		expDebug::dPrint("Manage Admin User Param:: ".print_r($optParam,true),4);
		if(!empty($optParam)){
			$this->setCheckBoxFilters($opt,$content,'group','group_filterset',$this->checkBoxGroupList);
			$statusValues = array('1' => 'cre_usr_sts_atv',
								'2' => 'cre_usr_sts_itv'); 
			$this->setCheckBoxFilters($opt,$content,'userstatus','userstatus_filterset',$statusValues);
			if(isset($opt['usertype'])){
				$xPathQuery="//div[@id='usertype_filterset']/div/div/child::input";
				$value=array('Employee');
				$this->refineSearchKeyword($content,$xPathQuery,$value);
			}
			if(isset($opt['userJobrole'])){
				$xPathQuery="//div[@id='userJobrole_filterset']/div/div/child::input";
				$value=array('Job Role 1');
				$this->refineSearchKeyword($content,$xPathQuery,$value);
			}
			if(isset($opt['department'])){
				$xPathQuery="//div[@id='department_filterset']/div/div/child::input";
				$value=array('Human Resources');
				$this->refineSearchKeyword($content,$xPathQuery,$value);
			}
			if(isset($opt['userorg'])){
				$xPathQuery="//div[@id='userorg_filterset']/div/div/child::input";
				$value=array(current($this->entityOrgList));
				$this->refineSearchKeyword($content,$xPathQuery,$value);
			}
		}
		$this->updateSearchResults($content,$srcRc,'narrow-search-results-holder');
	}
	
	protected function assertMessages($condition_params){
		$conditionStr='--';
		foreach($condition_params['condition'] as $condValue){
			$conditionStr.=implode(" ",$condValue);
		}
		if(count($this->id)==0){
			
			$userId = $this->getUser($condition_params);
			if($userId!=''){
				$testRawContent=$userId;
				$msg='User Information List';
				$this->assertRaw($testRawContent,$msg,'User Admin');
			}else {
				debug('No User content to List');
			}
		}else {
			foreach ($this->id as $contentId){
				//Edit link for each content row
				$editContentUrl = 'administration/people/user/nojs/addedit/'.core_encrypt($contentId);
				$testRawContent=$editContentUrl;
				$msg = 'Edit link for user with condition "'.$conditionStr.'" and with id:'.$contentId;
				$this->assertRaw($testRawContent,$msg,'User Admin');
		
			}
		}
	}
	
	public function exportUsers($opt='csv'){
		expDebug::dPrint('User Id -->'.print_r($this->id,1),4);
		$selUsersQry = db_select('slt_person', 'per');
		$selUsersQry->addField('per', 'email', 'email');
		$selUsersQry->condition('per.id', $this->id, 'IN');
		$selUsersRes = $selUsersQry->execute()->fetchAll();
		expDebug::dPrint('User Name List-->'.print_r($selUsersRes,1),4);
		if($opt=='csv'){
			$this->drupalGet('administration/people/user/export',array('filewrite'=>1,'testCase'=>'csv'));
			if ($this->assertResponse(200) == 'pass') {
				foreach ($selUsersRes as $userName){
					$this->assertRaw($userName->email, 'Contents of the exported file has '.$userName->email.' and it is correct.');
				}
					
			}	
		}
		elseif($opt=='pdf'){
			$this->drupalGet('administration/people/user/print',array('filewrite'=>1,'testCase'=>'pdf'));
			if ($this->assertResponse(200) == 'pass') {
				debug($this->content);
				foreach ($selUsersRes as $userName){
					$this->assertText($userName->email, 'Contents of the exported file has '.$userName->email.' and it is correct.');
				}
					
			}	
		}
		
	}
	
	protected function getUserTestCases(){
		$rand = $this->randomName();
	/* 	$suspended_manager=array('condition'=>array(array('per.userstatus','cre_usr_sts_atv','='),
											array('per.group','2','='))); */
		$orgValue = current($this->getOrgDetails());
		expDebug::dPrint("Manage Admin User Param:: ".print_r($this->getOrgDetails(),true),4);
		$this->testcases = array(
				'userList' => array(
						'active' => array('userstatus' => 'cre_usr_sts_atv'),
						'basic' => array(),
						'user_type'	=>	array('usertype'	=>	'employee'),
						'job_role'	=>	array('userJobrole'	=>	'Job Role 1'),
						'status' => array('userstatus' => 'cre_usr_sts_atv|cre_usr_sts_itv'),
						'multi_group'	=>	array('group'	=>	'1|2'),
						'suspended' => array('userstatus' => 'cre_usr_sts_itv'),
						'instructor' => array('group' => '1'),
						'active_instructor'	=>	array('userstatus' => 'cre_usr_sts_atv','group' => '1'),
						'manager'	=>	array('group'	=>	'2'),
						'suspended_manager'	=>	array('userstatus' => 'cre_usr_sts_itv','group' => '2'),	
						'department'	=>	array('department'	=>	'Human resources'),	
						'userorg'	=>	array('userorg'	=>	$orgValue),				
				),		
				'userCreate' => array(
		  				'st_learner' => array(
		  						"first_name"			=> 'st_learner-'.$rand, 
		  						"last_name" 			=> 'st_learner-'.$rand,
		  						"user_name"				=> 'st_learner-'.$rand,
		  						"password"				=> 'welcome',
		  						"email" 				=> 'st_learner'.$rand.'@test.com',
		  						"preferred_language"	=> 'cre_sys_lng_eng',
		  						"preferred_timezone"	=> 'cre_sys_tmz_086',
		  						"preferred_currency"	=> 0,
		  						"register_sms"			=>	0, 	
		  						"load_multiselect_oorgs"	=> key($this->getOrgDetails()),
		  						
		  				 ),
						'st_instructor' => array(
								"first_name"			=> 'st_instructor-'.$rand,
								"last_name" 			=> 'st_instructor-'.$rand,
								"user_name"				=> 'st_instructor-'.$rand,
								"password"				=> 'welcome',
								"email" 				=> 'st_instructor'.$rand.'@test.com',
								"preferred_language"	=> 'cre_sys_lng_eng',
								"preferred_timezone"	=> 'cre_sys_tmz_086',
								"preferred_currency"	=> 0,
								"register_sms"			=>	0,
								"roles[]"				=> 'is_instructor',
								"load_multiselect_oorgs"	=> key($this->getOrgDetails()),
						
						),
						'st_manager' => array(
								"first_name"			=> 'st_manager-'.$rand,
								"last_name" 			=> 'st_manager-'.$rand,
								"user_name"				=> 'st_manager-'.$rand,
								"password"				=> 'welcome',
								"email" 				=> 'st_manager'.$rand.'@test.com',
								"preferred_language"	=> 'cre_sys_lng_eng',
								"preferred_timezone"	=> 'cre_sys_tmz_086',
								"preferred_currency"	=> 0,
								"register_sms"			=>	0,
								"roles[]"				=> 'is_manager',
								"load_multiselect_oorgs"	=> key($this->getOrgDetails()),
						
						),
						'st_employee_Human_resources'	=>	array(
								"first_name"			=> 'st_employee_Human_resources-'.$rand,
								"last_name" 			=> 'st_employee_Human_resources-'.$rand,
								"user_name"				=> 'st_employee_Human_resources-'.$rand,
								"password"				=> 'welcome',
								"email" 				=> 'st_employee_Human_resources'.$rand.'@test.com',
								"preferred_language"	=> 'cre_sys_lng_eng',
								"preferred_timezone"	=> 'cre_sys_tmz_086',
								"preferred_currency"	=> 0,
								"register_sms"			=>	0,
								"usertype"				=>	'Employee',
								"deptcode"			=>	'Human resources',
								"load_multiselect_oorgs"	=> key($this->getOrgDetails()),
						),
						'st_job_role_1'	=>	array(
								"first_name"			=> 'st_job_role_1-'.$rand,
								"last_name" 			=> 'st_job_role_1-'.$rand,
								"user_name"				=> 'st_job_role_1-'.$rand,
								"password"				=> 'welcome',
								"email" 				=> 'st_job_role_1'.$rand.'@test.com',
								"preferred_language"	=> 'cre_sys_lng_eng',
								"preferred_timezone"	=> 'cre_sys_tmz_086',
								"preferred_currency"	=> 0,
								"register_sms"			=>	0,
								"load_multiselect_jobrole"			=>	'cre_usr_jrl_rl1',
						), 
				),
				'userUpdate' => array(
						'st_learner' 	=> array(
							"first_name"			=> 'st_learner changed '.$rand, 
							"id"					=> $this->getUserId('st_learner'),	
						 ),
						'st_instructor' => array(
							"first_name"			=> 'st_instructor changed '.$rand,
							"id"					=> $this->getUserId('st_instructor'),
						),
						'st_manager' 	=> array(
							"first_name"			=> 'st_manager changed '.$rand,
							"id"					=> $this->getUserId('st_manager'),
						),
						/* 'st_suspend_manager' 	=> array(
								"first_name"			=> 'st_manager suspended '.$rand,
								"id"					=> $this->getUser($suspended_manager),
						),   */
				),
				'userDelete' => array(
						'st_learner' 	=> array( 'id' => $this->getUserId('st_learner') ),
						'st_instructor' => array( 'id' => $this->getUserId('st_instructor') ),
						'st_manager' 	=> array( 'id' => $this->getUserId('st_manager') ),
						'st_employee_Human_resources'	=>	array('id'	=>	$this->getUserId('st_employee_Human_resources')),						
						'st_job_role_1'	=>	array('id'	=>	$this->getUserId('st_job_role_1')),
				),
		);
	}
	
	public function getUserTitle($userId = '') {
		$userTitle = db_query("SELECT user_name FROM slt_person WHERE id = :user_id", array(':user_id' => $userId ))->fetchField();
		return $userTitle;
	}
	
	public function getUserStatus($userId = '') {
		$userStatus = db_query("SELECT status FROM slt_person WHERE id = :user_id", array(':user_id' => $userId ))->fetchField();
		return $userStatus;
	}
	
	public function getUserId($search_str = '') {
		$select = db_select('slt_person', 'per');
		$select->addField('per', 'id', 'id');
		$select->condition('per.user_name', '%' . db_like($search_str) . '%', 'LIKE');
		$select->orderBy('per.id', 'DESC');
		$select->range(0,1);
		$userId = $select->execute()->fetchField();
		return $userId;
	}
	/**
	 * 
	 * @param array $condition_arr
	 * @return string userId
	 * 
	 * Example
	 * $condition_arr = array('condition'=>array('per.user_name', '%' .db_like($search_str). '%', 'LIKE'),
															array('per.status','cre_usr_sts_atv','='));
	 */
	public function getUser($condition_arr=''){
		$select = db_select('slt_person', 'per');
		$select->addField('per', 'id', 'id');
		if(!empty($condition_arr)){
			foreach ($condition_arr['condition'] as $condition_params){
				//DEBUG($condition_params[1]);
				$select->condition($condition_params[0],$condition_params[1],$condition_params[2]);
			}
		}
		$select->orderBy('per.id', 'DESC');
		$select->range(0,1);
		//debug((string) $select);
		$userId = $select->execute()->fetchField();
		return $userId; 
	}
}


class AdministrationUserListBase extends AdministrationUserTestHelper
{
	
}

class AdministrationUserListAll extends AdministrationUserListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - User - List - All Users',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1201 - Administration - People - User - List',
		);
	}
	
	public function testUserListAll() {
		debug('testAdminUserListAll called');
		$this->manageAdminUser('basic');
	}
}

class AdministrationUserListByStatus extends AdministrationUserListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - User - List - By Status',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1201 - Administration - People - User - List',
		);
	}

	public function testUserListSuspended() {
		debug('testAdminUserListSuspended called');
		expDebug::dPrint(' Invoked suspended users list case ' . print_r('testUserListSuspended', true) , 4);
		$this->manageAdminUser('suspended');
	}

	public function testUserListActive() {
		debug('testAdminUserListActive called');
		$this->manageAdminUser('active');
	}

	public function testUserListAnyStatus() {
		debug('testAdminUserListAnyStatus called');
		$this->manageAdminUser('status');
	} 
}

class AdministrationUserListByGroup extends AdministrationUserListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - User - List - By Group',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1201 - Administration - People - User - List',
		);
	}

 	public function testUserListInstructor() {
		debug('testAdminUserListInstructor called');
		$this->manageAdminUser('instructor');
	}
	
	

	public function testUserListManager() {
		debug('testAdminUserListManager called');
		$this->manageAdminUser('manager');
	}
	
	

	public function testUserListMultiGroup() {
		debug('testAdminUserListMultiGroup called');
		$this->manageAdminUser('multi_group');
	}
}

class AdministrationUserListByGroupAndStatus extends AdministrationUserListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - User - List - By Group and Status',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1201 - Administration - People - User - List',
		);
	}
	
	public function testUserListSuspendedManager() {
		debug('testAdminUserListSuspendedManager called');
		$this->manageAdminUser('suspended_manager');
	}
	
	public function testUserListActiveInstructor() {
		debug('testAdminUserListActiveInstructor called');
		$this->manageAdminUser('active_instructor');
	}
}

class AdministrationUserListByUserType extends AdministrationUserListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - User - List - By User Type',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1201 - Administration - People - User - List',
		);
	}

	public function testUserListUserType() {
		debug('testAdminUserListUserType called');
		$this->manageAdminUser('user_type');
	}
	
}
class AdministrationUserListByJobRole extends AdministrationUserListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - User - List - By Job Role',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1201 - Administration - People - User - List',
		);
	}
	
	public function testUserListJobRole() {
		debug('testAdminUserListJobRole called');
		$this->manageAdminUser('job_role');
	}
	
}
class AdministrationUserListByOrg extends AdministrationUserListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - User - List - By Org',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1201 - Administration - People - User - List',
		);
	}
	
	public function testUserListOrg() {
		debug('testAdminUserListOrg called');
		$this->manageAdminUser('userorg');
	}
	
}
class AdministrationUserListByDept extends AdministrationUserListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - User - List - By Dept',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1201 - Administration - People - User - List',
		);
	}

	public function testUserListDept() {
		debug('testAdminUserListDept called');
		$this->manageAdminUser('department');
	}
}

class AdministrationUserExport extends AdministrationUserListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - User - Export - All Users',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1201 - Administration - People - User - Export',
		);
	}

	public function testUserExportAll() {
		debug('testAdminUserExportAll called');
		$this->manageAdminUser('basic');
		$this->exportUsers('csv');
		$this->exportUsers('pdf');
	}
}
?>