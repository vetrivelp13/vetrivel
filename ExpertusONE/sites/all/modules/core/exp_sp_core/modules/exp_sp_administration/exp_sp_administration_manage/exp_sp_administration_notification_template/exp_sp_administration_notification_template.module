<?php

/* Implementation of hook_init().
 */
function exp_sp_administration_notification_template_init() {
	try {
  if(arg(0) == 'administration' && arg(1) == 'manage' && (arg(2) == 'notification_template' ||  arg(2) == 'certificate')){
    global $theme_key;
    $css_theme_optional   = array('type' => 'file', 'group' => CSS_THEME);
   	if($theme_key == 'expertusoneV2') {
   	   drupal_add_css(drupal_get_path('module', 'exp_sp_administration_notification_template') .'/exp_sp_administration_notification_template_v2.css', $css_theme_optional);
   	   drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
   	   drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning_v2.css');
  	} else {
	   drupal_add_css(drupal_get_path('module', 'exp_sp_administration_notification_template') .'/exp_sp_administration_notification_template.css', $css_theme_optional);  
	   drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
	   drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.css');
  	}
  	//CUSTOM SCROLLBAR "JSscrollbar"
  	drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.jscrollpane.js', $js_module_optional);
    $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
    drupal_add_js(drupal_get_path('module', 'exp_sp_administration_notification_template') .'/exp_sp_administration_notification_template.js', $js_module_optional);
    drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_notification_template_init', $ex);
  	expertusErrorThrow($ex);
  }
}
/**
 * Implementation of hook_menu().
 */
function exp_sp_administration_notification_template_menu() {
	try {
  $items = array();

  $items['administration/manage/notification_template'] = array(
  'title' => t('LBL204'),
  'page callback' => 'empty_value', 
  'access callback' => 'user_access',
  'type' => MENU_CALLBACK,
  'weight' => 4,
  'access arguments' => array('Notification Admin Perm'),
  );
  $items['administration/manage/certificate'] = array(
  'title' => t('LBL205'),
  'page callback' => 'empty_value', 
  'access callback' => 'user_access',
  'type' => MENU_CALLBACK,
  'weight' => 5,
  'access arguments' => array('Certificate Admin Perm'),
  );

  $items['administration/manage/notification_template/search/all'] = array(
  'title' => 'Fetch notification list to display in JQGrid',
  'page callback' => 'sendNotificationListToJqGrid',
  'page arguments' => array(2),
  'access callback' => 'user_access',
  'access arguments' => array('Notification Admin Perm'),
  'type' => MENU_CALLBACK,
  'file' => 'exp_sp_administration_notification_template.inc'
  );
  
  $items['administration/manage/certificate/search/all'] = array(
  'title' => 'Fetch notification list to display in JQGrid',
  'page callback' => 'sendNotificationListToJqGrid',
  'page arguments' => array(2),
  'access callback' => 'user_access',
  'access arguments' => array('Certificate Admin Perm'),
  'type' => MENU_CALLBACK,
  'file' => 'exp_sp_administration_notification_template.inc'
  );

  $items['administration/manage/notification_template/textfilter-autocomplete'] = array(
  'title' => 'Search By Text Filter Autocomplete',
  'page callback' => 'getNotificationTextFilterAutoComplete',
  'page arguments' => array(2),
  'access callback' => 'user_access',
  'access arguments' => array('Notification Admin Perm'),
  'type' => MENU_CALLBACK,
  'file' => 'exp_sp_administration_notification_template.inc',
  );
  
  $items['administration/manage/certificate/textfilter-autocomplete'] = array(
  'title' => 'Search By Text Filter Autocomplete',
  'page callback' => 'getNotificationTextFilterAutoComplete',
  'page arguments' => array(2),
  'access callback' => 'user_access',
  'access arguments' => array('Certificate Admin Perm'),
  'type' => MENU_CALLBACK,
  'file' => 'exp_sp_administration_notification_template.inc',
  );

  $items['administration/manage/notification_template/export'] = array(
  'title' => 'Notification Details Search Results CSV Export',
  'page callback' => 'fetchAllNotification',
  'page arguments' => array(2,'CSV'),
  'access callback' => 'user_access',
  'access arguments' => array('Notification Admin Perm'),
  'type' => MENU_CALLBACK,
  'file' => 'exp_sp_administration_notification_template.inc',
  );
  
  $items['administration/manage/certificate/export'] = array(
  'title' => 'Notification Details Search Results CSV Export',
  'page callback' => 'fetchAllNotification',
  'page arguments' => array(2,'CSV'),
  'access callback' => 'user_access',
  'access arguments' => array('Certificate Admin Perm'),
  'type' => MENU_CALLBACK,
  'file' => 'exp_sp_administration_notification_template.inc',
  );

  $items['administration/manage/notification_template/print'] = array(
  'title' => 'Notification Details Results Print to PDF',
  'page callback' => 'fetchAllNotification',
  'page arguments' => array(2,'PDF'),
  'access callback' => 'user_access',
  'access arguments' => array('Notification Admin Perm'),
  'type' => MENU_CALLBACK,
  'file' => 'exp_sp_administration_notification_template.inc',
  );
  
  $items['administration/manage/certificate/print'] = array(
  'title' => 'Notification Details Results Print to PDF',
  'page callback' => 'fetchAllNotification',
  'page arguments' => array(2,'PDF'),
  'access callback' => 'user_access',
  'access arguments' => array('Certificate Admin Perm'),
  'type' => MENU_CALLBACK,
  'file' => 'exp_sp_administration_notification_template.inc',
  );
     
  $items['administration/manage/notification_template/%ctools_js/addedit'] = array(
  'title' => 'Add / Edit Notification',
  'page callback' => 'exp_sp_administration_notification_template_display_addedit_form',
  'page arguments' => array(2,3),
  'access callback' => 'user_access',
  'access arguments' => array('Notification Admin Perm'),
  'type' => MENU_CALLBACK,
  'file' => 'exp_sp_administration_notification_template.inc'
  );
  
  $items['administration/manage/certificate/%ctools_js/addedit'] = array(
  'title' => 'Add / Edit Notification',
  'page callback' => 'exp_sp_administration_notification_template_display_addedit_form',
  'page arguments' => array(2,3),
  'access callback' => 'user_access',
  'access arguments' => array('Certificate Admin Perm'),
  'type' => MENU_CALLBACK,
  'file' => 'exp_sp_administration_notification_template.inc'
  );
  
  $items['ajax/administration/manage/notification_template/publish-and-unpublish/%'] = array (
  'title' => 'Publish Or Unpublish Notification',
  'page callback' => 'publishOrUnpublishNotification',
  'page arguments' => array(3,5),
  'type' => MENU_CALLBACK,
  'access callback' => 'user_access',
  'access arguments' => array('Notification Admin Perm'),
  'file' => 'exp_sp_administration_notification_template.inc'
  );
  
  $items['ajax/administration/manage/certificate/publish-and-unpublish/%'] = array (
  'title' => 'Publish Or Unpublish Notification',
  'page callback' => 'publishOrUnpublishNotification',
  'page arguments' => array(3,5),
  'type' => MENU_CALLBACK,
  'access callback' => 'user_access',
  'access arguments' => array('Certificate Admin Perm'),
  'file' => 'exp_sp_administration_notification_template.inc'
  );
  
  $items['administration/manage/notification_template/temp-addedit/%/%/%'] = array(
  'title' => 'Template AddEdit',
  'page callback' => 'template_addedit_display',
  'page arguments' => array(2,4,5,6),
  'access callback' => 'user_access',
  'access arguments' => array('Notification Admin Perm'),
  'type' => MENU_CALLBACK,    
  'file' => 'exp_sp_administration_notification_template.inc'
  );
  
  $items['administration/manage/certificate/temp-addedit/%/%/%'] = array(
  'title' => 'Template AddEdit',
  'page callback' => 'template_addedit_display',
  'page arguments' => array(2,4,5,6),
  'access callback' => 'user_access',
  'access arguments' => array('Certificate Admin Perm'),
  'type' => MENU_CALLBACK,    
  'file' => 'exp_sp_administration_notification_template.inc'
  );
  
  $items['administration/manage/notification_template/temp-pagination/%/%'] = array(
  'title' => 'Template AddEdit',
  'page callback' => 'getTemplateDetailsResults',
  'page arguments' => array(2,4,5),
  'access callback' => 'user_access',
  'access arguments' => array('Notification Admin Perm'),
  'type' => MENU_CALLBACK,    
  'file' => 'exp_sp_administration_notification_template.inc'
  );
  
  $items['administration/manage/certificate/temp-pagination/%/%'] = array(
  'title' => 'Template AddEdit',
  'page callback' => 'getTemplateDetailsResults',
  'page arguments' => array(2,4,5),
  'access callback' => 'user_access',
  'access arguments' => array('Certificate Admin Perm'),
  'type' => MENU_CALLBACK,    
  'file' => 'exp_sp_administration_notification_template.inc'
  );
  
  $items['administration/manage/notification_template/temp-addedit/add-keywords/%/%/%'] = array(
  'title' => 'Template Keywords',
  'page callback' => 'template_attachment_keywords_display',
  'page arguments' => array(2,5,6,7),
  'access callback' => 'user_access',
  'access arguments' => array('Notification Admin Perm'),
  'type' => MENU_CALLBACK,    
  'file' => 'exp_sp_administration_notification_template.inc'     
  );
  
  $items['administration/manage/certificate/temp-addedit/add-keywords/%/%/%'] = array(
  'title' => 'Template Keywords',
  'page callback' => 'template_attachment_keywords_display',
  'page arguments' => array(2,5,6,7),
  'access callback' => 'user_access',
  'access arguments' => array('Certificate Admin Perm'),
  'type' => MENU_CALLBACK,    
  'file' => 'exp_sp_administration_notification_template.inc'     
  );
  $items['administration/view-notification/%ctools_js/addedit/%'] = array(
  		'title' => 'View notification',
  		'page callback' => 'exp_sp_administration_viewnotification_addedit_form',
  		'page arguments' => array(3,4),
  		'access callback' => 'user_access',
  		'access arguments' => array('Notification Admin Perm'),
  		'type' => MENU_CALLBACK,
  		'file' => 'exp_sp_administration_notification_template.inc'
  );
  expDebug::dPrint(' $items = ' . print_r($items, true) , 4);
  return $items;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_notification_template_menu', $ex);
  	expertusErrorThrow($ex);
  }
}
/**
 * Implementation of hook_block_view().
 */
function exp_sp_administration_notification_template_block_view($delta = ''){
	try {
  $header_optional = array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY);
  $css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
  global $theme_key;
  if($theme_key == 'expertusoneV2') {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_notification_template') .'/exp_sp_administration_notification_template_v2.css', $css_theme_optional);
  }
  else{  		
  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_notification_template') .'/exp_sp_administration_notification_template.css', $css_theme_optional);
  }
  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_notification_template') .'/exp_sp_administration_notification_template.js', $js_module_optional);
	 
  $block = array();

  include_once('exp_sp_administration.inc');
  include_once('exp_sp_administration_notification_template.inc');
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_notification_template_block_view', $ex);
  	expertusErrorThrow($ex);
  }
}


function exp_sp_administration_notification_template_permission() {
	try {
  return array(
    'Notification Admin Perm' => array(
    'title' => t('Notification Admin Perm')
    ),
    'Certificate Admin Perm' => array(
    'title' => t('Certificate Admin Perm')
    )
  );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_notification_template_permission', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_administration_notification_template_theme() {
	try {
  return array(
    'exp_sp_administration_notification_template' => array('
  	  variables' => array('detail' => array()),
      'template' => 'exp_sp_administration_notification_template' 
      ),
    );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_notification_template_theme', $ex);
  	expertusErrorThrow($ex);
  }
}

/*
 * exp_sp_administration_notification_template_display_addedit_form() -Form implementation for notification
 */
function exp_sp_administration_notification_template_display_addedit_form($argType, $js = NULL, $notificationId = '', $templateId = 0, $displayMode = ''){
 try{
  include_once(drupal_get_path('module', 'exp_sp_administration_notification_template') .'/exp_sp_administration_notification_template.inc');

	//$js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
	//drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);

  $sample_style = array(
	 
  // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
  'ctools-admin-notification-addedit-style' => array(
    'modalSize' => array(
      'width' => 650,
      'minHeight' => 200,
    ),
	)
  );

  drupal_add_js($sample_style, 'setting');

  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
    global $theme_key;
  	if($theme_key == 'expertusoneV2') {
  		//NEWUI THEME STYLE SHEET
  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_notification_template') .'/exp_sp_administration_notification_template_v2.css', $css_theme_optional);  		
  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', $css_theme_optional);
  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program_v2.css', $css_theme_optional);
  	} else {
  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_notification_template') .'/exp_sp_administration_notification_template.css', $css_theme_optional);  		
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program.css', $css_theme_optional);  		
  	}
  //drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
  //drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program.css', $css_theme_optional);

  if ($js) {
		// Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
    $argsList = array();

	$notificationTitle = '';
		
	if (!empty($notificationId)) {
	  $argsList[] = orgValidate($notificationId);
	  $argsList[] = orgValidate($templateId);
	  $argsList['arg_value_type'] = $argType;
	}
		
	if(!empty($displayMode)){
      $argsList['display_mode'] = $displayMode;
    }
    if(!empty($argType) && $argType == 'notification_template'){
    	$title = t('LBL204');
    }else {
    	$title = t('LBL205');
    }

		// Prepare list of forms to be displayed in the modal
	$formIdList = array(
	  array('id' => 'exp_sp_administration_notification_template_addedit_form', 'title' => ($title),'page_type' => ($argType)),
	  array('id' => 'exp_sp_administration_notification_attaching_template_form', 'title' => (t('LBL925')), 'page_type' => ($argType)),
	  );

	exp_ctools_modal_multi_ajaxonly_forms_display($formIdList, $argsList);
  }
  else {
	throw new Exception('exp_sp_administration_notification_template.module: exp_sp_administration_notification_template_addedit_form() : nojs');
  }
 }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_notification_template_display_addedit_form', $ex);
  	expertusErrorThrow($ex);
 }
}


/**
 * exp_sp_administration_notification_template_addedit_form() - Build the addedit form.
 */
function exp_sp_administration_notification_template_addedit_form($form, &$form_state, $renderMode, $notificationId, $templateId) {
  expDebug::dPrint(' $form_state[values] = ----->12345---->' . print_r($form_state['values'], true) ,5);
  expDebug::dPrint(' $form_state[build_info] = ' . print_r($form_state['build_info'], true), 5);
	
  try {
    // To set the display mode as view
    $readOnlyForView = false; 
    if(in_array('view', $form_state['build_info']['args'])){
      $form_state['storage']['step']         = 'view';
      $form_state['storage']['display_mode'] = 'view';
      $readOnlyForView = true;
    }
  
    if (empty($form_state['storage'])) {
      if(!empty($templateId) && empty($form_state['storage'])) {
        $form_state['storage']['step'] = 'view';
      } elseif(empty($notificationId) && empty($templateId) && empty($form_state['storage'])) {
        $form_state['storage']['step'] = 'add';
      }  
    }
    if(!empty($form_state['values']['page_type'])) {
      $notifyFormTypeMode = $form_state['values']['page_type'];
    }elseif(($notificationId)){
      $notifyFormTypeMode  = $form_state['build_info']['args'][3];
    }else{
      $notifyFormTypeMode = $form_state['storage']['form_info_list']['0']['page_type'];
    }
    expDebug::dPrint(' $$notificationDetails = 34' . $notifyFormTypeMode , 4);
    
    $notificationDetails     = array();
    if (!empty($notificationId)) { 
      $notificationDetails = getAllNotificationDetails($notificationId);
      expDebug::dPrint(' $$notificationDetails = ' . print_r($notificationDetails, true) , 4);
    }
  
    $form 		       = newAddEditFormWithCancelAndSave('notification-basic-addedit-form');
    $emptyId = '';
    if(empty($notificationId)){
      $entityId       = $form_state['values']['notification_id'];
      $emptyId        = empty($form_state['values']['empty_id']) ? microtime(false) : $form_state['values']['empty_id'];  
    } else {
      $entityId       = $notificationId;
    }  
    $form['mapped_notification_id'] = array(
      '#type' => 'hidden',
      '#name' => 'mapped_notification_id',
      '#value' => $entityId
      );
    $entityType        = 'cre_ntn';    
    $uniqueId          = $entityId.'-'.$entityType;
  	
    addHiddenFieldToAddEditForm($form, 'empty_id', $emptyId);
    addHiddenFieldToAddEditForm($form, 'entity_value', $entityType);
    
    addHiddenFieldToAddEditForm($form, 'page_type', $notifyFormTypeMode);
    $notificationId =  getDefaultAddEditFormFieldValue('id', $form_state, $notificationDetails);
    addHiddenValueToAddEditForm($form, 'notification_id', $notificationId);
    addHiddenValueToAddEditForm($form, 'notification_code', $notificationDetails['notification_code']);
    
    $defaultValue =  getDefaultAddEditFormFieldValue('title', $form_state, $notificationDetails);
    addTextFieldToAddEditFormNotify($form, 'name', t('LBL107'), $defaultValue, 1, true);
   
    addHiddenFieldToAddEditForm($form, 'ckeditor_word_count', '5000');
    $defaultValue =  getDefaultNotificationAddEditFormFieldValue('short_description', $form_state, $notificationDetails);
    
    $form['addedit-long-description-notification-container'] = array(
      '#type'   => 'markup',
      '#markup' => '<div class="addedit-long-description-container certificate-description">',
    );
    addTextFormatFieldToAddEditForm($form, 'short_description', t('LBL229'), $defaultValue, 'full_html', 2, true, false, 5000);
    $form['addedit-long-description-notification-container1'] = array(
      '#type'   => 'markup',
      '#markup' => '</div>',
    );
    if($notifyFormTypeMode == 'notification_template'){
    
    $form['addedit-long-description-notification-container'] = array(
      '#type'   => 'markup',
      '#markup' => '<div class="addedit-long-description-container">',
    );
    addTextFormatFieldToAddEditForm($form, 'short_description', t('LBL229'), $defaultValue, 'full_html', 2, true, false, 5000);
    $form['addedit-long-description-notification-container1'] = array(
      '#type'   => 'markup',
      '#markup' => '</div>',
    );
      
    addTwoColumnRowToAddEditForm($form, 'freq_type');
  
    if(($notificationDetails['notification_code'] == 'compliance_class_remind_session' || $notificationDetails['notification_code'] == 'mandatory_class_remind_session'
    		|| $notificationDetails['notification_code'] == 'compliance_expiry_remainder') && !empty($notificationId)) {
    	
    	$freqOption = array('Triggered' => 'Triggered', 'Scheduled' => 'Scheduled');
    	$defaultValue =  getDefaultAddEditFormFieldValue('notify_type', $form_state, $notificationDetails);
    	expDebug::dPrint('notificationDetails'.$notificationDetails['notification_code'].'$notificationId'.$notificationId);
    	$readOnly = (!empty($notificationId)) ? true:false;
    	//$attributes['onchange'][] = 'changeNotificationFrequencyTypenew();';
    	addNotificationDropDownToAddEditForm($form, 'notify_type', t('LBL940'), $freqOption, $defaultValue, 3, true, $readOnly,$attributes);
    }
    //$attributes = array();
    if(($notificationDetails['notification_code'] != 'compliance_class_remind_session' && $notificationDetails['notification_code'] != 'mandatory_class_remind_session'
    		&& $notificationDetails['notification_code'] != 'compliance_expiry_remainder') || (empty($notificationId))) {
    	$freqOption = array('Triggered' => 'Triggered', 'Scheduled' => 'Scheduled');
    	$defaultValue =  getDefaultAddEditFormFieldValue('notify_type', $form_state, $notificationDetails);
    	expDebug::dPrint('fdgdfddddccccc'.$notificationDetails['notification_code']);
    	$readOnly = (!empty($notificationId)) ? true:false;
    	$attributes['onchange'][] = 'changeNotificationFrequencyType();';
    	if($notificationId && ($defaultValue == 'Scheduled')){
    		$attributes['class'] = 'notify-frequency-change-new';
    	}
    	addNotificationDropDownToAddEditForm($form, 'notify_type', t('LBL940'), $freqOption, $defaultValue, 3, true, $readOnly,$attributes,1);
  
    if($defaultValue=='Scheduled')
      $deliveryPartDisp  = '';
    else
      $deliveryPartDisp  = 'admin-trp-delivery-data-part';
              
      $form['frequency_data_disp_start'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="addedit-onecol-secondcol"><div id="admin-frequency-data-part" class="'.$deliveryPartDisp.'">'
        );
      $attributesFreq = array();
      $freqData = getDefaultAddEditFormFieldValue('freq_data', $form_state, $notificationDetails);
      $attributesFreq['tabindex'] = 4;
      $attributesFreq['onkeydown'] = 'return onlyNumbers(event)';
      $attributesFreq['class'][] = 'notification-scheduled-days';
      $form['freq_data'] = array(
        '#type' => 'textfield',
        '#prefix' => '<div id="admin-frequency-data-part-expires" class="addedit-new-field-traninig-program-expires"><div class="addedit-secondcol-field-value">',
        '#suffix' => '</div><div class="frequency-scheduled-days">days</div></div>',
        '#title' => t('LBL975'),
        '#title_display' => 'invisible',
        '#default_value' => $freqData,
        '#attributes' => $attributesFreq,
        '#size' => 2,
        '#maxlength' => 2,
        );
                
    
      $form['frequency_data_disp_end'] = array(
        '#type' => 'markup',
        '#markup' => '</div></div>'
        );
    }
    $typeOption = array();
    $defaultValue = getDefaultNotificationAddEditFormFieldValue('entity_type', $form_state, $notificationDetails);
    $typeOption = getOptionalEntityType();
    expDebug::dPrint('Notification.module mail $defaultValue'.print_r($defaultValue,true),4);
    expDebug::dPrint('Notification.module mail $typeOption'.print_r($typeOption,true),4);
    foreach($typeOption as $optValue){
      $optType[$optValue->entity_type] = $optValue->entity_type;
    }
    addDropDownToAddEditForm($form, 'entity_type', t('LBL036'), $optType, $defaultValue, 5, true);
  
    endAddEditTwoColumnRow($form);
  
    addTwoColumnRowToAddEditForm($form, 'mail_sent_to');
  
  
    $defaultOption = array();
    $defaultOption = getDefaultNotificationAddEditFormFieldValue('sendmailto', $form_state, $notificationDetails);
    $notifyMailTo = explode(',',$defaultOption);
    
    addMultiselectDropDownToAddEditForm($form, 'sendmailto', t('LBL918'), getProfileItemNamesKeyed('cre_ntn_rpt_') ,$notifyMailTo , 6,true);
  
    expDebug::dPrint('Notification.module mail default options'.print_r($notifyMailTo,true),4);
    expDebug::dPrint('Notification.module mail selected options'.print_r($rptValue,true),4);
  
    $ccValue =  getDefaultAddEditFormFieldValue('notify_cc', $form_state, $notificationDetails);
    if($ccValue){
      $defaultValue = $ccValue;
    }else{
      $defaultValue = t('MSG698');
    }
    $notify_other_email_greyout = array('notify_132','notify_133','pwd_exp_warning');
    $read_only = false;
    if(in_array($notificationDetails['notification_code'] ,$notify_other_email_greyout)){ //Change for Ticket #67236
        $read_only = true;
    }
        addTextFieldToAddEditFormNotify($form, 'cc_mail', t('LBL923'), $defaultValue, 7, false, $read_only); 
        $form['cc_mail']['#attributes']['data-empty-text'] = t('MSG698');
        
        endAddEditTwoColumnRow($form);
    }
    if($notificationDetails['notification_code'] == 'compliance_class_remind_session' || $notificationDetails['notification_code'] == 'mandatory_class_remind_session' 
    		|| $notificationDetails['notification_code'] == 'compliance_expiry_remainder') {
     $notdisp = ($notificationDetails['notify_type'] == 'Scheduled' && !empty($notificationId)) ? '': 'notify-freq-hide' ;
    $form['not_sched_days-start'] = array(
    		'#type' => 'markup',
    		'#markup' => '<div id="two-col-row-not_sched_days" class="addedit-new-field addedit-new-field-two-col '.$notdisp.'">',
    );
    //$defaultValue =  getDefaultNotificationAddEditFormFieldValue('notify_before', $form_state, $notificationDetails);
    $attributesnot['onkeydown'] = 'return onlyNumbers(event)';
    $attributesnot['class'][] = 'edit-freq-data-notify';
    $form['notify_before'] = array(
    		'#type' => 'textfield',
    		'#prefix' => '<div class="addedit-twocol-firstcol"><div class="addedit-new-field-title">'.t('LBL1256').' '.t('Before').'<span class="addedit-mandatory">*</span></div><div class="addedit-firstcol-field-value">',
    		'#suffix' => '</div><span class="notify-days-text">'.t('LBL605').'</span></div>',
    		'#title' => t('LBL1256').' '.t('Before'),
    		'#title_display' => 'invisible',
    		'#default_value' => $notificationDetails['notify_before'],
    		'#attributes' => $attributesnot,
    		'#size' => 7,
    		'#maxlength' => 7,
    );
  
    //$defaultValue =  getDefaultNotificationAddEditFormFieldValue('freq_data', $form_state, $notificationDetails);
    $attributesfreqdata['onkeydown'] = 'return onlyNumbers(event)';
    $attributesfreqdata['class'][] = 'edit-notify-days-before';
    $form['freq_data'] = array(
    		'#type' => 'textfield',
    		'#prefix' => '<div class="addedit-twocol-secondcol"><div class="addedit-new-field-title">'.t('LBL975').'<span class="addedit-mandatory">*</span></div><div class="addedit-secondcol-field-value">',
    		'#suffix' => '</div><span class="notify-days-text">'.t('LBL605').'</span><div class="clearBoth"></div></div>',
    		'#title' => t('LBL975'),
    		'#title_display' => 'invisible',
    		'#default_value' => $notificationDetails['freq_data'],
    		'#attributes' => $attributesfreqdata,
    		'#size' => 7,
    		'#maxlength' => 7,
    );
    
    $form['not_sched_days-end'] = array(
    		'#type' => 'markup',
    		'#markup' => '</div>',
    ); 
    }
    addEditFormWithNotificationCancelAndSaveClose($form, 'notification-basic-addedit-form', 'notification-basic-save', 'notification-basic-cancel', $notificationId, $notifyFormTypeMode,$notificationDetails,$emptyId);
    return $form;
  
  } catch (Exception $ex) {
      watchdog_exception('exp_sp_administration_notification_template_addedit_form', $ex);
      expertusErrorThrow($ex);
  }

}

function triggered_scheduled_repaint_callback($form, &$form_state){
  try {
    return $form;
  } catch (Exception $ex) {
    watchdog_exception('triggered_scheduled_repaint_callback', $ex);
    expertusErrorThrow($ex);
  }
}

/*
 * addEditFormWithNotificationCancelAndSaveClose()
 */
function addEditFormWithNotificationCancelAndSaveClose(&$form, $wrapperId = 'notification-form-wrapper', $saveButtonId = 'save-button', $cancelButtonId = 'cancel-button', $notificationId, $notifyFormTypeMode, $notificationDetails = array(),$emptyId) {
 try {
  global $user;
  $loggedUserName = $user->name;
  expDebug::dPrint(' addEditFormWithCancelAndSaveClose() called.'.$loggedUserName);
  $customHiddenButtonId = 'last-button-account';
  
  $esignHiddenButt = 'esign-'.$wrapperId;
  global $theme_key;
  $prfixPgLeft='';$suffixPgRight='';$savebutton='';
  if($theme_key == 'expertusoneV2'){
  	$prfixPgLeft   = '<div class="white-btn-bg-left"></div>';
  	$suffixPgRight = '<div class="white-btn-bg-right"></div>';
  	$savebutton      = '<div class="admin-save-button-left-bg"></div>';  	
  } 
  // Remove the temporary storage for API's to exchange information during form creation
  unset($form['addedit_tmp_storage']);
  
  // Add the Cancel button
  $ajaxCallbackCancel = 'addEditCancelRepaintForm';
  
  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $cancelAttributes['class'] = array('addedit-edit-' . $cancelButtonId); // This class must be prefixed with 'addedit-edit-' followed by the form field id.
  
  // For common styling of all addedit cancel buttons
  //$cancelAttributes['class'][] = 'addedit-edit-cancel';
  
  // Using this class to applying bg color to the save button
  $cancelAttributes['class'][] = 'admin-action-button-middle-bg';

  // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
  $cancelAttributes['class'][] = 'addedit-form-expertusone-throbber';
  // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
  $cancelAttributes['data-wrapperid'] = array($wrapperId);
  
  // A common class for all addedit form cancel button, for styling to appear as a link.
  $cancelAttributes['class'][] = 'exp-addedit-form-cancel-button white-btn-bg-middle';
  
  $cancelAttributes['onclick'] = 'Drupal.CTools.Modal.dismiss(); return false;';
  $cancelLabel  = t('LBL123'); // Close
  
  $cancelAttributes['tabindex'][] = '10';
  
  $form[$cancelButtonId] = array(
    '#type' => 'submit',
    '#prefix' => '<div class="addedit-form-cancel-and-save-actions-row">' .
                   '<div class="addedit-form-cancel-container-actions">'.$prfixPgLeft,
    '#suffix' => $suffixPgRight,
    '#value' => $cancelLabel,
    '#attributes' => $cancelAttributes
  );
  
  // Add the Save button
  $ajaxCallbackSave = 'addEditNotificationRepaintForm';
  
  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $saveAttributes['class'] = array('addedit-edit-' . $saveButtonId); // This class must be prefixed with 'addedit-edit-' followed by the form field id.

  // For common styling of all addedit save buttons
  //$saveAttributes['class'][] = 'addedit-edit-save';
  
  // Using this class to applying bg color to the save button
  //$saveAttributes['class'][] = 'admin-save-button-middle-bg';
  $saveAttributes['class'][] = 'edit-catalog-course-save-publish ';


  //Increase the width of the popup while clicking on save button
  $saveAttributes['onclick'][] = 'increasePopWidth();';

  // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
  $saveAttributes['class'][] = 'addedit-form-expertusone-throbber';
  // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
  $saveAttributes['data-wrapperid'] = array($wrapperId);
  $saveAttributes['tabindex'][] = '8';
  //$eSignatureAvailable = ($subStage == 'Attachment') ? false : true;
  if(!empty($notificationDetails)){
    $notificationStatus = $notificationDetails['status'];
  }else{
    $notificationStatus = '';
  }

  if($notificationId) {
	$notificationCnt   = getNotificationFrameCount($notificationId);
  }
  $savePublishAttributes['class'][] = ($notificationStatus == 'cre_ntn_sts_atv') ? 'edit-catalog-course-save-publish' : 'pub-unpub-only-save-btn';
  $savePublishAttributes['class'][] = ($notificationCnt == 0) ? 'save-and-enable-disabled' : '' ;
  $notiCode = $notificationDetails['notification_code'];
  $notiStatus = $notificationDetails['status'];
  $shareNotifications = array("share_notification_class_tp", "share_notification_catalog");
  $isSaveParent = 0;
  if(empty($notificationId) ||($notificationStatus != 'cre_ntn_sts_atv' || in_array($notiCode,$shareNotifications))){
      $isSaveParent = 1;
      $saveAttributes['onclick'] = array();
      $saveAttributes['onclick'][] = 'increasePopWidth();';	 
      $form[$saveButtonId] = array(
	    '#type' => 'submit',
	    '#prefix' => '<div class="admin-save-pub-unpub-button-container">'.$savebutton,
	    '#suffix' => '<span id="pub-unpub-action-btn-notify" onclick="displayNotificationActionList(event)" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn ">&nbsp;</span></div>',
	    '#value' => t('LBL141'),
      	'#name' => 'save',
	    '#attributes' => $saveAttributes,
        '#ajax' => array(
  	      'wrapper' => $wrapperId,
  	      'callback' => $ajaxCallbackSave,
          'customButtonId'=>$customHiddenButtonId,
  	      'method' => 'replace',
      	  'effect' => 'none', // 'fade',
  	      'event'=>'click',
  	      'keypress' => true,
  	      'progress' => array(
  	        'type' => 'throbber',
  	        'message' => ''
  	      ),
      	)
	  );
   }
   
    if($isSaveParent){
      $form['addedit-button-group-ul-start'] = array(
        '#type' => 'markup',
        '#markup' => '<ul class="catalog-pub-add-list">',
      ); //  catalog-save-btn
      $savePublishPrefix = '<li class="save-pub-unpub-sub-menu">';
      $savePublishSuffix = '</li>';
    }else{
    	$setclass1 = ($theme_key=='expertusoneV2')?'admin-save-button-left-bg':'';
      $savePublishPrefix = '<div class="admin-save-pub-unpub-button-container"><div class="'.$setclass1.'"></div>';
      $savePublishSuffix = (($notificationStatus == 'cre_ntn_sts_atv') ? ('<span id="pub-unpub-action-btn-notify" onclick="displayNotificationActionList(event)" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn ">&nbsp;</span>') : '<div class="admin-save-button-right-bg"></div>' ).'</div>';      
    }
	  $saveButtonId = 'catalog-course-save-publish';
	  $savePublishAttributes['onclick'] = array();
	  $savePublishAttributes['tabindex'][] = '9';
      $disableValue = ($notificationCnt == 0) ? true : false ;
      $savePublishAttributes['onclick'][] = 'increasePopWidth();';
	  if(!in_array($notiCode,$shareNotifications)) {
		$buttonLabel = ($notificationStatus == 'cre_ntn_sts_atv')?t('LBL141'):t('LBL924');
		$form[$saveButtonId] = array(
				'#type' => 'submit',
				'#prefix' => $savePublishPrefix,
				'#suffix' => $savePublishSuffix,
				'#value' => $buttonLabel,
				'#name' => 'saveandpublish',
				//'#disabled'=> $disableValue,
				'#attributes' => $savePublishAttributes,
				'#ajax' => array(
						'wrapper' => $wrapperId,
						'callback' => $ajaxCallbackSave,
						'customButtonId'=>$customHiddenButtonId,
						'method' => 'replace',
						'effect' => 'none', // 'fade',
						'event'=>'click',
						'keypress' => true,
						'progress' => array(
								'type' => 'throbber',
								'message' => ''
						),
				)
		);
	} 
   if(!$isSaveParent){
      $form['addedit-button-group-ul-start'] = array(
        '#type' => 'markup',
        '#markup' => '<ul class="catalog-pub-add-list">',
      );
    }
	if(($notificationId) && $notificationStatus == 'cre_ntn_sts_atv' &&  !in_array($notiCode,$shareNotifications)){
  	    $saveButtonId = 'catalog-course-save-unpublish';
  	    $saveUnPublishAttributes['onclick'] = array();
        $saveUnPublishAttributes['onclick'][] = 'increasePopWidth();';
        $form[$saveButtonId] = array(
  	    '#type' => 'submit',
  	    '#prefix' => '<li class="save-pub-unpub-sub-menu">',
  	    '#suffix' => '</li>',
  	    '#value' => t('LBL920'),
        '#name' => 'unpublish',
  	    '#attributes' => $saveUnPublishAttributes,
        '#ajax' => array(
    	      'wrapper' => $wrapperId,
    	      'callback' => $ajaxCallbackSave,
              'customButtonId'=>$customHiddenButtonId,
    	      'method' => 'replace',
        	  'effect' => 'none', // 'fade',
    	      'event'=>'click',
    	      'keypress' => true,
    	      'progress' => array(
    	        'type' => 'throbber',
    	        'message' => ''
    	      ),
        	)
  	   );
	}
	if(($notificationId) &&  (($notifyFormTypeMode == 'certificate') || ($notifyFormTypeMode == 'notification_template' && $loggedUserName == 'admin'))){
	  $resultCnt = delete_object_record($notificationId,$notifyFormTypeMode);
      if($resultCnt == 0){
        $displayTitle = titleController('EXP-SP-ADMIN-NOTOFICATION-TEMPLATE-MODULE-TITLE', $notificationDetails['title'],34);
  	    $saveButtonId = 'certificate-template-delete';
  	   
  	    $deleteAttributes['onclick'] = array();
        $deleteAttributes['onclick'][] = '$("#root-admin").data("narrowsearch").displayDeleteWizard("'.t('MSG357').' '.strtolower(t('LBL205')).' '.
                                                   escape_string($notificationDetails['title']) . '","'.$notificationId.'","'.$notifyFormTypeMode.'"); return false;';
        $deleteAttributes['class'][] = 'admin-delete-button-bg';
         $form[$saveButtonId] = array(
    	    '#type' => 'button',
    	    '#prefix' => '<li class="save-pub-unpub-sub-menu">',
    	    '#suffix' => '</li>',
    	    '#value' => t('LBL286'),
            '#name' => 'delete',
    	    '#attributes' => $deleteAttributes
    	  );
      }
	}
	$form['addedit-button-group-ul-end'] = array(
      '#type' => 'markup',
      '#markup' => '</ul><div class="clearBoth"></div></div>' .
	             '<div class="clearBoth"></div></div>',
    ); 
 
  unset($saveAttributes['tabindex']);
  $saveAttributes['onclick'] = array();
  $saveAttributes['onclick'][] = 'Drupal.ajax.prototype.commands.addEditHideMessages();';	 
  $saveAttributes['onclick'][] = 'increasePopWidth();';
  $form[$customHiddenButtonId] = array(
	      '#type' => 'submit',
	      '#value' => t('hidden-save'),
	      '#name'	=> 'hidden-save',
      	  '#prefix' => '<span id = "esign-admin-div" style="display:none;">',
	      '#suffix' => '</span>',
	      '#id' =>$customHiddenButtonId,
  		  '#attributes' => $saveAttributes,
	      '#ajax' => array(
		      'wrapper' => $wrapperId,
		      'callback' => 'addEditNotificationRepaintForm',
		      'method' => 'replace',
		      'effect' => 'none', // 'fade',
              'event'=>'click',
		      'keypress' => true,
		      'progress' => array(
		        'type' => 'throbber',
		        'message' => ''
		      ),
	    	)
	      );
  expDebug::dPrint('$notificationId'.$notificationId);
  
  $entityId          	 = $notificationId;
  if(!empty($emptyId)){
  	$entityId = 0;
  } else {
  	$emptyId = 0;
  }
  	$entityType        	 = ($notifyFormTypeMode == 'notification_template') ? 'cre_ntn' : 'cre_cer';
  	
  	$qtipIdInit        	 = $entityId.'_'.$entityType;
  	$qtipOptAccessObjacc      = "{'entityId':".$entityId.",'entityType':'$entityType','url':'administration/catalogaccess/".$entityId."/".$entityType."/".$emptyId."','popupDispId':'qtip_visible_disp_".$qtipIdInit."','catalogVisibleId':'qtipAccessqtip_visible_disp_".$qtipIdInit."','wid':650,'heg':'270','postype':'topleft','poslwid':'50','qdis':'ctool','linkid':'visible-notify-".$entityId."'}";
   
  	$form['addedit-left-col-extend-func_acc'] = array(
  		'#type' => 'markup',
  		'#markup' => '<div class="crs-tab-titles-container"><div class="access-tab-icon"></div>'.
  		"<div id='qtip_visible_disp_".$qtipIdInit."'><a id='visible-notify-".$entityId."' onclick = \"callVisibility(".$qtipOptAccessObjacc.");\" class=\"tab-title\">".t('LBL642')."</a><span id='visible-popup-".$entityId."' class='qtip-popup-visible' style='display:none; position:absolute; left:0px; top:0px;'></span></div>".
  		'</div>',
  	);

  $form['addedit-left-col-end'] = array(
    '#type' => 'markup',
    '#markup' => '</div><div class="clearBoth"></div>',
  	'#prefix' => ''//<div style="display:none;"><img id= "edit-course-img" src="'.$pngPath.'" onload = "$(\'#root-admin\').data(\'narrowsearch\').getBubblePopup('.$qtipOptAccessObj.');"></div>',
  );	      
  }catch (Exception $ex) {
  	watchdog_exception('addEditFormWithNotificationCancelAndSaveClose', $ex);
  	expertusErrorThrow($ex);
  }
}

/*
 * getDefaultNotificationDescriptionAddEditFormFieldValue() - The function determines the default value for a class addedit form field
 */
function getDefaultNotificationAddEditFormFieldValue($field, $form_state, $dbDetail) {
try {
  $defaultValue = '';
  switch ($field) {
    case 'short_description':
      $defaultValue = empty($form_state['values'][$field]['value'])?
	  (empty($dbDetail[$field])? '' : $dbDetail[$field]) :
	  $form_state['values'][$field]['value'];
	  break;
			 
	default:   // For all other fields
	  $defaultValue = empty($form_state['values'][$field])? (empty($dbDetail[$field])? '' : $dbDetail[$field]) :
	  $form_state['values'][$field]['value'];
	  break;
  } // end switch

  expDebug::dPrint('$defaultValue for field ' . $field . ' = ' . print_r($defaultValue, true) , 4);
  expDebug::dPrint('$defaultValue for field of form state ' . $field . ' = ' . print_r($form_state['values'], true) , 5);
  return $defaultValue;
  }catch (Exception $ex) {
  	watchdog_exception('getDefaultNotificationAddEditFormFieldValue', $ex);
  	expertusErrorThrow($ex);
  }
}


/**
 * exp_sp_administration_notification_template_addedit_form_validate() - Notification form validation.
 */
function exp_sp_administration_notification_template_addedit_form_validate($form, &$form_state){
	try {
  expDebug::dPrint('$form_state[values] = ' . print_r($form_state, true) , 4);
  expDebug::dPrint('$form_state[values] = of from ' . print_r($form_state['values'], true) , 4);
  $form_state['hidden-save-submit'] = false;
  $form_state['esign_show_popup']= false;
  if (!empty($form_state['storage']['new_entity'])) {
    unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
    unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
  }
  if (!empty($form_state['storage']['edited_entity'])) {
    unset($form_state['storage']['edited_entity']); // Unset the variable to remove it from $form_state
  }

  if ($form_state['values']['op'] == t('LBL123')) {
	$form_state['input'] = array(); // Clear user input - raw
	$form_state['values'] = array(); // Clear user input - security cleared
	$form_state['rebuild'] = TRUE; // Rebuild the form. Submit handler will not be called.
	return;
  }

  if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
	$triggerValue  = 'save';
  }else{
	$triggerValue  = 'hidden-save';
  }
  $triggerElementByName  = $form_state['triggering_element']['#name'];
  unset($form_state['notification_storage']);
  if (($triggerElementByName == 'save' || $triggerElementByName == 'saveandpublish' || $triggerElementByName == 'hidden-save')) {
	$form_state["storage"]["form_validate"] = true;
	$form_state['esign_show_popup']= true;
	$descriptionValidate = 1;
	if(empty($form_state['values']['name'])) {
	  form_set_error('name', $form['name']['#title'] . t('ERR101'));
	  $form_state['esign_show_popup']= false;
	}
	if (empty($form_state['values']['short_description']['value'])) {
	  $descriptionValidate = 0 ;
	  form_set_error('short_description', $form['short_description']['#title'] . t('ERR101'));
	  $form_state['esign_show_popup']= false;
	}
	if($form_state['values']['page_type'] == 'notification_template'){
    if(!($form_state['values']['notify_type'])) {
	  form_set_error('notify_type', $form['notify_type']['#title'] . t('ERR101'));
	  $form_state['esign_show_popup']= false;
	}
	if(($form_state['values']['notify_type'] == t('Scheduled')) && (empty($form_state['values']['freq_data']))) {
	  form_set_error('freq_data', $form['freq_data']['#title'] . t('ERR101'));
	  $form_state['esign_show_popup']= false;
	}
	if(empty($form_state['values']['entity_type'])) {
		form_set_error('entity_type', $form['entity_type']['#title'] . t('ERR101'));
		$form_state['esign_show_popup']= false;
	}
	if(empty($form_state['values']['sendmailto'])) {
	  form_set_error('sendmailto', $form['sendmailto']['#title'] . t('ERR101'));
	  $form_state['esign_show_popup']= false;
	}
	if(!empty($form_state['values']['cc_mail']) && ($form_state['values']['cc_mail'] != t('MSG698'))){
	  $emailValue = explode(',',$form_state['values']['cc_mail']);
	  foreach($emailValue as $key => $value){
        $mail = trim($value);
        if(!empty($mail)){
          if (!valid_email_address($mail)) {
            form_set_error('cc_mail', t('ERR002'));
          }
        }
	  }
	}
  }
  
  if(($form_state['values']['notification_code'] == 'compliance_class_remind_session' || $form_state['values']['notification_code'] == 'mandatory_class_remind_session'
  		|| $form_state['values']['notification_code'] == 'compliance_expiry_remainder')) {
  	expDebug::dPrint('$form_state[values] = 0000 ' . print_r($form_state['values'], true) , 4);
  	if(empty($form_state['values']['notify_before']) && $form_state['values']['notify_before'] != 0){
  		expDebug::dPrint('$form_state[values] = 22222 ' . print_r($form_state['values']['notify_before'], true) , 4);
  		form_set_error('notify_before', $form['notify_before']['#title'] . t('ERR101'));
  		$form_state['esign_show_popup']= false;
  }
  	if(empty($form_state['values']['freq_data']) && $form_state['values']['freq_data'] != 0){
  		expDebug::dPrint('$form_state[values] =11111' . print_r($form_state['values']['freq_data'], true) , 4);
  		form_set_error('freq_data', $form['freq_data']['#title'] . t('ERR101'));
  		$form_state['esign_show_popup']= false;
  	}
  }
  }
  if($triggerElementByName == 'hidden-save') {
	$form_state['hidden-save-submit']=true;
	$form_state['esign_show_popup']= false;
  }
  $form_state['esign_validation_status']= true; //temproary false changeed to true for e-sign
  if(!($form_state['hidden-save-submit'])){
	unset($_SESSION['esign_validate']);
  }
	}catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_notification_template_addedit_form_validate', $ex);
  	expertusErrorThrow($ex);
  }
}


/*
 * exp_sp_administration_notification_template_addedit_form_submit() - Save the data entered by the user in the exp_sp_administration_notification_addedit_form_submit form
 */
function exp_sp_administration_notification_template_addedit_form_submit($form, &$form_state) {
  try {
    $formIdList = array(
	array('id' => 'exp_sp_administration_notification_template_addedit_form', 'title' => t('LBL204')),
	array('id' => 'exp_sp_administration_notification_attaching_template_form', 'title' => t('LBL925'), 'page_type' => ($form_state['values']['page_type']))
	);
	expDebug::dPrint('asdfgh'.print_r($form_state,true),5);

	expDebug::dPrint('exp_sp_administration_content_addedit_form_submit esign validate ' . $_SESSION['esign_validate'] , 4);
	$chkValidation = 1;
	expDebug::dPrint('exp_sp_administration_content_addedit_form_submit esign validate trigger ' .$form_state['triggering_element']['#name'] , 5);
	$tempEsigndisable = 0;
	if(module_exists('exp_sp_esignature') && isActiveEsignRegion() && $tempEsigndisable){
	  $chkValidation = 0;
	  if($form_state['hidden-save-submit']==true && $_SESSION['esign_validate'] ==  1){
		$chkValidation = 1;
		$form_state['storage']['submit_triggering_element'] = $form_state['storage']['triggering_button_element'];
	  }
	  else{
		$form_state['storage']['triggering_button_element'] = $form_state['triggering_element']['#name'];
	  }
	}
	else{
	  $form_state['storage']['submit_triggering_element'] = $form_state['triggering_element']['#name'];
	}
	if($chkValidation){
	  $form_state['esign_validation_status'] = true;
	  $loggedInUserId = getIdOfLoggedInUser();
	  if(isset($form_state['values']['name'])) {
		if(empty($form_state['values']['notification_id'])) {
		  expDebug::dPrint('exp_sp_administration_notification_addedit_form_submit success validation ' . $form_state['storage']['submit_triggering_element'] , 5);
				//  Check whether add or edit
		  expDebug::dPrint('exp_sp_administ_4354' . $form_state['values']['notification_id'] , 5);	 
		  $returnArr = addNewNotificationDetails($form, $form_state,$loggedInUserId);
		  expDebug::dPrint(' $returnArr = ' . print_r($returnArr, true) , 5);
		  $newNotificationId = $returnArr[0]->id;
		  $emptyId = $form_state['values']['empty_id'];
		  //Added for #0068102
		  if($form_state['values']['page_type'] == 'notification_template'){
		  	_updateAccessEntity($newNotificationId, "cre_ntn", $emptyId);
		  }else{
		  	_updateAccessEntity($newNotificationId, "cre_cer", $emptyId);
		  }
		  if($form_state['triggering_element']['#name'] == 'saveandpublish'){					
			if($form_state['values']['page_type'] == 'notification_template'){				  	
			  expertus_set_message(t('LBL272').' '.t('MSG601').'.');
			}else{
			  expertus_set_message(t('LBL272').' '.t('MSG601').'.');
		    }
		  }else{
			if($form_state['values']['page_type'] == 'notification_template'){
			  expertus_set_message(t('LBL272').' '.t('MSG600').'.');
			}else{
			  expertus_set_message(t('LBL272').' '.t('MSG600').'.');
			  }
			}
		  $entityId                            = $newNotificationId;
		  $form_state['storage']['step']       = 'view';
				
		  $form_state['build_info']['args'][] = $newNotificationId;
		  $form_state['storage']['new_entity'] = TRUE;
		}else{
		  expDebug::dPrint('dfgdfrt'.$form_state['values']['notification_id'],5);
		  updateNotificationDetails($form, $form_state,$loggedInUserId);
		  if($form_state['triggering_element']['#name'] == 'unpublish'){
			if($form_state['values']['page_type'] == 'notification_template'){
			  expertus_set_message(t('LBL272').' '.t('MSG601').'.');
			}else{
			  expertus_set_message(t('LBL272').' '.t('MSG601').'.');
			}
		  }else{
			if($form_state['values']['page_type'] == 'notification_template'){
			  expertus_set_message(t('LBL272').' '.t('MSG601').'.');
			}else{
			  expertus_set_message(t('LBL272').' '.t('MSG601').'.');
			}
		  }

		  $form_state['storage']['step']          = 'edit';
		  $entityId                               = $form_state['values']['notification_id'];
		  $form_state['storage']['edited_entity'] = TRUE;
		  }
		}
		$form_state['build_info']['args'][]       = $entityId;
		$form_state['storage']['form_info_list']  = $formIdList;
		$form_state['rebuild'] = TRUE;
		unset($_SESSION['esign_validate']);
		return;
    }
  }catch(Exception $ex){
  	watchdog_exception('exp_sp_administration_notification_template_addedit_form_submit',$ex);
  	expertusErrorThrow($ex);
  }
}


function exp_sp_administration_notification_attaching_template_form($form, &$form_state, $renderMode, $notificationId, $templateId) {
  try {
  global $theme_key;
	expDebug::dPrint(' unset($form) empty'.print_r($form,true),5);
	if(!empty($form_state['triggering_element']) &&
        ($form_state['triggering_element']['#value'] == 'Add Template' || // Add Class clicked after Save of new record without entering session/content details
          (!empty($form_state['storage']['new']['template_id']) && // Another class Edit button clicked after Save of new record without entering session/content details
            !empty($form_state['triggering_element']['#ajax']['template_id']) &&
              $form_state['storage']['new']['template_id'] != $form_state['triggering_element']['#ajax']['template_id']))) {
                expDebug::dPrint(' unset($form_state[storage][new_entity]) called'.print_r($form_state['build_info']['args'],true),5);
      	        unset($form_state['storage']['new_entity']);
    }
     
    if(empty($notificationId) && !empty($form_state['storage']['new']['notification_id'])) {
      $notificationId = $form_state['storage']['new']['notification_id'];
      $templateId  = $form_state['storage']['new']['template_id'];
      }
    if(!empty($notificationId)) {
      $sendOptions  = notificationSendToOptions($notificationId);
    }
    if($sendOptions == "Email"){
      $formTypeMode = 'notification_template';
    }else{
      $formTypeMode = 'certificate';
    }
      
    $form['edit-class-details-start'] = array(
      '#prefix' => "<div id='catalog-class-addedit-form-details'>",
    );
    if(!empty($notificationId)) {
      $form_state['storage']['notificationId'] = $notificationId;
    }
    else{
      $notificationId = $form_state['notificationId'];
      $form_state['storage']['$notificationId'] = $notificationId;
    }
    if(isset($addAttributes))
      unset($addAttributes['onclick']);
      // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
      // $addAttributes['class'][] = 'addedit-form-expertusone-throbber narrow-search-actionbar-orange-btnBG';
      $addAttributes['class'][] = 'narrow-search-actionbar-orange-btnBG';
      //$addAttributes['onclick'][] = '$(document).ready(function(){ addClassDetails('.$courseId.') }); remove_messages("class");';
      // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
      $addAttributes['data-wrapperid'] = array('catalog-class-addedit-form-details');
      $form['add-class-list'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="add-template-list-wrapper">'
      ); 
    
      $entityId          	 =  '';
      $entityType        	 = 'cre_ntn';
      $qtipIdInit        	 = $entityId.'_'.$entityType;
    if($formTypeMode == 'notification_template'){
      $errorMsg = t('ERR182');
      $qtipOptClassObj     = "{'url':'administration/manage/notification_template/temp-addedit/".$notificationId."//".$entityType."','popupDispId':'qtip_addtemplate_visible_disp_".$qtipIdInit."','catalogVisibleId':'qtipAttachNotification_addtemplate_visible_disp_".$entityId."','wBubble':650,'hBubble':400,'tipPosition':'bottomRight','qtipClass':'qtip-parent','courseId':'".$notificationId."'}";	
    }else{
      $errorMsg = t('ERR188');
      $qtipOptClassObj     = "{'url':'administration/manage/certificate/temp-addedit/".$notificationId."//".$entityType."','popupDispId':'qtip_addtemplate_visible_disp_".$qtipIdInit."','catalogVisibleId':'qtipAttachCertification_edittemplate_visible_disp_".$entityId."','wBubble':650,'hBubble':400,'tipPosition':'bottomRight','qtipClass':'qtip-parent','courseId':'".$notificationId."'}";
    }

    $languageList = getNotificationsAllLanguage($notificationId,'','LIST');
    $drupalLanguageList = locale_language_list('native');
    foreach ($languageList as $id => $row) {
      if (array_key_exists($row->drupallangcode, $drupalLanguageList)) {
  	    $ptLanguage[$row->langcode] = $row->langname;
      }
    }
    if(count($ptLanguage) == 0){
  	  $addClsOverride = ($theme_key == 'expertusoneV2') ? 'add-class-override-button' : '';
      $form['add-class-button'] = array(
        '#type' => 'markup',
        '#prefix' => "<div id='qtip_addtemplate_visible_disp_".$qtipIdInit."' class='admin-save-button-container add-class-button ".$addClsOverride."'><div class='narrow-search-actionbar-greyout-btnLeft white-btn-bg-left'></div><div class='narrow-search-actionbar-greyout-btnBG white-btn-bg-middle'>",
        '#suffix' => t("LBL207").'</div><div class="narrow-search-actionbar-greyout-btnRight white-btn-bg-right"></div></div>',
        '#value' => t("LBL207"),
        '#name' => "Add Template",
        '#limit_validation_errors' => array(),
        '#attributes' => $addAttributes,
      );
    }else{
      $form['add-class-button'] = array(
        '#type' => 'markup',
        '#prefix' => "<div id='qtip_addtemplate_visible_disp_".$qtipIdInit."' onmousedown =\"$('#root-admin').data('narrowsearch').getBubblePopup(".$qtipOptClassObj."); return false;\" onmouseup=\"editTemplateDetails('.$notificationId.','.$templateId.'); return false;\" class='admin-save-button-container add-class-button'><div class='narrow-search-actionbar-orange-btnLeft '></div><div class='narrow-search-actionbar-orange-btnBG '>",
        '#suffix' => t("LBL207").'</div><div class="narrow-search-actionbar-orange-btnRight "></div></div>',
        '#value' => t("LBL207"),
        '#name' => "Add Template",
        '#limit_validation_errors' => array(),
        '#attributes' => $addAttributes,
      );
    }
   $tmpltList       = getAvailableTemplateNotification($notificationId);
   if(count($tmpltList) == 0){
    	// Ref to TICKET 0021973: Remove </div> from $form['edit-class-details-end'] and added to $form['no-class-msg'] markup end.
     $form['no-class-msg'] = array(
       '#type' => 'markup',
       '#markup' => '<div class="no-records-msg" id="add-edit-template-norecords">'.$errorMsg.'</div></div>'
     );  
        
   }else{
	  $form['edit-class-details-end'] = array(
	    '#suffix' => '<div id="admin-notification-template-list-pagination-wrapper"><div id="paint-template-search-results-datagrid">',        
	  );
	  $form['class_list_grid_table'] = array(
		'#type' => 'markup',
		'#markup' => '<table id="admin-notification-template-list-'.$notificationId.'-pagination"></table><div class="ui-jqgrid-toppager" id="admin-notification-template-list-'.$notificationId.'-pagination_toppager"></div>',
		'#suffix' => '</div></div>',
		);
    }

      // Create the form element
    $form['hidden_textformat_field'] = array(
      '#type' => 'text_format',
      '#name' => 'test-desc',
      '#prefix' => "<div style='display:none'>", 
      '#suffix' => "</div>",
      );
    $form['add-class'] = array(
      '#type' => 'markup',
      '#markup' => '<div id="add-class-wrapper"></div></div>'
      ); 

    if(isset($form_state['storage']['fromrebuild']))
  	  $templateId=0;
  	else
  	  $templateId=empty($templateId)?0:$templateId;
  	if($tmpltList != 0){
	  $form['class_bubble_popup_trigger8526'] = array (
		'#prefix' => '<img src=\'themes/seven/images/buttons.png\' width="0" height="0" style="display:none;" onload="$(\'#root-admin\').data(\'narrowsearch\').templateDisplayPagination('.$notificationId.','.$templateId.', \''.$formTypeMode.'\');" />',
	  );
  	}	
    return $form;
	} catch(Exception $ex){
		watchdog_exception('exp_sp_administration_notification_attaching_template_form',$ex);
		expertusErrorThrow($ex);

	}
}


function getTemplateDetailsResults($argType,$notificationId,$templateId){
	try {
  expDebug::dPrint("Template pagiation results called -- ".$notificationId.'gsddggd---->'.$templateId , 4);
  $page = $_GET['page']; // get the requested page 
  $limit = $_GET['rows'];
  
  $languageList = getNotificationsAllLanguage();
  $drupalLanguageList = locale_language_list('native');
  foreach ($languageList as $id => $row) {
    if (array_key_exists($row->drupallangcode, $drupalLanguageList)) {
  	  $ptLanguage[$row->code] = $row->code;
    }
  }
  expDebug::dPrint(' $$numNotification =fetchAllTemplate ' . print_r($ptLanguage, true) , 3);

  $numTemplate = fetchAllTemplate('COUNT',$ptLanguage,0,0,$notificationId);
   
  expDebug::dPrint(' $$numNotification = ' . print_r($numTemplate, true) , 3);
  
  $total_pages = 0;
  $start = getOffsetOfFirstRecordInPage($page, $total_pages, $limit, $numTemplate,false);
  expDebug::dPrint(' $start = ' . print_r($start, true) , 4);
  
  
  $templateList = fetchAllTemplate('LISTS',$ptLanguage, $start, $limit,$notificationId);
  expDebug::dPrint(' $$templateList = ' . print_r($templateList, true) , 3);  
  
  // Prepare and send the response
  $response->page = $page;
  $response->total = $total_pages;
  $response->records = $numTemplate;
  $response->notificationId = $notificationId;
  $_SESSION['jq_count'] = array();
  $i=0;
  foreach ($templateList as $rec_search_results) {
    $rec_search_results->row =  'tr_'.$i;
    $response->rows[$i]['id']   = 'tr_'.$i;
    $response->rows[$i]['cell'] = array( 
    							  'detail' => theme('exp_sp_administration_notification_template', array('detail' => $rec_search_results,'notificationId'=>$notificationId,'templateId'=>$templateId, 'argType'=>$argType))
                                  );
    $_SESSION['jq_modal'][$i] = $rec_search_results->id;
    $i++;    
  }
  echo drupal_json_output($response);
  }catch (Exception $ex) {
  	watchdog_exception('getTemplateDetailsResults', $ex);
  	expertusErrorThrow($ex);
  }
}

function template_addedit_display($argType, $notificationId, $templateId, $entityType) { 
  try {
    $display_mode = ($templateId) ? 'edit' : '';
    $form_state = array(
     'no_redirect'  => TRUE, // To confirm whether necessary
     'build_info'   => array('args' => array('ajax')), // The form builder function expects the first argument to be ajax or nojs.
     'template_id'     => $templateId,
     'entity_type'  => $entityType,
     'notification_id'   =>  $notificationId,
     'display_mode' => $display_mode,
     'argument_type'=> $argType
    );      
      
    $formId                 = 'exp_sp_administration_notification_attaching_template_addedit_form';
    $builtForm              = drupal_build_form($formId, $form_state);
    $renderedTabContentHTML = drupal_render($builtForm);   
    $drupalSettings         = getDrupalSettings();
    
    $commerceResponse = array(
      'drupal_settings'     => $drupalSettings,
      'render_content_main' => $renderedTabContentHTML,
    );  
    echo drupal_json_output($commerceResponse);
    exit;
  } catch (Exception $ex) {
    watchdog_exception('template_addedit_display', $ex);
    expertusErrorThrow($ex);
  }
}


/**
 * exp_sp_administration_notification_attaching_template_addedit_form() - Build the addedit form for Template.
 */

function exp_sp_administration_notification_attaching_template_addedit_form($form, &$form_state, $renderMode){
  try {
      // To set the display mode as view
    $readOnlyForView = false; 
    if($form_state['storage']['display_mode'] == 'view' ){
      $form_state['storage']['step'] = 'view';
      $readOnlyForView = true;
    }
    expDebug::dPrint('checking value of form state'.print_r($form_state,true),5);
          
    $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
    drupal_add_css(drupal_get_path('module', 'exp_sp_administration_notification_template') .'/exp_sp_administration_notification_template_v2.css', $css_theme_optional);
    global $theme_key;
  	if($theme_key == 'expertusoneV2') {
  		//NEWUI THEME STYLE SHEET
  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', $css_theme_optional);
  	} else {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);  		
  	}
    //drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
      
      
    $templateDetails = array();
      
    $notificationId = $form_state['notification_id'];
    $templateId = $form_state['template_id'];
     
    expDebug::dPrint(' $form_state = ' . print_r($form_state['triggering_element']['#name'], true) , 5);
      
    $templateDetails['notification_id'] = $notificationId;
    if(!empty($templateId)) {
      $templateDetails['template_id'] = $templateId;
        // Fetch template details to be displayed in the form
      $templateDetails = getNotificationTemplateDetails($templateId);
      // Added by Vincent on 02, Jan 2014 for #0029687: Refresh on Admin Enrollments page
      updatePaginationCookie();
    }
      
      // Create a new add/edit form
    $form = newAddEditFormWithCancelAndSave('template-basic-addedit-form-'.$templateId);
        
    addHiddenValueToAddEditForm($form, 'template_id', $templateId);
    addHiddenValueToAddEditForm($form, 'notification_id', $notificationId);
    addHiddenFieldToAddEditForm($form, 'empty_id', $emptyId);  
    addHiddenFieldToAddEditForm($form, 'hidden_cancel_reason', '');
    addHiddenFieldToAddEditForm($form, 'cursor_id', '');
    
    $hidewrapperId         = 'add-template-list-wrapper';
    $hideCloseButton = 'notify_template_cancel_button';
    $hideCloseAttributes['class'] = array('addedit-edit-' . $hideCloseButton); 
    $hideCloseAttributes['class'][] = 'addedit-form-expertusone-throbber';
    $hideCloseAttributes['data-wrapperid'] = array($hidewrapperId);
    $templateIdQtip = !empty($templateId)?$templateId:0;
    $formTypeMode = $form_state['argument_type'];
    
    $hideCloseAttributes['onclick'][] = '$(".qtip-active").remove(); remove_messages("class"); return false;';//closeTempQtyp("#qtipAttachNotification_addtemplate_visible_disp_'.$notificationId.'",'.$notificationId.'); $(\'#root-admin\').data(\'narrowsearch\').templateDisplayPagination('.$notificationId.','.$templateIdQtip.', \''.$formTypeMode.'\'); 
    $form[$hideCloseButton] = array(
      '#type' => 'submit',
      '#id' => $hideCloseButton,
      '#prefix' => '<div style="display:none">',
      '#suffix' => '</div>',
      '#value' => '',
      '#name' => 'hiddencancel',
      '#attributes' => $hideCloseAttributes,
      '#ajax' => array(
        'wrapper' => $hidewrapperId,
        'callback' => 'addEditTemplateCancelRepaintForm',
        'method' => 'replace',
        'effect' => 'none',
        'event'=>'click',
        'keypress' => true,
        'progress' => array(
          'type' => 'throbber',
          'message' => ''
          ),
        )
      );

    $form['add-template-notification-start'] = array(
      '#type'   => 'markup',
      '#markup' => '<div class="notification-add-template-container">',
    );
    
    addTwoColumnRowToAddEditForm($form, 'templatecode_langcode'); 
    
    if($formTypeMode != 'certificate'){
    	$defaultSubject =  getDefaultAddEditFormFieldValue('subject', $form_state, $templateDetails);
    	addTextFieldToAddEditFormNotify($form, 'subject', t('LBL083'), $defaultSubject, 2, true);
    }
    $defaultLang =  getDefaultAddEditFormFieldValue('lang_code', $form_state, $templateDetails);
    $languageList = getNotificationsAllLanguage($notificationId,$defaultLang,'LIST');
    $drupalLanguageList = locale_language_list('native');
    foreach ($languageList as $id => $row) {
      if (array_key_exists($row->drupallangcode, $drupalLanguageList)) {
  	    $ptLanguage[$row->code] = $row->name;
      }
    }
    expDebug::dPrint('values f or error'.print_r($ptLanguage,true),4);
    addDropDownToAddEditForm($form, 'lang_code', t('LBL038'), $ptLanguage, $defaultLang, 1, true);
    
    endAddEditTwoColumnRow($form);
    $form['addedit-long-description-container-template'] = array(
      '#type'   => 'markup',
      '#markup' => '<div class="addedit-long-description-container" style="clear:both">',
      );
    addHiddenFieldToAddEditForm($form, 'ckeditor_word_count', '5000');
    $defaultMessage =  getDefaultNotificationAddEditFormFieldValue('template', $form_state, $templateDetails);
    addTextFormatFieldToAddEditForm($form, 'message', t('LBL929'), $defaultMessage, 'full_html', 3, true, false, 5000);
    $form['addedit-long-description-container-template1'] = array(
      '#type'   => 'markup',
      '#markup' => '</div>',
      );
    
    //Start # Added by Velu #0030384
    if($form_state['argument_type'] == 'notification_template'){
    	addHiddenFieldToAddEditForm($form, 'ckeditor_word_count', '100');
    	$defaultSMSMessage = getDefaultNotificationAddEditFormFieldValue('sms_message', $form_state, $templateDetails);
    	addTextAreaFieldForShortDescription($form, 'sms_text', t('LBL1232'), $defaultSMSMessage, 4, false, false, 100, t('LBL1235'));
    	$form['sms_text']['#attributes']['data-empty-text'] = t('LBL1235');
    }
    //End # Added by Velu #0030384
    
    addEditFormWithTemplateCancelAndSaveClose($form, 'template-basic-addedit-form-'.$templateId, 'newtheme-save-button-'.$templateId, 'newtheme-cancel-link-'.$templateId, $subStage,$templateId,$notificationId,$emptyId,$formTypeMode);
    
    $form['add-template-notification-end'] = array(
      '#type'   => 'markup',
      '#markup' => '</div>',
    );
    
      
    return $form;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_notification_attaching_template_addedit_form', $ex);
    expertusErrorThrow($ex);
  }       
}

function addEditTemplateCancelRepaintForm($form, &$form_state) {
  try {
  	expDebug::dPrint('values for close form state'.print_r($form_state,true),5);
    $notificationId       = $form_state['notification_id'];
    $templateId        = $form_state['template_id'];
    $entityType  = $form_state['entity_type'];

    $min_form_state       = array(
     		'ajax'         => TRUE, // As I have merged code from ctools_modal_form_render() in this function, this may no longer be needed. Retaining as in ctools_modal_form_wrapper(), and because form_state is passed around by reference.
     		're_render'    => TRUE, // Doesn't seem of being used by ctools or drupal forms API. Retaining as in ctools_modal_form_wrapper()
     		'no_redirect'  => TRUE, // Prevent any redirection, required forms are built in ajax callback
     		'build_info'   => array('args' => array('ajax')) // The the form builder function expects the first argument to be ajax or nojs.
          );
          
    $form_state                                = $min_form_state;   
    $form_state['notificationId']                    = $notificationId;
    $form_state['storage']['new']['notification_id'] = $notificationId;      
    $form_state['storage']['new']['template_id']  = $templateId;
    $form_state['storage']['cancelled_call']   = TRUE;
    $form_state['storage']['fromrebuild']	   = "fromrebuild";
    
    $commands = array();
    $statusMsgHTML = theme('status_messages');
    expDebug::dPrint(' $statusMsgHTML = ' . print_r($statusMsgHTML, true) , 4);
    if (!empty($statusMsgHTML)) {
      // Show the messages
      $commands[] = ajax_command_html('#bubble-face-table #show_expertus_message', $statusMsgHTML);
    }
    $entityId = !empty($templateId)?$templateId:0;
    $commands[] = exp_ctools_modal_adjust();
    $commands[] = ajax_command_invoke(NULL, 'templateCloseCancel',array($entityId,$entityType));
    $builtForm  = drupal_build_form('exp_sp_administration_notification_attaching_template_form', $form_state);
    $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));
    return array('#type' => 'ajax', '#commands' => $commands);
  } catch (Exception $ex) {
    watchdog_exception('addEditTemplateCancelRepaintForm', $ex);
    expertusErrorThrow($ex);
  }
}


function addEditFormWithTemplateCancelAndSaveClose(&$form, $wrapperId = 'addedit-form-wrapper', $saveButtonId = 'save-button', $cancelButtonId = 'cancel-button', $subStage = '',$templateId,$notificationId,$emptyId = '',$formArgType) {
  // Remove the temporary storage for API's to exchange information during form creation
  try {
    unset($form['addedit_tmp_storage']);
    global $theme_key;
    $prfixPgLeft='';$suffixPgRight='';
    if($theme_key == 'expertusoneV2'){
    	$prfixPgLeft   = '<div class="white-btn-bg-left"></div>';
    	$suffixPgRight = '<div class="white-btn-bg-right"></div>';
    } 
    $esignHiddenButt = 'esign-'.$wrapperId;
      // Add the Cancel button
    $wrapperId          = 'add-template-list-wrapper';
    expDebug::dPrint('cancel id for close button'.$notificationId,4);
      // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
      // each time the form is re-built.
    $cancelAttributes['class'] = array('addedit-edit-' . $cancelButtonId); // This class must be prefixed with 'addedit-edit-' followed by the form field id.
      
      // For common styling of all addedit cancel buttons
      //$cancelAttributes['class'][] = 'addedit-edit-cancel';
      
      // Using this class to applying bg color to the save button
    $cancelAttributes['class'][] = 'admin-action-button-middle-bg white-btn-bg-middle';
      
      // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
    $cancelAttributes['class'][] = 'addedit-form-expertusone-throbber';
      // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
    $cancelAttributes['data-wrapperid'] = array($wrapperId);
      
      // A common class for all addedit form cancel button, for styling to appear as a link.
    $cancelAttributes['class'][] = 'exp-addedit-form-cancel-button';
    
    $templateIdQtip = !empty($templateId)?$templateId:0;
    
      // Remove the error messages or success messages on clicking cancel
      //$cancelAttributes['onclick'][] = 'closeTempQtyp("#qtipAttachNotification_addtemplate_visible_disp_'.$courseId.'"); $("#admin-notification-template-list-'.$notificationId.'-pagination").html(""); $("#admin-notification-template-list-'.$notificationId.'-pagination_toppager").html(""); $(\'#root-admin\').data(\'narrowsearch\').templateDisplayPagination('.$notificationId.','.$templateIdQtip.');  remove_messages("class"); removeQtip("'.$templateIdQtip.'"); return false;';
    $cancelAttributes['onclick'][] = '$("#notify_template_cancel_button").click(); $(".qtip-active").remove();  remove_messages("class");return false;';//closeTempQtyp("#qtipAttachNotification_addtemplate_visible_disp_",'.$notificationId.');$(\'#root-admin\').data(\'narrowsearch\').templateDisplayPagination('.$notificationId.','.$templateIdQtip.', \''.$formArgType.'\');
    $cancelAttributes['tabindex'][] = '117';
     
      
    $form[$cancelButtonId] = array(
      '#type' => 'submit',
      '#prefix' => '<div class="addedit-form-cancel-and-save-actions-row">' .
                       '<div class="addedit-form-cancel-container-actions">'.$prfixPgLeft,
       '#suffix' =>  $suffixPgRight,
      '#value' => t('LBL123'),
      '#name' => 'cancel',
      '#attributes' => $cancelAttributes
      );
      
      // Add the Save button
      
      
    $ajaxCallbackSave = 'addEditTemplateRepaintForm'; //addEditTemplateRepaintForm
    $wrapperId        = 'template-basic-addedit-form-'.$templateId;//add-template-list-wrapper';'catalog-class-basic-addedit-form-container';//
      
      // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
      // each time the form is re-built.
    $saveAttributes['class'] = array('addedit-edit-' . $saveButtonId); // This class must be prefixed with 'addedit-edit-' followed by the form field id.
    
      // For common styling of all addedit save buttons
      //$saveAttributes['class'][] = 'addedit-edit-save';
      
      // Using this class to applying bg color to the save button
    $saveAttributes['class'][] = 'admin-save-button-middle-bg';
    	//$saveAttributes['class'][] = 'edit-catalog-course-save-publish';
    $saveAttributes['tabindex'][] = '116';
      // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
    $saveAttributes['class'][] = 'addedit-form-expertusone-throbber';
      // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
    $saveAttributes['data-wrapperid'] = array($wrapperId);
      
      // Using this onclick function to hide message div
    
      
      //Increase the width of the popup while clicking on save button
    $saveAttributes['onclick'][] = 'increasePopWidth();';
    
    $entityId          	 = !empty($templateId)?$templateId:0;
    if(!empty($emptyId)){
    	$entityId = 0;
    }else{
    	$emptyId = 0;
    }
    $entityType        	 = 'cre_ntn';
    $qtipIdInit        	 = $entityId.'_'.$entityType;
    $type = entityTypeForKeywords($notificationId);
    $dummy_entity_id       = empty($entityId) ? ereg_replace(" ", "",$emptyId) : $entityId;

    $entId = $dummy_entity_id;
    $popupId = 'qtip_addkeywords_disp_'."$qtipIdInit";
    	
      // Remove the error messages or success messages on clicking submit
      
   // $eSignatureAvailable = ($subStage == 'Attachment') ? false : true;
      $isSaveParent = 0;
        //if(empty($classId)){// || $classDetails['status'] != 'lrn_cls_sts_atv'){
      $isSaveParent = 1;
      $saveAttributes['onclick'] = array();
      $saveAttributes['class'][] = 'admin-save-button-dropdown-middle-bg-wrapper';
      $saveAttributes['onclick'][] = "closeQtip('$popupId','$entId');  return false;"; 
      $form[$saveButtonId] = array(
        '#type' => 'submit',
    	'#prefix' => '<div class="admin-save-pub-unpub-button-container"><div class="admin-save-button-left-bg"></div>',
    	'#suffix' => '<div class="admin-save-button-right-bg"></div></div>',
    	'#value' => t('LBL141'),
        '#name' => 'save',
    	'#attributes' => $saveAttributes,
          '#ajax' => array(
      	    'wrapper' => $wrapperId,
      	    'callback' => $ajaxCallbackSave,
            'customButtonId'=>$esignHiddenButt,
      	    'method' => 'replace',
      	    'effect' => 'none', // 'fade',
      	    'event'=>'click',
      	    'keypress' => true,
      	    'progress' => array(
      	      'type' => 'throbber',
      	      'message' => ''
      	      ),
          	)
    	  );  
      
           
        
        
      
      $form['addedit-button-group-ul-end'] = array(
        '#type' => 'markup',
        '#markup' => '</ul><div class="clearBoth"></div></div>' .
    	             '<div class="clearBoth"></div></div>',
        );
      
    $form[$esignHiddenButt] = array(
      '#type' => 'submit',
      '#prefix' => '<span id = "esign-admin-div" style="display:none;">',
      '#suffix' => '</span>',
      '#value' => t('hidden-save'),
      '#name'	=> 'hidden-save',
      '#id' =>$esignHiddenButt,
      '#attributes' => $saveAttributes,
      '#ajax' => array(
        'wrapper' => $wrapperId,
        'callback' => $ajaxCallbackSave,
        'method' => 'replace',
        'effect' => 'none', // 'fade',
        'event'=>'click',
        'keypress' => true,
        'progress' => array(
        'type' => 'throbber',
        'message' => ''
        ),
      )
    );  
   
    if($formArgType == 'notification_template'){
      $qtipOptAttachmentObj  = "{'entityId':".$dummy_entity_id.",'entityType':'cre_ntn','url':'administration/manage/notification_template/temp-addedit/add-keywords/".$entityId."/".$entityType."/".$type."','popupDispId':'qtip_addkeywords_disp_".$qtipIdInit."','catalogVisibleId':'qtipAttachNotification_addkeyword_visible_disp_".$qtipIdInit."','wid':500,'heg':'250','postype':'topleft','poslwid':'20','qdis':'ctool','linkid':'visible-notify-".$entityId."'}";
    }else{
    	$qtipOptAttachmentObj  = "{'entityId':".$dummy_entity_id.",'entityType':'cre_ntn','url':'administration/manage/certificate/temp-addedit/add-keywords/".$entityId."/".$entityType."/".$type."','popupDispId':'qtip_addkeywords_disp_".$qtipIdInit."','catalogVisibleId':'qtipAttachNotification_addkeyword_visible_disp_".$qtipIdInit."','wid':500,'heg':'250','postype':'topleft','poslwid':'20','qdis':'ctool','linkid':'visible-notify-".$entityId."'}";
    }
    $form['addedit-left-col-extend-func'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="crs-tab-titles-container"><div class="add-keyword-tab-icon"></div>'.
                     "<div id='qtip_addkeywords_disp_".$qtipIdInit."'><a id='visible-notify-".$entityId."' class=\"tab-title\" onmousedown=\" try{myBookmark = tinyMCE.activeEditor.selection.getBookmark();}catch(e){alert(e);} \" onclick = \"callVisibility(".$qtipOptAttachmentObj.");\">".t('LBL287').' '.t('LBL444')."</a><span id='visible-popup-".$entityId."' style='display:none; position:absolute; left:0px; top:0px;'></span></div>".//<div class=\"tab-seperator\"></div><div class=\"tags-tab-icon\"></div>".
         			  '</div>',
    );
     
    $pngPath = base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/spacer.gif';
    
    $form['addedit-left-col-end'] = array(
       '#type' => 'markup',
       '#markup' => '<div class="clearBoth"></div>',
   	   '#prefix' => '',//'<div style="display:none;"><img id= "edit-course-class-img" src="'.$pngPath.'" onload = "$(\'#root-admin\').data(\'narrowsearch\').getBubblePopup('.$qtipOptAttachmentObj.'); 
        								//	"></div>',
    );
      
    $form['load-scripts'.$uniqueId] = array(
      '#prefix' => '<script language="Javascript" type="text/javascript">selecteDropdown()</script>',
    );
  } catch (Exception $ex) {
    watchdog_exception('addEditFormWithTemplateCancelAndSaveClose', $ex);
    expertusErrorThrow($ex);
  }   
 
}

function addEditTemplateRepaintForm($form, &$form_state) {
  try {
      $commands = array();
      expDebug::dPrint('calling another class'.print_r($form_state,true),5);
      $triggerElement = $form_state['triggering_element']['#name'];
      $form_validate  = $form_state["storage"]["form_validate"];
      $newEntity      = !empty($form_state['storage']['new_entity']); // will not be present when trigger element is cancel
      $editedEntity   = !empty($form_state['storage']['edited_entity']);
      
      if($triggerElement=='hidden-save'){  
        $notificationId             = $form_state['notification_id'];
        $templateId              = $form_state['storage']['template_list']['templateId'];
        if($newEntity) {
          $min_form_state       = array(
           		'ajax'         => TRUE, // As I have merged code from ctools_modal_form_render() in this function, this may no longer be needed. Retaining as in ctools_modal_form_wrapper(), and because form_state is passed around by reference.
           		're_render'    => TRUE, // Doesn't seem of being used by ctools or drupal forms API. Retaining as in ctools_modal_form_wrapper()
           		'no_redirect'  => TRUE, // Prevent any redirection, required forms are built in ajax callback
           		'build_info'   => array('args' => array('ajax')) // The the form builder function expects the first argument to be ajax or nojs.
                );
          $form_state                                = $min_form_state;   
          $form_state['notificationId']                    = $notificationId;
          $form_state['template_id']                    = $templateId;
          $form_state['storage']['new']['notification_id'] = $notificationId;      
          $form_state['storage']['new']['template_id']  = $templateId;
          //$form_state['triggering_element']['#name'] = '';
          if ($newEntity) {
          	$form_state['storage']['new_entity'] = TRUE; // we need to pass this to exp_sp_administration_catalog_class_title_form() so that
          	                                             // it shows the new session/content tab when it re-opens the class edit form for the newly saved class
          }
          $builtForm            = drupal_build_form('exp_sp_administration_notification_attaching_template_addedit_form', $form_state);
          $commands[]           = ajax_command_replace(NULL, drupal_render($builtForm));
        }
               
      }
          //$builtForm            = drupal_build_form('exp_sp_administration_notification_attaching_template_addedit_form', $form_state);
          //$commands[]           = ajax_command_replace(NULL, drupal_render($builtForm));
      
      
      $statusMsgHTML = theme('status_messages' ,array('char_length' => 100));
      expDebug::dPrint(' $statusMsgHTML = ' . print_r($statusMsgHTML, true) , 4);
      if (!empty($statusMsgHTML)) {
        // Show the messages
        $commands[] = ajax_command_html('#bubble-face-table #show_expertus_message', $statusMsgHTML);
      }
      
      $commands[]           = exp_ctools_modal_adjust();
       
      if ($newEntity || $editedEntity) {
        $commands[]   = ajax_command_refresh_narrow_search_results('onclose');
      }
     
      return array('#type' => 'ajax', '#commands' => $commands);
  } catch (Exception $ex) {
    watchdog_exception('addEditTemplateRepaintForm', $ex);
    expertusErrorThrow($ex);
  }      
}

/**
 * exp_sp_administration_notification_attaching_template_addedit_form_validate() - Template form validation.
 */
function exp_sp_administration_notification_attaching_template_addedit_form_validate($form, &$form_state){
  expDebug::dPrint(' $form_state = from template screen' . print_r($form_state['values'], true) , 5);
  try {
    $form_state['hidden-save-submit'] = false;
    $form_state['esign_show_popup']= false;
                                                                              
    if(!empty($form_state['storage']['new_entity'])) {
      unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
      unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
    }
        
    if(!empty($form_state['storage']['edited_entity'])) {
      unset($form_state['storage']['edited_entity']); // Unset the variable to remove it from $form_state
    }
    if($form_state['values']['op'] == t('LBL109') || $form_state['triggering_element']['#name'] == 'cancel' || $form_state['triggering_element']['#name'] == 'hiddencancel') {
	  $form_state['input'] = array(); // Clear user input - raw
      $form_state['values'] = array(); // Clear user input - security cleared
	  $form_state['rebuild'] = TRUE; // Rebuild the form. Submit handler will not be called.
	  return;
    }
        
    if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
      $triggerValue  = 'save';
    }else{
      $triggerValue  = 'hidden-save';
    }
      
    $triggerElementByName  = $form_state['triggering_element']['#name'];
	unset($form_state['notification_storage']);
	if(($triggerElementByName == 'save' || $triggerElementByName == 'hidden-save')) {
	  $form_state["storage"]["form_validate"] = true;
	  $form_state['esign_show_popup']= true;
	  $descriptionValidate = 1;
	  if(empty($form_state['values']['lang_code'])) {
		form_set_error('lang_code', $form['lang_code']['#title'] . t('ERR101'));
		$form_state['esign_show_popup']= false;
	  }
	  if(empty($form_state['values']['subject']) && $form_state['argument_type'] != 'certificate') {
		form_set_error('subject', $form['subject']['#title'] . t('ERR101'));
		$form_state['esign_show_popup']= false;
	  }
	  if (empty($form_state['values']['message']['value'])) {
			$descriptionValidate = 0 ;
			form_set_error('message', $form['message']['#title'] . t('ERR101'));
			$form_state['esign_show_popup']= false;
		}
	}
	if($triggerElementByName == 'hidden-save') {
	  $form_state['hidden-save-submit']=true;
	  $form_state['esign_show_popup']= false;
	}
	$form_state['esign_validation_status']= true; //temproary false changeed to true for e-sign
	if(!($form_state['hidden-save-submit'])){
	  unset($_SESSION['esign_validate']);
	}
  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_notification_attaching_template_addedit_form_validate', $ex);
    expertusErrorThrow($ex);
  }       
}

/**
 * exp_sp_administration_notification_attaching_template_addedit_form_submit() - Template form submit.
 */
function exp_sp_administration_notification_attaching_template_addedit_form_submit($form, &$form_state){
  
  try{
  
    expDebug::dPrint(' $form_state = submit from template form' . print_r($form_state, true) , 5);
               
    $chkesign = 0;                                            
    $chkValidation = 1; 
    expDebug::dPrint('exp_sp_administration_catalog_class_addedit_form_submit esign validate trigger ' .$form_state['triggering_element']['#name'] , 5);
    $triggerName = $form_state['triggering_element']['#name'];
     
        //Hidden for Remove E-sign in class Qtip screen
    if($chkesign) {
      if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
        $chkValidation = 0;
        if($form_state['hidden-save-submit']==true && $_SESSION['esign_validate'] ==  1){
          $chkValidation = 1;
          $form_state['storage']['submit_triggering_element'] = $form_state['storage']['triggering_button_element'];
        }
        else{
          $form_state['storage']['triggering_button_element'] = $form_state['triggering_element']['#name'];
        }
      }
      else{
        $form_state['storage']['submit_triggering_element'] = $form_state['triggering_element']['#name'];
      }
    }
    $form_state['storage']['submit_triggering_element'] = $form_state['triggering_element']['#name'];
    if($chkValidation){
      $form_state['esign_validation_status'] = true;
      $loggedInUserId = getIdOfLoggedInUser();
        
      // Check whether add or edit 
      if (empty($form_state['values']['template_id']) && $form_state['values']['template_id']=='') { // Add
        $templateId = addNewTemplate($form, $form_state, $loggedInUserId);
        expertus_set_message(t('LBL272').' '.t('MSG600').'.');
        $form_state['build_info']['args'][] = $templateId;
        $form_state['storage']['new_entity'] = TRUE;
        $form_state['storage']['display_mode'] = 'Edit';
        $entityType = 'cre_ntn'; 
        $emptyId = $form_state['values']['empty_id'];
        
      }
      else { //Edit
        $templateId = $form_state['values']['template_id'];
          
        unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
        unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
        if($form_state['storage']['substage'] == 'details' || empty($form_state['storage']['substage'])) {
          updateTemplateDetails($form, $form_state, $loggedInUserId);
          expertus_set_message(t('LBL272').' '.t('MSG601').'.');
          $form_state['storage']['substage'] = 'details';
        }
        $form_state['storage']['edited_entity'] = TRUE;
      }
        
      $form_state['display_class'] = TRUE;
      $form_state['show_add_another'] = TRUE; 
        
      if(empty($form_state['class_id'])){
        $entityId = $form_state['values']['template_id'];
      }else{
        $entityId = $form_state['template_id'];
      }
    
      $form_state['storage']['template_list']['notificationId'] = $form_state['values']['notification_id'];
      $form_state['storage']['template_list']['templateId']  = $templateId;
      $form_state['notificationId']                    = $form_state['values']['notification_id'];
      $form_state['template_id']                    = $entityId;
    
      $entityType = 'cre_ntn';
        
      $uniqueId = $entityId.'-'.$entityType;
      $form_state['rebuild']  = TRUE;
      unset($_SESSION['esign_validate']);
      }
  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_notification_attaching_template_addedit_form_submit', $ex);
    expertusErrorThrow($ex);
  }       
}


function template_attachment_keywords_display($argType, $entityId, $entityType,$notifyType) {
	try {
  $form_state = array(
    'no_redirect'  => TRUE,
    'build_info'   => array('args' => array('ajax')),
    'entity_id'    => $entityId,
    'entity_type'  => $entityType,
    'notifyType' => $notifyType,
    'form_arg_type' => $argType
  );      
  expDebug::dPrint('checking for calling of add keywords'.$argType.'flow of'.$notifyType,4);
  $formId                 = 'keywords_addedit_form_html';
  $builtForm              = drupal_build_form($formId, $form_state,$entityId,$entityType);
  $renderedTabContentHTML = drupal_render($builtForm);   
  $drupalSettings         = getDrupalSettings();

  $response       = array(
    'drupal_settings'     => $drupalSettings,
    'render_content_main' => $renderedTabContentHTML,
  ); 
 
  echo drupal_json_output($response);
  exit;  
  }catch (Exception $ex) {
  	watchdog_exception('template_attachment_keywords_display', $ex);
  	expertusErrorThrow($ex);
  }
}

function keywords_addedit_form_html($form,&$form_state, $mode=""){
	try {
  global $theme_key;
  // $form = array();
  $entityId = $form_state['entity_id'];
  $entityType = $form_state['entity_type'];
  $notifyType = $form_state['notifyType'];
  $formNotifyType = $form_state['form_arg_type'];
  $keyType = $entityId.'_'.$entityType;
  $formName = 'attach-keywords';
  $uniqueId = 'addkeywords-'.$entityId.'-'.$entityType;
  $wrapperId = 'keyword-grid-wrapper-'.$uniqueId;
  $customHiddenButtonId = 'equv-save-esign';
  expDebug::dPrint('valuess for form state keywords'.$notifyType,5);
  $setminHight = ($entityType=='cre_ntn') ? 'admin-attach-keywords-tab-datagrid-wrapper' : '';
  $qtipId = "qtip_addkeywords_disp_".$keyType;
  $form[$formName] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="admin-add-course-training-plan" class="keywords-form-grid"><div id="'.$wrapperId.'" class="admin-datagrid-pagination '.$setminHight.'">',
    '#suffix' => '</div></div>',
  );
      
  $form[$formName]['attachcourse_view_grid_markup'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="datagrid-div-'.$uniqueId.'"><table id="datagrid-container-keywords-'.$uniqueId.'" class="datagrid-container-common"></table><div id="pager-datagrid-'.$uniqueId.'" class="pager-datagrid-common"></div></div>',
  );
  $excludedCourseId =0;
  $form[$formName]['attachcourse_view_grid_load'] = array( 
    '#type' => 'markup',
    '#prefix' => '<div style="display:none"><img src="themes/seven/images/buttons.png" width="0" height="0" onload="$(\'body\').data(\'mulitselectdatagrid\').createLoader(\'datagrid-div-'.$uniqueId.'\'); $(\'body\').data(\'mulitselectdatagrid\').loadDataGrid(\'edit\', \'addkeywords\', \''.$notifyType.'\', \''.$entityId.'\', \''.$entityType.'\', \''.$excludedCourseId.'\');" width="100" height="132" /></div>',
  );

  $cancelAttributes['class'][] = 'addedit-form-expertusone-throbber admin-action-button-middle-bg';
  //$cancelAttributes['onclick'][]         = "$('#root-admin').data('narrowsearch').removeActiveQtip(); return false;";
  $cancelAttributes['onclick']         = "closeQtip('$qtipId','$entityId');";
  
  $cancelAttributes['data-wrapperid'] = array($wrapperId);
  if($theme_key == 'expertusoneV2') {
    $prefix = '<div class="admin-datagrid-save-cancel-button-align-bottom"><div class="white-btn-bg-left"></div><div class="addedit-form-cancel-container-actions admin-save-button-container white-btn-bg-middle">';
    $suffix = '</div><div class="white-btn-bg-right"></div>';
  }else {
    $prefix = '<div class="admin-datagrid-save-cancel-button-align-bottom"><div class="addedit-form-cancel-container-actions admin-save-button-container">';
    $suffix = '</div>';
  }
  $form[$formName]['cancel_attachcourse_edit_mode'] = array(
    '#type' => 'submit',
    '#value' => t('LBL123'),
    '#title' => t('LBL123'),
    '#prefix' => $prefix,
    '#suffix' => $suffix,
    '#name' => 'Cancel attachcourse',
    '#attributes' => $cancelAttributes,
  );

      
  return $form;
  }catch (Exception $ex) {
  	watchdog_exception('keywords_addedit_form_html', $ex);
  	expertusErrorThrow($ex);
  }
}
function attachKeywordsCallBack($form, &$form_state){
  try {
  $programId = $form_state['triggering_element']['#ajax']['template_id'];
  $entityType = $form_state['triggering_element']['#ajax']['entity_type'];
  
  $min_form_state = array(
    'ajax' => TRUE, 
    're_render' => TRUE, 
    'no_redirect' => TRUE, 
    'template_id' => $templateId,
    'build_info' => array('args' => array('ajax')) 
  );
  
  $form_state = $min_form_state;
  
  expDebug::dPrint('exp_sp_administration_notification_attaching_template_addedit_form formstateee : '.print_r($form_state,true) , 5);
  
  $formId = 'exp_sp_administration_notification_attaching_template_addedit_form';
  $builtForm = drupal_build_form($formId, $form_state);

  $commands = array();  
  $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));
  
  $commands[] = ajax_command_refresh_narrow_search_results('onclose');

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
  }catch (Exception $ex) {
  	watchdog_exception('attachKeywordsCallBack', $ex);
  	expertusErrorThrow($ex);
  }
}
?>