<?php  

/**
 * @version     $Id: saml.module $
 * @since 7.x
 */

/**
 * Implement hook_perm()
 */
   require_once(dirname(__FILE__) . "/incl/saml_utils.inc");
function saml_permission() {
  return array('administer sso' => array(
          'title' => t('Administer SSO'),
          'description' => t('Perform administration tasks for Single SignOn')
  ));
}
function saml_init(){

}

/**
 * Implements hook_menu().
 */
function saml_menu() {
  /*
   * Provides access to settings required for the SAML protocol
   */
   
     
  $items['admin/config/system/sso/saml'] = array(
      'title' => 'SAML 2.0 Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('saml_settings_page'),
      'access arguments' => array('administer sso'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'saml.module',
  ); 


  /*
   * Authentication method which handles verification of authenticated user,
   * processing of and redirection to the appropriate page
   */

 $items['sso/authenticate/%'] = array(
      'title' => 'Active Directory Login',
      'page callback' => 'saml_authenticate',
 			'page arguments' => array(2),
      'access callback' => TRUE,     //'any_user',
      'type' => MENU_CALLBACK,
      'file' => 'saml.module',
  );
/* Assertion Consumer Service URL */

  $items['saml20/acs'] = array(
      'title' => 'LBL1189',
      'page callback' => 'receiveSAMLResponse',
      'access callback' => TRUE, //'any_user',
      'type' => MENU_CALLBACK,
      'file' => 'incl/saml_response.inc',
  );

   $items['saml20/acs/mobile'] = array(
      'title' => 'LBL1189',
      'page callback' => 'receiveSAMLResponse',
  		'page arguments' => array(2),
      'access callback' => TRUE, //'any_user',
      'type' => MENU_CALLBACK,
      'file' => 'incl/saml_response.inc',
  );
  return $items;
}


/**
 * Implements hook_user_logout().
 *
 * Delete any saml_identifier in visitor cookie.
 *
 * @param drupal_user $account
 */
function saml_user_logout($account) {
  if (isset($_COOKIE['Drupal_visitor_adfs_identifier'])) {
    user_cookie_delete('adfs_identifier');
  }
  /* To be Implemented */
}

// --------------------------------------------------------------------------
// User Management: hooks for customized Login forms

/**
 * Implements hook_form_FORM_ID_alter().
 */
function saml_form_user_login_block_alter(&$form, &$form_state) {
  _saml_user_login_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function saml_form_user_login_alter(&$form, &$form_state) {
  _saml_user_login_form_alter($form, $form_state);
}

function _saml_user_login_form_alter(&$form, &$form_state) {
  // If administrator has not configured the module then do not modify login form
  if (!e1_sso_login_accessible()) {
    return;
  }

  
  drupal_add_css( drupal_get_path('module', 'saml') . '/css/saml.css');
  
  $form['signin_msg'] = array(
  		'#attributes' =>array('class' => array('signin_msg')),
  		'#weight' => 1,
  		'#prefix' => '<div class="saml-helptext">'.t('MSG710'),
  		'#suffix' => '</div>',
  );
  $items = array();
  $items[] = array(
      
      'data' => l(t('LBL1255'), 'sso/authenticate/saml'), 
      'class' => array('saml-link'),
  );  
  $linkattribute['class'] = array('admin-save-button-middle-bg');
  $linkattribute['href'] = 'sso/authenticate/saml';
  $form['saml_links'] = array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' =>array('class' => array('saml-links','login-white-btn-bg-middle')),
      '#weight' => 1,
  		'#prefix' => '<div class="login-admin-save-button-container"><div class="saml-signin"><div class="login-white-btn-bg-left"></div>',
  		'#suffix' => '<div class="login-white-btn-bg-right"></div></div></div>',
  );
  $form['saml.return_to'] = array('#type' => 'hidden', '#value' => url('/', array('absolute' => TRUE, 'query' => user_login_destination())));
}

function saml_Authenticate($callFrom=''){

	global $user;
 
  // If there is an Authenticated user then log them out before we redirect
  if ($user->uid) {
    unset($_SESSION['adfs']);
    //user_logout();
    session_destroy();
  }
  
  module_load_include('inc','saml','./incl/saml_request');
  module_load_include('inc','saml','./incl/saml_utils');
  sendSAMLAuthRequest($callFrom);
}

function saml_settings_page() {
  global $saml_config;
  
  $form = array();

  $form['saml_idp_sso_login_url'] = array(
      '#type' => 'textfield',
      '#title' => t('SAML IdP - Login URL'),
      '#description' => t('This URL should be provided by the SAML IdP SSO provider, and is where the user will be redirected in order to authenticate.'),
      '#default_value' => variable_get('saml_idp_sso_login_url', ''),
      '#required' => TRUE,
  );
  
  $form['saml_idp_issuer_id'] = array(
      '#type' => 'textfield',
      '#title' => t('SAML IdP - Issuer Id (Entity Id)'),
      '#description' => t('This is the issuer Id (entity Id) be provided by the SAML IdP SSO provider. Issuer tag in SAML response is validated agianst this field'),
      '#default_value' => variable_get('saml_idp_issuer_id', ''),
      '#required' => TRUE,
  );

  $form['saml_sp_entity_id'] = array(
      '#type' => 'textfield',
      '#title' => t('ExpertusONE Service Provider Entity Id'),
      '#description' => t('This is the identity of ExpertusONE to be provided to the SAML IdP SSO provider.'),
      '#default_value' => variable_get('saml_sp_entity_id', 'expertusonesso'),  
      '#required' => TRUE,
  );
  
  $form['saml_private_certificate_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Private certificate Path'),
      '#description' => t('This is a private certificate used to decrypt responses from the IdP SSO provider, it is used when the server is setup to encrypt message responses.'),
      '#default_value' => variable_get('saml_private_certificate_path', ''),
      '#required' => FALSE,
  );

  $form['saml_private_certificate_password'] = array(
      '#type' => 'textfield',
      '#title' => t('Private certificate password'),
      '#description' => t('This is needed if your private certificate requires a password to use.'),
      '#default_value' => variable_get('saml_private_certificate_password', ''),
      '#required' => FALSE,
  );
  
  $form['saml_e1_acs_url'] = array(
      '#type' => 'textfield',
      '#title' => t('ExpertusONE Assertion Consumer Service URL'),
      '#description' => t('ExpertusONE Assertion Consumer service URL to be provided to the IdP. IdP will send the SAML response to this URL'),
      '#default_value' =>  getAcsURL(),
	  '#attributes' => array('readonly' => 'readonly'),
      '#required' => TRUE,
  );
  $saml_nameId=variable_get('saml_nameid_format');
  $saml_nameId= empty($saml_nameId)? 'persistent' : $saml_nameId;
   $form['saml_nameid_format']=array(
  
	'#type' => 'select',
      '#title' => t('SAML NameId Format'),
	  '#options' => array('attribute'=>t('Match attribute in SAML response with username in ExpertusONE'), 
						  'email'=> t('Match email in SAML Response with email in ExpertusONE'),
						  'persistent'=> t('Match nameId in SAML Response with username in ExpertusONE')),
      '#description' => t('How to identify the user in the SAML Response. If we have to match attribute,need to specify the name of the attribute below  .'),
	  '#default_value' => $saml_nameId,
  );
  
  $saml_attrib_name=variable_get('saml_nameid_attribute_name');
  $saml_attrib_name = empty($saml_attrib_name)?'':$saml_attrib_name;
  
  $form['saml_nameid_attribute_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Attribute Name to match'),
      '#description' => t('Name of the attribute in SAML response to match with user name in ExpertusONE. The name is case sensitive. Applied only when an <br/> attribute match is selected above.'),
	  '#default_value' => $saml_attrib_name,
     
  );

  $form['saml_multimode_auth']=array(
  
			'#type' => 'select',
      '#title' => t('Support multi-mode authentication?'),
	  	'#options' => array('yes'=>t('Yes'), 
		  'no'=> t('No')),
      '#description' => t('Support native ExpertusONE authentication as well as SAML SSO.'),
	  	'#default_value' => variable_get('saml_multimode_auth','yes'),
  );


  return system_settings_form($form);
}
function saml_settings_page_validate($form, &$form_state) {
  // Test the sso target URL.
  if (parse_url($form_state['values']['saml_idp_sso_login_url'], PHP_URL_SCHEME) != 'https') {
    form_error($form['saml_idp_sso_login_url'], t('URL must be a valid https URL.'));
  }
}


/**
 * Implements SAML hook_menu_alter().
 */
function saml_menu_alter(&$items) {
  $multi_mode = variable_get('saml_multimode_auth','yes');
  if($multi_mode==='no'){
	  unset($items['ctools_ajax_sample/ajax/user_login']);	
	  $items['ctools_ajax_sample/ajax/user_login'] = array(
	    'title' => t('Sign In'),
	    'page callback' => 'render_custom_login_dialog_callback',
	    'page arguments' => array(1),
	    'access callback' => 'user_is_anonymous',
	    'menu_name' => 'user-menu',
	    'weight' => 50,
	  );
	
  	return $items;
  }	
}

/*
 *  Custom login callback.
 */
function render_custom_login_dialog_callback($js = NULL) {
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands = array();
  $commands[] = ctools_ajax_command_redirect('sso/authenticate/saml');
  print ajax_render($commands);
  exit; 
}



?>
