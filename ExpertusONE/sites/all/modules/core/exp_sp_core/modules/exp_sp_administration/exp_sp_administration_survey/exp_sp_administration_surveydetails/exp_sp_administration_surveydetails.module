<?php 
/**
 * Implementation of hook_menu().
 */
function exp_sp_administration_surveydetails_menu() { 
  try{
  $items = array();
    /*
  $items['administration/survey/surveydetails'] = array(
    'title' => t('Survey'),
    'page callback' => 'getSurveyDetailsTabContent', 
    'access callback' => 'user_access',
    'access arguments' => array('Survey Details Admin Perm'), 
  	'page arguments' => array(1), 	 
    'type' => MENU_CALLBACK,
    'weight' => 1,
    'file' => 'exp_sp_administration_surveydetails.inc'
    );
 */
  $items['administration/survey/surveydetails'] = array(
    'title' => t('Survey'),
    'page callback' => 'empty_value', 
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'weight' => 1,
    'access arguments' => array('Survey Details Admin Perm'),
    );
    /*
 $items['administration/assessment/assessmentdetails'] = array(
    'title' => t('Assessment'),
    'page callback' => 'getSurveyDetailsTabContent', 
    'access callback' => 'user_access',
    'access arguments' => array('Assessment Details Admin Perm'), 
    'page arguments' => array(1), 	 
    'type' => MENU_CALLBACK,
    'weight' => 2,
    'file' => 'exp_sp_administration_surveydetails.inc'
    );    
*/
  $items['administration/assessment/assessmentdetails'] = array(
    'title' => t('Assessment'),
    'page callback' => 'empty_value', 
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'weight' => 1,
    'access arguments' => array('Assessment Details Admin Perm'),
    );
    
  $items['administration/survey/%/search/all'] = array(
    'title' => 'Fetch Survey Details List to display in JQGrid',
    'page callback' => 'sendSurveyDetailsListToJqGrid',
    'access callback' => 'user_access',
    'access arguments' => array('Survey Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
    'file' => 'exp_sp_administration_surveydetails.inc'
    );
  $items['administration/assessment/%/search/all'] = array(
  'title' => 'Fetch Assessment Details List to display in JQGrid',
  'page callback' => 'sendSurveyDetailsListToJqGrid',
  'access callback' => 'user_access',
  'access arguments' => array('Assessment Details Admin Perm'),
  'type' => MENU_CALLBACK,
  'page arguments' => array(1),
  'file' => 'exp_sp_administration_surveydetails.inc'
  );
    
  /* $items['administration/survey/surveydetails/search/all'] = array(
    'title' => 'Fetch Survey Details List to display in JQGrid',
    'page callback' => 'sendSurveyDetailsListToJqGrid',
    'access callback' => 'user_access',
    'page arguments' => array(1),
    'access arguments' => array('Survey Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_surveydetails.inc'
    );
    */
    
  $items['administration/survey/%/textfilter-autocomplete'] = array(
    'title' => 'Search By Survey Text Filter Autocomplete',
    'page callback' => 'getSurveyDetailsTextFilterAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Survey Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
    'file' => 'exp_sp_administration_surveydetails.inc',
    );
  $items['administration/assessment/%/textfilter-autocomplete'] = array(
    'title' => 'Search By Assessment Text Filter Autocomplete',
    'page callback' => 'getSurveyDetailsTextFilterAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Assessment Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
    'file' => 'exp_sp_administration_surveydetails.inc',
    );

  $items['administration/survey/surveydetails/survey-question-autocomplete'] = array(
    'title' => 'Search By Survey Question Autocomplete',
    'page callback' => 'getSurveyDetailsQuestionTextFilterAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Survey Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
    'file' => 'exp_sp_administration_surveydetails.inc',
  );
  
  $items['administration/assessment/assessmentdetails/assessment-question-autocomplete'] = array(
    'title' => 'Search By Assessment Question Autocomplete',
    'page callback' => 'getSurveyDetailsQuestionTextFilterAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Assessment Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
    'file' => 'exp_sp_administration_surveydetails.inc',
  );
    
   $items['administration/survey/surveydetails/export'] = array(
    'title' => 'Survey Details Search Results CSV Export',
    'page callback' => 'fetchSurveyDetailsAll',
    'page arguments' => array(1,'CSV'),
    'access callback' => 'user_access',
    'access arguments' => array('Survey Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_surveydetails.inc',
    );
    
   $items['administration/assessment/assessmentdetails/export'] = array(
    'title' => 'Assessment Details Search Results CSV Export',
    'page callback' => 'fetchSurveyDetailsAll',
    'page arguments' => array(1,'CSV'),
    'access callback' => 'user_access',
    'access arguments' => array('Assessment Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_surveydetails.inc',
    ); 
    
    $items['administration/survey/surveydetails/print'] = array( 
     'title' => 'Survey Details Results Print to PDF',
     'page callback' => 'fetchSurveyDetailsAll',
     'page arguments' => array(1,'PDF'),
     'access callback' => 'user_access',
     'access arguments' => array('Survey Details Admin Perm'),
     'type' => MENU_CALLBACK,
     'file' => 'exp_sp_administration_surveydetails.inc',
    );
    $items['administration/assessment/assessmentdetails/print'] = array( 
     'title' => 'Assessment Details Results Print to PDF',
     'page callback' => 'fetchSurveyDetailsAll',
     'page arguments' => array(1,'PDF'),
     'access callback' => 'user_access',
     'access arguments' => array('Assessment Details Admin Perm'),
     'type' => MENU_CALLBACK,
     'file' => 'exp_sp_administration_surveydetails.inc',
    );
    $items['administration/survey/%/%ctools_js/addedit'] = array(
      'title' => 'Survey Add Edit',
      'page callback' => 'exp_sp_administration_survey_addedit_form',
      'page arguments' => array(1,3,5),
      'access callback' => 'user_access',
      'access arguments' => array('Survey Details Admin Perm'),
      'type' => MENU_CALLBACK,
      'file' => 'exp_sp_administration_survey_assesment.inc'
    );  
    $items['administration/assessment/%/%ctools_js/addedit'] = array(
      'title' => 'Assessment Add Edit',
      'page callback' => 'exp_sp_administration_survey_addedit_form',
      'page arguments' => array(1,3,5),
      'access callback' => 'user_access',
      'access arguments' => array('Assessment Details Admin Perm'),
      'type' => MENU_CALLBACK,
      'file' => 'exp_sp_administration_survey_assesment.inc'
    );  
    
   $items['administration/learning/survey/survey-assesment-autocomplete'] = array(
    'title' => 'Tags',
    'page callback' => 'getSurveyQuestionAutoComplete',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('Survey Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_survey_assesment_question.inc',
  ); 

  $items['administration/learning/assessment/survey-assesment-autocomplete'] = array(
    'title' => 'Tags',
    'page callback' => 'getSurveyQuestionAutoComplete',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('Assessment Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_survey_assesment_question.inc',
  ); 
  
$items['administration/survey-assessment/groupname-autocomplete'] = array(
  'title' => 'Tags',
  'page callback' => 'getSurveyAssessmentGroupAutoComplete',
  'page arguments' => array(3),
  'access callback' => 'user_access',
  'access arguments' => array('Survey Details Admin Perm'),
  'type' => MENU_CALLBACK,
  'file' => 'exp_sp_administration_survey_assesment_question.inc',
); 
  
  $items['ajax/administration/survey/survey-assessment/publish-and-unpublish/%/%'] = array (
    'title' => 'Publish Or Unpublish Survey/Assesment for a user',
    'page callback' => 'publishOrUnpublishSurveyAssessment',
    'page arguments' => array(5,6),
    'type' => MENU_CALLBACK,
    'access arguments' => array('Survey Details Admin Perm'),
    'file' => 'exp_sp_administration_surveydetails.inc'
	);
  $items['ajax/administration/assessment/survey-assessment/publish-and-unpublish/%/%'] = array (
    'title' => 'Publish Or Unpublish Survey/Assesment for a user',
    'page callback' => 'publishOrUnpublishSurveyAssessment',
    'page arguments' => array(5,6),
    'type' => MENU_CALLBACK,
    'access arguments' => array('Assessment Details Admin Perm'),
    'file' => 'exp_sp_administration_surveydetails.inc'
  );
    
  $items['administration/survey/surveydetails/attachquestion/%/%'] = array(
    'title' => 'Attach Course',
    'page callback' => 'attachQuestionDetails',
  	'page arguments' => array(4, 5),
    'access callback' => 'user_access',
    'access arguments' => array('Survey Details Admin Perm'),
    'type' => MENU_CALLBACK,
   'file' => 'exp_sp_administration_surveydetails.inc'
    );
    
   $items['administration/assessment/assessmentdetails/attachquestion/%/%'] = array(
    'title' => 'Attach Course',
    'page callback' => 'attachQuestionDetails',
  	'page arguments' => array(4, 5),
    'access callback' => 'user_access',
    'access arguments' => array('Assessment Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_surveydetails.inc'
   ); 
    	
  
  $items['administration/update-attachedquestion-group/%/%/%'] = array(
    'title' => 'Attached Question Group Edit',
    'page callback' => 'attachedquestion_group_update',
    'page arguments' => array(2,3,4),
    'access callback' => 'user_access',
    'access arguments' => array('Administration Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_survey_assesment_attach_question.inc'
  );
  
   $items['administration/update-attachedquestion-mandatory/%'] = array(
    'title' => 'Attached Question Mandatory Edit',
    'page callback' => 'attachedquestion_mandatory_update',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('Administration Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_survey_assesment_attach_question.inc'
  );
  
  
    $items['administration/attach-question-pagination/%/%/%'] = array(
    'title' => 'Survey Assesment Attach Question',
    'page callback' => 'getAttachedQuestionDetailsResults',
    'page arguments' => array(2,3),
    'access callback' => 'user_access',
    'access arguments' => array('Administration Perm'),
    'type' => MENU_CALLBACK,    
    'file' => 'exp_sp_administration_survey_assesment_attach_question.inc'
  );
  
   $items['administration/learning/survey/survey-assesment-questions-search-autocomplete/%'] = array(
    'title' => 'Search Survey Assessment Questions',
    'page callback' => 'getSurveyAssessmentQuestionTextFilterAutoComplete',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('Survey Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_survey_assesment_question.inc',
  ); 
   $items['administration/assessment/assessmentdetails/view-assess/%ctools_js/addedit/%/%'] = array(
   		'title' => 'view survey/assessment',
   		'page callback' => 'exp_sp_administration_viewsurassess_addedit_form',
   		'page arguments' => array(4,5,6,7),
   		'access callback' => 'user_access',
   		'access arguments' => array('Assessment Details Admin Perm'),
   		'file' => 'exp_sp_administration_surveydetails.inc',
   		'type' => MENU_CALLBACK
   );
   $items['administration/survey/surveydetails/view-survey/%ctools_js/addedit/%/%'] = array(
   		'title' => 'view survey',
   		'page callback' => 'exp_sp_administration_viewsurassess_addedit_form',
   		'page arguments' => array(4,5,6,7),
   		'access callback' => 'user_access',
   		'access arguments' => array('Survey Details Admin Perm'),
   		'file' => 'exp_sp_administration_surveydetails.inc',
   		'type' => MENU_CALLBACK
   );
  
    expDebug::dPrint(' $items = ' . print_r($items, true) , 4);
	return $items;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_surveydetails_menu', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Implementation of hook_init().
 */
function exp_sp_administration_surveydetails_init() {
	try {
		$request_uri = request_uri();
		if(stripos(request_uri(),'administration/assessment/assessmentdetails')!==false || stripos(request_uri(),'administration/survey/surveydetails')!==false ){ 
			global $theme_key;
			$css_theme_optional   = array('type' => 'file', 'group' => CSS_THEME);
			// Multiselect
			$js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
			
			if($theme_key == "expertusoneV2"){
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning_v2.css',$css_theme_optional);
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration_surveydetails') .'/exp_sp_administration_surveydetails_v2.css', $css_theme_optional);
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
				
			}else{
					drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.css',$css_theme_optional);
					drupal_add_css(drupal_get_path('module', 'exp_sp_administration_surveydetails') .'/exp_sp_administration_surveydetails.css', $css_theme_optional);
					drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
						
			}
			//CUSTOM SCROLLBAR "JSscrollbar"
			drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.jscrollpane.js', $js_module_optional);
			
		}
	} catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_surveydetails_init', $ex);
		expertusErrorThrow($ex);
	}
}

/*
 * () - Multi-Form implementation for Survey/Assessment
 */
function exp_sp_administration_survey_addedit_form($argumentType, $js = NULL,  $surveyId){
  try{
  expDebug::dPrint('Params module file'.$argumentType.'render_mode'.$renderMode.'Survey_id'.$surveyId , 4);
  
  // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
  $survey_style = array(
    'ctools-admin-survey-addedit-style' => array(
      'modalSize' => array(
        'width' => 620,
        'minHeight' => 320,
       ),
    )
  );

  drupal_add_js($survey_style, 'setting');
  
  $js_module_optional   = array('type' => 'file', 'group' => JS_DEFAULT);
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_surveydetails') .'/exp_sp_administration_surveydetails.js', $js_module_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
  
  if ($js) {   
    // Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
    $argsList          = array();
    $surveyDetailTitle = '';
    $argsList['argument_type']        = $argumentType;
   expDebug::dPrint('Survey Arg XXXX Params module file'.print_r($argsList,true) , 4);    
    if (!empty($surveyId)) {
      // $argsList['display_mode']
      $argsList[]             = $surveyId;
      $argsList['display_mode'] = 'EDIT';
      $surveyDetailAttributes = _getSurveyAssessmentDetails($surveyId);
      $surveyDetailTitle      = titleController('EXP-SP-ADMIN-SURVEYDETAILS-MODULE-SURVEY-TITLE', $surveyDetailAttributes[0]->survey_title,40);
    } else {
      $argsList[]               = '';
      $argsList['display_mode'] = 'ADD';
    }
    
    if($argumentType=='assessment'){
      $formTitleName=strtoupper(t('Assessment'));
    }else{
      $formTitleName=strtoupper(t('Survey'));
    }
    
    //$formTitleName = empty($surveyId) ? $formTitleName : '';
    
    $formIdList = array(
                      array('id' => 'exp_sp_administration_survey_assessment_addedit_form', 'title' => ($formTitleName)),
                      array('id' => 'exp_sp_administration_survey_assesment_question_form', 'title' => t('LBL240'))
                      );

    exp_ctools_modal_multi_ajaxonly_forms_display_updated($formIdList, $argsList);
  }
  else {
  	throw new Exception('exp_sp_administration_surveydetails.module: exp_sp_administration_survey_addedit_form() : nojs');
  }
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_survey_addedit_form', $ex);
    expertusErrorThrow($ex);
  } 
} 

function exp_ctools_modal_multi_ajaxonly_forms_display_updated($formInfoList = array(), $argsList = array()) {
  try{
  if (empty($formInfoList)) {
      throw new Exception('exp_sp_administration.inc : exp_ctools_modal_multi_ajax_forms_display() : $formIdList is empty.');
  }
  ctools_include('modal');
  ctools_include('ajax');

  // Prepare title for the modal dialog
  $title = empty($formInfoList[0]['title']) ? drupal_get_title() : $formInfoList[0]['title'];

  $renderMode = 'EDIT';
  if (empty($argsList)) {
    $renderMode = 'ADD';
  }
  
  $renderMode = $argsList['display_mode'];
  expDebug::dPrint('Survey Arg XXXX Params render modee :  '.print_r($renderMode,true) , 4);
  $output = exp_ctools_modal_multi_ajaxonly_forms_render($formInfoList, $argsList, $renderMode);
  
  $commands = array();
  // If the form has not yet been rendered, render it.
  $commands[] = ctools_modal_command_display($title, $output);
  $commands[] = exp_destroy_ckeditors_on_modal_close();
  expDebug::dPrint(' $commands = ' . print_r($commands, true) , 4);
  
  print ajax_render($commands);
  exit;
  }catch (Exception $ex) {
    watchdog_exception('exp_ctools_modal_multi_ajaxonly_forms_display_updated', $ex);
    expertusErrorThrow($ex);
  } 
}

function exp_sp_administration_survey_assesment_question_form_validate($form, &$form_state){
	try{
		include_once(drupal_get_path('module', 'exp_sp_administration_surveydetails') .'/exp_sp_administration_survey_assesment_question.inc');
		$form_state["storage"]["form_validate"] = true;

		expDebug::dPrint('FormInputttttttttttttt : '.print_r($form_state['input'],true) , 5);

		if ($form_state['triggering_element']['#id'] == 'attach_qstion_pg_txtfld') {
			expDebug::dPrint("Validate herrrrr : 3");
			$form_state['display_class']   = TRUE;
			/*      $form_state['input']           = array();
			 $form_state['values']          = array();  */
			$form_state['rebuild']         = TRUE;
			$form_state['storage']['step'] = 'view';
			$form_state['storage']['page'] = $form_state['input']['attach_qstion_pg_txtfld'];//$form_state['triggering_element']['#ajax']['question_pgn_page'];//

			return;
		}

		if ($form_state['triggering_element']['#id'] == 'attach_qstion_pg_next') {
			expDebug::dPrint("Validate herrrrr : 1");
			$form_state['display_class']   = TRUE;
			$form_state['input']           = array();
			$form_state['values']          = array();
			$form_state['rebuild']         = TRUE;
			$form_state['storage']['step'] = 'view';
			$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
			return;
		}

		if ($form_state['triggering_element']['#id'] == 'attach_qstion_pg_previous') {
			expDebug::dPrint("Validate herrrrr : 2");
			$form_state['display_class']   = TRUE;
			$form_state['input']           = array();
			$form_state['values']          = array();
			$form_state['rebuild']         = TRUE;
			$form_state['storage']['step'] = 'view';
			$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
			return;
		}
		if ($form_state['triggering_element']['#id'] == 'attach_qstion_pg_first') {
			expDebug::dPrint("Validate herrrrr : 3");
			$form_state['display_class']   = TRUE;
			$form_state['input']           = array();
			$form_state['values']          = array();
			$form_state['rebuild']         = TRUE;
			$form_state['storage']['step'] = 'view';
			$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
			return;
		}

		if ($form_state['triggering_element']['#id'] == 'attach_qstion_pg_last') {
			expDebug::dPrint("Validate herrrrr : 4");
			$form_state['display_class']   = TRUE;
			$form_state['input']           = array();
			$form_state['values']          = array();
			$form_state['rebuild']         = TRUE;
			$form_state['storage']['step'] = 'view';
			$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
			return;
		}
		if ($form_state['triggering_element']['#id'] == 'surass_attach_search_question') {
			expDebug::dPrint("Validate herrrrr : 5");
			$form_state['storage']['search_attach_surass_question'] = $form_state['values']['surassattchedquestions-autocomplete'];
			$form_state['storage']['search_question_gptype'] = $form_state['values']['hiddensurassgptype'];
			$form_state['display_class']   = TRUE;
			$form_state['input']           = array();
			$form_state['values']          = array();
			$form_state['rebuild']         = TRUE;
			$form_state['storage']['step'] = 'view';
			$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
			return;
		}


		if ($form_state['triggering_element']['#name'] == 'attachquestion') {

			unset($form_state["storage"]["error"]["hidden_question"]);
			unset($form_state["storage"]["error"]["hidden_sequance"]);
			unset($form_state["storage"]["error"]["hidden_score"]);
			unset($form_state["storage"]["error"]["hidden_entity_id"]);
			unset($form_state["storage"]["error"]["hidden_entity_type"]);

			expDebug::dPrint('Form inputsssssss : '.print_r($form_state['input'],true) , 5);

			$entityId             = $form_state['triggering_element']['#ajax']['entity_id'];
			$entityType           = $form_state['triggering_element']['#ajax']['entity_type'];
			$uniqueId             = "attachQuestion-$entityId-$entityType";
			$hidden_question_id   = $form_state['values']['hidden_question_id_'.$uniqueId];
			$hidden_question_id   = $form_state['input']['hidden_idlist_'.$uniqueId];
			$question_id_lst      = explode(",",$hidden_question_id);

			expDebug::dPrint('validate trigggerrrr hiddennne $question_id_lst : '.$hidden_question_id , 5);
			expDebug::dPrint('validate trigggerrrr $question_id_lst : '.print_r($question_id_lst,true) , 4);
			expDebug::dPrint('validate trigggerrrr $question_id_lst count : '.count($question_id_lst , 4));

			if(empty($hidden_question_id)) {
			form_set_error('survey_group', t('Please select one or more question.'));
			}
					 
			$sequance_error  = array();
			$score_error     = array();
			$sequance_stack  = array();
			$score_stack     = array();
			$calc_score      = 0;

			//getAttachQuestion()
			$getAttachQuestion = getAttachQuestion($entityId,'',0);

			$db_sequance = array();
			foreach($getAttachQuestion as $attach_question) {
			$db_sequance[] = $attach_question->survey_group_sequence;
			}

			// survey_group_sequence

			$sequance_exist_error = false;
			$sequance_exist  = array();

			if(!empty($hidden_question_id)) {

			$associateIdListArray = explode(',', $hidden_question_id);

				foreach($associateIdListArray as $associatedEntityId) {

				$qstEntityId         = $associatedEntityId;
				$sequenceInputVal    = $form_state['input']['attachQuestion-sequenceNo-'.$qstEntityId];
				$scoreInputVal       = $form_state['input']['attachQuestion-score-'.$qstEntityId];

				if(in_array($sequenceInputVal,$db_sequance)) {
						$sequance_exist_error = true;
						$sequance_exist[]  = $qstEntityId.":".$sequenceInputVal;
				} else {
					$db_sequance[] = $sequenceInputVal;
				}

				if(empty($sequenceInputVal)) {
				$sequance_error[]  = $qstEntityId.":".$sequenceInputVal;
				}

				$sequance_stack[]     = $qstEntityId.":".$sequenceInputVal;

				if(empty($scoreInputVal)) {
				$score_error[]     = $qstEntityId.":".$scoreInputVal;
				}

				$score_stack[]     = $qstEntityId.":".$scoreInputVal;
				$calc_score        = $calc_score + $scoreInputVal;
				}

				$implode_sequance_str    = "'".implode("-",$sequance_stack)."'";
				$implode_score_str       = "'".implode("-",$score_stack)."'";


				$error_flag = false;



				if(count($sequance_error)>0) {
				$message              = t('Please enter sequence number.');
				$error_flag           = true;
				drupal_set_message($message, 'error');
			}

			if((count($score_error)>0) && ($entityType == 'sry_det_typ_ass'))  {
				$message              = t('ERR125');
				$error_flag           = true;
				drupal_set_message($message, 'error');
				}


				/*
				if($entityType == 'sry_det_typ_ass') {
				$maxScore = maxScoreValidate($entityId);

				$calc_score       = $calc_score + $maxScore;
				$getAssesMaxScore = getMaxScoreForAssesment($entityId);

				if(($calc_score < $getAssesMaxScore) || ($calc_score > $getAssesMaxScore)) {
				$score_error[]        = $getAssesMaxScore;
				$message              = t('Sorry, Questions total score not matched with assessment max score.');
				 //$error_flag           = true;
				drupal_set_message($message, 'error');
				}

				}
				*/
				if($sequance_exist_error) {
				$message              = t('Sequence Number already exist.');
				$error_flag           = true;
				$sequance_error       = $sequance_exist;
				drupal_set_message($message, 'error');
				}

				//if((count($sequance_error)>0) || (count($score_error)>0)) {
				if($error_flag) {
				unset($form_state["storage"]["error"]["sequance_error"]);
				unset($form_state["storage"]["error"]["score_error"]);
				$form_state["storage"]["error"]["sequance_error"]  = $implode_sequance_str;
				$form_state["storage"]["error"]["score_error"]     = $implode_score_str;
				}

				}

				expDebug::dPrint('Form inputsssssss startt storageee : '.print_r($form_state["storage"],true) , 5);

				if(((count($sequance_error)>0) || ((count($score_error)>0) && ($entityType == 'sry_det_typ_ass'))) && $error_flag) {
				$form_state['rebuild']                  = TRUE;
				$form_state['storage']['mode']          = 'edit';
				$form_state['storage']['act_mode']      = 'add_error';
				$form_state["storage"]["form_validate"] = false;
				return ;
				} else {
				$form_state['rebuild']               = TRUE;
				$form_state['storage']['mode']       = 'addmore';
				$form_state['storage']['act_mode']   = 'update';
				return;
		}

		if($form_state['storage']['act_mode'] == 'add') {
		$form_state['rebuild']               = TRUE;
		$form_state['storage']['mode']       = 'addmore';
		$form_state['storage']['act_mode']   = 'update';
		return;
		}

		}

		if ($form_state['triggering_element']['#name'] == 'save') {
		$form_state["storage"]["form_validate"] = false;
		$form_state['input']['attachQuestion-groupName-'.$question_ids[0]];

		$entityId           = $form_state['triggering_element']['#ajax']['entity_id'];
		$entityType         = $form_state['triggering_element']['#ajax']['entity_type'];
		$uniqueId           = "attachQuestion-$entityId-$entityType";
		$hidden_question_id = $form_state['values']['hidden_question_id_'.$uniqueId];
		$question_ids       = explode(",",$hidden_question_id);
		$surveyGroupTxt     = $form_state['input']['attachQuestion-groupName-700'];

		$hidden_question_id = $form_state['values']['hidden_question_id_'.$uniqueId];
		$hidden_sequence    = $form_state['values']['hidden_sequence_'.$uniqueId];
		$hidden_score       = $form_state['values']['hidden_score_'.$uniqueId];
		$entityId           = $form_state['values']['hidden_entity_id_'.$uniqueId];

		$survey_id          = $entityId;
		$question_ids       = explode(",",$hidden_question_id);
		$sequence_ids       = explode(",",$hidden_sequence);
				$score_ids          = explode(",",$hidden_score);


				unset($form_state["storage"]["error"]["hidden_question"]);
				unset($form_state["storage"]["error"]["hidden_sequance"]);
		unset($form_state["storage"]["error"]["hidden_score"]);
		unset($form_state["storage"]["error"]["hidden_entity_id"]);
		unset($form_state["storage"]["error"]["hidden_entity_type"]);

		$form_state["storage"]["error"]["hidden_question"]    = $hidden_question_id;
		$form_state["storage"]["error"]["hidden_sequance"]    = $hidden_sequence;
		$form_state["storage"]["error"]["hidden_score"]       = $hidden_score;
		$form_state["storage"]["error"]["hidden_entity_id"]   = $entityId;
		$form_state["storage"]["error"]["hidden_entity_type"] = $entityType;
		$form_state["storage"]["form_validate"] = true;
		if(empty($surveyGroupTxt)) {
		$message                                = t('Please enter groupname.');
		drupal_set_message($message, 'error');
		$form_state['rebuild']                  = TRUE;
		$form_state['storage']['mode']          = 'addmore_error';
		$form_state['storage']['act_mode']      = 'add_more_error';
		$form_state["storage"]["form_validate"] = false;
		return ;
		} /*else {
		//$form_state['rebuild']                  = TRUE;
		$form_state['storage']['mode']          = 'view';
		$form_state['storage']['act_mode']      = 'update';
		$form_state["storage"]["form_validate"] = true;
		// return;
		}*/

		}

		if ($form_state['triggering_element']['#name'] == 'update_questions') {

		$form_state["storage"]["form_validate"] = true;

			$entityId             = $form_state['triggering_element']['#ajax']['entity_id'];
			$entityType           = $form_state['triggering_element']['#ajax']['entity_type'];

			$qustion_list_id         = $form_state['input']['hidden_qustion_list_id'];
			$qustion_list_id         = ereg_replace("'","",$qustion_list_id);
			$question_ids            = explode(",",$qustion_list_id);
			$question_group_updated  = false;
			$calc_score              = 0;
			foreach($question_ids as $question_id){
			 
			$surveyQuestionTxt   = $form_state['input']['attachQuestion-groupName-'.$question_id];
			$survey_id           = $form_state['input']['entity_id'];
			$group_question_id   = $question_id;//$form_state['input']['group_question_id'];
			$sequenceInputVal    = $form_state['input']['attachQuestion-sequenceNo-'.$question_id];
			$scoreInputVal       = $form_state['input']['attachQuestion-score-'.$question_id];


			if(empty($sequenceInputVal)) {
			$sequance_error[]  = $question_id.":".$sequenceInputVal;
			}

			$sequance_stack[]     = $question_id.":".$sequenceInputVal;

			if(empty($scoreInputVal)) {
			$score_error[]     = $question_id.":".$scoreInputVal;
		}

		$score_stack[]   = $question_id.":".$scoreInputVal;
		$calc_score      = $calc_score + $scoreInputVal;
		 
		if(empty($surveyQuestionTxt)) {
		$group_error[]     = $question_id.":".$surveyQuestionTxt;
		}

		$group_stack[] = $question_id.":".$surveyQuestionTxt;

		$implode_sequance_str    = "'".implode("-",$sequance_stack)."'";
		$implode_score_str       = "'".implode("-",$score_stack)."'";
		$implode_group_str       = "'".implode("-",$group_stack)."'";

		}
		 
		$error_flag           = false;
		 
		if(count($sequance_error)>0) {
				$message              = t('Please enter sequence number.');
				$error_flag           = true;
				drupal_set_message($message, 'error');
		}

		if(count($group_error)>0) {
		$message              = t('ERR127');
		$error_flag           = true;
		drupal_set_message($message, 'error');
		}

		if((count($score_error)>0) && ($entityType == 'sry_det_typ_ass')) {
		$message              = t('ERR125');
		$error_flag           = true;
		drupal_set_message($message, 'error');
		}


		/*
		if($entityType == 'sry_det_typ_ass') {
		$maxScore         = maxScoreValidate($entityId);
		$getAssesMaxScore = getMaxScoreForAssesment($entityId);

		if(($calc_score < $getAssesMaxScore) || ($calc_score > $getAssesMaxScore)) {
		$score_error[]        = $getAssesMaxScore;
		$message              = t('Sorry, Questions total score not matched with assessment max score.');
		$error_flag           = true;
		drupal_set_message($message, 'error');
}
}*/

	expDebug::dPrint('Storage Error123 : seqq = '.count($sequance_error).' scoree : '.count($score_error).' groupp : '.count($group_error) , 4);

	//if((count($sequance_error)>0) || ((count($score_error)>0) && ($entityType == 'sry_det_typ_ass'))  || (count($group_error)>0)) {
	if(((count($sequance_error)>0)  || (count($group_error)>0) || ((count($score_error)>0) && ($entityType == 'sry_det_typ_ass'))) && $error_flag) {
	expDebug::dPrint('inside iff');
	unset($form_state["storage"]["error"]["sequance_error"]);
	unset($form_state["storage"]["error"]["score_error"]);
	unset($form_state["storage"]["error"]["group_error"]);
	$form_state["storage"]["error"]["sequance_error"]  = $implode_sequance_str;
	$form_state["storage"]["error"]["score_error"]     = $implode_score_str;
	$form_state["storage"]["error"]["group_error"]     = $implode_group_str;
	$form_state["storage"]["form_validate"]            = false;
	$form_state['rebuild']                             = TRUE;
	$form_state["storage"]["act_mode"]                 = 'update_error';
	return;
	} else {
	expDebug::dPrint('inside elsee');
	$form_state["storage"]["form_validate"]            = true;
	//$form_state['rebuild']                             = TRUE;
	$form_state['storage']['mode']                     = 'view';
	$form_state['storage']['act_mode']                 = 'update';
	// return;
}
	expDebug::dPrint('Storage Error123 : '.print_r($form_state["storage"],true) , 5);
	expDebug::dPrint('Storage Error1234 : '.print_r($form_state["storage"]["error"],true) , 5);

}



	/* if ($form_state['triggering_element']['#value'] == 'Save') {
	addEditCheckMandatoryFields($form, $form_state, array('survey_title', 'survey_code', 'survey_description', 'survey_language', 'survey_status', 'survey_qust_per_page'));
	}*/

	if ($form_state['triggering_element']['#value'] == 'Cancel') {
	$form_state['display_class']   = TRUE;
	$form_state['input']           = array();
	$form_state['values']          = array();
	$form_state['rebuild']         = TRUE;
	$form_state['storage']['step'] = 'view';
	return;
	}

	if ($form_state['triggering_element']['#value'] == t('LBL372')) {
		$form_state['display_class']   = TRUE;
		$form_state['input']           = array();
		$form_state['values']          = array();
		$form_state['rebuild']         = TRUE;
		$form_state['storage']['mode'] = 'edit';
		$form_state['storage']['act_mode'] = 'add';
		return;
		}

		if ($form_state['triggering_element']['#value'] == t('LBL063')) {
		$form_state['display_class']   = TRUE;
		$form_state['input']           = array();
		$form_state['values']          = array();
		$form_state['rebuild']         = TRUE;
		$form_state['storage']['step'] = 'edit';
		return;
		}

		if ($form_state['triggering_element']['#value'] == 'delete') {
				$form_state['display_class']   = TRUE;
				$form_state['input']           = array();
				$form_state['values']          = array();
		$form_state['rebuild']         = TRUE;
		 $form_state['storage']['step'] = 'edit';
		return;
		}
		} catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_survey_assesment_question_form_validate', $ex);
		expertusErrorThrow($ex);
}
}

function exp_sp_administration_surveydetails_permission() {
	try {
    return array(    
    'Survey Details Admin Perm' => array(
      'title' => t('Survey Details Admin Perm')
    ),
    'Assessment Details Admin Perm' => array(
      'title' => t('Assessment Details Admin Perm')
    ),
    
  );
    } catch (Exception $ex) {
    	watchdog_exception('exp_sp_administration_surveydetails_permission', $ex);
    	expertusErrorThrow($ex);
    }
} 

function includeFilesForsurvey(){
	
	global $theme_key;
	include_once(drupal_get_path('module', 'exp_sp_administration_surveydetails') .'/exp_sp_administration_survey_assesment_question.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_surveydetails') .'/exp_sp_administration_survey_assesment_attach_question.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_surveydetails') .'/exp_sp_administration_survey_assesment.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_surveydetails') .'/exp_sp_administration_surveydetails.inc');
	$css_theme_optional   = array('type' => 'file', 'group' => CSS_THEME);
	if($theme_key == 'expertusoneV2') {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_surveydetails') .'/exp_sp_administration_surveydetails_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_surveyquestions') .'/exp_sp_administration_surveyquestions_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_view_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning_v2.css', $css_theme_optional);
	}
	else{
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_surveydetails') .'/exp_sp_administration_surveydetails.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_surveyquestions') .'/exp_sp_administration_surveyquestions.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_view.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.css', $css_theme_optional);
	}
	$js_module_optional   = array('type' => 'file', 'group' => JS_DEFAULT);
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_surveydetails') .'/exp_sp_administration_surveydetails.js', $js_module_optional);
	 
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access.js', $js_module_optional);
	//CUSTOM SCROLLBAR "JSscrollbar"
	drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.jscrollpane.js', $js_module_optional);
	
	 
	//Using the below veriable we can find current loaded theme name
	global $theme_key;
	if($theme_key == 'expertusoneV2') {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
	} else {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
	}
}

?>