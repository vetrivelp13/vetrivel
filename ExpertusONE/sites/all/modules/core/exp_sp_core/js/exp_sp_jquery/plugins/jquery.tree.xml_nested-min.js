(function(a){if(typeof Sarissa=="undefined"){throw"jsTree xml_nested: Sarissa is not included.";}a.extend(a.tree.datastores,{xml_nested:function(){return{get:function(e,b,d){var g="";if(!e||a(e).size()==0){e=b.container.children("ul").children("li");}else{e=a(e);}if(e.size()>1){var h=this;var g="<root>";e.each(function(){d.callback=true;g+=h.get(this,b,d);});g+="</root>";return g;}if(!d){var d={};}if(!d.outer_attrib){d.outer_attrib=["id","rel","class"];}if(!d.inner_attrib){d.inner_attrib=[];}if(!d.callback){g+="<root>";}g+="<item ";for(var c in d.outer_attrib){if(!d.outer_attrib.hasOwnProperty(c)){continue;}var f=(d.outer_attrib[c]=="class")?e.attr(d.outer_attrib[c]).replace(/(^| )last( |$)/ig," ").replace(/(^| )(leaf|closed|open)( |$)/ig," "):e.attr(d.outer_attrib[c]);if(typeof f!="undefined"&&f.toString().replace(" ","").length>0){g+=" "+d.outer_attrib[c]+'="'+f.toString()+'" ';}delete f;}g+=">";g+="<content>";if(b.settings.languages.length){for(var c in b.settings.languages){if(!b.settings.languages.hasOwnProperty(c)){continue;
}g+=this.process_inner(e.children("a."+b.settings.languages[c]),b,d,b.settings.languages[c]);}}else{g+=this.process_inner(e.children("a"),b,d);}g+="</content>";if(e.children("ul").size()>0){var h=this;d.callback=true;e.children("ul").children("li").each(function(){g+=h.get(this,b,d);});d.callback=false;}g+="</item>";if(!d.callback){g+="</root>";}return g;},process_inner:function(e,b,d,h){var g="<name ";if(h){g+=' lang="'+h+'" ';}if(d.inner_attrib.length||e.children("ins").get(0).style.backgroundImage.toString().length||e.children("ins").get(0).className.length){if(e.children("ins").get(0).style.className.length){g+=' icon="'+e.children("ins").get(0).style.className+'" ';}if(e.children("ins").get(0).style.backgroundImage.length){g+=' icon="'+e.children("ins").get(0).style.backgroundImage.replace("url(","").replace(")","")+'" ';}if(d.inner_attrib.length){for(var c in d.inner_attrib){if(!d.inner_attrib.hasOwnProperty(c)){continue;}var f=e.attr(d.inner_attrib[c]);if(typeof f!="undefined"&&f.toString().replace(" ","").length>0){g+=" "+d.inner_attrib[c]+'="'+f.toString()+'" ';
}delete f;}}}g+="><![CDATA["+b.get_text(e,h)+"]]></name>";return g;},parse:function(f,c,e,g){var d=new XSLTProcessor();d.importStylesheet(a.tree.datastores.xml_nested.xsl);var b=a((new XMLSerializer()).serializeToString(d.transformToDocument(f)).replace('<?xml version="1.0"?>',""));if(b.size()>1){b=b.eq(1);}if(b.is("ul")){b=b.html();}else{b=b.find("ul:eq(0)").html();}if(g){g.call(null,b);}},load:function(d,b,c,e){if(c["static"]){e.call(null,(new DOMParser()).parseFromString(c["static"],"text/xml"));}else{a.ajax({type:c.method,url:c.url,data:d,dataType:"xml",success:function(f,g){e.call(null,f);},error:function(g,h,f){e.call(null,false);b.error(f+" "+h);}});}}};}});a.tree.datastores.xml_nested.xsl=(new DOMParser()).parseFromString('<?xml version="1.0" encoding="utf-8" ?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ><xsl:output method="html" encoding="utf-8" omit-xml-declaration="yes" standalone="no" indent="no" media-type="text/html" /><xsl:template match="/"><xsl:call-template name="nodes"><xsl:with-param name="node" select="/root" /></xsl:call-template></xsl:template><xsl:template name="nodes"><xsl:param name="node" /><ul><xsl:for-each select="$node/item"><xsl:variable name="children" select="count(./item) &gt; 0" /><li><xsl:attribute name="class"><xsl:if test="position() = last()"> last </xsl:if><xsl:choose><xsl:when test="@state = \'open\'"> open </xsl:when><xsl:when test="$children or @hasChildren"> closed </xsl:when><xsl:otherwise> leaf </xsl:otherwise></xsl:choose><xsl:value-of select="@class" /></xsl:attribute><xsl:for-each select="@*"><xsl:if test="name() != \'class\' and name() != \'state\' and name() != \'hasChildren\'"><xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute></xsl:if></xsl:for-each><xsl:for-each select="content/name"><a href=""><xsl:attribute name="class"><xsl:value-of select="@lang" /><xsl:value-of select="@class" /></xsl:attribute><xsl:attribute name="style"><xsl:value-of select="@style" /></xsl:attribute><xsl:for-each select="@*"><xsl:if test="name() != \'style\' and name() != \'class\'"><xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute></xsl:if></xsl:for-each><ins><xsl:if test="string-length(attribute::icon) > 0"><xsl:choose><xsl:when test="not(contains(@icon,\'/\'))"><xsl:attribute name="class"><xsl:value-of select="@icon" /></xsl:attribute></xsl:when><xsl:otherwise><xsl:attribute name="style">background-image:url(<xsl:value-of select="@icon" />);</xsl:attribute></xsl:otherwise></xsl:choose></xsl:if><xsl:text>&#xa0;</xsl:text></ins><xsl:value-of select="current()" /></a></xsl:for-each><xsl:if test="$children or @hasChildren"><xsl:call-template name="nodes"><xsl:with-param name="node" select="current()" /></xsl:call-template></xsl:if></li></xsl:for-each></ul></xsl:template></xsl:stylesheet>',"text/xml");
})(jQuery);