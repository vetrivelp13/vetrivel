<?php

/**
 * @file
 *  h5p.module php file
 *  Drupal module h5p. A HTML5 Package manager for Drupal.
 */

// Views support is included in views/quiz.views.inc
define('H5P_VIEWS_DIR', drupal_get_path('module', 'h5p') . '/views');

/**
 * Implements hook_init()
 */
function h5p_init() {
    //drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/AbstractDetailsWidget.js');

    if (path_is_admin(current_path()) && empty($_POST) && user_access('access administration pages')) {
        $core = _h5p_get_instance('core');
        $core -> validateLibrarySupport();
        _h5p_display_unsupported_libraries(arg(2) === 'h5p');
    }
}

/**
 * Implements hook_menu().
 */
function h5p_menu() {
    $items = array();
    $items['admin/config/system/h5p'] = array('title' => 'H5P', 'description' => 'Configure the location of h5p files.', 'page callback' => 'drupal_get_form', 'page arguments' => array('h5p_admin_settings'), 'access arguments' => array('administer site configuration'), 'type' => MENU_NORMAL_ITEM, 'file' => 'h5p.admin.inc', );

    $items['admin/content/h5p'] = array('title' => 'H5P Libraries', 'description' => 'List, delete and get detailed info on the installed H5P libraries', 'page callback' => 'h5p_library_list', 'access arguments' => array('administer site configuration'), 'type' => MENU_LOCAL_TASK, 'file' => 'h5p.admin.inc', );
    $items['admin/content/h5p/libraries/%'] = array('title' => 'H5P Library Details', 'title callback' => '_h5p_library_details_title', 'title arguments' => array(4), 'description' => 'Get detailed info on a library', 'page callback' => 'h5p_library_details', 'page arguments' => array(4), 'access arguments' => array('administer site configuration'), 'type' => MENU_NORMAL_ITEM, 'file' => 'h5p.admin.inc', );
    $items['admin/content/h5p/libraries/%/upgrade'] = array('title' => 'Upgrade H5P Content', 'page callback' => 'h5p_content_upgrade', 'page arguments' => array(4), 'access arguments' => array('administer site configuration'), 'type' => MENU_NORMAL_ITEM, 'file' => 'h5p.admin.inc', );
    $items['admin/content/h5p/libraries/%/delete'] = array('title' => 'Delete H5P Library', 'description' => 'Delete an unused H5P library', 'page callback' => 'h5p_library_delete', 'page arguments' => array(4), 'access arguments' => array('administer site configuration'), 'type' => MENU_NORMAL_ITEM, 'file' => 'h5p.admin.inc', );
    $items['admin/content/h5p/libraries/%/restrict'] = array('title' => 'H5P Library Restrict', 'page callback' => 'h5p_restrict_library_callback', 'page arguments' => array(4), 'access arguments' => array('administer site configuration'), 'type' => MENU_CALLBACK, 'file' => 'h5p.admin.inc', );
    $items['admin/content/h5p/upgrade/library/%/%/%'] = array('title' => 'H5P Content Upgrade Library', 'page callback' => 'h5p_content_upgrade_library', 'page arguments' => array(5, 6, 7), 'access arguments' => array('administer site configuration'), 'type' => MENU_CALLBACK, 'file' => 'h5p.admin.inc', );
    $items['admin/content/h5p/rebuild-cache'] = array('title' => 'H5P Rebuild Content Cache', 'page callback' => 'h5p_rebuild_cache', 'access arguments' => array('administer site configuration'), 'type' => MENU_CALLBACK, 'file' => 'h5p.admin.inc', );

    //$items['h5p/embed'] = array('title' => 'H5P Embed', 'page callback' => 'h5p_embed', 'access arguments' => array('access content'), 'type' => MENU_CALLBACK, );
    $items['h5p/embed'] = array('title' => 'H5P Embed', 'page callback' => 'h5p_embed',  'type' => MENU_CALLBACK,    'access arguments' => array('expertus learner'),);

    /**
     * @deprecated since 02/16. Use set-finished.json instead
     */
    $items['h5p-ajax/setFinished'] = array('page callback' => 'h5p_set_finished', 'access callback' => 'h5p_access_set_finished', 'type' => MENU_LOCAL_TASK, );

    $items['h5p-ajax/set-finished.json'] = array('page callback' => 'h5p_set_finished', 'access callback' => 'h5p_access_set_finished', 'type' => MENU_LOCAL_TASK, );

    $items['h5p-ajax/content-user-data/%/%/%'] = array('title' => 'H5P Content User Data', 'page callback' => 'h5p_content_user_data', 'page arguments' => array(2, 3, 4), 'access callback' => 'h5p_content_user_data_access', 'access arguments' => array(2), 'type' => MENU_CALLBACK, );

    return $items;
}

/**
 * Implements hook_cron().
 */
function h5p_cron() {
    h5p_fetch_libraries_metadata();
    remove_old_log_events();
}

/**
 * Remove any log messages older than the set limit.
 */
function remove_old_log_events() {
    $older_than = (time() - H5PEventBase::$log_time);

    db_delete('h5p_events') -> condition('created_at', $older_than, '<') -> execute();
}

function h5p_fetch_libraries_metadata($fetchingDisabled = FALSE) {
    // If fetching of libraries from h5p.org is enabled and
    // It has not been run the last 24 hours, let's do it
    // Intentionally not doing === TRUE on h5p_allow_communication_with_h5p_org test
    if ($fetchingDisabled || (variable_get('h5p_allow_communication_with_h5p_org', TRUE) && (intval(variable_get('h5p_fetched_library_metadata_on', 0)) < (time() - 86400)))) {
        // Fetch the library-metadata:
        $core = _h5p_get_instance('core');
        $core -> fetchLibrariesMetadata($fetchingDisabled);
        variable_set('h5p_fetched_library_metadata_on', time());
    }
}

/**
 * Make URLs absolute.
 * TODO: Should this be removed? Doesn't look like it's used
 *
 * @param array $urls
 * @param array $remove Optional urls to skip.
 * @return array absolute urls.
 */
function _h5p_make_urls_absolute($urls, $remove = NULL) {
    global $base_url;
    for ($i = 0, $s = count($urls); $i < $s; $i++) {
        if ($remove !== NULL && preg_match($remove, $urls[$i])) {
            array_splice($urls, $i, 1);
            $i--;
            $s--;
            continue;
        }

        // Skip URLs who already have a base, like aggregated assets.
        if (substr($urls[$i], 0, strlen($base_url)) !== $base_url) {
            $urls[$i] = $base_url . '/' . $urls[$i];
        }
    }
    return $urls;
}

/**
 * Get path to HTML5 Package.
 *
 * @param int $content_id
 * @return string
 */
function h5p_get_export_path($content) {
    return variable_get('h5p_export', 1) ? file_create_url(_h5p_get_h5p_path() . '/exports/' . ($content['slug'] ? $content['slug'] . '-' : '') . $content['id'] . '.h5p') : '';
}

/**
 * Creates the title for the library details page
 *
 * @param integer $library_id
 */
function _h5p_library_details_title($library_id) {
    return db_query('SELECT title FROM {h5p_libraries} where library_id = :id', array(':id' => $library_id)) -> fetchField();
}

/**
 * Implements hook_node_info().
 */
function h5p_node_info() {
    return array('h5p_content' => array('name' => t('Interactive content'), 'base' => 'h5p', 'description' => 'Upload HTML5 packages(.h5p) to create interactive content.', ), );
}

/**
 * Implements hook_permission().
 */
function h5p_permission() {
    return array(
            'update h5p libraries' => array('title' => t('Update libraries'),
                    'description' => t('The user is allowed to update H5P libraries. Only give this permission to trusted users who knows what they are doing.'), ),
            'access all h5p results' => array('title' => t('Access all H5P results'),
                    'description' => t('Access all H5P results stored in the system'), ),
            'access own h5p results' => array('title' => t('Access own H5P results'),
                    'description' => t('Access own H5P results from user profile.'), ),
            'access h5p results for own content' => array('title' => t('Access h5p results for own content'),
                    'description' => t('The user is allowed to see all results for content he has created. Available as a tab on each node.'), ),
            'create restricted h5p content types' => array('title' => t('Create restricted H5P content types'), 'description' => t('The user is allowed to create H5P content types that has been restricted in the library administration interface.'), ), );
}
/**
 * Implements hook_form().
 */
function h5p_form(&$node, $form_state) {
    _h5p_check_settings();

    _h5p_maintain_session_variables();

    $type = node_type_get_type($node);

    $form['#validate'][] = 'h5p_form_validate';

    $form['title'] = array('#type' => 'textfield','#prefix'=>'<div style="display:none">', '#suffix'=>'</div>','#title' => check_plain($type -> title_label), '#required' => TRUE, '#default_value' => $node -> title, );

    $form['#attributes'] = array('enctype' => "multipart/form-data");

    $form['h5p'] = array('#type' => 'file','#prefix'=>'<div style="display:none">', '#suffix'=>'</div>','#title' => t('HTML 5 Package'), '#description' => t('Select a .h5p file to upload and create interactive content from. You may start with the <a href="http://h5p.org/content-types-and-applications" target="_blank">example files</a> on H5P.org'), '#weight' => 2, );

    if (isset($node -> json_content) || isset($node -> translation_source) && isset($node -> translation_source -> json_content)) {
        $content = h5p_get_content(isset($node -> translation_source) ? $node -> translation_source : $node);
        $core = _h5p_get_instance('core');
        $filtered_params = $core -> filterParameters($content);
    } else {
        $filtered_params = '{}';
    }

    $form['json_content'] = array('#type' => 'hidden', '#default_value' => $filtered_params, );

    $form['main_library_id'] = array('#type' => 'value', '#default_value' => isset($node -> main_library_id) ? $node -> main_library_id : '', );

    $form['embed_type'] = array('#type' => 'value', '#default_value' => isset($node -> embed_type) ? $node -> embed_type : 'div', );

    if (!isset($node -> disable)) {
        $node -> disable = H5PCore::DISABLE_NONE;
    }
    // Keep track of the old disable value
    $form['disable'] = array('#type' => 'value', '#value' => $node -> disable);

    // Display options
    if (variable_get('h5p_frame', TRUE)) {
        $form['h5p_options'] = array('#type' => 'fieldset','#title' => t('H5P Options'), '#collapsible' => true, '#collapsed' => true, '#group' => 'additional_settings', '#attributes' => array('class' => array('h5p-action-bar-settings')), '#attached' => array('js' => array(drupal_get_path('module', 'h5p') . '/library/js/disable.js')));

        $labels = _h5p_get_disable_labels();
        foreach (H5PCore::$disable as $bit => $name) {
            if (variable_get('h5p_' . ($bit & H5PCore::DISABLE_DOWNLOAD ? 'export' : $name), TRUE)) {
                $form['h5p_options'][$name] = array('#type' => 'checkbox','#title' => $labels[$bit], '#default_value' => !($node -> disable & $bit));
            }
        }

        $form['#submit'][] = '_h5p_form_submit';
    }

    return $form;
}

/**
 * Handle h5p node form submission
 */
function _h5p_form_submit($form, &$form_state) {

    expDebug::dPrint("_h5p_form_submit...form.1:".print_r($form,true));
    //	expDebug::dPrint("_h5p_form_submit...form_state.1:".print_r(&$form_state,true));
    $core = _h5p_get_instance('core');
    expDebug::dPrint("_h5p_form_submit....2");
    $form_state['values']['disable'] = $core -> getDisable($form_state['values'], $form_state['values']['disable']);
    expDebug::dPrint("_h5p_form_submit....3");
}

/**
 * Provide human readable labels for display options.
 */
function _h5p_get_disable_labels() {
    return array(H5PCore::DISABLE_FRAME => t('Display action bar and frame'), H5PCore::DISABLE_DOWNLOAD => t('Download button'), H5PCore::DISABLE_EMBED => t('Embed button'), H5PCore::DISABLE_COPYRIGHT => t('Copyright button'), H5PCore::DISABLE_ABOUT => t('About H5P button'));
}

/**
 * Validate the h5p file
 */
function h5p_form_validate($form, &$form_state) {
    // Avoid blocking node deletion with missing files.
    expDebug::dPrint("h5p_form_validate....1");
    if ($form_state['values']['op'] == t('Delete')) {
        return;
    }
    expDebug::dPrint("h5p_form_validate....2");

    $validators = array('file_validate_extensions' => array('h5p'), );
    // New uploads need to be saved in temp in order to be viewable
    // during node preview.
    $temporary_file_path = 'public://' . variable_get('h5p_default_path', 'h5p') . '/temp/' . uniqid('h5p-');
    file_prepare_directory($temporary_file_path, FILE_CREATE_DIRECTORY);
    expDebug::dPrint("h5p_form_validate....3");

    if ($file = file_save_upload('h5p', $validators, $temporary_file_path)) {
        // We're good to go.
        expDebug::dPrint("h5p_form_validate....4");

        $form_state['values']['new_h5p'] = TRUE;
        $_SESSION['h5p_upload'] = $form_state['values']['h5p'] = drupal_realpath($file -> uri);
        $_SESSION['h5p_upload_folder'] = drupal_realpath($temporary_file_path);
        expDebug::dPrint("h5p_form_validate....5");

    } elseif (!isset($form['#node'] -> nid) && empty($form_state['values']['h5p']) && empty($_SESSION['h5p_upload'])) {
        expDebug::dPrint("h5p_form_validate....6");

        form_set_error('h5p', t('You must upload a h5p file.'));
    }
}

/**
 * Implements hook_validate().
 */
function h5p_validate($node, &$form) {
    expDebug::dPrint("h5p_validate....1");

    if (isset($_SESSION['h5p_upload'])) {
        expDebug::dPrint("h5p_validate....2");

        $h5p_validator = _h5p_get_instance('validator');
        expDebug::dPrint("h5p_validate....3");

        $valid = $h5p_validator -> isValidPackage();
        expDebug::dPrint("h5p_validate....4");

        if (!$valid) {
            form_set_error('h5p', t('The uploaded file was not a valid H5P package'));
            // Nothing is valid, nothing is kept.
            unset($_SESSION['h5p_upload'], $_SESSION['h5p_upload_folder']);
        }
    }
}

/**
 * Implements hook_insert().
 */
function h5p_insert($node) {
    if (isset($_SESSION['h5p_upload'])) {
        $h5p_core = _h5p_get_instance('storage');
        $h5p_core -> savePackage(h5p_get_content_id($node), $node -> nid, FALSE, array('disable' => $node -> disable, 'title' => $node -> title));
    } else {
        if (!isset($node -> main_library['name'])) {
            $lib = db_query("SELECT machine_name,
                    major_version,
                    minor_version
                    FROM {h5p_libraries}
                    WHERE library_id = :id", array(':id' => $node -> main_library_id)) -> fetchObject();
            $lib = array('libraryId' => $node -> main_library_id, 'machineName' => $lib -> machine_name, 'majorVersion' => $lib -> major_version, 'minorVersion' => $lib -> minor_version);
        } else {
            $lib = array('libraryId' => $node -> main_library_id, 'machineName' => (isset($node -> main_library['name']) ? $node -> main_library['name'] : ''), 'majorVersion' => (isset($node -> main_library['majorVersion']) ? $node -> main_library['majorVersion'] : ''), 'minorVersion' => (isset($node -> main_library['minorVersion']) ? $node -> main_library['minorVersion'] : ''));
        }
        $core = _h5p_get_instance('core');
        $h5p_id = h5p_get_content_id($node);
        $core -> saveContent(array('id' => $h5p_id, 'title' => $node -> title, 'params' => $node -> json_content, 'embed_type' => $node -> embed_type, 'disable' => $node -> disable, 'library' => $lib, 'h5p_library' => $node -> h5p_library), $node -> nid);

        $content_master_id = $node->content_master_id;
        expDebug::dPrint("suresh....h5p_insert:5:::".$content_master_id."===".$h5p_id);
        if($content_master_id != "dummy")
        {
            try {
                $select = db_select('slt_content_master_h5p_rel', 'rel');
                $select -> addExpression('count(1)', 'cnt');
                $select -> condition('rel.content_master_id', $content_master_id);
                $select -> condition('rel.h5p_id', $h5p_id, '=');
                $result = $select -> execute();
                $cnt =  $result -> fetchField();
            } catch (Exception $ex) {
                watchdog_exception('slt_content_master_h5p_rel...', $ex);
                expertusErrorThrow($ex);
            }


            expDebug::dPrint("h5p_insert:5.1:::".$cnt);
            if($cnt == 0)
            {
                global $user;

                db_query("insert into slt_content_master_h5p_rel(h5p_id,content_master_id,created_by,created_on,updated_on,updated_by)values($h5p_id,$content_master_id,$user->uid,now(),now(),$user->uid)");
            }
        }
        if (empty($node->path['alias'])) {
            expDebug::dPrint("h5p_insert:6");
             
            $node->path['alias'] = 'contentview/' . $node->nid;
            expDebug::dPrint("h5p_insert:7");
             
        }
    }
}

/**
 * Implements hook_update().
 */
function h5p_update($node) {
    if ($node -> revision && variable_get('h5p_revisioning', 1)) {
        // Create new revision
        $h5p_storage = _h5p_get_instance('storage');
        if (isset($_SESSION['h5p_upload'])) {
            // Use newly uploaded package
            $h5p_storage -> savePackage($node -> vid, $node -> nid, FALSE, array('disable' => $node -> disable));
        } else {
            // Copy old package
            $h5p_storage -> copyPackage($node -> vid, $node -> old_vid, $node -> nid);
            // Insert content:
            h5p_insert($node);
        }
    } else {
        if (isset($_SESSION['h5p_upload'])) {
            // Replace old package
            $h5p_storage = _h5p_get_instance('storage');
            $h5p_storage -> savePackage(array('id' => h5p_get_content_id($node), 'title' => $node -> title, 'disable' => $node -> disable), $node -> nid, FALSE);
        } else {
            h5p_insert($node);
        }
    }

    db_query("UPDATE node SET `status` = '1' WHERE `nid` =:nid ;",array(':nid'=>$node->nid));

    db_query("UPDATE node_revision SET `status` = '1' WHERE `nid` =:nid AND  `vid` =:vid;",array(':nid'=>$node->nid,'vid'=> $node->vid));
}

/**
 * Implements hook_delete().
 */
function h5p_delete($node) {
    $h5p_core = _h5p_get_instance('storage');
    $h5p_export = _h5p_get_instance('export');

    $res = db_query("SELECT content_id AS id, slug FROM {h5p_nodes} WHERE nid = :nid", array(':nid' => $node -> nid));
    while ($content = $res -> fetchAssoc()) {
        $h5p_core -> deletePackage($content);

        // Remove content points
        db_delete('h5p_points') -> condition('content_id', $content['id']) -> execute();

        // Remove content user data
        db_delete('h5p_content_user_data') -> condition('content_main_id', $content['id']) -> execute();
    }

    if (isset($node -> main_library)) {
        // Log content delete
        new H5PEvent('content', 'delete', $node -> nid, $node -> title, $node -> main_library['name'], $node -> main_library['majorVersion'] . '.' . $node -> main_library['minorVersion']);
    }
}

/**
 * Implements hook_load().
 */
function h5p_load($nodes) {
    $h5p = _h5p_get_instance('core');
    foreach ($nodes as $nid => &$node) {
        $content = $h5p -> loadContent(h5p_get_content_id($node));

        if ($content !== NULL) {
            $node -> json_content = $content['params'];
            $node -> main_library_id = $content['library']['id'];
            $node -> embed_type = $content['embedType'];
            $node -> main_library = $content['library'];
            $node -> filtered = $content['filtered'];
            $node -> disable = $content['disable'];
            $node -> h5p_slug = $content['slug'];
            $node -> comment = "0";

        }
    }
}

/**
 * Implements hook_view().
 */
function h5p_view($node, $view_mode = 'full') {
    node_object_prepare($node);

    if (!isset($node -> in_preview) && isset($node -> main_library_id)) {
        $html = _include_h5p($node);
    }

    if (!isset($html)) {
        $html = '<div>' . t('Sorry, preview of H5P content is not yet available.') . '</div>';
    } else {
        h5p_set_started(h5p_get_content_id($node));
    }

    // Check if any unsupported libraries. Only users which may update this node will get the warning message
    if (node_access('update', $node)) {
        _h5p_display_unsupported_libraries();
    }

    $node -> content['h5p'] = array('#markup' => $html, '#weight' => 1, );

    return $node;
}

/**
 * If unsupported libraries, display a message
 */
function _h5p_display_unsupported_libraries($display_details = FALSE) {
    // Check if any unsupported libraries. Only users which may update this node will get the warning message
    $unsupported_libraries = variable_get('h5p_unsupported_libraries');
    if ($unsupported_libraries !== NULL) {
        if ($display_details) {
            $core = _h5p_get_instance('core');
            $message = $core -> createMarkupForUnsupportedLibraryList($unsupported_libraries);
        } else {
            $message = t('You have %num_libs H5P libraries with versions not supported anymore. ', array('%num_libs' => sizeof($unsupported_libraries)));
        }

        $message .= t('Please upgrade all H5P libraries <a href="@url">here</a>', array('@url' => url('admin/content/h5p/libraries/upgrade-all')));

        drupal_set_message($message, 'warning', FALSE);
    }
}

/**
 * Implements hook_user_delete
 */
function h5p_user_delete($account) {
    db_delete('h5p_points') -> condition('uid', $account -> uid) -> execute();

    // Remove content user data
    db_delete('h5p_content_user_data') -> condition('user_id', $account -> uid) -> execute();
}

/**
 * Implements hook_filter_info().
 */
function h5p_filter_info() {
    $filters['h5p_content'] = array('title' => t('H5P Content'), 'description' => t("Provides shortcodes for adding H5P content to this text format. Should be applied last so that other filters doesn't strip away tags added by this filter."), 'process callback' => '_h5p_process_shortcodes', 'tips callback' => '_h5p_filter_tips', 'cache' => FALSE, // Needs to add its scripts every time. Will make the entire text format not cacheable
    );

    return $filters;
}

/**
 * Provides filter tips callback.
 */
function _h5p_filter_tips($filter, $format, $long = FALSE) {
    return t('Add a [h5p=&lt;h5p id&gt;] tag to include h5p content, for instance [h5p=12] to include the H5P with node id 12.');
}

/**
 * Replace H5P tags with h5p embed codes and add H5P files
 */
function _h5p_process_shortcodes($text, $filter) {
    return preg_replace_callback('%\[h5p=([0-9]*)]%', function($matches) {
        $node = node_load($matches[1]);
        if (!$node || $node -> type !== 'h5p_content') {
            return '';
        }
        $html = _include_h5p($node);
        h5p_set_started(h5p_get_content_id($node));
        return $html;
    }, $text);
}

/**
 * Adds H5P embed code and necessary files
 *
 * @param object $node - H5P node
 * @return string - HTML code for embedding the H5P
 */

function _include_h5p($node) {
    $content_id = h5p_get_content_id($node);
    $embed = H5PCore::determineEmbedType($node -> embed_type, $node -> main_library['embedTypes']);

    h5p_add_files_and_settings($node, $embed);
    if ($embed === 'div') {
        $html = '<div class="h5p-content" data-content-id="' . $content_id . '"></div>';
    } else {
        $html = '<div class="h5p-iframe-wrapper"><iframe id="h5p-iframe-' . $content_id . '" class="h5p-iframe" data-content-id="' . $content_id . '" style="height:1px" src="about:blank" frameBorder="0" scrolling="no"></iframe></div>';
    }
    return $html;
}

/**
 * Access callback for the setFinished feature
 */
function h5p_access_set_finished() {
    $id = filter_input(INPUT_POST, 'contentId', FILTER_VALIDATE_INT);
    return $id ? h5p_content_access($id) : FALSE;
}

/**
 * Determine user access to h5p content.
 *
 * @param {int} $id h5p content identifier
 * @param {string} [$op='view'] node operation
 * @return {boolean}
 */
function h5p_content_access($id, $op = 'view') {
    if ($id === '0') {
        // No content. Check if access to H5P content type.
        return node_access('create', 'h5p_content');
    }
    if (variable_get('h5p_revisioning', 1)) {
        // We got vid, but we need nid. Let's ask DB
        $id = (int) db_query('SELECT nid FROM {node_revision} WHERE vid = :vid', array(':vid' => $id)) -> fetchField();
    }
    return node_access($op, node_load($id));
}

/**
 * Check current user's access to content user data.
 *
 * @param {int} $id
 * @return {boolean}
 */
function h5p_content_user_data_access($id) {
    global $user;

    // Only logged in users can have user data
    return ($user -> uid ? h5p_content_access($id) : FALSE);
}

/**
 * Set that the logged in user has started on an h5p
 *
 * @param int $content_id
 *  The id for the H5P content (vid or nid depending on setting)
 */
function h5p_set_started($content_id) {
    global $user;


    if ($user -> uid) {

        $enrollId = $_GET["enrollId"];
        $preview =  $_GET["preview"];
        if($enrollId == '' || $enrollId == null)
            $enrollId = 0;
        if($preview != true)
            $preview = false;
        if($enrollId != 0 && !$preview)
            db_merge('h5p_points') -> key(array('content_id' => $content_id, 'uid' => $user -> uid,'enrollId'=>$enrollId)) -> insertFields(array('content_id' => $content_id, 'uid' => $user -> uid, 'started' => time(), 'enrollId'=>$enrollId )) -> execute();
    }
}

/**
 * Callback function for storing the users results in the database
 */
function h5p_set_finished() {
    global $user;

    if (!H5PCore::validToken('result', filter_input(INPUT_POST, 'token'))) {
        return H5PCore::ajaxError(t('Invalid security token.'));
    }

    if ($user -> uid && $_POST['contentId'] !== NULL && $_POST['score'] !== NULL && $_POST['maxScore'] !== NULL) {

        $enrollId = $_GET["enrollId"];

        if($enrollId == '' || $enrollId == null)
            $enrollId = 0;
        $preview = $_REQUEST["preview"];
        if($preview != true)
            $preview = false;

        if($enrollId != 0 && !$preview)
            db_update('h5p_points') -> fields(array('finished' => time(), 'points' => $_POST['score'], 'max_points' => $_POST['maxScore'], )) -> condition('content_id', $_POST['contentId']) -> condition('uid', $user -> uid) ->condition('enrollId',$enrollId)-> execute();
        return H5PCore::ajaxSuccess();
    }

    H5PCore::ajaxError();
}

/**
 * Adds content independent scripts, styles and settings
 *
 * @returns array Assets.
 */
function h5p_add_core_assets() {
    static $assets;
    global $user;

    if ($assets === NULL) {
        $cache_buster = '?' . variable_get('css_js_query_string', '');
        $module_path = drupal_get_path('module', 'h5p');
        $assets = array('css' => array(), 'js' => array());

        foreach (H5PCore::$styles as $style) {
            $css = $module_path . '/library/' . $style;
            drupal_add_css($css);
            $assets['css'][] = base_path() . $css . $cache_buster;
        }

        foreach (H5PCore::$scripts as $script) {
            $js = $module_path . '/library/' . $script;
            drupal_add_js($js);
            $assets['js'][] = base_path() . $js . $cache_buster;
        }
    }

    return $assets;
}

function h5p_get_core_settings() {
    global $user, $base_url;

    $settings = array('baseUrl' => $base_url, 'url' => base_path() . _h5p_get_h5p_path(), 'postUserStatistics' => $user -> uid > 0, 'ajaxPath' => url('h5p-ajax') . '/', 'ajax' => array('setFinished' => url('h5p-ajax/set-finished.json'), 'contentUserData' => str_replace('%3A', ':', url('h5p-ajax/content-user-data/:contentId/:dataType/:subContentId'))), 'tokens' => array('result' => H5PCore::createToken('result'), 'contentUserData' => H5PCore::createToken('contentuserdata')), 'saveFreq' => variable_get('h5p_save_content_state', 0) ? variable_get('h5p_save_content_frequency', 30) : FALSE, 'l10n' => array('H5P' => array(// Could core provide this?
            'fullscreen' => t('Fullscreen'), 'disableFullscreen' => t('Disable fullscreen'), 'download' => t('Download'), 'copyrights' => t('Rights of use'), 'embed' => t('Embed'), 'size' => t('Size'), 'showAdvanced' => t('Show advanced'), 'hideAdvanced' => t('Hide advanced'), 'advancedHelp' => t('Include this script on your website if you want dynamic sizing of the embedded content:'), 'copyrightInformation' => t('Rights of use'), 'close' => t('Close'), 'title' => t('Title'), 'author' => t('Author'), 'year' => t('Year'), 'source' => t('Source'), 'license' => t('License'), 'thumbnail' => t('Thumbnail'), 'noCopyrights' => t('No copyright information available for this content.'), 'downloadDescription' => t('Download this content as a H5P file.'), 'copyrightsDescription' => t('View copyright information for this content.'), 'embedDescription' => t('View the embed code for this content.'), 'h5pDescription' => t('Visit H5P.org to check out more cool content.'), 'contentChanged' => t('This content has changed since you last used it.'), 'startingOver' => t("You'll be starting over."), 'by' => t('by'), 'showMore' => t('Show more'), 'showLess' => t('Show less'), 'subLevel' => t('Sublevel'), 'confirmDialogHeader' => t('Confirm action'), 'confirmDialogBody' => t('Please confirm that you wish to proceed. This action is not reversible.'), 'cancelLabel' => t('Cancel'), 'confirmLabel' => t('Confirm'))));

    if ($user -> uid) {
        $settings['user'] = array('name' => $user -> name, 'mail' => $user -> mail);
    } else {
        $settings['siteUrl'] = url('<front>', array('absolute' => TRUE));
    }

    return $settings;
}

function h5p_get_content($node) {

    $core = _h5p_get_instance('core');
    $node -> disable |= $core -> getGlobalDisable();
    if (!($node -> disable & H5PCore::DISABLE_FRAME) && !variable_get('h5p_icon_in_action_bar', TRUE)) {
        $node -> disable |= H5PCore::DISABLE_ABOUT;
    }
    return array('id' => h5p_get_content_id($node), 'mainId' => $node -> nid, 'title' => $node -> title, 'params' => $node -> json_content, 'language' => $node -> language, 'library' => $node -> main_library, 'embedType' => 'div', 'filtered' => $node -> filtered, 'url' => url('node/' . $node -> nid, array('absolute' => TRUE)), 'disable' => $node -> disable, 'slug' => $node -> h5p_slug);
}

function h5p_get_content_settings($content) {
    global $user;
    $core = _h5p_get_instance('core');
    $filtered = $core -> filterParameters($content);

    /*
     * Allow other modules to alter the filtered parameters,
    * but don't decode the parameters unless it is needed
    */

    $modules = module_implements('h5p_filtered_params_alter');
    if (!empty($modules)) {
        $filtered = json_decode($filtered);
        foreach ($modules as $module) {
            $function = $module . '_h5p_filtered_params_alter';
            $function($filtered);
        }
        $filtered = json_encode($filtered);
    }

    //Override tag filtering - h5pcustomize if advancedtext used in the content, omit the tag filtering. We will improve this later.
    //	if(strpos($content["params"],"AdvancedText") > 0 || strpos($content["params"],"H5P.Text") > 0 || strpos($content["params"],"H5P.Image") > 0 || strpos($content["params"],"H5P.MarkTheWords") > 0)
    {
        expDebug::dPrint("AdvancedText Exist");
        $filtered = $content["params"];
    }

    $enrollId = $_GET["enrollId"];
    $preview =  $_GET["preview"];

    if($enrollId == '' || $enrollId == null)
        $enrollId = 0;

    if($preview != true)
        $preview = false;



    // Get preloaded user data
    $results = db_query("SELECT sub_content_id, data_id, data
            FROM {h5p_content_user_data}
            WHERE user_id = :user_id
            AND content_main_id = :content_id
            and enrollId = :enrollId
            AND preloaded = 1", array(':user_id' => $user -> uid, ':content_id' => $content['mainId'],':enrollId'=>$enrollId));

    $content_user_data = array(0 => array('state' => FALSE));
    foreach ($results as $result) {
        $content_user_data[$result -> sub_content_id][$result -> data_id] = $result -> data;
    }

    return array('library' => H5PCore::libraryToString($content['library']), 'jsonContent' => $filtered, 'fullScreen' => $content['library']['fullscreen'], 'exportUrl' => h5p_get_export_path($content), 'embedCode' => '<iframe src="' . url('h5p/embed/' . $content['mainId'], array('absolute' => TRUE)) . '" width=":w" height=":h" frameborder="0" allowfullscreen="allowfullscreen"></iframe>', 'resizeCode' => '<script src="' . h5p_get_resize_url() . '" charset="UTF-8"></script>', 'mainId' => $content['mainId'], 'url' => $content['url'], 'title' => $content['title'], 'contentUserData' => $content_user_data, 'disable' => $content['disable']);
}

function h5p_get_resize_url() {
    return url(drupal_get_path('module', 'h5p') . '/library/js/h5p-resizer.js', array('absolute' => TRUE, 'language' => (object) array('language' => FALSE)));
}

function h5p_form_alter(&$form, &$form_state, $form_id) {
    //var_dump($form);
    //	$form['revision_information']['#access'] = FALSE;//
    //	$form['author']['#access'] = FALSE;
    //	$form['options']['#access'] = FALSE;
    //	$form['h5p_options']['#access'] = FALSE;
    //$form['menu']['#access'] = FALSE;
    //	$form['comment_settings']['#access'] = FALSE;
    // expDebug::dPrint("h5p_form_alter:".print_r($form_state));
    $form['additional_settings']['#access'] = FALSE;
    $form['display_submitted'] = false;
    unset($form['_author']);
    unset($form['comment_filter']['comment']['#title']);


}

/**
 * Adds h5p files and settings.
 *
 * @param stdClass $node
 */
function h5p_add_files_and_settings($node, $embed_type) {
    static $integration, $added_js, $added_css;

    if ($node === NULL) {
        return $integration;
        // For printing
    }

    if (is_null($integration)) {
        // Add integration object
        $integration = h5p_get_core_settings();

        // Add core scripts and styles
        h5p_add_core_assets();
    }

    if (!isset($node -> json_content) || !isset($node -> nid)) {
        return;
        // Not content.
    }

    $content = h5p_get_content($node);
    if (isset($integration['contents'][$content['id']])) {
        return;
        // Already added.
    }

    $integration['contents']['cid-' . $content['id']] = h5p_get_content_settings($content);

    $core = _h5p_get_instance('core');
    $preloaded_dependencies = $core -> loadContentDependencies($content['id'], 'preloaded');
    $files = $core -> getDependenciesFiles($preloaded_dependencies, _h5p_get_h5p_path());
    $library_list = _h5p_dependencies_to_library_list($preloaded_dependencies);

    drupal_alter('h5p_scripts', $files['scripts'], $library_list, $embed_type);
    drupal_alter('h5p_styles', $files['styles'], $library_list, $embed_type);

    if ($embed_type === 'div') {
        foreach ($files['scripts'] as $script) {
            $url = base_path() . $script -> path . $script -> version;
            if (!isset($added_js[$url])) {
                drupal_add_js($script -> path);
                $integration['loadedJs'] = $url;
                $added_js[$url] = TRUE;
            }
        }
        foreach ($files['styles'] as $style) {
            $url = base_path() . $style -> path . $style -> version;
            if (!isset($added_css[$url])) {
                drupal_add_css($style -> path);
                $integration['loadedCss'][] = $url;
                $added_css[$url] = TRUE;
            }
        }
    } elseif ($embed_type === 'iframe') {
        h5p_add_iframe_assets($integration, $content['id'], $files);
    }
}

/**
 * Checks to see if the path is external.
 *
 * @param string $path
 * @return bool
 */
function h5p_is_external_asset($path) {
    return preg_match('/^[a-z0-9]+:\/\//i', $path) ? TRUE : FALSE;
}

/**
 * Add the necessary assets for content to run in an iframe.
 *
 * @param array $integration
 * @param int $content_id
 * @param array $files
 */
function h5p_add_iframe_assets(&$integration, $content_id, $files) {
    static $core_added;

    if ($core_added === NULL) {
        $core_added = TRUE;
        $core_assets = h5p_add_core_assets();

        $integration['core']['scripts'] = $core_assets['js'];
        $integration['core']['styles'] = $core_assets['css'];
    }

    $preprocess_css = (variable_get('preprocess_css', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
    $preprocess_js = (variable_get('preprocess_js', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
    $directory = file_stream_wrapper_get_instance_by_uri('public://') -> realpath();
    $is_writable = is_dir($directory) && is_writable($directory);
    // TODO: && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC); ?

    // Aggregate library styles and scripts for faster loading when using iframe.
    // Core files are not included to leverage browser caching! See http://css-tricks.com/one-two-three
    $core = _h5p_get_instance('core');

    if ($is_writable && $preprocess_css) {
        // Refactor styles array to Drupal eatable format.
        $styles = array();
        // Filters out external styles
        $external_styles = array();
        foreach ($files['styles'] as $style) {
            if (h5p_is_external_asset($style -> path)) {
                $external_styles[] = $style;
            } else {
                // Aggregate
                $styles[] = array('data' => $style -> path, 'type' => 'file');
            }
        }

        $integration['contents']['cid-' . $content_id]['styles'] = $core -> getAssetsUrls($external_styles);
        $integration['contents']['cid-' . $content_id]['styles'][] = file_create_url(drupal_build_css_cache($styles));
    } else {
        $integration['contents']['cid-' . $content_id]['styles'] = $core -> getAssetsUrls($files['styles']);
    }

    if ($is_writable && $preprocess_js) {
        // Refactor scripts array to Drupal eatable format.
        $scripts = array();
        // Filters out external scripts
        $external_scripts = array();
        foreach ($files['scripts'] as $script) {
            if (h5p_is_external_asset($script -> path)) {
                $external_scripts[] = $script;
            } else {
                // Aggregate
                $scripts[$script -> path] = array('data' => $script -> path, 'type' => 'file', 'preprocess' => TRUE, );
            }
        }

        $integration['contents']['cid-' . $content_id]['scripts'] = $core -> getAssetsUrls($external_scripts);
        $integration['contents']['cid-' . $content_id]['scripts'][] = file_create_url(drupal_build_js_cache($scripts));
    } else {
        $integration['contents']['cid-' . $content_id]['scripts'] = $core -> getAssetsUrls($files['scripts']);
    }
}

/**
 * Verify that the libraries H5P needs exists
 *
 * @return boolean
 *  TRUE if the settings validate, FALSE otherwise
 */
function _h5p_check_settings() {
    $file_path = file_stream_wrapper_get_instance_by_uri('public://') -> getDirectoryPath();
    $path = $file_path . '/' . variable_get('h5p_default_path', 'h5p');

    // Creating directories - the first empty string is for creating the parent H5P directory
    foreach (array('', 'temp', 'libraries', 'content', 'exports', 'development') as $directory) {
        $directory = $path . '/' . $directory;
        if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
            return FALSE;
        }
    }

    return TRUE;
}

/**
 * Deletes old session variables that aren't valid anymore
 *
 * We don't want to keep any session variables around if this
 * is a new form...
 */
function _h5p_maintain_session_variables() {
    if (!$_POST && !empty($_SESSION['h5p_upload'])) {
        unset($_SESSION['h5p_upload'], $_SESSION['h5p_upload_folder']);
    }
}

/**
 * Get an instance of one of the h5p library classes
 *
 * This function stores the h5p core in a static variable so that the variables there will
 * be kept between validating and saving the node for instance
 *
 * @staticvar H5PDrupal $interface
 *  The interface between the H5P library and drupal
 * @staticvar H5PCore $core
 *  Core functions and storage in the h5p library
 * @param string $type
 *  Specifies the instance to be returned; validator, storage, interface or core
 * @return object
 *  The instance og h5p specified by type
 */
function _h5p_get_instance($type) {
    static $interface, $core;
    global $language;

    if (!isset($interface)) {
        $interface = new H5PDrupal();

        $development_mode = H5PDevelopment::MODE_NONE;
        //    if (variable_get('h5p_content_dev_mode', '0') === 1) {
        //      $development_mode |= H5PDevelopment::MODE_CONTENT;
        //      drupal_set_message(t('H5P content development mode is enabled. Change <a href="@settings-page">settings</a>.', array('@settings-page' => url('admin/config/system/h5p'))), 'warning', FALSE);
        //    }
        if (variable_get('h5p_library_development', 0) === 1) {
            $development_mode |= H5PDevelopment::MODE_LIBRARY;
            $preprocess_css_or_js = variable_get('preprocess_css', 0) === '1' || variable_get('preprocess_js', 0) === '1';

            $message = t('H5P library development directory is enabled. Change <a href="@settings-page">settings</a>.', array('@settings-page' => url('admin/config/system/h5p')));

            if ($preprocess_css_or_js) {
                $message .= '<br/>' . t('Preprocessing of css and/or js files is enabled. This is not supported when using the development directory option. Please disable preprocessing, and clear the cache');
            }

            drupal_set_message($message, 'warning', FALSE);
        }

        $core = new H5PCore($interface, _h5p_get_h5p_path(), base_path(), $language -> language, (variable_get('h5p_export', '1') ? TRUE : FALSE), $development_mode);
    }

    switch ($type) {
    	case 'validator' :
    	    return new H5PValidator($interface, $core);
    	case 'storage' :
    	    return new H5PStorage($interface, $core);
    	case 'contentvalidator' :
    	    return new H5PContentValidator($interface, $core);
    	case 'export' :
    	    return new H5PExport($interface, $core);
    	case 'interface' :
    	    return $interface;
    	case 'core' :
    	    return $core;
    }
}

/**
 * Get the path to the h5p files folder.
 *
 * @return string
 *  Path to the h5p files folder
 */
function _h5p_get_h5p_path() {
    $file_path = file_stream_wrapper_get_instance_by_uri('public://') -> getDirectoryPath();
    return $file_path . '/' . variable_get('h5p_default_path', 'h5p');
}

/**
 * The h5p module supports disabling revisioning of the h5p files and database entries.
 * This means that all revisions of a h5p node will belong to the newest files and
 * entries in the database. This is done to make it easier to sync h5p nodes between
 * servers(a client needs this), and it also saves disk space.
 *
 * A side effect of this is a very strange database schema, and some strange code here and
 * there.
 *
 * @param object $node
 *  The node we will extract the content id from
 * @return int
 *  The nodes vid if we're supporting revisioning. The nodes nid if we aren't
 */
function h5p_get_content_id($node) {
    if (!isset($node -> vid) || !isset($node -> nid)) {
        return NULL;
        // We might be translating
    }
    return variable_get('h5p_revisioning', 1) ? $node -> vid : $node -> nid;
}

/**
 * Implements hook_field_extra_fields().
 */
function h5p_field_extra_fields() {
    $extra['node']['h5p_content'] = array('form' => array('h5p' => array('label' => t('H5P Upload'), 'description' => t('Upload interactive content.'), 'weight' => 2, )), 'display' => array('h5p' => array('label' => t('Interactive content'), 'description' => t('Interactive content'), 'weight' => 2, )));
    $extra['node']['h5p_options'] = array('form' => array('h5p_options' => array('label' => t('H5P Options'), 'description' => t('Display options for interactive content.'), 'weight' => 3, )));

    return $extra;
}

/**
 * Implements hook_views_api().
 */
function h5p_views_api() {
    return array('api' => 3, 'path' => H5P_VIEWS_DIR, );
}

/**
 * Handler for the custom node points access check
 *
 * @param stdObject $account
 */
function h5p_access_node_points($account = NULL) {
    global $user;

    if (arg(0) === 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        if ($node !== FALSE && $node -> type == 'h5p_content') {
            if (user_access('access all h5p results')) {
                return TRUE;
            }

            // menu_get_object isn't working, so we load it manually...
            if (user_access('access h5p results for own content') && $user -> uid === $node -> uid) {
                return TRUE;
            }
        }
    }
    return FALSE;
}

/**
 * Handler for the custom user points access check
 *
 * @param stdObject $account
 */
function h5p_access_user_points($account = NULL) {
    global $user;

    if (user_access('access all h5p results')) {
        return TRUE;
    }

    // menu_get_object isn't working, so we load it manually...
    if (arg(0) === 'user' && is_numeric(arg(1))) {
        $accessed_user = user_load(arg(1));
        if ($accessed_user !== FALSE) {
            if (user_access('access own h5p results') && $user -> uid === $accessed_user -> uid) {
                return TRUE;
            }
        }
    }
    return FALSE;
}

/**
 * Handles insert, updating and deleteing content user data through AJAX.
 * TODO: Use token to prevent false deletion of data?
 *
 * @param string $content_id
 * @param string $data_id
 * @return string JSON
 */
function h5p_content_user_data($content_id, $data_id, $sub_content_id) {
    global $user;
    $response = (object) array('success' => TRUE);
    $enrollId = $_GET["enrollId"];
    $preview =  $_GET["preview"];

    if($enrollId == '' || $enrollId == null)
        $enrollId = 0;

    if($preview != true)
        $preview = false;

    if (variable_get('h5p_revisioning', 1)) {
        // We got vid, but we need nid. Let's ask DB
        $content_main_id = (int) db_query('SELECT nid FROM {node_revision} WHERE vid = :vid', array(':vid' => $content_id)) -> fetchField();
    } else {
        $content_main_id = $content_id;
    }

    $data = filter_input(INPUT_POST, 'data');
    $preload = filter_input(INPUT_POST, 'preload');
    expDebug::dPrint("insertBlankssssPreloadvalueee...".$preload);
    $invalidate = filter_input(INPUT_POST, 'invalidate');
    if ($data !== NULL && $preload !== NULL && $invalidate !== NULL) {
        if (!H5PCore::validToken('contentuserdata', filter_input(INPUT_POST, 'token'))) {
            return H5PCore::ajaxError(t('Invalid security token.'));
        }

        if ($data === '0') {
            // Remove data
            db_delete('h5p_content_user_data') -> condition('content_main_id', $content_main_id) -> condition('data_id', $data_id) -> condition('user_id', $user -> uid) -> condition('sub_content_id', $sub_content_id) ->condition('enrollId',$enrollId)-> execute();
        } else {
            // Wash values to ensure 0 or 1.
            $preload = ($preload === '0' ? 0 : 1);
            $invalidate = ($invalidate === '0' ? 0 : 1);

            // Determine if we should update or insert
            $update = db_query("SELECT content_main_id
                    FROM {h5p_content_user_data}
                    WHERE content_main_id = :content_main_id
                    AND user_id = :user_id
                    AND data_id = :data_id
                    AND sub_content_id = :sub_content_id and enrollId = :enrollId", array(':content_main_id' => $content_main_id, ':user_id' => $user -> uid, ':data_id' => $data_id, ':sub_content_id' => $sub_content_id,':enrollId'=>$enrollId )) -> fetchField();

            expDebug::dPrint("Update...".$update."...Welcome.....uid ".$user -> uid."==content_main_id=".$content_main_id."==sub_content_id=".$sub_content_id."=data_id==".$data_id."===enrollId".$enrollId);

            if ($update === FALSE) {
                // Insert new data
                if($enrollId  != 0 && !$preview)
                    db_insert('h5p_content_user_data') -> fields(array('user_id' => $user -> uid, 'content_main_id' => $content_main_id, 'sub_content_id' => $sub_content_id, 'data_id' => $data_id, 'enrollId'=>$enrollId,'timestamp' => time(), 'data' => $data, 'preloaded' => $preload, 'delete_on_content_change' => $invalidate,)) -> execute();
                expDebug::dPrint("insertBlankssss111...".$update."...Welcome.....uid ".$user -> uid."==content_main_id=".$content_main_id."==sub_content_id=".$sub_content_id."=data_id==".$data_id."===enrollId".$enrollId."=data==".$data);

            } else {

                //Adding for fill in the blanks issue
                /* if($enrollId  != 0 && !$preview && $update_var == 0){
                $select = db_select("h5p_content_user_data",'usr_data');
                $select->leftJoin('h5p_nodes', 'nodes', 'usr_data.content_main_id = nodes.content_id');
                $select->addField('usr_data','data', 'data');
                $select->addField('nodes','json_content', 'json_content');
                $select->condition('usr_data.user_id',$user -> uid,'=');
                $select->condition('usr_data.content_main_id',$content_main_id,'=');
                $select->condition('usr_data.data_id',$data_id,'=');
                $select->condition('usr_data.sub_content_id',sub_content_id,'=');
                $selectRes = $select->execute()->fetchAll(); //old_data
                expDebug::dPrint("Content users data abhishek123:".print_r($selectRes,true),5);
                $update_var = 1;
                $old_data = $selectRes[0]->data;
                $jsonData = json_decode($selectRes[0]->json_content,true);

                for($k = 0; $k < count($jsonData['interactiveVideo']["assets"]["interactions"]); $k++){
                 
                $qrow = $jsonData['interactiveVideo']["assets"]["interactions"][$k];
                expDebug::dPrint("before data value change testwwwwww11...".$qrow["action"]["library"]);
                if($qrow["action"]["library"] == "H5P.Blanks 1.4")
                {
                expDebug::dPrint("before data value change testwwwwww11333...");
                expDebug::dPrint("before data value change test111111111...".print_r($data["answers"][$k],true),4);
                expDebug::dPrint("before data value change test111122222133...".print_r($old_data["answers"][$k],true),4);
                //  if($old_data["answers"][$k] != $data["answers"][$k]){
                expDebug::dPrint("before data value change test111111111...".print_r($data["answers"][$k],true),4);
                //	expDebug::dPrint("before data value change test111122222111...".$data["answers"]);
                expDebug::dPrint("before data value change test111122222133...".print_r($old_data["answers"][$k],true),4);
                expDebug::dPrint("before data value change test...".$data["answers"][$k]);
                //	if((count($old_data["answers"][$k]) != 0) && (count($data["answers"][$k]) == 0)){
                if((count($data["answers"][$k]) == 0)){
                expDebug::dPrint("before data value change...".$data["answers"][$k] . "after data value change..." .$old_data["answers"][$k] );
                for($i = 0;$i < count($old_data["answers"][$k]);$i++)
                $data["answers"][$k][$i] = $old_data["answers"][$k][$i];
                 
                }
                //}
                }
                }
                } */
                expDebug::dPrint("insertBlankssss4333322222222222...".print_r($old_data,true),4);
                // Update old data

                if($enrollId  != 0 && !$preview)
                    db_update('h5p_content_user_data') -> fields(array('timestamp' => time(), 'data' => $data, 'preloaded' => $preload, 'delete_on_content_change' => $invalidate)) -> condition('user_id', $user -> uid) -> condition('content_main_id', $content_main_id) -> condition('data_id', $data_id) -> condition('sub_content_id', $sub_content_id) ->condition('enrollId',$enrollId)-> execute();
                expDebug::dPrint("insertBlankssss1112222...".$update."...Welcome.....uid ".$user -> uid."==content_main_id=".$content_main_id."==sub_content_id=".$sub_content_id."=data_id==".$data_id."===enrollId".$enrollId."=data==".$data);

                //				$data = array('actor' => array('name' => "admin", 'mbox' => 'expertusone_fulldev@expertus.com', ), 'verb' => array('id' => "$base_url", 'display' => array("en-US" => "paused"), ), 'object' => array('type' => 'course', 'definition' => array('name' => array('en-US' => "$data")), ));
                //tincanapi_send("", "", $data);
            }
        }

        return H5PCore::ajaxSuccess();
    } else {
        // Fetch data
        $response -> data = db_query("SELECT data FROM {h5p_content_user_data}
                WHERE user_id = :user_id
                AND content_main_id = :content_main_id
                AND data_id = :data_id
                AND sub_content_id = :sub_content_id and enrollId = :enrollId", array(':user_id' => $user -> uid, ':content_main_id' => $content_main_id, ':sub_content_id' => $sub_content_id, ':data_id' => $data_id,':enrollId'=>$enrollId )) -> fetchField();
    }

    drupal_add_http_header('Cache-Control', 'no-cache');
    drupal_add_http_header('Content-type', 'application/json; charset=utf-8');
    print json_encode($response);
}

/**
 * Generate embed page to be included in iframe.
 */
function h5p_embed($node) {
    global $language;

    $callback = filter_input(INPUT_GET, 'callback');
    if ($callback !== NULL) {

        // Old embed code only returns resizer url
        print $callback . '(\'' . h5p_get_resize_url() . '\');';
        return;
    }

    $node = node_load($node);

    /*	if (!$node || !node_access('view', $node) || !isset($node -> json_content)) {
     print '<body style="margin:0"><div style="background: #fafafa url(http://h5p.org/sites/all/themes/professional_themec/images/h5p.svg) no-repeat center;background-size: 50% 50%;width: 100%;height: 100%;"></div><div style="width:100%;position:absolute;top:75%;text-align:center;color:#434343;font-family: Consolas,monaco,monospace">' . t('Content unavailable.') . '</div></body>';
    return;
    }*/

    $node->filtered = '';
    $cache_buster = '?' . variable_get('css_js_query_string', '');

    // Get core settings
    $settings = h5p_get_core_settings();
    expDebug::dPrint('$settings debug 123 '.print_r($settings,true),5);
    // TODO: The non-content specific settings could be apart of a combined
    // h5p-core.js file to avoid sending the same data multiple times.

    $module_path = base_path() . drupal_get_path('module', 'h5p');

    // Get core scripts
    $scripts = array();
    foreach (H5PCore::$scripts as $script) {
        $scripts[] = $module_path . '/library/' . $script . $cache_buster;
    }

    // Get core styles
    $styles = array();
    foreach (H5PCore::$styles as $style) {
        $styles[] = $module_path . '/library/' . $style . $cache_buster;
    }

    // Get integration object
    $integration = h5p_get_core_settings();

    // Get content object
    $content = h5p_get_content($node);

    //h5pcustomize - it will be usd in h5p/embed
    $content["h5ptoken"] = drupal_get_token();
    global $user;

    // $content["user_fullname"]=getScreenName($user->uid);
    // Need fullName of the user.
    if($user->uid == 1)
        $content["user_fullname"] = "ExpertusONE Admin";
    else{
        $select = db_select('slt_person', 'per');
        $select->addExpression('CONCAT(per.first_name,\' \',per.last_name)','user_firstlast_name');
        //	$select->addField('per','email','email');
        $select->condition('per.id',($user->uid + 1));
        expDebug::dPrintDBAPI("get Person22 details Query", $select);
        // Execute the query
        $result = $select->execute()->fetchField();
        $content["user_fullname"] = $result;
    }
    expDebug::dPrint('user id 3333333333444' . $content["user_fullname"]);
    // Add content to integration
    $integration['contents']['cid-' . $content['id']] = h5p_get_content_settings($content);
    expDebug::dPrint('content integration1222221'. print_r($integration,true), 4);

    $config=getConfig("exp_sp");
    $integration["saveFreq"] = ($config['content_refresh']) * 60;
    expDebug::dPrint('user id abhii' . $integration["saveFreq"]);
    
    
    
    
    
    $library = $integration['contents']['cid-' . $content['id']][library];
    $jsonData = json_decode($integration['contents']['cid-' . $content['id']]['jsonContent'],true) ;
    $mime = $jsonData['interactiveVideo']["video"]["files"][0]["mime"];
    expDebug::dPrint('content jsondata111'. print_r($jsonData,true), 4);

    // $jsonData['interactiveVideo']["video"]["files"][0]["mime"];
    //$url .= "h5peditor/".$jsonData['interactiveVideo']["video"]["files"][0]["path"];
    $stream_server_status  = module_exists('exp_sp_stream_server');
    $cdn_status = (module_exists('cloud_files'));

    /* CDN Support for Video and presentation starts here */

    if($cdn_status == 1 && $stream_server_status != 1)
    {
        if($library == "H5P.InteractiveVideo 1.9" && ($mime == "video/mp4" || $mime == "video/webm") ) //check for webm and add with 'OR'condition
        {
            $url =  $jsonData['interactiveVideo']["video"]["files"][0]["path"];
            expDebug::dPrint('aicc id success123'. $mime . "===" . $library);
            $cdnpathURL = getCDNURL($url);
            if($cdnpathURL != "")
            {
                $jsonData['interactiveVideo']["video"]["files"][0]["path"] = getCDNURL($url);
                expDebug::dPrint('CDN url obtained'. $jsonData['interactiveVideo']["video"]["files"][0]["path"]);
                $integration['contents']['cid-' . $content['id']]['jsonContent'] = json_encode($jsonData);
            }
        }
        else if( $library == "H5P.CoursePresentation 1.9" && $cdn_status == 1)
        {
            $numberOfSlides = count($jsonData['presentation']['slides']);
            if($numberOfSlides > 0){
                expDebug::dPrint('This is presentation json data abhi1234');
                for($k = 0; $k < $numberOfSlides; $k++)
                {
                    for($i = 0; $i < count($jsonData['presentation']['slides'][$k]['elements']); $i++)
                    {
                        $qrow = $jsonData['presentation']['slides'][$k]['elements'][$i];
                        if($qrow["action"]["library"] == "H5P.Video 1.2")
                        {
                            $fileName = $jsonData['presentation']['slides'][$k]['elements'][$i]['action']['params']['sources'][0]['path'];
                            $url_arr  = explode("^^^", $fileName);
                            expDebug::dPrint('file name for presentation video'. print_r($url_arr, true), 4);
                            $url_arr1  = explode("/", $url_arr[1]);
                            expDebug::dPrint('file name for presentation video'. print_r($url_arr1, true), 4);
                            $url = 'videos/'.$content['id'].'/'.$url_arr1[1];
                            expDebug::dPrint('CDN url obtained for pre'. $url);
                            $cdnpathURL = getCDNURL($url);
                            if($cdnpathURL != "")
                            {
                                $jsonData['presentation']['slides'][$k]['elements'][$i]['action']['params']['sources'][0]['path'] = getCDNURL($url);
                                $integration['contents']['cid-' . $content['id']]['jsonContent'] = json_encode($jsonData);
                            }
                        }
                    }
                }
            }
        }
    }

    /* CDN Support for Video and presentation ends here */

    /* Video streaming Support for Video and presentation starts here*/

    expDebug::dPrint('$stream_server_status = ' . $stream_server_status . '---->' .print_r($stream_server_status,true), 4);
    
    // if($stream_server_status == 1 && $cdn_status != 1) {  //Adding more conditions for #
    include_once($_SERVER["DOCUMENT_ROOT"]. '/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_manage/exp_sp_administration_content/exp_sp_administration_content.inc');

  //  if(($stream_server_status == 1) && (urlExists($red5_server_host_entry) && (streamingOrNot($uploadDirectory, $videoBasename, $conversion_format)))) {
    if($stream_server_status == 1){
        if($library == "H5P.InteractiveVideo 1.9" && ($mime == "video/mp4" || $mime == "video/webm"))
        {
            //	$uploadDirectory = 'sites/default/files/h5peditor/videos';
            $url = $jsonData['interactiveVideo']["video"]["files"][0]["path"];
            $url_arr  = explode("/", $url);
            $file = $url_arr[2];
            $videoFoldername = $url_arr[1];
            $config=getConfig("exp_sp");
            $red5_server_host_entry = $config['red5_host_entry'].':5080';
            expDebug::dPrint('$check $videoBasenameabhiiiii = ' . $red5_server_host_entry);
            $conversion_format = array('256');
            //$uploadDirectory = './sites/default/files/h5peditor/videos/' . $videoFoldername;
            $uploadDirectory = './sites/default/files/contentupload/'. $content['id'] . '/videos/' . $videoFoldername;
            //	videos/Testing_video_98/Testing_video.mp4
            $videoBasename =  substr($file, 0, strrpos($file, '.') + 0);
            expDebug::dPrint('$check $videoBasename = ' . $videoBasename . '---->s$uploadDirectory' .$uploadDirectory . '==$videoFoldername==' .$videoFoldername);

           if(urlExists($red5_server_host_entry) && (streamingOrNot($uploadDirectory, $videoBasename, $conversion_format)))
          //  if( (streamingOrNot($uploadDirectory, $videoBasename, $conversion_format)))
            
            {
            $res_value =  new stdClass();

            $res_value = contentAuthoring_videoStreaming($content,$jsonData,$integration,$uploadDirectory,$videoBasename,$conversion_format,$content_upload_path,$videoFoldername,'from_video');
            //contentAuthoring_videoStreaming($content,$jsonData,$integration,$uploadDirectory,$videoBasename,$conversion_format,$content_upload_path,$videoFoldername,'from_video');

            expDebug::dPrint('file name for presentation video11111'. print_r($res_value, true), 4);
            expDebug::dPrint('file name for presentation video22222222222222'.$integration['contents']['cid-' . $content['id']]['jsonContent'],4);
            $integration['contents']['cid-' . $content['id']]['jsonContent'] = $res_value;
            expDebug::dPrint('file name for presentation video2333333333333'.$integration['contents']['cid-' . $content['id']]['jsonContent'],4);
            }
        
         }
        else if( $library == "H5P.CoursePresentation 1.9")
        {
            $uploadDirectory = './sites/default/files/contentupload/'. $content['id'] . '/videos';
            //$videoBasename =



            $numberOfSlides = count($jsonData['presentation']['slides']);
            if($numberOfSlides > 0){
                expDebug::dPrint('This is presentation json data abhi1234');
                for($k = 0; $k < $numberOfSlides; $k++)
                {
                    for($i = 0; $i < count($jsonData['presentation']['slides'][$k]['elements']); $i++)
                    {
                        $qrow = $jsonData['presentation']['slides'][$k]['elements'][$i];
                        if($qrow["action"]["library"] == "H5P.Video 1.2")
                        {
                            $fileName = $jsonData['presentation']['slides'][$k]['elements'][$i]['action']['params']['sources'][0]['path'];
                            $url_arr  = explode("^^^", $fileName);
                            expDebug::dPrint('file name for presentation video'. print_r($url_arr, true), 4);
                            $url_arr1  = explode("/", $url_arr[1]);
                            $videoBasename =  substr($url_arr1, 0, strrpos($file, '.') + 0);


                            expDebug::dPrint('file name for presentation video'. print_r($url_arr1, true), 4);
                           if(urlExists($red5_server_host_entry) && (streamingOrNot($uploadDirectory, $videoBasename, $conversion_format)))
                        //  if( (streamingOrNot($uploadDirectory, $videoBasename, $conversion_format)))
                            
                            {       
                             
                            $result = contentAuthoring_videoStreaming($content,$jsonData,$integration,$uploadDirectory,$videoBasename,$conversion_format,$content_upload_path,'','from_presentation');

                            $jsonData['presentation']['slides'][$k]['elements'][$i]['action']['params']['sources'][0]['path'] = $result;
                            $integration['contents']['cid-' . $content['id']]['jsonContent'] = json_encode($jsonData);
                            }
                             
                        }
                    }
                }
            }
        }
    }

    /* Video streaming Support for Video and presentation ends here */





    // Get content assets
    $core = _h5p_get_instance('core');
    $preloaded_dependencies = $core -> loadContentDependencies($content['id'], 'preloaded');
    $files = $core -> getDependenciesFiles($preloaded_dependencies, _h5p_get_h5p_path());
    $library_list = _h5p_dependencies_to_library_list($preloaded_dependencies);

    $mode = 'external';
    drupal_alter('h5p_scripts', $files['scripts'], $library_list, $mode);
    drupal_alter('h5p_styles', $files['styles'], $library_list, $mode);

    $scripts = array_merge($scripts, $core -> getAssetsUrls($files['scripts']));
    $styles = array_merge($styles, $core -> getAssetsUrls($files['styles']));

    $lang = $language -> language;

    //generate registeration id for tincan
    $select = db_select('slt_content_master_h5p_rel', 'mast');
    $select->addField('mast', 'content_master_id', 'content_master_id');
    $select->condition('mast.h5p_id', $content['id'], '=');
    $result = $select->execute()->fetchField();

    $enrollId = $_GET["enrollId"];

    $select1 = db_select('slt_enrollment', 'enr');
    $select1->leftJoin('slt_course_class', 'cls', 'enr.class_id = cls.id');
    $select1->addField('cls', 'title', 'title');
    $select1->condition('enr.id', $enrollId, '=');
    $result1 = $select1->execute()->fetchField();
    expDebug::dPrintDBAPI(' $selectStmt obj33333222333 = ' , $select1);
    expDebug::dPrint('aicc id 222222222222aavvvA'. $result1);


    $lessonid = $result;
    $versionid = $result;
    //$location = $_GET["location"];
    $location = 'null';

    /* Algo:
     * Connect to h5p_nodes,
    *  filter to get the video URLs.
    *  Check for uploaded mp4 videos
    *  check if module enabled
    *  fetch the URL and pass it to getCDNURL();
    *  For presentation:
    *   get the count of slides
    *   iterate for any video content
    *    If yes, apply CDN
    */
    /* $select = db_select('h5p_nodes', 'nod');
     //$select1->leftJoin('slt_course_class', 'cls', 'enr.class_id = cls.id');
    $select->addField('nod', 'json_content', 'json_content');
    $select->condition('nod.content_id', $content['id'], '=');
    $result = $select->execute()->fetchField();
    expDebug::dPrintDBAPI(' $selectStmt obj54545454 = ' , $select);
    expDebug::dPrintDBAPI(' $selectStmt obj58888888 = ' , $result);

    $jsonData = json_decode($result,true);

    //For presentation videos
    $numberOfSlides = count($jsonData['presentation']['slides']);
    if($numberOfSlides > 0){
    expDebug::dPrint('This is presentation json data');
    for($k = 0; $k < $numberOfSlides; $k++)
    {
    for($i = 0; $i < count($jsonData['presentation']['slides'][$k]['elements']); $i++)
    {
    $qrow = $jsonData['presentation']['slides'][$k]['elements'][$i];
    if($qrow["action"]["library"] == "H5P.Video 1.2")
    {
    $url = $qrow["action"]["params"]["sources"][0]["path"];
    $cdnpathURL = getCDNURL($url);
    expDebug::dPrint('CDN conversion done for presentation video'.$cdnpathURL);
    }
    }
    }
    }
    else
    {
    expDebug::dPrint('This is not presentation json data');

    $mime = $jsonData['interactiveVideo']["video"]["files"][0]["mime"];
    $url .= "h5peditor/".$jsonData['interactiveVideo']["video"]["files"][0]["path"];
    $cdn_status = (module_exists('cloud_files'));
    if($mime == "video/mp4" && $cdn_status == 1)
    {

    //	$cdn_status  = getDrupalModuleStatus(array('cloud_files'));
    /* if($cdn_status == 1 && $contenthosttype != '2'){ */
    //	expDebug::dPrint(' CDN conversion should be done ');
    /*  expDebug::dPrint(' CDN video details --> '.print_r($pathArr,true),4);

    $videoFileName = '';
    $pathArrLen = count($pathArr);
    for ($i = 0; $i <= ($pathArrLen - 1); $i++) {
    if ($pathArr[$i] != '') {
    $videoFileName .= ($videoFileName == '')? $pathArr[$i] : '/' . $pathArr[$i];
    }
    }
    $videoFileName = str_replace('sites/default/files', '', $videoFileName); */
    //	$cdnpathURL = getCDNURL($url);
    //	expDebug::dPrint('CDN conversion done123'.$cdnpathURL);
    //$content["launchurl"]= $cdnpathURL;
    //	$jsonData['interactiveVideo']["video"]["files"][0]["path"] = $cdnpathURL;
    /* if($cdnpathURL == ""){
     $output = theme('videojs-player', array(
             'html_id' => $htmlId,
             'video_session_id' => $htmlId,
             'video_url' => $lessonList[0]->launchurl,
             'video_source' => "mp4",
             'is_preview' => true
     ));
    }else {
     
    expDebug::dPrint(' CDN video name --> '.$videoFileName,4);
     
    $output = theme('videojs-player', array(
            'html_id' => $htmlId,
            'video_session_id' => $htmlId,
            'video_url' => $cdnpathURL,
            'video_source' => "mp4",
            'is_preview' => true
    ));
    }

    }
    } */
    //$cdnUrl = getCDNURL($url); //CDN Support

    expDebug::dPrint('aicc id ency111111'. $enrollId . "==" . $lessonid . "==" .  $versionid . "==" .  $location . "==" . $content['id']);
    expDebug::dPrint("content details22222".print_r($content,true),4);
    $sidval = "-".$lessonid."-".$versionid."-".$enrollId."-".$location;
    expDebug::dPrint('aicc id h5p'. $sidval, 5);
    $enc1 = new Encrypt();
    $aicc_id = $enc1->encrypt($sidval);
    expDebug::dPrint('aicc id h5p encrypted'. $aicc_id, 5);
    $content["registration"]= $aicc_id;
    $content["contentTitle"]= $result1;
    expDebug::dPrint('aicc id ency'. $sidval);
    include ('library/embed.php');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function h5p_preprocess_html(&$variables) {
    $integration = h5p_add_files_and_settings(NULL, NULL);
    if ($integration) {
        drupal_add_js('H5PIntegration = ' . json_encode($integration) . ';', 'inline');
    }
}

/**
 * Get a list of libraries more suitable for inspection than the dependencies list
 *
 * @param array $dependencies
 *  List of dependencies on the format returned from H5P core
 * @return array
 *  List of libraries indexed by machineName and with objects as values with
 *  major and minor versions as properties.
 */
function _h5p_dependencies_to_library_list($dependencies) {
    $library_list = array();
    foreach ($dependencies as $dependency) {
        $library_list[$dependency['machineName']] = array('majorVersion' => $dependency['majorVersion'], 'minorVersion' => $dependency['minorVersion'], );
    }
    return $library_list;
}

/**
 * Implements
 */
function h5p_views_pre_view($view, $display_id, $args) {
    if ($view -> name === 'node_results' && $display_id === 'page' && $view -> base_field === 'nid') {
        $node = node_load($view -> args[0]);
        if ($node) {
            // Log view of results page
            new H5PEvent('results', 'content', $node -> nid, $node -> title, $node -> main_library['name'], $node -> main_library['majorVersion'] . '.' . $node -> main_library['minorVersion']);
        }
    }
}

function h5p_node_presave() {
}

function h5p_drupal_goto_alter(&$path) {
    if ($GLOBAL['dont_redirect'] == true) {
        $path = "";
    }
}
function h5p_h5p_semantics_alter(&$semantics, $machine_name, $major_version, $minor_version) {
    // In this example implementation we add <h4> as an allowed tag in H5P.Text 1.0
    expDebug::dPrint("h5p hook");
    if ($machine_name == 'H5P.Text' && $major_version == 1 && $minor_version == 0) {
        $semantics[0]->tags[] = 'h4';
    }
}


function h5p_page_alter(&$page)
{
    expDebug::dPrint("suresh h5p page:".  $page['header']);

    //unset($page["content"]["submitted"]);
    //unset($page["submitted"]);

}

function contentAuthoring_videoStreaming($content,$jsonData,$integration,$uploadDirectory,$videoBasename,$conversion_format,$content_upload_path,$videoFoldername,$from){
    //	include_once($_SERVER["DOCUMENT_ROOT"]. '/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_manage/exp_sp_administration_content/exp_sp_administration_content.inc');

    $config=getConfig("exp_sp");
    $red5_server_host_entry = $config['red5_host_entry'].':5080';
    $conversion_format = array('256');
    $content_upload_path = $config['content_upload_path'];



    //expDebug::dPrint('$check fro URL123212 = ' . urlExists($red5_server_host_entry) . '---->stream value===' . (streamingOrNot($uploadDirectory, $videoBasename, $conversion_format)), 4);

    /* if((urlExists($red5_server_host_entry)  && (streamingOrNot($uploadDirectory, $videoBasename, $conversion_format)))) { //This AND condition needs to be added when red5 server is available.
     expDebug::dPrint('inside the if condition12311444 = ',4);
    */


    $kb = 512;
    expDebug::dPrint("streaming123 $kb Kb...<!-");
    flush();
    $time = explode(" ", microtime());
    $start = $time[0] + $time[1];
    for($x = 0; $x < $kb; $x ++) {
        flush();
    }
    $time = explode(" ", microtime());
    $finish = $time[0] + $time[1];
    $deltat = $finish - $start;
    $bandwidth = round($kb / $deltat, 0);
    $bandwidth = round($bandwidth / 1024, 0);
    expDebug::dPrint("end user bandwidth = $bandwidth");
    // end user bandwidth detect end here
    // file available check start here here
    $file_900 = $content_upload_path . '/' . $videoFoldername . '/900/' . $videoBasename . '.mp4';
    $file_512 = $content_upload_path . '/' . $videoFoldername . '/512/' . $videoBasename . '.mp4';
    $file_256 = $content_upload_path . '/' . $videoFoldername . '/256/' . $videoBasename . '.mp4';
    $file_900_logfile = $content_upload_path . '/' . $videoFoldername . '/900/ffmpeg_log.txt';
    $file_512_logfile = $content_upload_path . '/' . $videoFoldername . '/512/ffmpeg_log.txt';
    $file_256_logfile = $content_upload_path . '/' . $videoFoldername . '/256/ffmpeg_log.txt';
    // file available check end here

    // choose a single file with bandwidth detection start here
    if(($bandwidth > 22000) && file_exists($file_256) && file_exists($file_256_logfile)) {
        $bit_rate = 256;
    } else if(($bandwidth > 19000) && file_exists($file_512) && file_exists($file_512_logfile)) {
        $bit_rate = 512;
    } else if(($bandwidth < 19000) && file_exists($file_900) && file_exists($file_900_logfile)) {
        $bit_rate = 900;
    } else {
        $bit_rate = 256;
    }


    //	'video_url' => "rtmp://".$config['red5_host_entry']."/oflaDemo/$videoFoldername/$bit_rate/$videoBasename.mp4",

    if($from == 'from_video')
    {
        $url =  $jsonData['interactiveVideo']["video"]["files"][0]["path"];
        expDebug::dPrint('aicc id success1235555'. $mime . "===" . $library);
        expDebug::dPrint('aicc id 3333333'. $config['red5_host_entry'] . "===" . $videoFoldername . "====" .$bit_rate . "====" .$videoBasename);
        $jsonData['interactiveVideo']["video"]["files"][0]["path"] = "rtmp://".$config['red5_host_entry']."/oflaDemo/$videoFoldername/$bit_rate/$videoBasename.mp4";
        // $jsonData['interactiveVideo']["video"]["files"][0]["path"] =	"rtmp://192.241.173.210/oflaDemo/MaragathaNaanayam_125/256/MaragathaNaanayam.mp4";
        //	expDebug::dPrint('red5 url obtained'. $jsonData['interactiveVideo']["video"]["files"][0]["path"]);
        // $integration['contents']['cid-' . $content['id']]['jsonContent'] = json_encode($jsonData);
        expDebug::dPrint('file name for presentation video666666'. print_r($jsonData, true), 4);
        expDebug::dPrint('file name for presentation video2227777777'.$jsonData);
        return json_encode($jsonData);

    }
    else if($from == "from_presentation")
    {
        $result =  "rtmp://".$config['red5_host_entry']."/oflaDemo/$bit_rate/$videoBasename.mp4";
        //$result = "rtmp://192.241.173.210/oflaDemo/MaragathaNaanayam_125/256/MaragathaNaanayam.mp4";
        return $result;
    }

    //}
}


