<?php

/**
 ** Implement hook_init()
 **/  

function salesforce_integration_init(){

	  try{
	   
		   $ssoauthenticated=FALSE;
		   $relayState=NULL;
		   global $salesforce_type; 
		 
		   $salesforce_type="canvas"; //set as default salesforce type as 'canvas'
		
		   $signed_request=trim($_REQUEST['signed_request']);
		   $request_str=$_REQUEST[q];
           
		   expDebug::dPrint("Initiated Salesforce Integration module",5);
		   expDebug::dPrint('Initiated signedRequest = ' . print_r($signed_request, true),4);
		   expDebug::dPrint('Initiated $_REQUEST[q] = ' . print_r($request_str, true),4);
		   expDebug::dPrint("Salesforce Http Referer=".$_SERVER['HTTP_REFERER'], 5);  
		    
		   if($signed_request=="" && $request_str=="" && stristr($_SERVER["HTTP_REFERER"],'/apex/')== TRUE){
		      expDebug::dPrint('Logged out the previous user session autometically from salesforce and re-initiated the salesforce request again',5);
		      $redi_loc="parent.location='".$_SERVER['HTTP_REFERER']."'";
		      drupal_add_js($redi_loc, "inline");
		   }	 
		   
		   drupal_add_js(array('salesforce' => array('type' =>  $salesforce_type)), 'setting');
	  }catch (Exception $ex) {
		  	watchdog_exception('salesforce_integration_init', $ex);
		  	expertusErrorThrow($ex);
	  }  
	  
}  
 
/**
 ** Implement hook_perm()
 **/
 
function salesforce_integration_permission() {
	
	  try{
	  
		  return array('administer salesforce' => array(
		          'title' => t('Administer SalesForce'),
		          'description' => t('Perform administration tasks for SalesForce module.')
		  ));
	 
	  }catch (Exception $ex) {
		  watchdog_exception('salesforce_integration_permission', $ex);
		  expertusErrorThrow($ex);
	  }  
	  
}   

/**
 ** Implements hook_menu().
 **/
 
function salesforce_integration_menu() {

	  try{ 
	  
		  $items['admin/config/system/salesforce'] = array(
		      'title' => 'SalesForce Settings',
		      'page callback' => 'drupal_get_form',
		      //'page arguments' => array('salesforce_integration_settings_page'),
		      'page arguments' => array('salesforce_integration_settings_page_form'),
		      'access arguments' => array('administer salesforce'),
		      'type' => MENU_NORMAL_ITEM,
		      'file' => 'salesforce_integration.module',
		  );
		  $items['salesforce/canvas/authenticate'] = array(
		      'title' => 'Authenticate Salesforce Canvas App',
		      'page callback' => 'canvas_authenticate',
		      'access callback' => TRUE,     //'any_user',
		      'type' => MENU_NORMAL_ITEM,
		      'file' => 'salesforce_integration.module',
		  );
		  
		  $items['salesforce/canvas/authenticate/%'] = array(
		      'title' => 'Authenticate Salesforce Canvas App',
		      'page callback' => 'canvas_authenticate',
		      'access callback' => TRUE,     //'any_user',
		      'type' => MENU_NORMAL_ITEM,
		      'file' => 'salesforce_integration.module',
		  );
		  
		  $items['canvas/catalog'] = array(
		      'title' => 'Salesforce Canvas - Catalog',
		      'page callback' => 'canvas_show_canvas',
		      //'access callback' => user_is_logged_in,
		      'access callback' => TRUE,
		      'type' => MENU_NORMAL_ITEM,
		      'file' => 'salesforce_integration.module',
		  );  
		  
		  $items['canvas/class-details'] = array(
		      'title' => 'Salesforce Canvas - Class Details',
		      'page callback' => 'canvas_show_canvas',
		      'access arguments' => array('access content'),
		      'type' => MENU_CALLBACK,
		      'file' => 'salesforce_integration.module',
		  );  
		  
		  $items['canvas/course-details'] = array(
		      'title' => 'Salesforce Canvas - Course Details',
		      'page callback' => 'canvas_show_canvas',
		      'access arguments' => array('access content'),
		      'type' => MENU_CALLBACK,
		      'file' => 'salesforce_integration.module',
		  );  
		   
		   $items['canvas/learning-plan-details'] = array(
		      'title' => 'Salesforce Canvas - Learning Plan Details',
		      'page callback' => 'canvas_show_canvas',
		      'access arguments' => array('access content'),
		      'type' => MENU_CALLBACK,
		      'file' => 'salesforce_integration.module',
		  );  
		  
		  $items['canvas/mylearning'] = array(
		      'title' => 'Salesforce Canvas - My Learning',
		      'page callback' => 'canvas_show_canvas', 
		      'access callback' => TRUE,
		      'type' => MENU_NORMAL_ITEM,
		      'file' => 'salesforce_integration.module',
		  );
		  $items['canvas/myteam'] = array(
		      'title' => 'Salesforce Canvas - My Team',
		      'page callback' => 'canvas_show_canvas',
		      'access callback' => user_is_logged_in,
		      'type' => MENU_NORMAL_ITEM,
		      'file' => 'salesforce_integration.module',
		  );
		  $items['canvas/reports'] = array(
		      'title' => 'Salesforce Canvas - Reports',
		      'page callback' => 'canvas_show_canvas',
		      'access callback' => user_is_logged_in,
		      'type' => MENU_NORMAL_ITEM,
		      'file' => 'salesforce_integration.module',
		  );
		  
		  $items['salesforce/widget/%'] = array(
		      'title' => 'Salesforce Widget',
		      'page callback' => 'salesforce_showWidget',
		      'access callback' => TRUE,     //'any_user',
		      'type' => MENU_NORMAL_ITEM,
		      'file' => 'salesforce_integration.module',
		  );
		  
		  $items['canvas/error'] = array(
		      'title' => 'Salesforce Error Page',
		      'page callback' => 'canvas_show_error', 
		      'access callback' => TRUE,     //'any_user',		    
		      'type' => MENU_NORMAL_ITEM,
		      'file' => 'salesforce_integration.module',
		  );  
		  
		  $items['canvas/printcertificate/%ctools_js'] = array(
			    'title' => 'Print Certificate',
			    'page callback' => 'salesforce_integration_printcertificate',
			    'page arguments' => array(2),
			    'access callback' => 'TRUE', 
			    'type' => MENU_CALLBACK,
			    'file' => 'salesforce_integration.module'
		 );     

		  
		  return $items;
	   
	  }catch (Exception $ex) {
		  	watchdog_exception('salesforce_integration_menu', $ex);
		  	expertusErrorThrow($ex);
	  } 
  
}

/**
 * clear_cookies() - clear all cookies when invoke canvas app
 **/

function clear_cookies(){

	try{

		expDebug::dPrint('Started to clearing cookies in browser. $Cookie Value = '.print_r($_COOKIE,true),5);

		expDebug::dPrint('$Cookie Value - HTTP_COOKIE = '.print_r($_SERVER['HTTP_COOKIE'],true),5);

		if(isset($_COOKIE) && !empty($_COOKIE) && (trim($_COOKIE['SPLearnerInfo'])!="" || trim($_COOKIE['SPCertificate'])!="")){

			if (isset($_SERVER['HTTP_COOKIE'])) {
				$cookies = explode(';', $_SERVER['HTTP_COOKIE']);
				foreach($cookies as $cookie) {
					$parts = explode('=', $cookie);
					$name = trim($parts[0]);
					setcookie($name,"",time()-1000,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
					unset($_COOKIE[$name]);
				}
			}

			unset($_SESSION['logged_user_id']);

			expDebug::dPrint('$Cookie Value after clear in browser = '.print_r($_COOKIE,true),5);
		}

	}catch (Exception $ex) {
		watchdog_exception('clear_cookies', $ex);
		expertusErrorThrow($ex);
	}

}


/**
 ** clear_org_from_sf_settings() - To clear org from slt_cstm_salesforce_settings table if particular org or sf key doesn't exist in LMS
 **/

function clear_org_from_sf_settings() {
		
	try{ 
 
		
		$query_org_del=db_select('slt_cstm_salesforce_settings','scss');
		$query_org_del->innerJoin('slt_organization','org','org.id=scss.exp_org_id');
		$query_org_del->leftJoin('slt_custom_fields','scf','scf.entity_type=\'organization\' and scf.label=\'Salesforce Org ID\' and scf.entity_id=org.id and scf.value!=\'\'');
		//$query_org_del->isNull('scf.value');
		$query_org_del->where('scf.value is null or org.status=\'cre_org_sts_del\'');
		 
		$query_org_del->addField('org', 'id', 'org_id');
		
		expDebug::dPrintDBAPI(' $query_org_del = ' , $query_org_del,5);
		
		$result_org_del=$query_org_del->execute();
		 
		$result_del=$result_org_del->fetchAll();
				
		expDebug::dPrint('$result_del = ' . print_r($result_del, true),4);
		
		
		if(count($result_del)>0){
			$del_org_arr=array();
			foreach ($result_del as $row => $row_value)	{ 
				$del_org_arr[]=$row_value->org_id;
			} 
			
			expDebug::dPrint('$del_org_arr = ' . print_r($del_org_arr, true),4);
			
			$deleteStmt = db_delete('slt_cstm_salesforce_settings');
			$deleteStmt->condition('exp_org_id', $del_org_arr,'IN');
			
			expDebug::dPrintDBAPI('$deleteStmt = ' , $deleteStmt,5);
			
			$deleteStmt->execute();
			
		}else{
			expDebug::dPrint('No unwanted org available to delete from salesforce settigs.',4);
		} 
		
	}catch (Exception $ex) {
		  	watchdog_exception('clear_org_from_sf_settings', $ex);
		    expertusErrorThrow($ex);
	} 
}


function salesforce_integration_form_alter(&$form, &$form_state, $form_id) {
	
	if((!isset($_COOKIE) || empty($_COOKIE) || trim($_COOKIE['SPLearnerInfo'])=="" || trim($_COOKIE['SPCertificate'])=="") && trim($_SESSION["sf_exp_sess_id"])!=""){
		expDebug::dPrint('$form = ' . print_r($form, true),5);
		expDebug::dPrint('$form_state = ' . print_r($form_state, true),5);
		
		expDebug::dPrint("sf_exp_sess_id in Session =". $_SESSION['sf_exp_sess_id'],5);
		
		$form['exp_sess_id'] = array(
				'#type' => 'hidden',
				'#value' => $_SESSION['sf_exp_sess_id'],
		);
		expDebug::dPrint('After add the exp_sess_id in $form = ' . print_r($form, true),5);
	}  
}

  
/**
** salesforce_integration_settings_page_form() - To collect the multiple organization salesforce key details 
**/

function salesforce_integration_settings_page_form($form, &$form_state) { 
		 
	  try{
		   
		            
	  	         // Clear unwanted org from Salesforce settings before list form
	  	         
	  			 clear_org_from_sf_settings();
	  	         
		         //Collect Organization details  and Generate the form
		           
		           $results=array("");  
		           
				   $query_org=db_select('slt_organization','org');
				   $query_org->innerJoin('slt_custom_fields','scf','scf.entity_type=\'organization\' and scf.label=\'Salesforce Org ID\' and scf.entity_id=org.id and scf.value!=\'\'');
				   $query_org->leftJoin('slt_cstm_salesforce_settings','scss','scss.exp_org_id=org.id');
				   $query_org->condition('org.status','cre_org_sts_del','!=');
				   $query_org->fields('org',array('id'));
				   $query_org->fields('org',array('name'));   
				   $query_org->fields('scss',array('consumer_secret_key'));
				   $query_org->fields('scss',array('consumer_key'));
				   $query_org->fields('scss',array('system_user'));
				   $query_org->fields('scss',array('system_user_pwd'));
				   $query_org->fields('scss',array('enr_syncup'));
				   //$query_org->range(0,0); 
		           
		           expDebug::dPrintDBAPI(' $query_org selectStmt SQL = ' , $query_org,5);
		              
		           $result_org = $query_org->execute();
		           $count=$result_org->rowCount();
		           $results=$result_org->fetchAll();   
		           
		           expDebug::dPrint('$results = ' . print_r($results, true),4);
		           
		           
		           $form['sf_consumer_secret_key'] = array(
		           		'#type' => 'textfield',
		           		'#title' => t('Salesforce Consumer Secret Key'),
		           		'#default_value' => empty($results[0]->consumer_secret_key) ? '' : $results[0]->consumer_secret_key,
		           		'#attributes' =>array('value' => $results[0]->consumer_secret_key),
		           		'#required' => TRUE
		           );
		           
		           $form['sf_consumer_key'] = array(
		           		'#type' => 'textfield',
		           		'#title' => t('Salesforce Consumer Key'),
		           		'#default_value' =>  empty($results[0]->consumer_key) ? '' : $results[0]->consumer_key,
		           		'#attributes' =>array('value' => $results[0]->consumer_key),
		           		'#required' => TRUE
		           );
		           
		           
		          // echo "<pre>results=";print_r($results);echo "</pre>";  
		          
		           
		           $form[]=array(
		           		'#prefix' => '<div>Organizations for which salesforce org id is added as custom field will be listed below.</div><br/>',
		           		'#suffix' => ''
		           );
		            
		           $header = array(
		           		array('data' => t('Org Name'), 'field' => ''),
		           		// array('data' => t('Consumer Secret Key'), 'field' => ''),
		           		// array('data' => t('Consumer Key'), 'field' => ''),
		           		array('data' => t('System User'), 'field' => ''),
		           		array('data' => t('System User Password'), 'field' => ''),
		           		array('data' => t('User Enrollment Syncup'), 'field' => '')
		           );
		           	
		           $form['characters'] = array(
		           		'#prefix' => '',
		           		'#suffix' => '' ,
		           );
		           
			       
		           $rows = array(); 
		           
		           foreach ($results as $row => $row_value) 
		           { 
		           	
			           	$check_enr_arr=array();
			           	
			           	 if($row_value->enr_syncup=="1"){
			           	 	$check_enr_arr=array('value' => $row_value->enr_syncup,'checked'=>'checked');
			           	 }else{
			           	 	$check_enr_arr=array('value' => $row_value->enr_syncup);
			           	 }
		
			             $rows[] = array('data' =>
					                    (array(  
																			
												drupal_render($form['characters'][$row]['org_name_'.$row] = array(											 
													 '#markup' => "<div style='width:250px;'>".$row_value->name."</div>",
													 '#size' => 40,
												)), 
					                    		
												drupal_render($form['characters'][$row]['system_user_'.$row] = array(
													'#type' => 'textfield',
													'#size' => 40,
													'#name' => 'system_user_'.$row,
													'#default_value' =>$row_value->system_user,
													'#attributes' =>array('value' => $row_value->system_user)
												     )),
												drupal_render($form['characters'][$row]['system_user_pwd_'.$row] = array(
													'#type' => 'textfield',
													'#size' => 40,
													'#name' => 'system_user_pwd_'.$row,
													'#default_value' =>$row_value->system_user_pwd,
													'#attributes' =>array('value' => $row_value->system_user_pwd)
												     )),					                    							                    							                    		
					                    		drupal_render($form['characters'][$row]['enr_syncup_'.$row] = array(
					                    				'#type' => 'checkbox',
					                    				'#name' => 'enr_syncup_'.$row,
					                    				'#default_value' => $row_value->enr_syncup, 
					                    				'#attributes' => $check_enr_arr,
					                    				'#prefix' => "<div class='publish_checkbox'>",
					                    				'#suffix' => "</div>", 
					                    		)), 
			  
					                     ))
			                             );
			                             
			                             
		            				  //Collect the org ids
		            				  $form[orgform][$row]['org_id_'.$row] = array(
											'#type' => 'hidden', 
											'#name' => 'org_id_'.$row,
											'#value' => $row_value->id,
										);   
												           
		          } 
		          
		      //Start - Add the default salesforce organization - consumer secret key row settings
		      
		      if($count<=0){ //if there is no organization result set then row value is 0 else increase it.
		         $row=0;
		      }else{
		         $row++;
		      } 
										 	    
		      
		      //End  - Add the default salesforce organization - consumer secret key row settings
		          
		          
	          $form['feed_trigger_option'] = array(
					'#type' => 'checkbox',
					'#title' => t('Select chatter feed optoin. If enable, feed will be trigger to user'), 
					'#default_value' => variable_get('salesforce_feed_trigger_option',1),
					'#prefix' => "<div class='publish_checkbox'>",
					'#suffix' => "</div>",
			  ); 
			   

		      $form['characters'] = array(
			      '#theme' => 'table',
			      '#header' => $header,
			      '#rows' => $rows,
			      '#attributes'=>array('style' => 'width:80%;')
		      ); 
		  
		      
		      $form['key']=array('#type' => 'hidden','#value' => $row);
		      
		      
		      $form['sf_namespace_prefix'] = array(
		      		'#type' => 'textfield',
		      		'#size' => 40,
		      		'#prefix' => '<div id="red-sub1" style="clear:both;">',
		      		'#suffix' => '</div>',
		      		'#title' => t('Salesforce NameSpace Prefix'),
		      		'#name' => 'sf_namespace_prefix',
		      		'#default_value' =>variable_get('salesforce_namespace_prefix',''),
		      		'#attributes' =>array('value' => variable_get('salesforce_namespace_prefix',''))
		      );
		      
			  $form['sf_object_name'] = array(
		      		'#type' => 'textfield',
		      		'#size' => 40,
		      		'#prefix' => '<div id="red-sub1" style="clear:both;">',
		      		'#suffix' => '</div>',
		      		'#title' => t('Salesforce Object Name'),
		      		'#name' => 'sf_object_name',
		      		'#default_value' =>variable_get('salesforce_object_name','Training Record'), 
		      		'#attributes' =>array('value' => variable_get('salesforce_object_name','Training Record'))
		      );		  
			  
		      
		      $form['submit'] = array(
			      '#type' => 'submit',
			      '#value' => t('Submit'),
			      '#prefix' => '<div id="red-sub" style="clear:both;">',
			     // '#suffix' => '</div>',	       
		       );

		      $form['submit_sfco'] = array(
		       '#type' => 'submit',
		      		'#value' =>  t('Setup Custom Object'),
		      		'#submit' => array('salesforce_integration_create_custom_object'),
		      		'#suffix' => '</div>',
		      );
		      
		      
			  $tmp_obj_set_in_var=trim(variable_get('salesforce_object_name'));
			  
			  if($tmp_obj_set_in_var!=''){
			  	
		      //Check that already whether custom object initialised or created in salesforce for store the completed trainings
		       
		      require_once $_SERVER["DOCUMENT_ROOT"].'/sites/all/modules/override/salesforce_integration/soapclient/SforceBaseClient.php';
		      require_once $_SERVER["DOCUMENT_ROOT"].'/sites/all/modules/override/salesforce_integration/salesforce_integration_custom_sf_objects.inc';
		       
		      $customObject_exist_ret_val=createSFCusomObject("1");
				
			  }else{
			  	  $customObject_exist_ret_val=0;
			  }
		     
		      expDebug::dPrint('Custom Object Check in Salesforce - return value $customObject_exist_ret_val = ' . $customObject_exist_ret_val,1);
		      
		      if($customObject_exist_ret_val=="1"){ //If already exists cusom object in
		      $form['submit_sfco']['#disabled'] = TRUE;
		      }
		      
		      //used to validate that whether custom object available or not
		      $form['sf_custom_object_available'] = array(
		      		'#type' => 'hidden',
		      		'#name' => 'sf_custom_object_available',
		      		'#value' => $customObject_exist_ret_val,
		      );   
		      
		      return $form;  
	   
	  }catch (Exception $ex) {
			  	watchdog_exception('salesforce_integration_settings_page_form', $ex);
			  	expertusErrorThrow($ex);
	  }	   
	  
} 


/**
** salesforce_integration_create_custom_object() - Create custom object in salesforce
**/

function salesforce_integration_create_custom_object($form, &$form_state) {
	try{ 
		
		
		//Get salesforce object name to proceed
		$salesforce_object_name=variable_get('salesforce_object_name',''); 
		expDebug::dPrint("Salesforce Custom Object Name : ".$salesforce_object_name, 5);
		
		if(empty($salesforce_object_name) || trim($salesforce_object_name)==''){
			drupal_set_message(t('Please enter the Salesforce Object Name to create custom object.'),'error');
			expDebug::dPrint("Please enter the Salesforce Object Name to create custom object", 1);
			return "-1"; //Error
			exit();
		}
		
		require_once $_SERVER["DOCUMENT_ROOT"].'/sites/all/modules/override/salesforce_integration/soapclient/SforceBaseClient.php';  
		
		require_once $_SERVER["DOCUMENT_ROOT"].'/sites/all/modules/override/salesforce_integration/salesforce_integration_custom_sf_objects.inc';
		 
		$customObject_ret_val=createSFCusomObject();
		
		expDebug::dPrint('Custom Object Creation - return value $customObject_ret_val = ' . $customObject_ret_val,1); 
		
		if($customObject_ret_val=="1"){
			drupal_set_message(t('Custom object already created for Training Records. Please check in Salesforce.'),'error');
		}else if($customObject_ret_val=="2"){
			drupal_set_message(t('Custom object created successfully for Training Records in Salesforce.'));
		}else{
			drupal_set_message(t('System error occurred.Please contact support team and check salesforce credentials/namespace prefix.'),'error');
		}
		
		$form_state['redirect'] = array('admin/config/system/salesforce/'); 
		
	}catch (Exception $ex) {
		watchdog_exception('salesforce_integration_create_custom_object', $ex);
		expertusErrorThrow($ex);
	}	  
	
}

/**
 ** Implementaion of hook_cron().
 **/

function salesforce_integration_cron() {

	try{
		
		require_once $_SERVER["DOCUMENT_ROOT"].'/sites/all/modules/override/salesforce_integration/salesforce_integration_custom_sf_objects.inc';  
		
		// Store LMS enrollments data into tmp table (slt_sf_enrollment)
		
		expDebug::dPrint('Auto insert enrollment details data to sf tmp table - slt_sf_enrollment from Report Server to Master Server',1);
		moveEnrollmentsToSFtable();
		
		
		// Update LMS enrollments to Salesforce
		expDebug::dPrint('Auto insert enrollment details from LMS of Master Server to Salesforce ',1);
		insertLmsEnrollmentsToSalesforce(); 
		 
		//Update / Sync enrollment status to Salesforce. Enrollments details will be get from Report / Slave Server
		
		syncEnrollmentUpdationDetailstoSalesforce();
		  
		 
	}catch (Exception $ex) {
		watchdog_exception('salesforce_integration_cron', $ex);
		expertusErrorThrow($ex);
	}	   
}

/**
** salesforce_integration_settings_page_form_submit() - Form Submit: Setting for Salesforce
**/

function salesforce_integration_settings_page_form_submit($form, &$form_state)
{ 

	  try{
		    $key=$form_state['values']['key'];    
		    
		    $validate_err_res=0;  
		    
		    $sf_namespace_prefix=$form_state['values']['sf_namespace_prefix'];
		    variable_set('salesforce_namespace_prefix',$sf_namespace_prefix);
		    
			 //Update custom object name and related api name
			 $sf_object_name=$form_state['values']['sf_object_name'];  
		     variable_set('salesforce_object_name',$sf_object_name);
			 
			 require_once $_SERVER["DOCUMENT_ROOT"].'/sites/all/modules/override/salesforce_integration/salesforce_integration_custom_sf_objects.inc';
		      
			 $sf_object_api_name=getCustomObjectAPIName($sf_object_name);  	
			 expDebug::dPrint("sf_object_api_name : ".print_r($sf_object_api_name,true), 5);
			 variable_set('salesforce_object_api_name',$sf_object_api_name); 		  
			
		    
		    $consumer_secret_key=trim($form_state['values']['sf_consumer_secret_key']);
		    $consumer_key=trim($form_state['values']['sf_consumer_key']);
		    
		   
		    for($i=0;$i<$key;$i++){	        	
		        	$tmp_org_id=trim($form_state['input']['org_id_'.$i]); 
		        	$tmp_consumer_secret_key=trim($form_state['input']['consumer_secret_key_'.$i]);
		        	$tmp_consumer_key=trim($form_state['input']['consumer_key_'.$i]);
		        	$tmp_system_user=trim($form_state['input']['system_user_'.$i]);
		        	$tmp_system_user_pwd=trim($form_state['input']['system_user_pwd_'.$i]);    
		        	
		        	if($tmp_system_user=="" || $tmp_system_user_pwd==""){
		        	  $validate_err_res++;
		        	} 
		          	
			}  
		     
		    if($validate_err_res>0){  //If getting error
		       	  drupal_set_message(t('SalesForce settings are missed. All fields are mandatory'),'error');
		    }else{ 
				
		    	$feed_trigger_option=$form_state['values']['feed_trigger_option'];
		    	variable_set('salesforce_feed_trigger_option',$feed_trigger_option);		    	
		    	
				/* $query_delete= db_delete('slt_cstm_salesforce_settings')           
			                   ->execute();  */ 
				 for($i=0;$i< $key;$i++)
			     {	        	
			        	$org_id=$form_state['input']['org_id_'.$i];
			        	//$consumer_secret_key=$form_state['input']['consumer_secret_key_'.$i];
			        	//$consumer_key=$form_state['input']['consumer_key_'.$i];
			        	$system_user=trim($form_state['input']['system_user_'.$i]);
			        	$system_user_pwd=trim($form_state['input']['system_user_pwd_'.$i]);

			        	$enr_syncup=$form_state['input']['enr_syncup_'.$i];
			        	if(empty($enr_syncup) && $enr_syncup == ''){ //handled when new org detail is added, its value for $enr_syncup will be null, thus while inserting null into tinyint type it throws error.
			        		$enr_syncup = 0;
			        	}else{
			        		$enr_syncup = 1;
			        	}
			        	
			        	//insert for only new org entry
						$sql = "SELECT exp_org_id FROM slt_cstm_salesforce_settings where exp_org_id in (".$org_id.")";
						$check = db_query( $sql )->fetchAll();
			        	
						if(empty($check)){
				        $query = db_insert('slt_cstm_salesforce_settings')->fields(array('exp_org_id', 'consumer_secret_key', 'consumer_key','system_user','system_user_pwd','enr_syncup','created_on'));
				        	      
				        $query->values(array(
				              'exp_org_id' => $org_id,
				              'consumer_secret_key' => $consumer_secret_key,
				              'consumer_key' => $consumer_key,
				              'system_user'=>$system_user,
				              'system_user_pwd'=>$system_user_pwd,
				        	  'enr_syncup'=>$enr_syncup,
				              'created_on'=>date("Y-m-d H:i:s")
				         ));
				         
			     		 $query->execute();  
				    } else{
				    		$updquery = db_update('slt_cstm_salesforce_settings');  
          		
          	    			$updquery->condition('exp_org_id', $org_id,'=');
          	    			$updquery->fields(array(
          	                'exp_org_id'=>$org_id,
          	                'consumer_secret_key'=> $consumer_secret_key,
          	                'consumer_key'=> $consumer_key,
                            'system_user'=>$system_user,  
                            'system_user_pwd'=> $system_user_pwd,  
                            'enr_syncup'=>$enr_syncup,  
                            'created_on'=>date("Y-m-d H:i:s")
          	                ));	
          	    			$updquery->execute(); 
				  }   
				  }  
				  
				  drupal_set_message(t('SalesForce settings saved successfully.'));
				  $form_state['redirect'] = array('admin/config/system/salesforce/');	
		    
		     }  	
	   
	  }catch (Exception $ex) {
		  	watchdog_exception('salesforce_integration_settings_page_form_submit', $ex);
		  	expertusErrorThrow($ex);
	  }    
  
}

/** 
** getSalesforceDefaultSecretKey() - Get default salesforce consumer secreat key without consider the organization 
**/ 

function getSalesforceDefaultSecretKey(){ 
	 
	  try{  
		   	   $query_org_default=db_select('slt_cstm_salesforce_settings','scss');  
		       $query_org_default->fields('scss',array('exp_org_id')); 
			   $query_org_default->fields('scss',array('consumer_secret_key'));
			   $query_org_default->fields('scss',array('consumer_key'));
			   $query_org_default->fields('scss',array('system_user'));
			   $query_org_default->fields('scss',array('system_user_pwd')); 
		      // $query_org_default->condition('scss.exp_org_id','0'); 
			   $query_org_default->range(0,1);
		       expDebug::dPrintDBAPI(' $query_org_default selectStmt SQL = ' , $query_org_default,5);
		       
		       $results_default=array("");
		       
		       $result_org_default = $query_org_default->execute();
		       $count_default=$result_org_default->rowCount();
		       $results_default=$result_org_default->fetchAll();
		       
		       expDebug::dPrint('$results_default = ' . print_r($results_default, true),4); 
		       
		       // echo "<pre>results_default=";print_r($results_default);echo "</pre>";  
		       
		       return $results_default; 
	       
	  }catch (Exception $ex) {
		  	watchdog_exception('getSalesforceDefaultSecretKey', $ex);
		  	expertusErrorThrow($ex);
	  }      
	  
} 
 
/** 
* salesforce_integration_theme() - Get salesforce widget theme
*/ 

function salesforce_integration_theme($existing, $type, $theme, $path){

	  try{
	  
		    global $theme_key;
			
			if($theme_key=="expertusoneV2"){
			   $widget_template_name="widget_v2";
			}else{
			  $widget_template_name="widget";
			}
			
			 expDebug::dPrint('$widget_template_name = '.$widget_template_name,5); 
			 
			//echo "widget_template_name=".$widget_template_name;
			
			return array(
		        'widget' => array(
		            'template' => $widget_template_name,  //name of template file, place test.tpl.php in your module
					'type' => 'theme',
					'base_theme' => $theme_key,
					 
		        )
		    );
	   
	  }catch (Exception $ex) {
		  	watchdog_exception('salesforce_integration_theme', $ex);
		  	expertusErrorThrow($ex);
	  } 
  
}

/**
** salesforce_showWidget() - To show the widget from ExpertusONE for iFrame 
**/
 
function salesforce_showWidget(){ 
	
		try
		{
			
			clear_cookies();
					
		    global $salesforce_type;
	    
		    $salesforce_type="iframe";
		    drupal_add_js(array('salesforce' => array('type' =>  $salesforce_type)), 'setting');
		    expDebug::dPrint("Salesforce user used the iFrame to access the ExpertusONE",5); 
		    
		    expDebug::dPrint("Salesforce_type = ".$salesforce_type,5); 
		    
			require_once ('soapclient/SforcePartnerClient.php');
		
		
			global $user;
			
			$session_id=$_REQUEST['SessionId'];
			$serverURL=$_REQUEST['ServerURL'];
			
			expDebug::dPrint("Salesforce iFrame - session_id ".print_r($session_id,true),4);
			expDebug::dPrint("Salesforce iFrame - ServerURL ".print_r($ServerURL,true),4);
			
			expDebug::dPrint("Salesforce iFrame - Calling SalesForce server to validate the user ",5);
			
	 		
			$exp_org_id="";
			
			//salesforceUserAutoCreation($session_id,$serverURL,$exp_org_id); 
			$sf_arr=array();
			$sf_arr['session_id']=trim($session_id);
			$sf_arr['server_url']=trim($serverURL);
			$sf_arr['exp_org_id']=trim($exp_org_id);
			$sf_arr['from_iFrame']="1";
			
			$sf_arr['email']=salesforceUserAutoCreation($sf_arr,"1");  
			
			processSignedRequest($sf_arr['email']); 
			
		
		}catch(Exception $ex){
		    watchdog_exception('salesforce_showWidget', $ex);
	  	    expertusErrorThrow($ex);
			expDebug::dPrint("Salesforce iFrame - Exception while processing Salesforce Show Widget ".$ex->getMessage(),5);
			expDebug::dPrint($ex,5);
			//print_r('An error occured.Contact support.');  
			echo t("SFMSG037");
			exit();
		}  
		
} 

/** 
** template_preprocess_widget() - Template preprocess for salesforce  
**/ 

function template_preprocess_widget(&$variables){

	  try{
	   
		   expDebug::dPrint(' ------------>    In Pre Process    ---------------',4);
	
			drupal_add_js('var a=1', 'inline');
			
			global $theme_key;
						
			$directory = drupal_get_path('theme', $theme_key) . '/expertusone-internals/css/';  
			
			$stylesheets = array('layout-fixed.css');
			  
			 // Replace the layout-fixed.css file.
			 if (theme_get_setting('expertusone_layout') == 'expertusone-columns-liquid') {  
			    $stylesheets[2] = 'layout-liquid.css';
			 }
			
			foreach ($stylesheets as $stylesheet) {
			  drupal_add_css($directory . $stylesheet, array('group' => CSS_THEME, 'every_page' => TRUE));
			}
			
			/*
			
			$ie10Browser = (preg_match('/MSIE 10/',$_SERVER['HTTP_USER_AGENT'])) ? true : false;
			
			$ie11Browser = (preg_match('/Trident\/7.0; rv:11.0/',$_SERVER['HTTP_USER_AGENT'])) ? true : false;
			// Add print styles.
			drupal_add_css($directory . 'print.css', array('media' => 'print', 'group' => CSS_THEME, 'every_page' => TRUE));
			
			// Add conditional stylesheets.
			drupal_add_css($directory . 'ie8.css', array('group' => CSS_THEME, 'browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE), 'every_page' => TRUE));
			drupal_add_css($directory . 'ie7.css', array('group' => CSS_THEME, 'browsers' => array('IE' => 'lte IE 7', '!IE' => FALSE), 'every_page' => TRUE));
			drupal_add_css($directory . 'ie6.css', array('group' => CSS_THEME, 'browsers' => array('IE' => 'lte IE 6', '!IE' => FALSE), 'every_page' => TRUE));
			drupal_add_css($directory . 'ie9.css', array('group' => CSS_THEME, 'browsers' => array('IE' => 'lte IE 9', '!IE' => FALSE), 'every_page' => TRUE));
			drupal_add_css($directory . 'ie9.css', array('group' => CSS_THEME, 'browsers' => array('IE' => 'IE 9', '!IE' => FALSE), 'every_page' => TRUE));
			if($ie10Browser == 1){
				drupal_add_css($directory . 'ie10.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1200));
			}
			if($ie11Browser == 1){
				drupal_add_css($directory . 'ie11.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1200));
			}
			drupal_add_css($directory . 'sf.css', array('group' => CSS_THEME, 'every_page' => TRUE));	
			drupal_add_css($directory . 'sf_theme.css', array('group' => CSS_THEME, 'every_page' => TRUE));
			
			global $user;
			global $theme_key;
			$userLanguage = ($user->uid) ? $user->language : $_SESSION['language'];
			$langDir = drupal_get_path('theme', $theme_key) . '/expertusone-internals/lang-css/' . $userLanguage . '/' ;
			if(file_exists($langDir . 'ie8_'.$userLanguage.'.css')){
				$ieEight = $langDir . 'ie8_'.$userLanguage.'.css';
				drupal_add_css($ieEight, array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 8', '!IE' => FALSE), 'weight'=>1301));
			}
			if(file_exists($langDir . 'ie9_'.$userLanguage.'.css')){
				$ieNine  = $langDir . 'ie9_'.$userLanguage.'.css';
				drupal_add_css($ieNine,  array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 9', '!IE' => FALSE), 'weight'=>1301));
			}
			if(file_exists($langDir . 'ie10_'.$userLanguage.'.css') && $ie10Browser == 1){
				$ieTen  = $langDir . 'ie10_'.$userLanguage.'.css';
				drupal_add_css($ieTen,  array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1301));
			}
                        if(file_exists($langDir . 'ie11_'.$userLanguage.'.css') && $ie11Browser == 1){
  	                        $ieEleven  = $langDir . 'ie11_'.$userLanguage.'.css';
  	                        drupal_add_css($ieEleven,  array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1301));
                        }
                        
             */
			
			
			
			drupal_add_css($directory . 'print.css', array('media' => 'print', 'group' => CSS_THEME, 'every_page' => TRUE));
				
			drupal_add_css($directory . 'ie8.css', array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 8', '!IE' => FALSE), 'weight'=>1200));
			drupal_add_css($directory . 'ie9.css', array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 9', '!IE' => FALSE), 'weight' => 1200));
			$ie10Browser = (preg_match('/MSIE 10/',$_SERVER['HTTP_USER_AGENT'])) ? true : false;
			$ie11Browser = (preg_match('/Trident\/7.0; rv:11.0/',$_SERVER['HTTP_USER_AGENT'])) ? true : false;
			$msedgeBrowser=(preg_match('/Edge/i',$_SERVER['HTTP_USER_AGENT'])) ? true : false;
			//expDebug::dPrint('IE10 variable check' . $ie10Browser, 1);
			if($ie10Browser == 1){
				drupal_add_css($directory . 'ie10.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1200));
				drupal_add_css($directory . 'sf_ie10.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1500));
			}
			
			if($ie11Browser == 1){
				drupal_add_css($directory . 'ie11.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1200));
			}
			
			if($msedgeBrowser == 1){
				drupal_add_css($directory . 'sf_ms_edge.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1500));
			}
			
			drupal_add_css($directory . 'sf.css', array('type' => 'file','group' => CSS_THEME, 'weight' => 1500));
			drupal_add_css($directory . 'sf_theme.css', array('type' => 'file','group' => CSS_THEME, 'weight' => 1500));
			 
			drupal_add_css(drupal_get_path('module', 'exp_sp_core').'/css/calender_style_v2.css', array('type' => 'file','group' => CSS_THEME, 'weight' => 1301));
			drupal_add_css(drupal_get_path('module', 'exp_sp_lnrcalendar') .'/exp_sp_lnrcalendar_v2.css', array('type' => 'file','group' => CSS_THEME, 'weight' => 1301));
			
			// Calender Style
			//$css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
			//drupal_add_css('sites/all/themes/core/AdministrationTheme/calender_style.css',$css_theme_optional);
				
				
			global $user;
			global $theme_key;
			$userLanguage = ($user->uid) ? $user->language : $_SESSION['language'];  
			 
			
			$langDir = drupal_get_path('theme', $theme_key) . '/expertusone-internals/lang-css/' . $userLanguage . '/' ;
			
			if(file_exists($langDir . 'lang_'.$userLanguage.'.css')){
				$cssDirectory = $langDir . 'lang_'.$userLanguage.'.css';
				drupal_add_css($cssDirectory, array('group' => CSS_THEME,'every_page' => TRUE , 'weight'=>1301));
			}
			
			if(file_exists($langDir . 'ie8_'.$userLanguage.'.css')){
				$ieEight = $langDir . 'ie8_'.$userLanguage.'.css';
				drupal_add_css($ieEight, array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 8', '!IE' => FALSE), 'weight'=>1301));
			}
			if(file_exists($langDir . 'ie9_'.$userLanguage.'.css')){
				$ieNine  = $langDir . 'ie9_'.$userLanguage.'.css';
				drupal_add_css($ieNine,  array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 9', '!IE' => FALSE), 'weight'=>1301));
			}
			if(file_exists($langDir . 'ie10_'.$userLanguage.'.css') && $ie10Browser == 1){
				$ieTen  = $langDir . 'ie10_'.$userLanguage.'.css';
				drupal_add_css($ieTen,  array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1301));
			}
			if(file_exists($langDir . 'ie11_'.$userLanguage.'.css') && $ie11Browser == 1){
				$ieEleven  = $langDir . 'ie11_'.$userLanguage.'.css';
				drupal_add_css($ieEleven,  array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1301));
			}
			
			//Override the language modules 
			 
			if(file_exists($langDir . 'sf_lang_'.$userLanguage.'.css')){
				$cssDirectory = $langDir . 'sf_lang_'.$userLanguage.'.css';
				drupal_add_css($cssDirectory, array('group' => CSS_THEME, 'weight' => 1501));
			} 
			
			if(file_exists($langDir . 'sf_ms_edge_'.$userLanguage.'.css') && $msedgeBrowser == 1){
				$msedge  = $langDir . 'sf_ms_edge_'.$userLanguage.'.css';
				drupal_add_css($msedge,  array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1501));
			}
			//Added css for Five Star Rating 
			
			 $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
			 if($theme_key == 'expertusoneV2') { 
			 	if (contentPlayerIsActive()) { // Based on a content player activation load the needed files.
			 		drupal_add_css(drupal_get_path('module', 'fivestar').'/css/fivestar_v2.css',$css_theme_optional);
			 		drupal_add_css(drupal_get_path('module', 'exp_sp_survey').'/exp_sp_survey_learner/css/Survey_formatter_cp.css',$css_theme_optional);
			 		includeContentPlayerJsCss();
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/js/exp_sp_lnrenrollment/exp_sp_lnrenrollment_cp.js');
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_survey').'/exp_sp_survey_learner/js/exp_sp_surveylearner/exp_sp_surveylearner_cp.js');
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/js/exp_sp_registrationdetail/exp_sp_launch_cp.js');
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/js/exp_sp_registrationdetail/SCORM-API-WRAPPER_cp.js');
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/js/exp_sp_registrationdetail/SCORM12-LMS-API_cp.js');
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/js/exp_sp_registrationdetail/SCORM2004-LMS-API_cp.js');
			 		
			 	}else{
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/js/exp_sp_lnrenrollment/exp_sp_lnrenrollment.js');
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_survey').'/exp_sp_survey_learner/js/exp_sp_surveylearner/exp_sp_surveylearner.js');
			 		drupal_add_css(drupal_get_path('module', 'fivestar').'/css/fivestar_v2.css',$css_theme_optional);
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/js/exp_sp_registrationdetail/exp_sp_launch.js');
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/js/exp_sp_registrationdetail/SCORM-API-WRAPPER.js');
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/js/exp_sp_registrationdetail/SCORM12-LMS-API.js');
			 		drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/js/exp_sp_registrationdetail/SCORM2004-LMS-API.js');
			 	}
			     // drupal_add_css(drupal_get_path('module', 'fivestar').'/css/fivestar_v2.css',$css_theme_optional);
		     }else{
			      drupal_add_css(drupal_get_path('module', 'fivestar').'/css/fivestar.css',$css_theme_optional);
		     }      	     
			
			global $salesforce_type;
			
			expDebug::dPrint("Salesforce_type = ".$salesforce_type,5); 
			
			// Get the data for the tpl files.
			
			if($salesforce_type=="canvas"){ 
			
			   // 1. Menu Links
			   //$variables['canvasmenu']=getCanvasMenu(); // Canvas menu will be displayed only for canvas users
			   $variables['canvasmenu']="";
			   // 2. Search Box
			   //$variables['searchbox']=getSearchBox_block();
			   $variables['searchbox']="";
			   // 3. My learning panel configuration box
			   $variables['panel_configuration'][0]=getPanelConfigurationBox();
			   $variables['panel_configuration'][1]=getPanelConfigurationTranscriptBox();
			   $variables['panel_configuration'][2]=getPanelConfigurationCalendarBox();
			}
			
			// 3. The actual block requested
			$build = getRenderableBlocks();
						
			$variables['widgetarray']=$build;
			
			// 4. The header for authenticated user information
			$headerarray=connectForAuthenticate();
			$variables['headerarray']=$headerarray;
			
	  }catch (Exception $ex) {
		  	watchdog_exception('template_preprocess_widget', $ex);
		  	expertusErrorThrow($ex);
	  }  
  
}

/** 
** connectForAuthenticate() - Get authentication from LMS
**/ 

function connectForAuthenticate(){

		try{
		
			// return value for Authentication service , SPLearnerCerticate and others.
			
			$headerarray = array();
			
			$config=getConfig("exp_sp");
			$url=$config["service_url"]."?actionkey=".$config["actionkey"];
			global $user;
			$uname=$user->name;
			$request = getRequestXML_authenticate($uname,'',120);
			$client = new SoapClient(null,array('location'=>$url,'uri'=>$url,'exceptions'=>FALSE,'trace'=>true));
			
			$xmlstr = $client->__doRequest($request,$url,"",1);
			$res = $client->__getLastResponseHeaders();
			$tmp = explode("\n",$res);
			for($i=0;$i<sizeOf($tmp);$i++){
				//expDebug::dPrint("Header in SCSoapClient: $i : ".$tmp[$i]);
				if(stripos($tmp[$i],"Cookie")>0){
					$headerarray[] = $tmp[$i];
				}
			}
			
			return $headerarray;
			
		}catch(Exception $ex){
				watchdog_exception('connectForAuthenticate', $ex);
		  	    expertusErrorThrow($ex);
				//throw new SoapFault("SPLMS",$ex->getMessage());
		}
		
}

/** 
** getRenderableBlocks() - Render blocks according to query request
**/

function getRenderableBlocks(){  
	
	  try{
	  
	        global $salesforce_type;
	    
		    global $theme_key;
		    
		    global $from_saleforce; 
		    
		    expDebug::dPrint("Salesforce_type = ".$salesforce_type,5); 
		    
		    $_SESSION['ses_from_salesforce']=1;
		    
		    if($salesforce_type=="canvas"){  
		    	$widgetName=arg(1);
		    }else{ //if iframe
		        $widgetName=arg(2);
		    }
		    
		    $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
   		    $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
			$header_optional = array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY); 
			
			if(empty($widgetName)) $widgetName='MyEnrollment';
			
			if(!empty($widgetName)){
				
				
			
				switch ($widgetName){
				
				  case 'catalog' : $widgetArray=array();
				  $directory = drupal_get_path('theme', 'expertusoneV2') . '/expertusone-internals/css/';
				  drupal_add_css($directory . 'ie8.css', array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 8', '!IE' => FALSE), 'weight'=>1200));
				  drupal_add_css($directory . 'ie9.css', array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 9', '!IE' => FALSE), 'weight' => 1200));
				  $ie10Browser = (preg_match('/MSIE 10/',$_SERVER['HTTP_USER_AGENT'])) ? true : false;
                                  $ie11Browser = (preg_match('/Trident\/7.0; rv:11.0/',$_SERVER['HTTP_USER_AGENT'])) ? true : false;
				  //expDebug::dPrint('IE10 variable check' . $ie10Browser, 1);
				  if($ie10Browser == 1){
				  	drupal_add_css($directory . 'ie10.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1200));
				  	drupal_add_css($directory . 'sf_ie10.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1200));
				  }
				  if($ie11Browser == 1){
					drupal_add_css($directory . 'ie11.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1200));
				  }
				  global $user;
				  global $theme_key;
				  $userLanguage = ($user->uid) ? $user->language : $_SESSION['language'];
				  $langDir = drupal_get_path('theme', $theme_key) . '/expertusone-internals/lang-css/' . $userLanguage . '/' ;
				  if(file_exists($langDir . 'ie8_'.$userLanguage.'.css')){
				  	$ieEight = $langDir . 'ie8_'.$userLanguage.'.css';
				  	drupal_add_css($ieEight, array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 8', '!IE' => FALSE), 'weight'=>1301));
				  }
				  if(file_exists($langDir . 'ie9_'.$userLanguage.'.css')){
				  	$ieNine  = $langDir . 'ie9_'.$userLanguage.'.css';
				  	drupal_add_css($ieNine,  array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 9', '!IE' => FALSE), 'weight'=>1301));
				  }
				  if(file_exists($langDir . 'ie10_'.$userLanguage.'.css') && $ie10Browser == 1){
				  	$ieTen  = $langDir . 'ie10_'.$userLanguage.'.css';
				  	drupal_add_css($ieTen,  array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1301));
				  }
                                  if(file_exists($langDir . 'ie11_'.$userLanguage.'.css') && $ie11Browser == 1){
  	                                $ieEleven  = $langDir . 'ie11_'.$userLanguage.'.css';
  	                                drupal_add_css($ieEleven,  array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1301));
                                  }
				  	
					          expDebug::dPrint(' >>>> Loading CATALOG  ---------------- ',5); 
					           
						 	  //Search related Js
							  drupal_add_js(drupal_get_path('module', 'exp_sp_lnrsearch') .'/exp_sp_lnrsearch.js', $js_module_optional);
							  drupal_add_js(drupal_get_path('module', 'exp_sp_lnrsearch') .'/jquery.cookie.js', $js_module_optional);
							  drupal_add_js(drupal_get_path('module', 'fivestar').'/js/fivestar.js', $js_module_optional); 
							  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/qtippopup.js', $js_module_optional);
							  
							  //Refer course / class Js and Css
							  drupal_add_js(drupal_get_path('module', 'exp_sp_refer_course').'/exp_sp_refer_course.js', $js_module_optional); 
							  drupal_add_js(drupal_get_path('module', 'exp_sp_refer_course').'/exp_sp_request_class.js', $js_module_optional);							  
							  drupal_add_css(drupal_get_path('module', 'exp_sp_refer_course') .'/exp_sp_refer_course.css'); 
							   
							   //Multicontent style in catalog page
							 // drupal_add_css('sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/css/exp_sp_lnrenrollment_v2_branding.css',$css_theme_optional);
							  drupal_add_css('sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/css/exp_sp_lnrenrollment_v2.css',$css_theme_optional);
							 
							  // Calender Style
							 // drupal_add_css('sites/all/themes/core/AdministrationTheme/calender_style.css',$css_theme_optional);

							  //Mouse Wheel JS
							  drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.mousewheel.js',$js_module_optional);
							  enableCtool();
							  $block =widget_block_load('exp_sp_lnrsearch', 'tab_find_training',$theme_key);
							  $block_content = _block_render_blocks(array($block));
							  $build = _block_get_renderable_array($block_content);
							  $widgetArray[]=$build;
							  expDebug::dPrint('$widgetArray = ' . print_r($widgetArray, true),4);
							  return $widgetArray;
					
				  case 'class-details' : $widgetArray=array();
					
							  drupal_add_js(drupal_get_path('module','exp_sp_prerequisite').'/exp_sp_prerequisite.js',$js_module_optional);
							  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/qtippopup.js', $js_module_optional);
							  drupal_add_js(drupal_get_path('module', 'exp_sp_refer_course').'/exp_sp_refer_course.js', $js_module_optional);
							  drupal_add_css(drupal_get_path('module', 'exp_sp_refer_course') .'/exp_sp_refer_course.css');
					          expDebug::dPrint(' >>>> Loading Class Details  ---------------- ',5); 
					          enableCtool();
							  $block =widget_block_load('exp_sp_classdetail', 'class_details',$theme_key);
							  $block_content = _block_render_blocks(array($block));
							  $build = _block_get_renderable_array($block_content);
							  $widgetArray[]=$build;
							  expDebug::dPrint('$widgetArray = ' . print_r($widgetArray, true),4);
							  return $widgetArray;
							  
				 case 'course-details' : $widgetArray=array();
				              drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/qtippopup.js', $js_module_optional);
				              drupal_add_js(drupal_get_path('module', 'exp_sp_refer_course').'/exp_sp_refer_course.js', $js_module_optional); 
							  drupal_add_js(drupal_get_path('module', 'exp_sp_refer_course').'/exp_sp_request_class.js', $js_module_optional);							  
							  drupal_add_css(drupal_get_path('module', 'exp_sp_refer_course') .'/exp_sp_refer_course.css');
					          expDebug::dPrint(' >>>> Loading Course Details  ---------------- ',5); 
					          enableCtool();
							  $block =widget_block_load('exp_sp_coursedetail', 'course_details',$theme_key);
							  $block_content = _block_render_blocks(array($block));
							  $build = _block_get_renderable_array($block_content);
							  $widgetArray[]=$build;
							  expDebug::dPrint('$widgetArray = ' . print_r($widgetArray, true),4);
							  return $widgetArray;							  							  							  
							  
				   case 'learning-plan-details' : $widgetArray=array();
							 drupal_add_js(drupal_get_path('module', 'exp_sp_lnrsearch') .'/exp_sp_lnrsearch.js', $js_module_optional);
				   			 drupal_add_js(drupal_get_path('module','exp_sp_prerequisite').'/exp_sp_prerequisite.js',$js_module_optional);
				   			 drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/qtippopup.js', $js_module_optional);
				   			 drupal_add_js(drupal_get_path('module', 'exp_sp_refer_course').'/exp_sp_refer_course.js', $js_module_optional);
				   			 drupal_add_css(drupal_get_path('module', 'exp_sp_refer_course') .'/exp_sp_refer_course.css');
					          expDebug::dPrint(' >>>> Loading Learning Plan Details  ---------------- ',5);  
							  
							  $block =widget_block_load('exp_sp_learning_plan_detail', 'learning_details',$theme_key); 
							  $block_content = _block_render_blocks(array($block));
							  $build = _block_get_renderable_array($block_content);
							  $widgetArray[]=$build;
							  expDebug::dPrint('$widgetArray = ' . print_r($widgetArray, true),4);
							  return $widgetArray;							  							  
							  
					case 'myteam' : $widgetArray=array();
							  expDebug::dPrint(' >>>> Loading My Team  ---------------- ',5);
							  $block =widget_block_load('exp_sp_myteam', 'tab_manager_view',$theme_key);
							  $block_content = _block_render_blocks(array($block));
							  $build = _block_get_renderable_array($block_content);
							  $widgetArray[]=$build;
							  expDebug::dPrint('$widgetArray = ' . print_r($widgetArray, true),4);
							  return $widgetArray;
							  
					case 'reports': $widgetArray=array(); 
					
							  expDebug::dPrint(' >>>> Loading Reports  ---------------- ',5);
							  
							  drupal_add_js('misc/ui/jquery.ui.droppable.min.js');
							  drupal_add_js('misc/ui/jquery.ui.sortable.min.js');
							  
							  $block =widget_block_load('exp_sp_lnrreports', 'tab_reports',$theme_key);
							  $block_content = _block_render_blocks(array($block));
							  $build = _block_get_renderable_array($block_content);
							  $widgetArray[]=$build;
							  expDebug::dPrint('$widgetArray = ' . print_r($widgetArray, true),4);
							  return $widgetArray;
				
					default : $widgetArray=array();
					
					//Added this condition for getting ILT class list when click on each day on calenders in My Learning
                    if(!isset($_SESSION['MyLearn_Pref']) && empty($_SESSION['MyLearn_Pref'])){
                        $user_preference = getUserPreference();
                        $_SESSION['MyLearn_Pref'] = $user_preference;
                    }
                   
                    expDebug::dPrint('Session deails in MyLearn_Pref : ' . print_r($_SESSION['MyLearn_Pref'],true), 5);
					 
					$directory = drupal_get_path('theme', 'expertusoneV2') . '/expertusone-internals/css/';
					drupal_add_css($directory . 'ie8.css', array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 8', '!IE' => FALSE), 'weight'=>1200));
					drupal_add_css($directory . 'ie9.css', array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 9', '!IE' => FALSE), 'weight' => 1200));
					$ie10Browser = (preg_match('/MSIE 10/',$_SERVER['HTTP_USER_AGENT'])) ? true : false;
                                        $ie11Browser = (preg_match('/Trident\/7.0; rv:11.0/',$_SERVER['HTTP_USER_AGENT'])) ? true : false;
					//expDebug::dPrint('IE10 variable check' . $ie10Browser, 1);
					if($ie10Browser == 1){
						drupal_add_css($directory . 'ie10.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1200));
						drupal_add_css($directory . 'sf_ie10.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1500));
					}
					if($ie11Browser == 1){
					  	drupal_add_css($directory . 'ie11.css', array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1200));
					}
										global $user;
					global $theme_key;
					$userLanguage = ($user->uid) ? $user->language : $_SESSION['language'];
					$langDir = drupal_get_path('theme', $theme_key) . '/expertusone-internals/lang-css/' . $userLanguage . '/' ;
					if(file_exists($langDir . 'ie8_'.$userLanguage.'.css')){
						$ieEight = $langDir . 'ie8_'.$userLanguage.'.css';
						drupal_add_css($ieEight, array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 8', '!IE' => FALSE), 'weight'=>1301));
					}
					if(file_exists($langDir . 'ie9_'.$userLanguage.'.css')){
						$ieNine  = $langDir . 'ie9_'.$userLanguage.'.css';
						drupal_add_css($ieNine,  array('type' => 'file', 'group' => CSS_THEME, 'browsers' => array('IE' => 'IE 9', '!IE' => FALSE), 'weight'=>1301));
					}
					if(file_exists($langDir . 'ie10_'.$userLanguage.'.css') && $ie10Browser == 1){
						$ieTen  = $langDir . 'ie10_'.$userLanguage.'.css';
						drupal_add_css($ieTen,  array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1301));
					}
					if(file_exists($langDir . 'ie11_'.$userLanguage.'.css') && $ie11Browser == 1){
					  	$ieEleven  = $langDir . 'ie11_'.$userLanguage.'.css';
					  	drupal_add_css($ieEleven,  array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1301));
					}
					
					
					drupal_add_css(drupal_get_path('module', 'exp_sp_core').'/css/calender_style_v2.css', array('type' => 'file','group' => CSS_THEME, 'weight' => 1301));
					drupal_add_css(drupal_get_path('module', 'exp_sp_lnrcalendar') .'/exp_sp_lnrcalendar_v2.css', array('type' => 'file','group' => CSS_THEME, 'weight' => 1301));
						
					
							  drupal_add_js('misc/ui/jquery.ui.sortable.min.js'); // Requires sortable plugin for my learn customization
							   //Refer course / class Js and Css
							  drupal_add_js(drupal_get_path('module', 'exp_sp_refer_course').'/exp_sp_refer_course.js', $js_module_optional); 
							  drupal_add_js(drupal_get_path('module', 'exp_sp_refer_course').'/exp_sp_request_class.js', $js_module_optional);							  
							  drupal_add_css(drupal_get_path('module', 'exp_sp_refer_course') .'/exp_sp_refer_course.css');
							  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/qtippopup.js', $js_module_optional);
							  //Print Certificate related js   
							  drupal_add_js(drupal_get_path('module','salesforce_integration').'/salesforce_integration_printcertificate.js', array('type' => 'file', 'group' => JS_DEFAULT));
							   
							  drupal_add_css('misc/ui/jquery.ui.core.css'); 

							  if($theme_key == 'expertusoneV2') {
								 // drupal_add_css(drupal_get_path('module', 'exp_sp_core').'/modules/exp_sp_administration/exp_sp_administration_v2.css',$css_theme_optional);
							  }  
								  
							  //Mouse Wheel JS
							  drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.mousewheel.js',$js_module_optional);

								$from_saleforce="1";
							  
								 expDebug::dPrint(' >>>> Loading enrollment ---------------- ',5);
								  $enr_block=widget_block_load('exp_sp_lnrenrollment','tab_my_enrollment_customized',$theme_key);
								  $enr_block_content = _block_render_blocks(array($enr_block));
								  $enr_build = _block_get_renderable_array($enr_block_content);
								  $widgetArray['tab_my_enrollment_customized']=$enr_build; 
								  
								 
								  
							  expDebug::dPrint(' >>>> Loading Programs ---------------- ',5);
								  $lp_enr_block = widget_block_load('exp_sp_lnrlearningplan','tab_my_learningplan_customized',$theme_key);
								  $lp_enr_block_content = _block_render_blocks(array($lp_enr_block));
								  $lp_enr_build = _block_get_renderable_array($lp_enr_block_content);
								  $widgetArray['tab_my_learningplan_customized']=$lp_enr_build;  
							  
							      expDebug::dPrint('$widgetArray = ' . print_r($widgetArray, true),4);
							      
		
							if($salesforce_type=="canvas"){  		// If canvas app then display the My Calender and My Transcript
										  
									  expDebug::dPrint(' >>>> Loading My Transcript ---------------- ',5);							  
									  $transcript_block = widget_block_load('exp_sp_mytranscript','mytranscript_mylearning',$theme_key);
									  $transcript_block_content = _block_render_blocks(array($transcript_block));
									  $transcript_build = _block_get_renderable_array($transcript_block_content);
									  $widgetArray['mytranscript_mylearning']=$transcript_build;
									   
								  expDebug::dPrint(' >>>> Loading My Calender ---------------- ',5);
								  
								  if($theme_key == 'expertusoneV2') {
								    drupal_add_css(drupal_get_path('module', 'exp_sp_core').'/css/calender_style.css',$css_theme_optional);
								  }  
								  
									  $calender_block = widget_block_load('exp_sp_lnrcalendar','mycalendar_mylearning',$theme_key);
									  $calender_block_content = _block_render_blocks(array($calender_block));
									  $calender_build = _block_get_renderable_array($calender_block_content);
									  $widgetArray['mycalendar_mylearning']=$calender_build; 
						    	if($widgetName == 'mylearning') {
						    		enableCtool();
						    	}
							}
						     
						      
		 					  					  
							 return $widgetArray;
					
				}
			}
	   
	  }catch (Exception $ex) {
		  	watchdog_exception('getRenderableBlocks', $ex);
		  	expertusErrorThrow($ex);
	  }
	 
}

/** 
** widget_block_load() - Load block from LMS
**/ 

function widget_block_load($module, $delta,$theme) {

	  try{  
	  
		  if (isset($delta)) {
		    $block = db_query('SELECT * FROM {block} WHERE module = :module AND delta = :delta AND theme=:theme', array(':module' => $module, ':delta' => $delta,':theme' => $theme))->fetchObject();
		  }
		
		  // If the block does not exist in the database yet return a stub block object.
		  if (empty($block)) {
		    $block = new stdClass();
		    $block->module = $module;
		    $block->delta = $delta;
		  }
		
		  expDebug::dPrint('$block = ' . print_r($block, true),4);
		   
		  return $block;
	   
	  }catch (Exception $ex) {
	  	watchdog_exception('widget_block_load', $ex);
	  	expertusErrorThrow($ex);
	  } 
  
}

/** 
** canvas_authenticate() - Authenticate the signed request from canvas app 
** - Create the user if not exist in LMS
** - Render the default My Enrollment page after authentication 
**/ 

function canvas_authenticate(){
    
	  try{
	   
	  	    clear_cookies();
	  	    
	        expDebug::dPrint("Salesforce canvas authentication process starts.....",5);   
	        
			$signedRequest = $_REQUEST['signed_request'];
			
			expDebug::dPrint('signedRequest = ' . print_r($signedRequest, true),4);
			
			expDebug::dPrint('$_REQUEST[q] = ' . print_r($_REQUEST[q], true),4); 
			
			//Get Salesforce Org ID from Organization Custom Fields table by using SF query string (//salesforce/canvas/authenticate/00Do0000000KKUz)	
			
			$qry_str_arr=explode("/",$_REQUEST[q]);
			
			$qry_str_sf_org_key=trim($qry_str_arr[3]);
			$org_key_sf="";
			if($qry_str_sf_org_key!=""){
			  $org_key_sf=trim($qry_str_sf_org_key);
			} 
			
			expDebug::dPrint('Salesforce Organization ID $org_key_sf = '.$org_key_sf,5); 
			
			//if salesforce organisation key/id is null, the default consumer secret key should get from LMS  
			
			if($org_key_sf==""){  //Get the default consumer secret key from LMS table
			     expDebug::dPrint('Getting default consumer secret key from LMS due to not passing the org id from salesforce',5); 
			     $def_sf_arr=array(""); 
			     $def_sf_arr=getSalesforceDefaultSecretKey();       
			     $consumer_secret=$def_sf_arr[0]->consumer_secret_key;       
			     $exp_org_id="";
			}else{ //If pass the organization id from salesforce then get the secret key and expertus org id from LMS  
			     expDebug::dPrint('Getting consumer secret key from LMS for using multiple orgnaization salesforce keys',5); 
			     $org_arr=getExpertusOrgId($org_key_sf);
			     $consumer_secret=$org_arr["consumer_secret_key"];
			     $exp_org_id=$org_arr["exp_org_id"]; 
			}    
		     
		    expDebug::dPrint('$consumer_secret = '.$consumer_secret,4); 
		    expDebug::dPrint('$exp_org_id = '.$exp_org_id,4); 
		          	 
			// Check the signed request as well as the consumer secret key
			 
			if ($signedRequest == null || $consumer_secret == null) {
			   //echo "<br>Error: Signed Request or Consumer Secret not found";
			   echo "<br/>".t("SFMSG032");
			   expDebug::dPrint("Error: Signed Request or Consumer Secret not found",5); 
			   exit();
			}
		
			// Decode the signedRequest
			
			$sep = strpos($signedRequest, '.');
			$encodedSig = substr($signedRequest, 0, $sep);
			$encodedEnv = substr($signedRequest, $sep + 1);
			$calcedSig = base64_encode(hash_hmac("sha256", $encodedEnv, $consumer_secret, true));
			if ($calcedSig != $encodedSig) {
			   //echo "<br>Error: Signed Request - Unable to decrypt the request ";
			   echo "<br/>".t("SFMSG033");
			   expDebug::dPrint("Error: Signed Request - Unable to decrypt the request.Please check consumer secret key Between LMS and Salesforce",5); 
			   exit();
			}
		
			//decode the signed request object
			
			$sr = base64_decode($encodedEnv);
			$recevied_response=json_decode($sr); 
		  
		    expDebug::dPrint('recevied_response = ' . print_r($recevied_response, true),4); 
		    
		   // echo "<pre>recevied_response=";print_r($recevied_response);echo "</pre>";    
		    
			if(isset($recevied_response)){ 
				
				/* $session_id=$recevied_response->context->environment->parameters->SessionId;
				 $serverURL=$recevied_response->context->environment->parameters->ServerURL;
				salesforceUserAutoCreation($session_id,$serverURL,$exp_org_id);	 //Create user if not exists in LMS
				*/
				
				$sf_arr=array();
				
				$sf_arr['session_id']=trim($recevied_response->context->environment->parameters->SessionId);
				$sf_arr['server_url']=trim($recevied_response->context->environment->parameters->ServerURL);
				
				$sf_arr['email']=trim($recevied_response->context->user->email);
				$sf_arr['sf_org_id']=trim($recevied_response->context->organization->organizationId);
				$sf_arr['sf_org_name']=trim($recevied_response->context->organization->name);
				
				
				//Create org id if not exists in LMS when get signed request
				 
				$last_3_char_from_sf_org_id=strtolower(substr($sf_arr['sf_org_id'],-3));
				//Trim the 3 characters (EAO) from Organization id. Those characters are autometically appended when get the org ID , which should be remove
				expDebug::dPrint('$last_3_char_from_sf_org_id = '.$last_3_char_from_sf_org_id,5);
				 
				$tmp_sf_org_key=substr($sf_arr['sf_org_id'],0,-3);
				expDebug::dPrint('After remove end of 3 char from saleforce org id. $tmp_sf_org_key = '.$tmp_sf_org_key,5);
				$tmp_sf_org_name=$sf_arr['sf_org_name'];
				$exp_org_id=createGetExpertusOrgId($tmp_sf_org_key,$tmp_sf_org_name);  
				expDebug::dPrint('$exp_org_id = '.$exp_org_id,5);
				
				$sf_arr['exp_org_id']=trim($exp_org_id);
				 
				expDebug::dPrint('SF User details from signed request  $sf_arr = ' . print_r($sf_arr,true),4);			
			   
			    //set sf dession for capture oAuth Details
			    $_SESSION['sf']="";
				
				//Get Enrollment Option for Particular Orgnaization
				$tmp_org_sf_setting_arr=getExpertusOrgId($tmp_sf_org_key,$exp_org_id);	 			
				expDebug::dPrint('Get Enrollment Syncup Option for Particular Org -'.$tmp_sf_org_name.' and Org Id - '.$exp_org_id.'and SF Org Key - '.$tmp_sf_org_key.'. $tmp_org_sf_setting_arr = '.print_r($tmp_org_sf_setting_arr,true),4);
				$_SESSION['sf']['org_enr_syncup_option']=trim($tmp_org_sf_setting_arr['enr_syncup']); 	
				
				if($_SESSION['sf']['org_enr_syncup_option']!='1'){
					 expDebug::dPrint('Enrollment syncup option is in Disabled State for this organization.',4);
				}else{
					expDebug::dPrint('Enrollment syncup option is in Enabled State for this organization.',4);
				}			
				
			    $_SESSION['sf']['instance_url']=trim($recevied_response->client->instanceUrl);
			    $_SESSION['sf']['oauth_token']=trim($recevied_response->client->oauthToken);
			    $_SESSION['sf']['token_type']="Bearer"; 
			    $_SESSION['sf']['user_id']=trim($recevied_response->context->user->userId); 			    
			    $_SESSION['sf']['email']=trim($recevied_response->context->user->email); 
			     
			    expDebug::dPrint('SF oauth details from signed request $_SESSION[sf] = ' . print_r($_SESSION['sf'],true),4);
			    
				/*$mail=$recevied_response->context->user->email; 
				processSignedRequest($mail);*/ 
			    
			    global $user;
			    $user=NULL;
			    
			    salesforceUserAutoCreation($sf_arr);    //Create user if not exists in LMS 
			    
			    processSignedRequest($sf_arr['email']);
				
				//exit();
			}else
			{
				//echo '<br>Unable to verify your request'.
				echo "<br>".t("SFMSG034");
				expDebug::dPrint("Error: Unable to verify your request",5); 
				exit();
			} 
			
		   
	  }catch (Exception $ex) {
		  	watchdog_exception('canvas_authenticate', $ex);
		  	expertusErrorThrow($ex);
	  }
	  
}


/* 
* getSalesForceConnection() - Salesforce connection to get the user details
*/  

function getSalesforceConnection($session_id,$serverURL){ 

	  try{
	    
		    require_once ('soapclient/SforcePartnerClient.php');
		    
			$protocol="http://";
			
		   expDebug::dPrint('$_SERVER : '.print_r($_SERVER,true),5); 
			
			// IIS scenario
			if(array_key_exists('HTTPS', $_SERVER) && $_SERVER['HTTPS'] === 'off'){
					$protocol="http://";	
			}else if(array_key_exists('HTTPS', $_SERVER) && $_SERVER['HTTPS'] !== ''){
				$protocol="https://";
			}
			
			//$protocol="https://"; //for tmp purpose, which is used for development 
			
		    expDebug::dPrint('Protocol : '.$protocol.$_SERVER["SERVER_NAME"],5); 
			
			$mySforceConnection = new SforcePartnerClient();
			
			expDebug::dPrint('Getting the SOAP Connection...',5);  
		
			//$mySoapClient = $mySforceConnection->createConnection($protocol.$_SERVER["SERVER_NAME"]."/sites/all/modules/override/salesforce_integration/soapclient/partner.wsdl.xml");
		
			if(trim($_SERVER["SERVER_NAME"])!=''){
				$mySoapClient = $mySforceConnection->createConnection($protocol.$_SERVER["SERVER_NAME"]."/sites/all/modules/override/salesforce_integration/soapclient/partner.wsdl.xml");
			}else{
				$config=getConfig("exp_sp");
				$site_url=trim($config["admin_site_url"]);
				expDebug::dPrint('$site_url : '.$site_url,5);
				$mySforceConnection->createConnection($site_url."/sites/all/modules/override/salesforce_integration/soapclient/partner.wsdl.xml");
			}
			
			$loginResult=new stdclass();
			
			$loginResult->sessionId=$session_id;
			$loginResult->serverUrl=$serverURL;
			
			$mySforceConnection->_setLoginHeader($loginResult);
			
			return $mySforceConnection; 
	   
	  }catch (Exception $ex) {
	  	watchdog_exception('getSalesforceConnection', $ex);
	  	expertusErrorThrow($ex);
	  }
  
}   
 

/**
 ** getSalesforceUserDetails() - Get user details from salesforce using Rest API
 **/

function getSalesforceUserDetails($sf_arr){

	try{ 

		expDebug::dPrint('$sf_arr = '.print_r($sf_arr,true),5);

		$session_id=trim($sf_arr['session_id']);
		$server_url=trim($sf_arr['server_url']);
		$email=trim($sf_arr['email']);

		//Check the salesforce session, which identify that whether user comes from salesforce or not

		if(empty($session_id) || empty($server_url) || $session_id=="" || $server_url==""){ 
			expDebug::dPrint("Unable to Launch. Session Information or the Salesforce URL is missing",5);
			return "";
		}

		require_once $_SERVER["DOCUMENT_ROOT"].'/sites/all/modules/override/salesforce_integration/salesforce_integration_chatter.inc';


		//Check oAuth Tokens using setup sf credential in salesforce (i.e. Consumer key , secret key, user name and password)
			
		$oAuth_token = get_sf_oauth_token_response("2");  
			
		expDebug::dPrint('$oAuth_token_response = ' . print_r($oAuth_token, true),4);

		if(!isset($oAuth_token) || $oAuth_token['instance_url']=="" || $oAuth_token['access_token']=="" || is_null($oAuth_token)){
			expDebug::dPrint('Unable to get oAuth_token_response from Salesforce for given credentials. Please check salesforce consumer key and secret key or Salesforce session',4);
			return "";
		}  

		$user_search_query = "SELECT Id,userName,FirstName,LastName,Email,Phone,Title,EmployeeNumber,Street,State,City,Country,Department,UserRoleId from User where Email='".$email."' LIMIT 1";

		//$user_search_query = "SELECT Id,userName,FirstName,LastName,Email,Phone,Title,EmployeeNumber,Street,State,City,Country,Department,UserRoleId from User where Id='00528000001UvkRAAS' LIMIT 1";

		$user_search_response=do_curl_get($oAuth_token,'/services/data/v20.0/query',array(q=>$user_search_query));
			
		expDebug::dPrint('$user_search_response = ' . print_r($user_search_response, true),4);

		$sf_user_email = $user_search_response['records'][0]['Email'];

		expDebug::dPrint('$sf_user_email  = ' . $sf_user_email ,4);

		if(empty($sf_user_email) || is_null($sf_user_email) || trim($sf_user_email)==""){
			//throw new Exception(' The email field in the salesforce is empty. Need it for creating a session in ExpertusONE');
			expDebug::dPrint("No user details available for logged in user at salesforce.Please check logged in user available or not in salesforce",5);
			return "";
			//echo t("SFMSG037");
			//exit();
		}


		//If user available in salesfroce

		//$userInfo=new object();
		$userInfo->userId=trim($user_search_response['records'][0]['Id']);
		$userInfo->userName=trim($user_search_response['records'][0]['Username']);
		$userInfo->userFirstName=trim($user_search_response['records'][0]['FirstName']);
		$userInfo->userLastName=trim($user_search_response['records'][0]['LastName']);
		$userInfo->userEmail=trim($user_search_response['records'][0]['Email']);
		$userInfo->userPhone=trim($user_search_response['records'][0]['Phone']);
		$userInfo->userDepartment=trim($user_search_response['records'][0]['Department']);
		$userInfo->userTitle=trim($user_search_response['records'][0]['Title']);
		$userInfo->userRoleId=trim($user_search_response['records'][0]['UserRoleId']);
		$userInfo->userEmployeeNumber=trim($user_search_response['records'][0]['EmployeeNumber']);

		//Get user role

		$userInfo->userRole="";

		if($userInfo->userRoleId!=''){
			$userRole_soqlQuery = "SELECT UserRole.Name FROM UserRole WHERE UserRole.Id='".$userInfo->userRoleId."'";
			$user_role_details_response=do_curl_get($oAuth_token,'/services/data/v20.0/query',array(q=>$userRole_soqlQuery));
			expDebug::dPrint('$user_role_details_response = ' . print_r($user_role_details_response, true),4);
			$userInfo->userRole=trim($user_role_details_response['records'][0]['Name']);
		}

		expDebug::dPrint('Salesforce UserInfo = ' . print_r($userInfo, true),4);
			
		return $userInfo;

	}catch (Exception $ex) {
		watchdog_exception('getSalesforceUserDetails', $ex);
		expDebug::dPrint('getSalesforceUserDetails $Exception Error = '.$ex  , 4);
		echo t("SFMSG037");
		//expertusErrorThrow($ex);
	}

} 

/** salesforceUserAutoCreation()
 ** - Check the user in ExpertusONE. If not exists in LMS, create as new user by using salesforce account and validating the account after creation
 **/

function salesforceUserAutoCreation($sf_arr,$req_user_email=""){
	
	try
	{
			
		$userInfo=new stdClass(); //Create object
			
		//Get user details from salesforce
		
		if(trim($sf_arr['from_iFrame'])=="1"){
			$userInfo=getSalesforceUserDetailsforiFrame($sf_arr); 
			
			$sf_arr['sf_org_id']=$userInfo->organizationId;
			$sf_arr['sf_org_name']=$userInfo->organizationName; 
			$sf_arr['exp_org_id']="";
			
		}else{
			$userInfo=getSalesforceUserDetails($sf_arr);  
		} 

		if($userInfo==""){
			expDebug::dPrint(" Not getting user details from salesforce ",5);
			echo t("SFMSG037");
			exit();
		}
		 
		$userInfo->exp_org_id=trim($sf_arr['exp_org_id']);
		$userInfo->organizationId=trim($sf_arr['sf_org_id']);
		$userInfo->organizationName=trim($sf_arr['sf_org_name']);
			
		expDebug::dPrint('Salesforce UserInfo with ORG = ' . print_r($userInfo, true),4);
			
		//Check user are there in LMS
		$userExist=authorizeUserinExpertusONE($userInfo->userEmail); 
			
		expDebug::dPrint('userExist in LMS = '.$userExist,5);
			
		if(!$userExist){
			expDebug::dPrint("User Does not exist in E1. Create a new user - : ".$userInfo->userEmail,4);
			createUserInExpertusONE($userInfo);
			authorizeUserinExpertusONE($userInfo->userEmail);
		}
		
		if($req_user_email=="1" && trim($userInfo->userEmail)!=""){
			return trim($userInfo->userEmail);
		}
		
		 
			
	}catch(Exception $ex){
		expDebug::dPrint(" Exception while processing Salesforce autenticate ".$ex->getMessage(),5);
		expDebug::dPrint($ex,5);
		watchdog_exception('salesforceUserAutoCreation', $ex);
		expertusErrorThrow($ex);
		//print_r('An error occured.Contact support.');
		echo t("SFMSG037");
		exit();
	}

}


/**
** getSalesforceUserDetailsforiFrame() - Get user details from salesforce
**/ 

function getSalesforceUserDetailsforiFrame($sf_arr){

	  try{
	  	
		    expDebug::dPrint('$sf_arr = '.print_r($sf_arr,true),5);	  
	  
	       $session_id=trim($sf_arr['session_id']);
		   $server_url=trim($sf_arr['server_url']);
		 
		
		  	require_once ('soapclient/SforcePartnerClient.php');
			
			expDebug::dPrint('SalesForce Session : '.$session_id);
			expDebug::dPrint('Server URL : '.$server_url);
			
			if(empty($session_id) || empty($server_url) || $session_id=="" || $server_url==""){ 
				expDebug::dPrint("Unable to Launch. Session Information or the Salesforce URL is missing",1);  
				return "";
			} 
			 
			$mySforceConnection = getSalesforceConnection($session_id,$server_url);
			
			expDebug::dPrint("Saleforce connection obtained... ",5);
			
			$userInfo=$mySforceConnection->getUserInfo();

			expDebug::dPrint('$userInfo = '.print_r($userInfo,true),5); 
			
			if(empty($userInfo) || empty($userInfo->userEmail)){ 
				expDebug::dPrint("No user details available for logged in user at salesforce.Please check logged in user available or not in salesforce",5);
				return "";
			} 
			
			//Get Addition Information
			$userId=$userInfo->userId;
			$filedList='FirstName,LastName,Email,Phone,Title,EmployeeNumber,Street,State,City,Country,Department,UserRoleId';
			$userAdditionalObj=$mySforceConnection->retrieve($filedList,"User",array($userId));  
			
			$userInfo->userId=$userId;  
			$userInfo->userName=$userAdditionalObj[0]->fields->Email;
			$userInfo->userFirstName=$userAdditionalObj[0]->fields->FirstName;
			$userInfo->userLastName=$userAdditionalObj[0]->fields->LastName;
			$userInfo->userEmail=$userAdditionalObj[0]->fields->Email;
			$userInfo->userPhone=$userAdditionalObj[0]->fields->Phone;  
			$userInfo->userDepartment=$userAdditionalObj[0]->fields->Department;
			$userInfo->userTitle=$userAdditionalObj[0]->fields->Title;
			$userInfo->userRoleId=$userAdditionalObj[0]->fields->UserRoleId;
			$userInfo->userEmployeeNumber=$userAdditionalObj[0]->fields->EmployeeNumber;   
			  
			//Get user role

		   $userInfo->userRole="";
		   
		   if($userInfo->userRoleId!=''){
		   	
					//Get User Roles from Salesforce user tables
					$userRole_soqlQuery = "SELECT UserRole.Name FROM UserRole WHERE UserRole.Id='".$userInfo->userRoleId."'";
					$userRole_soqlQueryObj=$mySforceConnection->query($userRole_soqlQuery,false); 
					expDebug::dPrint('userRole_soqlQueryObj = ' . print_r($userRole_soqlQueryObj, true),4);
					
					$userRole= html_entity_decode(strip_tags($userRole_soqlQueryObj->records[0]->any));
					expDebug::dPrint('$userRole = '.$userRole,1); 
					
					$userInfo->userRole=$userRole; 
					
			} 
			
			
			expDebug::dPrint('Salesforce UserInfo = ' . print_r($userInfo, true),4); 
			
			//echo "<pre> userInfo=";print_r($userInfo);echo "</pre>";
			
			return $userInfo;
	   
	  }catch (Exception $ex) {
	  	watchdog_exception('getSalesforceUserDetailsforiFrame', $ex);
	  	expDebug::dPrint('getSalesforceUserDetails $Exception Error = '.$ex  , 4);
		echo t("SFMSG037");
	  } 

}


/** 
** addUserListValues() - Create the list values for approriate list values
**/  

function addUserListValues($list_code_prefix,$list_name){     

	  try{   
		    require_once $_SERVER["DOCUMENT_ROOT"].'/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_setup/exp_sp_administration_setup.inc'; 
		    $createuserid="1"; 
		    $form_state = array();
			$form_state['values']['name']=$list_name;
			$form_state['values']['code']=$list_code_prefix;
			$form_state['values']['userid']=$createuserid;  
			$returnObj = addNewListValuesByRestAPI($form_state,$createuserid);    
		    expDebug::dPrint('$returnObj = ' . print_r($returnObj, true) , 4);
			$list_code=getUserListValues($list_code_prefix,$list_name);
			return $list_code;
		
	  }catch (Exception $ex) {
	  	watchdog_exception('addUserListValues', $ex);
	  	expertusErrorThrow($ex);
	  } 
		
}


/** 
** getUserListValues() - get the list values from approriate list values
**/ 

function getUserListValues($list_code_prefix,$list_name){
   
	  try{
	       
	        $list_code_arr=getProfileItemNamesKeyed($list_code_prefix,'cre_sys_lng_eng',false,'',$list_name,1);
		    expDebug::dPrint(' $list_code_arr = ' . print_r($list_code_arr, true) , 4);
		    
		    $count_list_code_arr=count($list_code_arr);
		    expDebug::dPrint(' $count_list_code_arr = ' .$count_list_code_arr , 5);
		    
		    if(empty($list_code_arr) && $count_list_code_arr<=0){
		        expDebug::dPrint('List item is not found', 5);
		        $list_code=addUserListValues($list_code_prefix,$list_name);  
		        return $list_code;
		    }else{
		        expDebug::dPrint('List item found', 5);
		       foreach($list_code_arr as $key=>$val){
		         $list_code=$key;
		      }      
		   } 
		    
		   expDebug::dPrint('List item code = '.$list_code, 5);
		      
		   return $list_code; 
	   
	  }catch (Exception $ex) {
	  	watchdog_exception('getUserListValues', $ex);
	  	expertusErrorThrow($ex);
	  } 
			
}

/** 
** getExpertusOrgId() - Get expertus organization id and salesforce consumer secret key according to salesforce organization id
**/  
 
function getExpertusOrgId($org_key_sf,$tmp_exp_org_id=""){
  
	  try{
	  
	       expDebug::dPrint('$org_key_sf = ' . print_r($org_key_sf, true),4); 
		   expDebug::dPrint('$tmp_exp_org_id = ' . print_r($tmp_exp_org_id, true),4); 
		   
	        $query_org=db_select('slt_organization','org');
			$query_org->innerJoin('slt_custom_fields','scf','scf.entity_type=\'organization\' and scf.label=\'Salesforce Org ID\' and scf.entity_id=org.id');
			$query_org->leftJoin('slt_cstm_salesforce_settings','scss','scss.exp_org_id=org.id');
			$query_org->fields('org',array('id')); 
			$query_org->fields('scss',array('consumer_secret_key'));   
			$query_org->fields('scss',array('enr_syncup'));  
			$query_org->condition('scf.value',$org_key_sf);
		    $query_org->condition('org.status','cre_org_sts_act');
			
			if(trim($tmp_exp_org_id)!=''){
				$query_org->condition('org.id',$tmp_exp_org_id);
			}
			
			$result_org = $query_org->execute();
			
			$count=$result_org->rowCount();
			$results=$result_org->fetchAll();
			
			expDebug::dPrint('Org Result = ' . print_r($results, true),4); 
			
			$consumer_secret=""; //Default is NULL
			
			$exp_org_id="";
			
			$enr_syncup="";
			 
			if($count>0){ 
			
				foreach ($results as $row => $row_value) 
				{ 
				  $consumer_secret=$row_value->consumer_secret_key;
				  $exp_org_id=$row_value->id;
				  $enr_syncup=$row_value->enr_syncup;
				}
			    expDebug::dPrint("Consumer secret key = ".$consumer_secret,5); 
			    expDebug::dPrint("Exp Org ID = ".$exp_org_id,5);   
				expDebug::dPrint("Orgnaizaion Sync-up Option - enr_syncup = ".$enr_syncup,5);   
			}
			else{
			    //echo "<br>Error: Consumer secret key is not found in organization custom table";
			    //echo "<br>".t("SFMSG035");
			    expDebug::dPrint("Error: Consumer secret key is not found in organization custom table",5);   
			} 
			
			 $org_arr=array("");
		     $org_arr["consumer_secret_key"]=$consumer_secret;
		     $org_arr["exp_org_id"]=$exp_org_id;  
			 $org_arr["enr_syncup"]=$enr_syncup;  
			
			 expDebug::dPrint('Org Array = ' . print_r($org_arr, true),4); 
			
			 return $org_arr;
			 
	   
	  }catch (Exception $ex) {
		  	watchdog_exception('getExpertusOrgId', $ex);
		  	expertusErrorThrow($ex);
	  } 

}
 
/** 
** createGetExpertusOrgId() - Create organization in Expertusone, which is not available. If exists , retrieve the expertus org id
**/  

function createGetExpertusOrgId($tmp_sf_org_key,$tmp_sf_org_name){ 

	  try{
	  
	        $query_org=db_select('slt_organization','org'); 
			$query_org->fields('org',array('id'));   
			$query_org->condition('org.name',$tmp_sf_org_name);
			$query_org->condition('org.status','cre_org_sts_del','!=');
			
			$result_org = $query_org->execute();
			
			expDebug::dPrintDBAPI('$query_org select = ' , $query_org,5);
			$count=$result_org->rowCount();
			$results=$result_org->fetchAll();
			
			expDebug::dPrint('Expertus Org Result = ' . print_r($results, true),4);  
			
			$exp_org_id="";
			 
			if($count>0){ 
			
				foreach ($results as $row => $row_value) 
				{  
				  $exp_org_id=$row_value->id;
				} 
			    expDebug::dPrint("Existing Exp Org ID = ".$exp_org_id,5);   
			}
			else{ 
			
			    expDebug::dPrint("Salesforce organization is not available in ExpertusOne.Creating new org ...",5);
			    			    
			    include_once $_SERVER["DOCUMENT_ROOT"].'/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_people/exp_sp_administration_organization/exp_sp_administration_organization.inc';
			    
			    $form_state['values']['name']=$tmp_sf_org_name;
				$form_state['values']['description']=$tmp_sf_org_name." - ".$tmp_sf_org_key;
				$form_state['values']['type']="cre_org_typ_ext";
				$form_state['values']['status']="cre_org_sts_act";
				$createuserid="1";
	
				$returnObj = addNewOrganizationByRest($form_state,$createuserid);		
				expDebug::dPrint('$returnObj = ' . print_r($returnObj, true),4);  						
				$exp_org_id=$returnObj[0]->id;
				
			    expDebug::dPrint("New Exp Org ID = ".$exp_org_id,5);   
			    
			    //Create custom field for newly created org
			    if($exp_org_id!=""){
			    	$insertCfStmt = db_insert('slt_custom_fields');
			    	$cf_fields = array(
			    			'entity_id'  => $exp_org_id,
			    			'entity_type' => 'organization',
			    			'label'       => 'Salesforce Org ID',
			    			'value'       => $tmp_sf_org_key,
			    			'created_by'  => $createuserid,
			    			'created_on'  => now(),
			    			'updated_by'  => $createuserid,
			    			'updated_on'   => now()
			    	);
			    	$insertCfStmt->fields($cf_fields);
			    	expDebug::dPrintDBAPI('$insertCfStmt obj = ' , $insertCfStmt);
			    	$cf_ret_id = $insertCfStmt->execute();
			    	expDebug::dPrint('$cf_ret_id = ' . print_r($cf_ret_id, true) , 5);
			    }
	
			} 
			 
			 return $exp_org_id;			 
	   
	  }catch (Exception $ex) {
		  	watchdog_exception('createGetExpertusOrgId', $ex);
		  	expertusErrorThrow($ex);
	  } 

 
} 

 
/** 
** createUserInExpertusONE() - Create ExpertusONE user if not exists in LMS using Salesforce user account details
**/  

function createUserInExpertusONE($userInfo){

	  try{
	  
	       expDebug::dPrint('$userInfo = ' . print_r($userInfo, true),4);  
	       
		   	$userId=$userInfo->userId;
			
			if(empty($userId)){
			    expDebug::dPrint("Unable to find userID in the salesforce response. Aborting",5); 
				throw new Exception(' Unable to find userID in the salesforce response. Aborting');
			} 
		 	
		 	//Check the necessary details from salesforce to create the new account in LMS. If user id, user name, email id is there, Account will be created autometically in LMS
		 	
			if($userInfo->userId!="" && $userInfo->userName!="" && $userInfo->userEmail!=""){
			
				include_once $_SERVER["DOCUMENT_ROOT"].'/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_people/exp_sp_administration_user/exp_sp_administration_user.inc';
				
				$form_state = array();
				
				//Add department if any in salesforce
				$sf_dept_name=trim($userInfo->userDepartment);
				if($sf_dept_name!=""){
				    $sf_dept_code=getUserListValues("cre_usr_dpt",$sf_dept_name); 
				    if($sf_dept_code!=""){
					  $form_state['values']['deptcode'] = $sf_dept_code; 
					}
				}
				
				//Add Jobtitle if any in salesforce
				$sf_job_title=trim($userInfo->userTitle);
				if($sf_job_title!=""){
				    $sf_job_title_code=getUserListValues("cre_usr_jtl",$sf_job_title); 
				    if($sf_job_title_code!=""){
					  $form_state['values']['jobtitle'] = $sf_job_title_code; 
					}
				} 
				
				//Add Jobrole if any in salesforce
				$sf_job_role=trim($userInfo->userRole);
				if($sf_job_role!=""){
				    $sf_job_role_code=getUserListValues("cre_usr_jrl",$sf_job_role); 
				    if($sf_job_role_code!=""){
					  $form_state['values']['jobrole'] = $sf_job_role_code; 
					}
				} 		
				
				$form_state['values']['email']=$userInfo->userEmail;
				$form_state['values']['user_name']=$userInfo->userEmail;
				$form_state['values']['first_name']=$userInfo->userFirstName;
				$form_state['values']['last_name']=$userInfo->userLastName;
				$form_state['values']['phone_no']=$userInfo->userPhone;
				$form_state['values']['employee_no']=$userInfo->userEmployeeNumber;
				
				if($userInfo->exp_org_id!=""){ // If expertus org id found using the salesforce organization ID then use diectly or else need to find the exp_org_id according to logged in salesforce user
				      $form_state['values']['org_id']=$userInfo->exp_org_id;
				}else{
				   
				      // If expertus ord is not identify, need to find the exp_org_id according to logged in salesforce user
				      
					  if($userInfo->organizationId!=""){ //Get request from user info
					  
					     $last_3_char_from_sf_org_id=strtolower(substr($userInfo->organizationId,-3));
					     
					     //Trim the 3 characters (EAO) from Organization id. Those characters are autometically appended when get the org ID , which should be remove
					     expDebug::dPrint('$last_3_char_from_sf_org_id = '.$last_3_char_from_sf_org_id,5);  
					     $tmp_sf_org_key=""; 
					     //if($last_3_char_from_sf_org_id=="eao"){
					         $tmp_sf_org_key=substr($userInfo->organizationId,0,-3);
					     //} 
					     expDebug::dPrint('After remove end of 3 char from saleforce org id. $tmp_sf_org_key = '.$tmp_sf_org_key,5);  
					     
					     //$org_arr=getExpertusOrgId($tmp_sf_org_key);
					     $tmp_sf_org_name=$userInfo->organizationName;
					     $exp_org_id=createGetExpertusOrgId($tmp_sf_org_key,$tmp_sf_org_name);  
					     
					     $form_state['values']['org_id']=$exp_org_id; 
					  }
				}	
				
					
				$form_state['values']['status'] = 'cre_usr_sts_atv' ;		
				
				$createuserid="1";
				
				$returnObj = addNewUserByRestAPI($form_state,$createuserid);
				expDebug::dPrint('$returnObj = ' . print_r($returnObj, true),4);  	
				global $user;
				$user=NULL; 
				
			}else
			{
				throw new Exception(' User creation failed. Unable to get the required fields from Salesforce');
				expDebug::dPrint("User creation failed. Unable to get the required fields from Salesforce",5); 
			}  
	   
	  }catch (Exception $ex) {
		  	watchdog_exception('createUserInExpertusONE', $ex);
		  	expertusErrorThrow($ex);
	  }
 
} 

/** 
** authorizeUserinExpertusONE() - Authroize user in Expertus ONE 
**/   

function authorizeUserinExpertusONE($identity){

	  try{
		   
		   	if($identity === 'admin'){
				throw new Exception("user name received as admin. This is reserved for internal use");
				expDebug::dPrint("user name received as admin. This is reserved for internal use",5); 
			}
			
			$_SESSION['salesforce_session']="1";
		    expDebug::dPrint("Set Salesforce Session = ".$_SESSION['salesforce_session'], 5);
				    
		
			global $user;
			
			expDebug::dPrint('$user = '.print_r($user,true), 5);
		
			if($user){
				$user=NULL;
			} 
		
			expDebug::dPrint("Received SalesForce auth request for ".$identity,5); 
			 
			$account = user_load_by_mail($identity);
			
			expDebug::dPrint('$account = '.print_r($account,true), 5);
			
			if (isset($account->uid)) {
				 expDebug::dPrint("User Exists. Creating a session",5);
				 $user=user_load($account->uid);
				 
				  // Check if user is blocked.
				 $state['values']['name'] = $account->name;
				 user_login_name_validate(array(), $state);
				 
				  if (!form_get_errors()) { 
					// Set the Gloabl variable to indicate that the authentication is successful. 
					global $ssoauthenticated;
					$ssoauthenticated = 'salesforce';
					$ssoauthenticated="true";
					$edit["values"]["name"]=$account->name;
			        $edit["values"]["pass"]=$account->pass;
			        //user_login_finalize($edit);
				  }else{
					// This scenario may occur becasue of blocked accounts.
					echo t("SFMSG036").". ".t("SFMSG037");
					//throw new Exception('We are sorry. Unable to locate your account. Please contact support for details.');
					expDebug::dPrint("We are sorry. Unable to locate your account. Please contact support for details.",5);
					exit(); 
				  }  
				    
				  return TRUE;
				  
			}else{
		            // Id does not exist, we may have to create one.
			     return FALSE;
			}   
			   
	  }catch (Exception $ex) {
		  	watchdog_exception('authorizeUserinExpertusONE', $ex);
		  	expertusErrorThrow($ex);
	  } 
}  

/** 
** processSignedRequest() - Process signed request and  get the user details from salesforce, render the widget
**/ 

function processSignedRequest($mail){

		try
		{
			global $user;
			
			$account=user_load_by_mail($mail);
			
			expDebug::dPrint("account mail=.$account->mail",5);
			expDebug::dPrint("account uid=.$account->uid",5);
			
			if (isset($account->uid)){
				$user=$account;
			}else{
			
				//echo 'Unable to locate the user record';
				echo t("SFMSG036");
				expDebug::dPrint("Unable to locate the user record",5);
				exit();
			} 
			 
			try{
			  drupal_session_regenerate();
			}catch(Exception $ex1){
			  //Noting do
			  expDebug::dPrint("Duplicate session occured.",5);
			} 
			
			if((!isset($_COOKIE) || empty($_COOKIE) || trim($_COOKIE['SPLearnerInfo'])=="" || trim($_COOKIE['SPCertificate'])=="")){
					
				expDebug::dPrint('Blocked third party cookie from browser.',5);
			
				//Get user details
				expDebug::dPrint('$_SESSION[sf_user_details] = '.print_r($_SESSION['sf_user_details'],true),5);
			
				/*if(isset($_SESSION['sf_user_details']) && !empty($_SESSION['sf_user_details'])){
				 $usr_det=$_SESSION['sf_user_details'];
				}else{*/
				$usr_det=get_sf_user_info_from_lms("email",$mail);
				expDebug::dPrint('$usr_det from DB = '.print_r($usr_det,true),5);
				$_SESSION['sf_user_details']=$usr_det;
				//}
			
				$user->uid=trim($usr_det['usr_uid']);
				$user->language=trim($usr_det['usr_language']);
				
				//set logged user id session even if cookie set in browser level on first time 
				$_SESSION['logged_user_id']=$usr_det['per_id']; 
							
				// Set Language
			
				$language_list = language_list();
				
				expDebug::dPrint('$language_list='.print_r($language_list,true),5);
				
				global $language; 
 				
				$language = $language_list[$user->language];  
			
				$_SESSION['Pref_Language']=trim($usr_det['preferred_language']);
			
				expDebug::dPrint('$languages = '.print_r($language,true),5);
			}
				
			
			//set_sf_user_session_from_signed_request();
			
			$widget = array('#theme' => 'widget',);
			print drupal_render($widget);	 
		
		}catch(Exception $ex){ 
			expDebug::dPrint(" Exception while processing Salesforce Show Widget ".$ex->getMessage(),5);
			expDebug::dPrint($ex,5); 
			watchdog_exception('processSignedRequest', $ex);
	  	    expertusErrorThrow($ex); 
			//print_r('An error occured.Contact support.');
			echo t("SFMSG037");
			exit();
		}

} 

/**
 ** set_sf_user_session_from_signed_request() - Set SF user session in LMS if mismatch or conflict beteween SF and LMS
 **/

function set_sf_user_session_from_signed_request(){
	
	try{
		
		expDebug::dPrint("Email from Salesforce Signed Request : ".$_SESSION['sf']['email'],5);
		
		if($_SESSION['sf']['email']!=''){
		
			$logged_in_user_id=getSltpersonUserId();
		
			expDebug::dPrint("logged_in_user_id : ".$logged_in_user_id,5);
			
			$lms_user_id_from_sf=getUserIdFromEmail($_SESSION['sf']['email']);
		
			expDebug::dPrint("lms_user_id_from_sf : ".$lms_user_id_from_sf,5);  
					
			if(($logged_in_user_id!=$lms_user_id_from_sf || $logged_in_user_id==0)&& trim($_COOKIE['SPLearnerInfo'])!='' && trim($_COOKIE['SPCertificate'])!=''){
				echo t("Session mismatched. Another session has maintaining in same browser.");
				expDebug::dPrint("Session Conflicted. Another session has maintaining in same browser.",5);
				//exit(); 
				 $_SESSION['logged_user_id']=$lms_user_id_from_sf;  				 
				 expDebug::dPrint("Session changed from user id $logged_in_user_id to $lms_user_id_from_sf to avoid session conflict issue.",5);
				 drupal_goto("canvas/mylearning");
			}  
				
		}else{
			//drupal_goto("salesforce/canvas/authenticate");
		} 
		
	}catch (Exception $ex) {
		  	watchdog_exception('set_sf_user_session_from_signed_request', $ex);
		  	expertusErrorThrow($ex);
	} 
}

/** 
** canvas_show_canvas() - Show canvas page after check the user logged-in process
**/ 

function canvas_show_canvas(){

		try{
				expDebug::dPrint('$user_is_logged_in = '.user_is_logged_in(),5);  
				
				expDebug::dPrint('$_SESSION[sf][email] = '.print_r($_SESSION['sf']['email'],true),5);
							     	
				if(!user_is_logged_in() && trim($_SESSION['user_is_logged_in'])=="" || ($_SESSION['sf']['email']=="")){  
					expDebug::dPrint('ExpertusONE session expired or logged out. Need to signin to view catalog/mylearning/reports',5);
					echo t("SFMSG037");
					exit(); 
				}else{ //if login  
					
					//set_sf_user_session_from_signed_request();
					
					$widget = array('#theme' => 'widget',);
					print drupal_render($widget);
			    }
				
		}catch(Exception $ex){		
			expDebug::dPrint(" Exception while processing Salesforce Show Widget ".$ex->getMessage(),5);
			expDebug::dPrint($ex,5);
			watchdog_exception('canvas_show_canvas', $ex);
	  	    expertusErrorThrow($ex); 
			//print_r('An error occured.Contact support.');
			echo t("SFMSG037");
			exit();
		}

}

/** 
** canvas_show_error() - Show canvas error if any error comes in salesforce
**/ 

function canvas_show_error(){

	 try{ 	  
   			echo t("SFMSG037");
    		exit();
	   
	  }catch (Exception $ex) {
		  	watchdog_exception('canvas_show_error', $ex);
		  	expertusErrorThrow($ex);
	  }
	
}

/** 
** getCanvasMenu() - Get canvas menu from LMS
**/ 

function getCanvasMenu(){

	  try{
		   	$items=menu_navigation_links('menu-canvas-menu',0);
			$menuitems = array();  
			
			//Check report access according to logged-in user 
			
			global $user;
			
			expDebug::dPrint('$user = ' . print_r($user, true),4); 
			
			$drupalUid=$user->uid;
			
			$slt_per_id=getUserIdFromDrupalUid($drupalUid); 
			 
			expDebug::dPrint('$slt_per_id = '.$slt_per_id,5);
			 
			if((!user_access('New Report Perm') && !is_manager($slt_per_id) && !is_instructor($slt_per_id))){ 
  		        $report_permission_for_user="0";
      		}else{
      		    $report_permission_for_user="1";
      		}
      			        
	        expDebug::dPrint('$report_permission_for_user = '.$report_permission_for_user,5);
	        		
			foreach($items as $item){
			
				if($item['href'] == 'canvas/reports'){
									
					if($report_permission_for_user=="1"){ // If report permission has the user and uf user is manager or instructor, having permission
					   $menuitems[] = $item;
					}  
			   		
				}else if($item['href'] == 'canvas/myteam'){
				   
				   if(is_manager($slt_per_id)){ //Only for Manager
				       $menuitems[] = $item;
				   } 
				
				}else{
					$menuitems[] = $item;
				}
				
			}
			return $menuitems;
	   
	  }catch (Exception $ex) {
		  	watchdog_exception('getCanvasMenu', $ex);
		  	expertusErrorThrow($ex);
	  }
	 
}
 
 
/** 
** getSearchBox_block() - Render Search box 
**/

function getSearchBox_block(){
	  try{  
	  
		  	$block =widget_block_load('exp_sp_lnrsearch', 'tab_search','expertusone');
			$block_content = _block_render_blocks(array($block));
			$build = _block_get_renderable_array($block_content);
			return $build;
	   
	  }catch (Exception $ex) {
		  	watchdog_exception('getSearchBox_block', $ex);
		  	expertusErrorThrow($ex);
	  }
	 
}

/**
 * Generate panel configurtion block contents
 * @return mixed $build
 */
function getPanelConfigurationBox() {
	try{
		$block = widget_block_load('exp_sp_learning', 'tab_user_customization','expertusoneV2');
		$block_content = _block_render_blocks(array($block));
		$build = _block_get_renderable_array($block_content);
		return $build;
	}catch (Exception $ex) {
		watchdog_exception('getPanelConfigurationBox', $ex);
		expertusErrorThrow($ex);
	}
} 
function getPanelConfigurationTranscriptBox() {
	try{
		$transcript_block = widget_block_load('exp_sp_mytranscript','mytranscript_mylearning',$theme_key);
		expDebug::dPrint(' >>>> Loading My Transcript transcript_block---------------- '.print_r($transcript_block,1),5);
		$transcript_block_content = _block_render_blocks(array($transcript_block));
		$build = _block_get_renderable_array($transcript_block_content);
		return $build;
	}catch (Exception $ex) {
		watchdog_exception('getPanelConfigurationTranscriptBox', $ex);
		expertusErrorThrow($ex);
	}
}
function getPanelConfigurationCalendarBox() {
	try{
		$calender_block = widget_block_load('exp_sp_lnrcalendar','mycalendar_mylearning',$theme_key);
		$calender_block_content = _block_render_blocks(array($calender_block));
		$calender_build = _block_get_renderable_array($calender_block_content);
		return $calender_build;
	}catch (Exception $ex) {
		watchdog_exception('getPanelConfigurationCalendarBox', $ex);
		expertusErrorThrow($ex);
	}
}
?>