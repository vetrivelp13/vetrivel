<?php 

include_once $_SERVER["DOCUMENT_ROOT"].'/apis/oauth2/Client.php';

/**
 * Init Function
 * @author ramkumarj
 *
 */
function exp_sp_oauth_integration_init(){
	try{
		// This init Triger Only For the Client Creation Process...
		if(arg(0)=='clientcreation')
		{
			$css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
			$js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
			// THEME STYLE SHEET
			drupal_add_css(drupal_get_path('module', 'exp_sp_oauth_integration') .'/exp_sp_oauth_integration.css', $css_theme_optional);
			drupal_add_js(drupal_get_path('module', 'exp_sp_oauth_integration') .'/exp_sp_oauth_integration.js', $js_module_optional);
			drupal_add_js(drupal_get_path('module', 'exp_sp_administration').'/exp_sp_administration.js', $js_module_optional);
		}
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_oauth_integration_init', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * Implementation of hook_menu().
 *  @author ramkumarj
 */
function exp_sp_oauth_integration_menu() {
	try{
		$items =array();

		$items['clientcreation'] = array( //this creates a URL that will call The Form client_creation_type_form
				'title' => 'Client Creation Type', //page title
				'description' => 'Client Creation Form Type',
				'page callback' => 'drupal_get_form', // use drupal_get_form
				'page arguments' => array('client_creation_type_form'), // put the name of the form here
				'access callback' => 'user_access',// Access Set for User
				'access arguments' => array('administer access control'),
		);

		$items['clientcreation/%'] = array(
				'title' => 'Client Form',
				'page callback' => 'drupal_get_form',
				'page arguments' => array('exp_sp_Client_basic_form',1),
				'access callback' => 'user_access',
				'access arguments' => array('administer access control'),
		);

		return $items;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_oauth_integration_menu', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * Client Creation Type Form
 * @author ramkumarj
 * */
function client_creation_type_form($form, &$form_state) {
	try{
		global $theme_key;
		$form = array();

		$form = newAddEditFormWithCancelAndSave('client_creation_form');
		// Define the form fields
		$typesOfForm = array("insert"=>t('Create Client Key'),"update"=>t('Modify Client Key'),"getdetails"=>t('Get Client Key Details'));
		addDropDownToAddEditForm($form, 'client_type', t('Action'), $typesOfForm, $typesOfForm['insert'], 2, true); //Format

		if($theme_key == 'expertusoneV2') { // Submit Button Alignment
			$button_class= "v2_button_ClientCreation";
		}else{
			$button_class = "v1_button_ClientCreation";
		}
		$saveAttributes['class'][] = 'admin-save-button-middle-bg';
		$saveAttributes['data-wrapperid'] = array('client_creation_type_wrapper');
		$form['savebutton'] = array(
				'#type'   		=> 'submit',
				'#value'  		=> t('LBL986'),
				'#name'  			=> 'save',
				'#prefix' 		=> '<div class="'.$button_class.'"><div class="admin-save-button-left-bg"></div>',
				'#suffix'		  => '<div class="admin-save-button-right-bg"></div></div>',
				'#id' 				=>'save-button',
				'#attributes' => $saveAttributes,
		);
		$form['markups'] = array( // Mark up added For V2 Theme Footer Breaking Issue
				'#type' => 'markup',
				'#markup' => '</div>',
		);
		$form['#prefix'] = '<div id="client_create_form_wrapper" style="width: 560px; min-height: 80px;">';
		$form['#suffix'] = '</div>';
		expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
		return $form;
	}catch (Exception $ex) {
		watchdog_exception('client_creation_type_form', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * Client creation Type form validate
 * @author ramkumarj
 */
function client_creation_type_form_validate($form, &$form_state) {
	try{
		expDebug::dPrint('$form_state value : '.print_r($form_state['values']['client_type'] , true), 4);
		if(empty($form_state['values']['client_type'])){
			// select The Error Messages
			form_set_error('client_type', t('Select the Form Type'));
		}
	}catch (Exception $ex) {
		watchdog_exception('client_creation_type_form_validate', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * Client creation Type form Submit
 * @author ramkumarj
 */
function client_creation_type_form_submit($form, &$form_state) {
	try{
		expDebug::dPrint('$form_state value : '.print_r($form_state['values']['client_type'] , true), 4);
		// Redirect to the Specific Form
		if($form_state['values']['client_type'] == 'insert'){
			$form_state['redirect'] = 'clientcreation/insert';
		}else if($form_state['values']['client_type'] == 'update'){
			$form_state['redirect'] = 'clientcreation/update';
		}else if($form_state['values']['client_type'] == 'getdetails'){
			$form_state['redirect'] = 'clientcreation/getdetails';
		}
	}catch (Exception $ex) {
		watchdog_exception('client_creation_type_form_submit', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * exp_sp_Client_basic_form() - Build the  form.
 * @author ramkumarj
 */
function exp_sp_Client_basic_form($form, &$form_state,$type) {
	try {
		global $theme_key;
		$form = array();
		if($theme_key == 'expertusoneV2') { // Submit Button Alignment
			$button_class= "v2_button_ClientCreation_details";
		}else{
			$button_class = "v1_button_ClientCreation_details";
		}
		expDebug::dPrint(' $form_state Values = ' . print_r($form_state['values'], true) , 5);
		if($type == 'insert' || $type == 'update' || $type == 'getdetails' ) { // Only this URL Type are Allowed.
			// Create a new add/edit form
			$form = newAddEditFormWithCancelAndSave('client-addedit-form');
			// Define the form fields
			$required = (($type == 'insert' || $type == 'update') ? true : false);
			// Select Field
			addTextFieldToAddEditForm($form, 'client_name', t('Client Name'), '', 2, $required, false, 50); // Client Name
			//$scope = array("APP"=>"APP","API"=>"API","DL"=>"DL","ALL"=>"ALL");
			$scope = array("APP"=>"Mobile APP","API"=>"API","DL"=>"Data Load"); // Updated scope....
			addDropDownToAddEditForm($form, 'client_type', t('Scope'), $scope, $scope['APP'], 1, $required); // Client Type

			if($type == 'getdetails'){
				addTextFieldToAddEditForm($form, 'client_url', t('Client URL'), '', 2,false); // Client Url
				addTextFieldToAddEditForm($form, 'client_id', t('Client Id'), '', 2, false); // Client ID
			}else{
				expDebug::dPrint('my base Url : '.$GLOBALS['base_url'], 4);
				addTextFieldToAddEditForm($form, 'client_url', t('Client URL'), '', 2, $required,false,50);// Client Url
				//addHiddenFieldToAddEditForm($form, 'client_url', $GLOBALS['base_url']); // For Temp Purpose using Client Base Url.
			}
			expDebug::dPrint('$form_state value Show_Details : '.print_r($form_state['values']['Show_Details'], true), 4);
			// Hidden Field For Form Build
			addHiddenFieldToAddEditForm($form, 'Show_Details', 'No Record');
			addHiddenFieldToAddEditForm($form, 'type_form', $type);
			$saveButtonId = 'save-button';
			$saveAttributes['class'][] = 'admin-save-button-middle-bg';
			$form[$saveButtonId] = array(
					'#type'   		=> 'submit',
					'#value'  		=> t('LBL124'),
					'#name'  			=> 'save',
					'#prefix' 		=> '<div class="'.$button_class.'"><div class="admin-save-button-left-bg"></div>',
					'#suffix'		  => '<div class="admin-save-button-right-bg"></div></div>',
					'#id' 				=>$saveButtonId,
					// 'callback' => 'userCreateOrderCallBack',
					'#attributes' => $saveAttributes,

			);

			$form['markups'] = array( // Mark up added For V2 Theme Footer Breaking Issue
					'#type' => 'markup',
					'#markup' => '</div>',
			);
			expDebug::dPrint('show Details logic before : '.print_r($form_state['values']['Show_Details'] , true), 4);
			if($form_state['values']['Show_Details'] == 'No Record' || empty($form_state['values']['Show_Details'])){
				$showClass = ($type == 'insert' || $type == 'update') ? 'client_create_form_Normal_action_wrapper' : 'client_create_form_Normal_wrapper';
				$form['#prefix'] = '<div id="'.$showClass.'">';
				$form['#suffix'] = '</div>';
			}else{
				$showClass = ($type == 'insert' || $type == 'update') ? 'client_create_form_Load_action_wrapper' : 'client_create_form_Load_wrapper';
				$form['#prefix'] = '<div id="'.$showClass.'">';

				$clientDetails = $form_state['values']['Show_Details'];
				$form_client_details .= "<table>";
				// output data of each row
				if(!empty($clientDetails['client_name'])){
					$form_client_details .=	 '<tr><td class ="addedit-new-field-title ClientTitle">Client Name</td><td> : </td>
					<td class ="spotlight-item-title" title ="'.$clientDetails['client_name'].'">' .titleController('EXP-SP-OAUTH-MODULE-CLIENTNAME', $clientDetails['client_name'] ,35)."</td></tr>";
				}
				if(!empty($clientDetails['client_id'])){
					$form_client_details .=	 '<tr><td class ="addedit-new-field-title ClientTitle">Client Details</td><td> : </td>
					<td class ="spotlight-item-title" title ="'.$clientDetails['client_id'].'">' .titleController('EXP-SP-OAUTH-MODULE-CLIENTID', $clientDetails['client_id'] ,35)."</td></tr>";
				}
				if(!empty($clientDetails['client_secret'])){
					$form_client_details .=	 '<tr><td class ="addedit-new-field-title ClientTitle">Client Key</td><td> : </td>
					<td class ="spotlight-item-title" title ="'.$clientDetails['client_secret'].'">' .titleController('EXP-SP-OAUTH-MODULE-CLIENTSECRET', $clientDetails['client_secret'] ,35)."</td></tr>";
				}
				if(!empty($clientDetails['redirect_uri'])){
					$form_client_details .=	 '<tr><td class ="addedit-new-field-title ClientTitle">URL</td><td> : </td>
					<td class ="spotlight-item-title" title ="'.$clientDetails['redirect_uri'].'">' .titleController('EXP-SP-OAUTH-MODULE-REDIRECTURL', $clientDetails['redirect_uri'] ,35)."</td></tr>";
				}
				if(!empty($clientDetails['scope'])){
					$form_client_details .=	 '<tr><td class ="addedit-new-field-title ClientTitle">Scope</td><td> : </td>
					<td class ="spotlight-item-title" title ="'.$clientDetails['scope'].'">' .$clientDetails['scope']."</td></tr>";
				}
				$form_client_details .= "</table>";
					
				$form['#suffix'] = "<div id='client_details_wrapper' ><span class ='clientdetails_title'>Client Details</span>
				<br/>".$form_client_details."</div></div>";
			}
		}else {
			$form['No_form'] = array(
					'#type' => 'markup',
					'#title' => t('No form'),
					'#markup' => t('Please Check the URl , Because No form is available for this URL .'),
			);
		}
		return $form;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_Client_basic_form', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * exp_sp_Client_basic_form_validate() - Validate of the exp_sp_Client_basic_form()
 * @author ramkumarj
 */
function exp_sp_Client_basic_form_validate($form, &$form_state,$type) {
	try{
		expDebug::dPrint('$values of the Form validate : '.print_r($form_state['values'], true), 4);
		// values From the form
		$client_name = $form_state['values']['client_name']; // Client name
		$scope = $form_state['values']['client_type']; // Client scope
		$redirect_uri = $form_state['values']['client_url']; // Client URL
		$client_id = $form_state['values']['client_id']; // Client ID
		$type_form = $form_state['values']['type_form']; // Form Type

		if($type_form == 'insert' || $type_form == 'update'){
			if(empty($client_name) || strpos(strtolower($client_name), 'error') !== false ){
				if(empty($client_name)){
					form_set_error('client_name', t('client name is empty .')); // If Client name is empty
				}else{
					form_set_error('client_name', t('client name should not be Contains string as "Error".')); // Client name should not be Error
				}
			}else if(empty($scope)){
				form_set_error('client_type', t('Select the Type of the Api Support .')); // Need To Choose Value
			}else if(empty($redirect_uri) || strpos(strtolower($redirect_uri), 'error') !== false){
				if(strpos(strtolower($redirect_uri), 'error') !== false){
					form_set_error('client_url', t('client Uri should not be Error contain string .')); // Client Url Should be Contains Error
				}else if($type_form != 'update'){
					form_set_error('client_url', t('client Uri should not be empty .')); // Client Url is Should Not be Empty
				}
			}else if(($scope == 'API' || $scope == 'DL') && $redirect_uri != $GLOBALS['base_url']){ // Mobile App and Dataload Validation For URL
				form_set_error('client_url', t('client Uri should be Base Url For this Scope.')); // Client Url is Should Not be Empty
			}
		}else if($type_form == 'getdetails'){
			if(empty($client_name) && empty($client_id) && empty($redirect_uri) && empty($scope)) {
				form_set_error('client_urls', t('Give any one One of the Search type to Search'));
			}
			if(!empty($redirect_uri) && empty($scope) && empty($client_name) && empty($client_id) ){
				form_set_error('client_type', t('Give scope , Scope is need to the Search By Url'));
			}
			if(empty($redirect_uri) && !empty($scope) && empty($client_name) && empty($client_id)){
				form_set_error('client_type', t('Give Url , Url is need to the Search By Scope'));
			}

		}
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_Client_basic_form_validate', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * exp_sp_Client_basic_form_submit() - Submit of the exp_sp_Client_basic_form()
 * @author ramkumarj
 */
function exp_sp_Client_basic_form_submit(&$form, &$form_state) {
	try{
		expDebug::dPrint('$form_state value : '.print_r($form_state['values'], true), 4);
		// values of the form
		$client_name = trim($form_state['values']['client_name']);
		$scope = $form_state['values']['client_type'];
		$redirect_uri = trim($form_state['values']['client_url']);
		$client_id = $form_state['values']['client_id'];
		$type_form = $form_state['values']['type_form'];
		$event = new Client();

		if($type_form == 'insert'){ // Insert the Client
			$action = $event->createClient($client_name, $scope, $redirect_uri);
			expDebug::dPrint('$action insert : '.print_r($action , true), 4);
		}else if($type_form == 'update'){
			$action = $event->updateClient($client_name, $scope, $redirect_uri);
			expDebug::dPrint('$action update : '.print_r($action , true), 4);
		}else if($type_form == 'getdetails'){
			if(!empty($client_name)){
				$action = $event->getDetailsByName($client_name);
			}else if(!empty($client_id)){
				$action = $event->getDetailsById($client_id);
			}else{
				$action = $event->getDetailsByScope($scope,$redirect_uri);
			}
		}

		// If Error Message Occured
		if(strpos(strtolower($action), 'error') !== false ){
			// Convert string To Xml
			$xml = simplexml_load_string($action);
			expDebug::dPrint('$xml : '.print_r($xml , true), 4);

			// Convert Xml To json
			$json = json_encode($xml);
			expDebug::dPrint('$json : '.print_r($json , true), 4);

			// a Json is false and Input is Json
			if(empty($json) || $json == 'false'){
				expDebug::dPrint('$json 3 : '.$json, 4);
				$json_response = json_decode($action,TRUE);
			}else{ // a Json is True and input is xml
				$json_response = json_decode($json,TRUE);
			}
			expDebug::dPrint('$json_response : '.print_r($json_response , true), 4);
			expertus_set_message("Error while $type_form Because ".$json_response['Error'] );

		}else { // Success Message Paint Here
			expDebug::dPrint('$action : '.print_r($action , true), 4);
			$xml = simplexml_load_string($action);
			expDebug::dPrint('$xml : '.print_r($xml , true), 4);

			// Convert Xml To json
			$json = json_encode($xml);
			expDebug::dPrint('$json : '.print_r($json , true), 4);

			// a Json is false and Input Came as Json
			if(empty($json) || $json == 'false'){
				expDebug::dPrint('$json is False or Empty : '.$json, 4);
				$json_response = json_decode($action,TRUE);
			}else{ // a Json is True and input  Came as xml
				$json_response = json_decode($json,TRUE);
			}
			expDebug::dPrint('$Show_Details : '.print_r($json_response , true), 4);
			$form_state['values']['Show_Details'] = $json_response;
		}

		$form_state['rebuild'] = true;
		expDebug::dPrint('$form_state values : '.print_r($form, true), 4);
		return $form;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_Client_basic_form_submit', $ex);
		expertusErrorThrow($ex);
	}
}
