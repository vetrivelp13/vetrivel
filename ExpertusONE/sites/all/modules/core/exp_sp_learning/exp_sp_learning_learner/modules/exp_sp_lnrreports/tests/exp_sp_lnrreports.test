<?php 
class reportDetails extends ExpertusWebTestCase {
    private $test_case = array();
	private $webError = "Website encountered an unexpected error";
	private $cId;
	protected $checkBoxGroupList = array();
	
private $srcParam = array(
		'title'=>'',		 // Title base search
		'report_status'=>'', // Status (Published/unpublished) base search
		'report_roles'=>'',	 // Role (admin/manager) base search
		'report_types'=>'',	 // Type(class/assessment) base search
		'report_manage'=>'', // manage type pipe separaed
		'sortby'=>'',		 //	Sort by option		
);	

     public static function getInfo() {
	 return array(
				'name' => 'Reports Search',
				'description' => 'Report page testing',
				'group' => 'exp_sp_lnrreports',
		);
	}
	
	public function setUp(){
		$this->getTestCases();
  	    parent::setUp();
  	    if(empty($this->checkBoxGroupList)){
  	    	$this->getGroupsList();
  	    }
  	    // set refer to prevent access denied error
  	    $this->setHttpReferer('admin/config/development/testing');
	}
	protected function getGroupsList(){
		include_once(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.inc');
		$start = 0;
		$limit = fetchRolesAll('COUNT');
		$fetchRoleAllList = fetchRolesAll('LISTS',$start,$limit,'', 'AZ');
		foreach($fetchRoleAllList as $key =>$value) {
				$this->checkBoxGroupList[$value->id] = $value->name;			
		}
		
	}
	public function testReportDetails(){
	    $testcases = $this->test_case['reports_basic'];
	  	$usr = new stdClass();
	  	$usr->name =  'admin';
	  	$usr->pass_raw = 'welcome';
	  	$this->drupalLogin($usr);
	  	
	  	
	   	// Refine filter check
	    $this->getReportsPage();
  	    $opt = $this->srcParam;
  	    $this->getReportsResult($opt);
  	    foreach($testcases as $tcase){
  		list($test,$msg,$grp) = $tcase;
  		$this->assertRaw($test,$msg,$grp);
  	    }
  	    
  	    $keys = array_keys($this->checkBoxGroupList);
  	    $values = array_values($this->checkBoxGroupList);
  	    foreach ($this->checkBoxGroupList as $keys => $values){
  	    	$chkboxvalidation = '<label for="lrn_srch_'.$keys.'" class="checkbox-unselected"><input id="lrn_srch_'.$keys.'" class="reports-roles srch-checkbox-cls" value="'.$keys.'" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>';
  	    	$this->assertRaw($chkboxvalidation,''.$values.' group checkbox available','exp_sp_lnrreports');
  	    	$lblval='<span class="title-lengthy-text">'.$values.'</span>';
  	    	$this->assertRaw($lblval,''.$values.' group label available','exp_sp_lnrreports');
  	    }
  	    
  	    //No Reports check
	  	$this->getReportsPage();
	  	$opt = $this->srcParam;
	  	expDebug::dPrint("Optional Parameter --> ".print_r($opt,true),5);
	  	$opt['title'] = 'Title_'.rand(100,10000).'_Not_Found';
	  	expDebug::dPrint("Optional Parameter 00808 --> ".print_r($opt['title'],true),5);
	    $this->getReportsResult($opt);
	  	$this->assertTrue(count($this->cId)==0,'No reports found success','lnrreports_search');
  	    
  	    // Filter search check
	  	$filters = $this->getParamFilterValues();
	  	expDebug::dPrint("vadivel List of reports filters -- ".print_r($filters,true),1);
	  	foreach($filters as $filter){
	  		list($fType,$fValue,$check,$msg) = $filter;
	  		$this->content= '';
	  		$opt = null;
	  		$this->getReportsPage();
		  	$opt[$fType] = $fValue;
		    $this->getReportsResult($opt);
		  	$dom = new DomDocument();
		  	$dom->loadHTML($this->content);
		  	$parent = $dom->getElementById('paintLearnerReportsResults');
		  	foreach($parent->childNodes as $node){
		  		$this->content = $dom->saveHTML($node);
		  		$this->assertRaw($check,$msg,'lnrreports_search');
		  	}
	  	}
  	    
		//$this->TestAutocomplete();
	}
	private function TestAutocomplete(){
		$opt = array(
				/* '_search' => false,
				'page' => 1,
				'rows' => 15,
				'sidx' => '',
				'sord' => 'desc' */
				'z' => 'manager'
		);
	//	$srcRc = $this->drupalGetAJAX('learning/report-autocomplete',array('query'=>$opt));
	//	$this->verbose('VIEW LEARNING RESULT:sann ' . $this->getUrl() .
	//			'<hr />' . $srcRc);
	//	$this->setHttpReferer('reports');
	//	$out = $this->drupalGet('reports');
		//$this->setHttpReferer('learning/report-autocomplete&z=manager');
		
		
	}

  private function getReportsPage(){
  	$this->setHttpReferer('reports');
	$this->drupalGet('reports');
	$this->assertRaw('<div id="searchReportsRecordsPaint" class="search-record-paint"><table id="paintLearnerReportsResults"></table></div>','Form Rendered Successfully', 'exp_sp_lnrreports');
  	$this->assertNoText(t($this->webError),'Web errors not found','lnrreports_search');
  }

private function getReportsResult($opt = array()){
	debug($this->getUrl());
  	$this->setHttpReferer('reports');
  	$prev = $this->content;
  	$opt = array_merge($this->basicParam,$opt);
  	$srcRc = $this->drupalGetAJAX('learning/report-search/all/none',array('query'=>$opt));
  
	$dom = new DOMDocument();
    $dom->loadHTML($prev);	
    $xpath = new DOMXPath($dom);
    
    // Appending Filters
    $Node = $xpath->query('//*[@id="paintLearnerCriteriaResults"]')->item(0);
    $newDom = new DOMDocument();
    $newDom->loadHTML($srcRc['filter']);
    $newNode1 = $dom->importNode($newDom->getElementsByTagName('table')->item(0), TRUE);
    $Node->appendChild($newNode1); 
    //expDebug::dPrint("vadivel get src recortd --> ".print_r($srcRc['rows'],true),5);
    // Prepare Search Result data
    $src = '';
    $this->cId = null;
    $i=0;
    foreach($srcRc['rows'] as $row){
    	$this->cId[$i]['id']=$row['id'];
	    $src .= '<tr> <td>'.$row['cell']['details'].'</td>';
	    $src .= '<td>'.$row['cell']['action'].'</td></tr>';
	    $i++;
    }
    // Appending Search Details
    if(!empty($src)){
	    $Node = $xpath->query('//*[@id="paintLearnerReportsResults"]')->item(0);
	    $newDom = new DOMDocument();
	    $newDom->loadHTML($src);
	    /*   $this->verbose('filter result test content src: ' . $this->getUrl() .
                '<hr />' . $src); */
	    $newNode = $dom->importNode($newDom->getElementsByTagName('tr')->item(0), TRUE);
	    $Node->appendChild($newNode); 
	    $this->content = $dom->saveHTML();
/* 	    $this->verbose('filter result test content: ' . $this->getUrl() .
                '<hr />' . $this->content); */
    }
    
  	$this->assertResponse(200,'Search finished successfully');
  	$this->assertNoText(t($this->webError),'Web errors not found','exp_sp_lnrreports');
  }	
	
   private function getParamFilterValues(){
   //	$opt['cid'] = $this->cId[0]['id'];
   //	expDebug::dPrint("getting class if--->".print_r($opt['cid'],true),5);
  // 	$reportId = reportGetCriteriaList($opt['cid']);
   //	expDebug::dPrint("check report id -->".$reportId);
   	
		$paramFilters = array(
			array('report_status','cre_rpt_rps_atv','Unpublish','Published reports found'),
			array('report_status','cre_rpt_rps_itv','Publish','Unpublished reports found'),
			//array('report_manage','cre_sys_fop_me',' ','Manage by reports found'),
			//array('report_manage','cre_sys_fop_oth',' ','Manage by reports found'),
			array('report_manage','cre_sys_fop_me|cre_sys_fop_oth',' ','Manage by filter based record found'),
			array('report_types','cre_rpt_rpc_ass|cre_rpt_rpc_oth',' ','Report type filter based record found'),
		);
		return $paramFilters;
	}
	
	private function getTestCases(){
  	$this->test_case = array(
	   'reports_basic' => array(
	    // Validate Filters 
  		array('<div class="block-findtraining-middle srch-filter-heading">Refine</div>','Refine filter header available','exp_sp_lnrreports'),
  		// Validate Status filter options
   		array('<a class="search-heading">Status</a>','Status filter header available','exp_sp_lnrreports'),  	
  		array('<label for="lrn_srch_publish" class="checkbox-unselected"><input id="lrn_srch_publish" class="reports-status srch-checkbox-cls" value="cre_rpt_rps_atv" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Published checkbox available','exp_sp_lnrreports'),
  		array('<span class="title-lengthy-text">Published</span>','Published label available','exp_sp_lnrreports'),
  		array('<label for="lrn_srch_unpublish" class="checkbox-unselected"><input id="lrn_srch_unpublish" class="reports-status srch-checkbox-cls" value="cre_rpt_rps_itv" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Unpublished checkbox available','exp_sp_lnrreports'),
  		array('<span class="title-lengthy-text">Unpublished</span>','Unpublished label available','exp_sp_lnrreports'),
	   	// Validate Type filter options
	   	array('<a class="search-heading">type</a>','Type filter header available','exp_sp_lnrreports'),
	   	array('<label for="lrn_srch_cre_rpt_rpc_ass" class="checkbox-unselected"><input id="lrn_srch_cre_rpt_rpc_ass" class="reports-types srch-checkbox-cls" value="cre_rpt_rpc_ass" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Assessment type checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Assessment</span>','Assessment type label available','exp_sp_lnrreports'),
	   	array('<label for="lrn_srch_cre_rpt_rpc_cls" class="checkbox-unselected"><input id="lrn_srch_cre_rpt_rpc_cls" class="reports-types srch-checkbox-cls" value="cre_rpt_rpc_cls" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Class type checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Class</span>','Class type label available','exp_sp_lnrreports'),
	   	array('<label for="lrn_srch_cre_rpt_rpc_crs" class="checkbox-unselected"><input id="lrn_srch_cre_rpt_rpc_crs" class="reports-types srch-checkbox-cls" value="cre_rpt_rpc_crs" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Course type checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Course</span>','Course type label available','exp_sp_lnrreports'),
	   	array('<label for="lrn_srch_cre_rpt_rpc_grp" class="checkbox-unselected"><input id="lrn_srch_cre_rpt_rpc_grp" class="reports-types srch-checkbox-cls" value="cre_rpt_rpc_grp" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Groups type checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Groups</span>','Groups type label available','exp_sp_lnrreports'),
	   	array('<label for="lrn_srch_cre_rpt_rpc_ord" class="checkbox-unselected"><input id="lrn_srch_cre_rpt_rpc_ord" class="reports-types srch-checkbox-cls" value="cre_rpt_rpc_ord" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Orders type checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Orders</span>','Orders type label available','exp_sp_lnrreports'),
	   	array('<label for="lrn_srch_cre_rpt_rpc_org" class="checkbox-unselected"><input id="lrn_srch_cre_rpt_rpc_org" class="reports-types srch-checkbox-cls" value="cre_rpt_rpc_org" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Organization type checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Organization</span>','Organization type label available','exp_sp_lnrreports'),
	   	array('<label for="lrn_srch_cre_rpt_rpc_sry" class="checkbox-unselected"><input id="lrn_srch_cre_rpt_rpc_sry" class="reports-types srch-checkbox-cls" value="cre_rpt_rpc_sry" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Survey type checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Survey</span>','Survey type label available','exp_sp_lnrreports'),
	   	array('<label for="lrn_srch_cre_rpt_rpc_tpm" class="checkbox-unselected"><input id="lrn_srch_cre_rpt_rpc_tpm" class="reports-types srch-checkbox-cls" value="cre_rpt_rpc_tpm" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Training Plan type checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Training Plan</span>','Training Plan type label available','exp_sp_lnrreports'),
	   	array('<label for="lrn_srch_cre_rpt_rpc_user" class="checkbox-unselected"><input id="lrn_srch_cre_rpt_rpc_user" class="reports-types srch-checkbox-cls" value="cre_rpt_rpc_user" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Users type checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Users</span>','Users type label available','exp_sp_lnrreports'),
	   	array('<label for="lrn_srch_cre_rpt_rpc_oth" class="checkbox-unselected"><input id="lrn_srch_cre_rpt_rpc_oth" class="reports-types srch-checkbox-cls" value="cre_rpt_rpc_oth" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Others type checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Others</span>','Others type label available','exp_sp_lnrreports'),
	   		
	   	// Validate Managed By filter options
	  	array('<a class="search-heading">managed by</a>','Managed By filter header available','exp_sp_lnrreports'),
	   	array('<input id="lrn_srch_cre_sys_fop_me" class="reports-manage srch-checkbox-cls" value="cre_sys_fop_me" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox">','Managed By Me checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Me</span>','Managed By Me label available','exp_sp_lnrreports'),
	   	array('<label for="lrn_srch_cre_sys_fop_oth" class="checkbox-unselected"><input id="lrn_srch_cre_sys_fop_oth" class="reports-manage srch-checkbox-cls" value="cre_sys_fop_oth" onclick=\'$("#lnr-reports-search").data("lnrreportssearch").searchAction();\' type="checkbox"></label>','Managed By Others checkbox available','exp_sp_lnrreports'),
	   	array('<span class="title-lengthy-text">Others</span>','Managed By Others label available','exp_sp_lnrreports'),
	   	// Validate Group filter options
	   	array('<a class="search-heading">Group</a>','Group filter header available','exp_sp_lnrreports'),		
  		
       ),
	);
  }
	
}
?>