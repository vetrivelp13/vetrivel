<?php 

class AdministrationCertificateTemplateUpdateBase extends AdministrationCertificateTemplateTestHelper
{
	public function updateCertificateTemplateTestCase($scope = 'all') {
		
		
		// Based on the scope set the data to test
		if ($scope == 'all') {
			$testCases = $this->testcases['certificateTemplateUpdate'];
		} else {
			$testCases = array($this->testcases['certificateTemplateUpdate'][$scope]);
		}

	foreach($testCases as $test){
			
			$idPath = 'edit-template-list-button-'.$test['template_id'];
			$path = '//*[@id="'.$idPath.'"]';
			
			unset($test['template_id']);

			$addClassObj = $this->getQtipAttributes($path,'onmousedown');
			
			//Add qtip popup for class
			$qtipDef = array(
					'tipWidth'=>$addClassObj['wBubble'],
					'tipTop'=>787,
					'tipLeft'=>139.767,
					'tipId'=>$addClassObj['catalogVisibleId'],
					'tipObjectId'=>$addClassObj['courseId'],
					'tipTableWidht'=>373,
					'tipContentId'=>$addClassObj['popupDispId'],
					'tipEntityType'=>'cre_sys_obt_cls',
					'tipClass'=>'qtip-parent',
					'tipPos'=>'bottomRight'
			
			);
			
			
			$this->addQtipModel($qtipDef);
				
			// Keep final content including qtip popup for multiple test
			$qtipContent = $this->content;
			
			//Reset content with the qtip
			$this->content = $qtipContent;
		
			//Get empty form
			$post_field = array('wrapper'=>'paintContent'.$addClassObj['popupDispId']);
		
			$out = $this->drupalPostAJAX(null,$edit,'Add Template','?q='.$addClassObj['url'],array(),array(),'',$post_field);
		
			$this->verbose('Class Empty Form: ' . $this->getUrl() . '<hr />' . $this->content);
		
			// Get Form id and wrapper id
			$formIds = $this->xpath('//*[@id="paintContent'.$addClassObj['popupDispId'].'"]/*[@class="addedit-form-wrapper"]/form');
			$formId = (string) $formIds[0]['id'];
			
			$wrapIds = $this->xpath('//*[@id="paintContent'.$addClassObj['popupDispId'].'"]/*[@class="addedit-form-wrapper"]');
			$wrapId = (string) $wrapIds[0]['id'];
		
			// Save form
			$param = array(
					"form_id"=>"exp_sp_administration_notification_attaching_template_addedit_form",
					"_triggering_element_name"=>"save",
					"_triggering_element_value"=>"Save",
			);
			$post_field = array('submit'=>$param,	'wrapper'=>$wrapId);
			
			$out = $this->drupalPostAJAX(null,$test,'Save','?q=system/ajax',array(),array(),$formId,$post_field);
		
			$this->verbose('Class Save: ' . $this->getUrl() .
					'<hr />' . $this->content);
		
			// Check any validation error occurs
			$error = '';
			$isError = $this->xpath('//div[@class="messages error"]//ul/li');
			foreach($isError as $err){
				$error .= (string) $err[0]->span;
			}
		
			// General response validation
			$this->assertResponse(200,'Form Repainted successfully');
			$txt = 'updated successfully';
			$this->assertText(t($txt),'Updated changes successfully','catalog_admin');
			$this->assertNoText(t($error),'Error - '.$error,'catalog_admin');
			$webError = "Website encountered an unexpected error";
			$this->assertNoText(t($webError),'Web errors not found','catalog_admin');
		}
	}
}


class AdministrationCertificateTemplateUpdateAll extends AdministrationCertificateTemplateUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Certificate Template - Update - All Tests',
				'description' => 'Module : exp_sp_administration_notification_template',
				'group' => '1505 - Administration - Manage - Certificate Template - Update',
		);
	}

	public function testCertificateTemplateUpdateAll() {
		$this->manageAdminCertificate();
		$this->manageAdminCertificateTemplate('all');
		debug('testCertificateTemplateUpdateAll called');
		$this->updateCertificateTemplateTestCase('all');
	}
}

class AdministrationCertificateTemplateUpdateCase1 extends AdministrationCertificateTemplateUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Certificate Template - Update - Case 1',
				'description' => 'Module : exp_sp_administration_notification_template',
				'group' => '1505 - Administration - Manage - Certificate Template - Update',
		);
	}

	public function testCertificateTemplateUpdateCase1() {
		$this->manageAdminCertificate();
		$this->manageAdminCertificateTemplate('case1');
		debug('testCertificateTemplateUpdateCase1 called');
		$this->updateCertificateTemplateTestCase('st_case1');
	}
}

class AdministrationCertificateTemplateUpdateCase2 extends AdministrationCertificateTemplateUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Certificate Template - Update - Case 2',
				'description' => 'Module : exp_sp_administration_notification_template',
				'group' => '1505 - Administration - Manage - Certificate Template - Update',
		);
	}

	public function testCertificateTemplateUpdateCase2() {
		$this->manageAdminCertificate();
		$this->manageAdminCertificateTemplate('case2');
		debug('testCertificateTemplateUpdateCase2 called');
		$this->updateCertificateTemplateTestCase('st_case2');
	}
}


?>