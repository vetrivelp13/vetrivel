<?php
class AdministrationNotificationTestHelper extends ExpertusWebTestCase {
	private $searchResultContent = null;
	protected $testcases = array ();
	public $listContent = '';
	private $srcParam = array (
			'title' => '', // Title base search
			'announcementdaterange' => '', // date range on announcement
			'announcementlang' => 'cre_sys_lng_eng', // Selected languages pipe separated
			'sortby' => 'desc', // Sort by option
			'announcemanage' => 'cre_sys_fop_me' 
	);
	public function setUp() {
		parent::setUp ();
		$this->drupalLogin ( $this->admin ); // login as admin
		$this->getNotificationTestCases ();
		// set refer to prevent access denied error
		$this->setHttpReferer ( 'learning/enrollment-search' );
	}
	public function manageAdminNotification($scope = 'basic') {
		
		// Get Main HTML content
		$this->drupalPost ( 'administration/manage/notification_template' );
		$content = $this->content;
		
		// Get Filters
		$this->drupalGetAJAX ( 'administration/search-filter/notification_template' );
		$this->content = drupal_json_decode ( $this->content );
		
		// Update filters with existing response
		$replArray = array (
				'rendered_narrow_search_filters' => 'narrow-search',
				'rendered_main_div' => 'root-admin-results',
				'rendered_tab_content_main' => 'tab-content-main',
				'rendered_narrow_search_sortbar' => 'admin-maincontent_tab',
				'rendered_narrow_search_actionbar' => 'sort-bar-V2' 
		);
		
		$this->updateSearchFilters ( $content, $replArray, 'div', 'tag', 'div' );
		
		$this->displayTagsById ( 'narrow-search' );
		$this->displayTagsById ( 'root-admin-results' );
		
		// Based on the scope set the data to test
		if ($scope == 'all') {
			$testCases = $this->testcases ['notificationList'];
		} else {
			$testCases = array (
					$this->testcases ['notificationList'] [$scope] 
			);
		}
		
		// Get search results
		foreach ( $testCases as $test ) {
			$this->getAdministrationNotificationList ( $test );
		}
	}
	public function getAdministrationNotificationList($opt = array()) {
		$opt = array_merge ( $this->basicParam, $opt );
		$this->listContent = $this->content;
		$srcRc = $this->drupalGetAJAX ( 'administration/manage/notification_template/search/all/', array (
				'query' => $opt 
		) );
		$this->updateSearchResults ( $this->listContent, $srcRc, 'narrow-search-results-holder' );
	}
	protected function getNotificationTestCases() {
		$rand = $this->randomName ();
		$this->testcases = array (
				'notificationList' => array (
						'basic' => array (),
						'case1' => array () 
				),
				'notificationCreate' => array (
						'st_case1' => array (
								"name" => 'st_case1 notification ' . $rand,
								"short_description[value]" => 'Notification description goes here',
								"notify_type" => 'Triggered',
								"entity_type" => 'Class', // Tamilnadu
								"sendmailto[]" => 'cre_ntn_rpt_adm',
								"cc_mail" => 'test@ccmail.com' 
						),
						'st_case2' => array (
								"name" => 'st_case2 notification ' . $rand,
								"short_description[value]" => 'Notification description goes here',
								"notify_type" => 'Triggered',
								"entity_type" => 'Class', // Tamilnadu
								"sendmailto[]" => 'cre_ntn_rpt_adm',
								"cc_mail" => 'test@ccmail.com' 
						) 
				),
				'notificationUpdate' => array (
						'st_case1' => array (
								"name" => 'st_case1 Notification updated ' . $rand,
								"id" => $this->getNotificationId ( 'st_case1' ) 
						),
						'st_case2' => array (
								"name" => 'st_case2 Notification updated ' . $rand,
								"id" => $this->getNotificationId ( 'st_case2' ) 
						) 
				),
				'notificationDelete' => array (
						'st_case1' => array (
								'id' => $this->getNotificationId ( 'st_case1' ) 
						),
						'st_case2' => array (
								'id' => $this->getNotificationId ( 'st_case2' ) 
						) 
				),
				'notificationView' => array (
						'st_case1' => array (
								'id' => $this->getNotificationId ( 'st_case1' ) 
						) 
				),
				'notificationStatus' => array (
						'st_case1' => array (
								'id' => $this->getNotificationId ( 'st_case1' ) 
						),
						'st_case2' => array (
								'id' => $this->getNotificationId ( 'st_case2' ) 
						) 
				) 
		);
	}
	public function getNotificationTitle($notificationId = '') {
		$notificationTitle = db_query ( "SELECT notification_title FROM slt_notification_info WHERE id = :notification_id", array (
				':notification_id' => $notificationId 
		) )->fetchField ();
		return $notificationTitle;
	}
	public function getNotificationStatus($notificationId = '') {
		$notificationStatus = db_query ( "SELECT status FROM slt_notification_info WHERE id = :notification_id", array (
				':notification_id' => $notificationId 
		) )->fetchField ();
		return $notificationStatus;
	}
	
	// To check how many Notification having this question
	public function getNotificationTemplateCount($notificationId = '') {
		$notificationCount = db_query ( "SELECT count(notification_id) FROM slt_notification_frame WHERE notification_id = :notificationId", array (
				':notificationId' => $notificationId 
		) )->fetchField ();
		return $notificationCount;
	}
	public function getNotificationId($search_str = '') {
		$select = db_select ( 'slt_notification_info', 'nt' );
		$select->addField ( 'nt', 'id', 'id' );
		$select->condition ( 'nt.status', 'cre_ntn_sts_del', '!=' );
		$select->condition ( 'nt.send_options', 'Email' );
		$select->condition ( 'nt.notification_title', '%' . db_like ( $search_str ) . '%', 'LIKE' );
		$select->orderBy ( 'nt.id', 'DESC' );
		$select->range ( 0, 1 );
		$notificationId = $select->execute ()->fetchField ();
		return $notificationId;
	}
}
class AdministrationNotificationListBase extends AdministrationNotificationTestHelper {
}
class AdministrationNotificationListAll extends AdministrationNotificationListBase {
	public static function getInfo() {
		return array (
				'name' => 'Administration - Notification - List - All Tests',
				'description' => 'Module : exp_sp_administration_notification',
				'group' => '1504 - Administration - Manage - Notification - List' 
		);
	}
	public function testNotificationListAll() {
		debug ( 'testAdminNotificationListAll called' );
		$this->manageAdminNotification ( 'all' );
	}
}
class AdministrationNotificationListCase1 extends AdministrationNotificationListBase {
	public static function getInfo() {
		return array (
				'name' => 'Administration - Notification - List - Case 1',
				'description' => 'Module : exp_sp_administration_notification',
				'group' => '1504 - Administration - Manage - Notification - List' 
		);
	}
	public function testNotificationListCase1() {
		debug ( 'testAdminNotificationListCase1 called' );
		$this->manageAdminNotification ( 'case1' );
	}
}

/**
 * Notification view test cases
 * Created By :Maheswari.M
 * Created Date:22.12.2016
 */
class AdministrationNotificationViewBase extends AdministrationNotificationTestHelper {
	public function viewNotificationTestCase($scope) {
		$ctoolModel = array (
				'modelWidth' => 890,
				'modelClass' => 'ctools-modal-ctools-viewscreen-wrapper',
				'modelTitle' => t ( 'View' ),
				'contentWidth' => 680,
				'contentMhight' => 335,
				'outerHeight' => 620,
				'outerWidth' => 336,
				'blockHeight' => 1232,
				'blockWidth' => 1343,
				'modelTop' => 150,
				'modelLeft' => 226.5,
				'docHeight' => 1232,
				'docWidth' => 1343 
		);
		$this->addCtoolModelContent ( $ctoolModel );
		
		$modelContent = $this->content;
		
		$testCases = $this->testcases ['notificationView'] [$scope];
		
		if ($testCases ['id'] == 'null' || $testCases ['id'] == '') {
			debug ( 'there is no notification exists' );
		} else {
			
			// Reset content with the ctool model
			$this->content = $modelContent;
			
			// Get empty form
			$post_field = array (
					'wrapper' => 'paint-narrow-search-results' 
			);
			$groupId = $testCases ['id'];
			
			$out = $this->drupalPostAJAX ( null, $edit, 'Save', '?q=administration/view-notification/ajax/addedit/' . $groupId, array (), array (), '', $post_field );
			$this->verbose ( 'Request to: ' . $this->getUrl () . '<hr />' . $this->content );
			// Do General validations
			$this->assertResponse ( 200, 'Form Rended successfully' );
			$webError = "Website encountered an unexpected error";
			$this->assertNoText ( t ( $webError ), 'Web errors not found', 'catalog_admin' );
		}
	}
}
class AdministrationNotificationViewCase1 extends AdministrationNotificationViewBase {
	public static function getInfo() {
		return array (
				'name' => 'Administration - Notification - View - Case 1',
				'description' => 'Module : exp_sp_administration_notification',
				'group' => '1504 - Administration - Manage - Notification - View' 
		);
	}
	public function testNotificationViewCase1() {
		debug ( 'testNotificationViewCase1 called' );
		$this->manageAdminNotification ( 'case1' );
		$this->viewNotificationTestCase ( 'st_case1' );
	}
}

/**
 * Notification change status test cases
 * Created By :Maheswari.M
 * Created Date:29.12.2016
 * Modified Date:30.12.2016
 * To check the functionality for the notification enable/disable .
 */
class AdministrationNotificationStatusBase extends AdministrationNotificationTestHelper {
	public function statusGroupTestCase($scope = 'all') {
		// Based on the scope set the data to test
		if ($scope == 'all') {
			$testCases = $this->testcases ['notificationStatus'];
		} else {
			$testCases = array (
					$this->testcases ['notificationStatus'] [$scope] 
			);
		}
		
		foreach ( $testCases as $test ) {
			$notificationId = $test ['id'];
			if ($notificationId != '') {
				// checking the status if the notification contain any template
				$notication_template_count = $this->getNotificationTemplateCount ( $notificationId );
				if ($notication_template_count > 0) {
					// fetching the notification status
					// if notification have template means,we can enable/disable
					$status = $this->getNotificationStatus ( $notificationId );
					$this->changeStatus ( $notificationId, $status );
					$status = $this->getNotificationStatus ( $notificationId );
					$this->changeStatus ( $notificationId, $status );
					$this->content = $this->listContent;
					$this->getAdministrationNotificationList ();
				} else
					// if notification doesn't have template means,we can't enable/disable
					debug ( "This notification not have the notification template." );
			} else
				debug ( 'The notification id not found' );
		}
	}
	// change the notification status
	public function changeStatus($notificationId, $status) {
		if ($status == 'cre_ntn_sts_atv') {
			// notification is enabled status.
			$this->changeNotificationStatus ( $notificationId );
			$this->assertResponse ( 200, 'Notification status disabled successfully' );
		} else {
			// notification is disabled status.
			$this->changeNotificationStatus ( $notificationId );
			$this->assertResponse ( 200, 'Notification status enabled successfully' );
		}
	}
	public function changeNotificationStatus($notificationId) {
		$this->drupalPostAJAX ( null, $edit, 'Save', '?q=ajax/administration/manage/notification_template/publish-and-unpublish/' . $notificationId, array (), array (), '', $post_field );
		$this->verbose ( 'Request to: ' . $this->getUrl () . '<hr />' . $this->content );
	}
}
class AdministrationNotificationStatusCase1 extends AdministrationNotificationStatusBase {
	public static function getInfo() {
		return array (
				'name' => 'Administration - Notification - Status - Case1',
				'description' => 'Module : exp_sp_administration_notification',
				'group' => '1504 - Administration - Manage - Notification - Status' 
		);
	}
	public function testNotificationPublishCase1() {
		debug ( 'testNotificationPublishCase1 called' );
		$this->manageAdminNotification ( 'case1' );
		$this->statusGroupTestCase ( 'st_case1' );
	}
}
class AdministrationNotificationStatusCase2 extends AdministrationNotificationStatusBase {
	public static function getInfo() {
		return array (
				'name' => 'Administration - Notification - Status - Case2',
				'description' => 'Module : exp_sp_administration_notification',
				'group' => '1504 - Administration - Manage - Notification - Status' 
		);
	}
	public function testNotificationPublishCase2() {
		debug ( 'testNotificationPublishCase1 called' );
		$this->manageAdminNotification ( 'case1' );
		$this->statusGroupTestCase ( 'st_case2' );
	}
}

?>