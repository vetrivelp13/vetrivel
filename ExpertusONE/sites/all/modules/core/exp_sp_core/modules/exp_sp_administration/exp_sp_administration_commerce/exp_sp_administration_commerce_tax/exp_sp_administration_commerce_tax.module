<?php

/**
* Implementation of hook_init().
*/
function exp_sp_administration_commerce_tax_init(){
	try {
  if(arg(1) == 'commerce' && arg(2) == 'tax'){
     global $theme_key;
     $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME, 'weight'=> 1300);

  	if($theme_key == 'expertusoneV2') {
  		//NEWUI THEME STYLE SHEET
  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_commerce_tax') .'/exp_sp_administration_commerce_tax_v2.css', $css_theme_optional);
  	}else {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_commerce_tax') .'/exp_sp_administration_commerce_tax.css', $css_theme_optional);
  	}

  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_commerce_tax_init', $ex);
  	expertusErrorThrow($ex);
  }
}

 /**
 * Implementation of hook_menu().
 */
function exp_sp_administration_commerce_tax_menu() {
	try{
  $items = array();
  $items['administration/commerce/tax'] = array(
    'title' => t('Tax'),
    'page callback' => 'empty_value',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'weight' => 3,
    'access arguments' => array('Tax Admin Perm'),
  );
  $items['administration/commerce/tax/search/all'] = array(
    'title' => 'Fetch commerce list to display in JQGrid',
    'page callback' => 'sendCommerceOrderListToJqGrid',
    'access callback' => 'user_access',
    'access arguments' => array('Tax Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_tax.inc'
    );

  $items['administration/commerce/tax/textfilter-autocomplete'] = array(
    'title' => 'Search By Text Filter Autocomplete',
    'page callback' => 'getCommerceTextFilterAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Tax Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_tax.inc',
  );

  $items['administration/commerce/tax/%ctools_js/addedit'] = array(
    'title' => 'Add/Edit Tax',
    'page callback' => 'exp_sp_administration_tax_setting_addedit_form',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('Tax Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_tax.inc'
  );

  $items['administration/commerce/tax/export'] = array(
    'title' => 'Tax Details Search Results CSV Export',
    'page callback' => 'fetchTaxAll',
    'page arguments' => array('CSV'),
    'access callback' => 'user_access',
    'access arguments' => array('Tax Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_tax.inc',
   );

   $items['administration/commerce/tax/print'] = array(
     'title' => 'Tax Details Results Print to PDF',
     'page callback' => 'fetchTaxAll',
     'page arguments' => array('PDF'),
     'access callback' => 'user_access',
     'access arguments' => array('Tax Admin Perm'),
     'type' => MENU_CALLBACK,
     'file' => 'exp_sp_administration_commerce_tax.inc',
   );
   $items['administration/commerce/tax/vat-autocomplete'] = array(
     'title' => 'Search By Tax VAT Filter Autocomplete',
     'page callback' => 'getCommerceVATFilterAutoComplete',
     'access callback' => 'user_access',
     'access arguments' => array('Tax Admin Perm'),
     'type' => MENU_CALLBACK,
     'file' => 'exp_sp_administration_commerce_tax.inc',
   );
   $items['administration/commerce/tax/procode-autocomplete'] = array(
     'title' => 'Search By Tax Product Code Filter Autocomplete',
     'page callback' => 'getCommercePCodeFilterAutoComplete',
     'access callback' => 'user_access',
     'access arguments' => array('Tax Admin Perm'),
     'type' => MENU_CALLBACK,
     'file' => 'exp_sp_administration_commerce_tax.inc',
   );
   $items['administration/commerce/tax/country-autocomplete'] = array(
     'title' => 'Search By Tax Country Filter Autocomplete',
     'page callback' => 'getCommerceCountryFilterAutoComplete',
     'access callback' => 'user_access',
     'access arguments' => array('Tax Admin Perm'),
     'type' => MENU_CALLBACK,
     'file' => 'exp_sp_administration_commerce_tax.inc',
   );
   $items['administration/commerce/tax/state-autocomplete'] = array(
     'title' => 'Search By Tax State Filter Autocomplete',
     'page callback' => 'getCommerceStateFilterAutoComplete',
     'access callback' => 'user_access',
     'access arguments' => array('Tax Admin Perm'),
     'type' => MENU_CALLBACK,
     'file' => 'exp_sp_administration_commerce_tax.inc',
   );
   $items['ajax/administration/commerce/tax/publish-and-unpublish/%'] = array (
     'title' => 'Publish Or Unpublish a Tax',
     'page callback' => 'publishOrUnpublishTax',
     'page arguments' => array(5),
     'type' => MENU_CALLBACK,
     'access arguments' => array('Tax Admin Perm'),
     'file' => 'exp_sp_administration_commerce_tax.inc'
	 );
  return $items;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_commerce_tax_menu', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_permission().
 */
function exp_sp_administration_commerce_tax_permission() {
	try {
  return array(
    'Tax Admin Perm' => array(
      'title' => t('Tax Admin Perm')
    ),
    'Commerce Admin Configure Perm' => array(
      'title' => t('Commerce Admin Configure Perm')
    ),
  );
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_commerce_tax_permission', $ex);
  	expertusErrorThrow($ex);
  }
}

/*
 * exp_sp_administration_tax_setting_addedit_form() -Form implementation for tax setting
 */
function exp_sp_administration_tax_setting_addedit_form($js = NULL, $taxId = ''){
  try {
  include_once(drupal_get_path('module', 'exp_sp_administration_commerce_tax') .'/exp_sp_administration_commerce_tax.inc');

  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);

  // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
  $sample_style = array(
   'ctools-admin-tax-addedit-style' => array(
      'modalSize' => array(
        'width' => 515,
        'minHeight' => 290,
       ),
    )
  );

  drupal_add_js($sample_style, 'setting');
  //drupal_add_js(drupal_get_path('module', 'exp_sp_administration_commerce_tax') .'/exp_sp_administration_commerce_tax.js', $js_module_optional);

  if ($js) {
    // Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
    $argsList = array();

    $taxTitle = '';
    if (!empty($taxId)) {
      $argsList[] = $taxId;
      $taxTitle = 'Tax';
    }

   // Prepare list of forms to be displayed in the modal
    $formIdList = array(
                        array('id' => 'exp_sp_administration_tax_addedit_form', 'title' => (t('LBL969'))), //Setup Tax
                       );

    exp_ctools_modal_multi_ajaxonly_forms_display($formIdList, $argsList);
  }
  else {
  	throw new Exception('exp_sp_administration_commerce_tax.module: exp_sp_administration_tax_setting_addedit_form() : nojs');
  }
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_tax_setting_addedit_form', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * exp_sp_administration_tax_addedit_form() - Build the addedit form for Tax settings.
 */
function exp_sp_administration_tax_addedit_form($form, &$form_state, $renderMode, $taxId){
	try {
  global $theme_key;
    $showCancelSave = 1;
    if (empty($form_state['storage'])) {
        if(!empty($taxId) && empty($form_state['storage'])) {
            $form_state['storage']['step'] = 'view';
        } elseif(empty($taxId)  && empty($form_state['storage'])) {
            $form_state['storage']['step'] = 'add';
        }
    }

    if (!empty($form_state['fromtooltip'])) {
        $fromToolTip = $form_state['fromtooltip'];
        $fromToolTipClassId = $form_state['fromtooltipClassId'];
    }
    $taxDetails     = array();

    if (!empty($taxId)) {
      $taxDetails   = getTaxDetails($taxId ,'fetchall');
      expDebug::dPrint(' $$taxDetails = ' . print_r($taxDetails, true) , 4);
    }

    $form 		       = newAddEditFormWithCancelAndSave('tax-basic-addedit-form');

    if(empty($taxId)){
       $entityId       = $form_state['values']['id'];
    } else {
       $entityId       = $taxId;
    }
    $form['mapped_tax_id'] = array(
      '#type' => 'hidden',
      '#name' => 'mapped_tax_id',
      '#value' => $entityId
    );

    $form['tax_detail_disp'] = array(
  	  '#type'       => 'markup',
      '#markup'     => '<div id="tax-basic-addedit-form-disp">',
    );

    $form['tax_detail_wrapper'] = array(
  	  '#type'       => 'markup',
      '#prefix'     => '<div class="tax-basic-addedit-form-container" id="tax-basic-addedit-form-container">',
    );

    $defaultTaxId =  $entityId;
    addHiddenValueToAddEditForm($form, 'id', $defaultTaxId);

    $defaultAffectorValue =  getDefaultTaxAddEditFormFieldValue('country', $form_state, $taxDetails);
    $defaultAffectedValue =  getDefaultTaxAddEditFormFieldValue('states', $form_state, $taxDetails);

    $options                         = getUCTaxCountries($defaultAffectorValue);
    $attributes                      = array();
    $attributes['class']             = array('addedit-edit-dropdown');
    $attributes['class'][]           = 'addedit-form-expertusone-throbber';
    $attributes['data-wrapperid']    = array('tax-basic-addedit-form');
    $attributes['tabindex']          = 1;
    $nullOption[]                    = t('LBL674');
    $finalOptions                    = $nullOption + $options;
    $defaultOption                   = $defaultAffectorValue;
    if($theme_key == 'expertusoneV2') {
      $prefix = '<div class="expertus-dropdown-bg dropdown-width"><div class="expertus-dropdown-icon ">';
      $suffix = '</div></div>';
    }else {
      $prefix = '';
      $suffix = '';
    }

    $form['country'] = array(
      '#type'          => 'select',
      '#name'			 => 'country',
      '#id'		     => 'country',
      '#prefix'        => addEditGetPrefix('TWOCOL_FIRSTCOL_FIELD', t('LBL039'), TRUE).$prefix,
      '#suffix'        => $suffix.addEditGetSuffix('TWOCOL_FIRSTCOL_FIELD'),
      //'#field_prefix'  => ,
      //'#field_suffix'  => '</span></span>',
      '#title'         => t('LBL039'),
      '#title_display' => 'invisible',
      '#options'       => $finalOptions,
      '#default_value' => $defaultOption,
      '#disabled'      => ($defaultTaxId) ? true : false,
      '#attributes'    => $attributes,
      '#ajax' => array(
                    'wrapper'        => 'tax-basic-addedit-form',
                    'callback'       => 'tax_repaint_callback',
                    'method'         => 'replace',
                    'effect'         => 'none',
                    'event'          => 'change',
                    'keypress'       => true,
                    'progress' => array(
                      'type'     => 'throbber',
                      'message'  => ''
                    ),
                )
    );

    $defaultValueArray = explode(',', $defaultAffectedValue);
    $stateOption = getStatesForUCTaxCountry($defaultAffectorValue);
    $country = $defaultAffectorValue;

    $readOnlyOption = ($country != 'US' && $country != 'CA') ? true : false;
    addMultiselectDropDownToAddEditForm($form, 'states', t('LBL971'), $stateOption, $defaultValueArray, 2,false, $readOnlyOption); //Nexus States

    $defaultTaxValue =  $taxDetails[0]->vat_numbers;
    //$attributes = array();
    //$attributes['data-default-text'] = t('LBL405');
    expDebug::dPrint(' $country = ' .  print_r($country,true) , 4);
    $mandatory = ($country != 'US' && $country != 'CA' && $country) ? true : false;
    expDebug::dPrint(' $$mandatory = ' .  print_r($mandatory,true) , 4);
    $cnt = 3;
    addTaxTextAreaFieldToAddEditForm($form, 'vat_number', t('LBL973'), $defaultTaxValue, $cnt, $mandatory, false); //Vat Number

    $taxDelDetails = array();
    foreach($taxDetails as $key => $val){
      $taxDelDetails[$val->delivery_type] = $val->tax_product_code;
    }
    expDebug::dPrint(' $taxDelDetails = ' .  print_r($taxDelDetails,true) , 4);

    $delTypes = getProfileItemNamesKeyed('lrn_cls_dty_');
    $delTpTypes = getProfileItemNamesKeyed('cre_sys_obt_trp');
    $deliveryTypes = $delTypes + $delTpTypes;
    expDebug::dPrint(' delTypes  = ' . print_r($deliveryTypes, true) , 4);
    expDebug::dPrint(' tap index = ' . print_r($cnt, true) , 1);
    foreach($deliveryTypes as $code => $value)
    {
      $cnt++;
      expDebug::dPrint('code= '.$code.'  value= '. $value . ' ' . t('LBL972').'  default= '. $defaultValue . '  cnt = '. $cnt , 4);
      $defaultValue =  $taxDelDetails[$code];
      expDebug::dPrint(' $delTypes = ' . $defaultValue , 4);
      addTextFieldToAddEditForm($form, $code, $value . ' ' . t('LBL972'), $defaultValue, $cnt, false); //Product code
      //addTextFieldToAddEditForm($form, $code, $value . ' ' . t('LBL972'), $defaultValue, $cnt, false); //Product code
    }


   // addCustomFieldsBlockToAddEditForm($form, $form_state, $taxId, 'tax', 'tax-custom-fields', 'tax-basic-addedit-form', 16);

    taxNewSubmitAddEditFormWithCancelAndSaveClose($form, 'tax-basic-addedit-form', 'tax-basic-save', 'tax-basic-cancel', $entityId,'','',$fromToolTip,$fromToolTipClassId);

    $form['tax_detail_disp_end'] = array(
  	  '#type'       => 'markup',
      '#markup'     => '<div class="clearBoth"></div></div>',
    );

    $form['tax_detail_wrapper_end'] = array(
  	  '#type'       => 'markup',
      '#markup'     => '</div>',
    );

    return $form;
    } catch (Exception $ex) {
    	watchdog_exception('exp_sp_administration_tax_addedit_form', $ex);
    	expertusErrorThrow($ex);
    }
}

/*
 * tax_repaint_callback() - #ajax callback to repaint form for the 2 non submit ajax form elements
 */
function tax_repaint_callback($form, $form_state){
	try {
  $commands = array();

  $renderHTML = drupal_render($form);
  expDebug::dPrint(' $renderHTML = ' . print_r($renderHTML, true)  , 4);
  $commands[] = ajax_command_replace(NULL, $renderHTML);

  // Resize the modal backdrop, adjust the model top (and left) to optimal
  //$commands[] = exp_ctools_modal_adjust();

  expDebug::dPrint(' $commands = ' . print_r($commands, true) , 4);
  return array('#type' => 'ajax', '#commands' => $commands);
  } catch (Exception $ex) {
  	watchdog_exception('tax_repaint_callback', $ex);
  	expertusErrorThrow($ex);
  }
}

/*
 * getDefaultTaxAddEditFormFieldValue() - The function determines the default value for a form field when field id is same as field name in the DB table
 *                                     (DB record is available in $details).
 */
function getDefaultTaxAddEditFormFieldValue($field, $form_state, $dbDetail) {
  try {
  $defaultValue = empty($form_state['values'][$field])? (empty($dbDetail[0]->$field)? '' : $dbDetail[0]->$field) :
                                                        $form_state['values'][$field];
  expDebug::dPrint(' $defaultValue for field ' .
                                                $field . ' = ' . print_r($defaultValue, true) , 4);

  return $defaultValue;
  } catch (Exception $ex) {
  	watchdog_exception('getDefaultTaxAddEditFormFieldValue', $ex);
  	expertusErrorThrow($ex);
  }
}

/*
 * addTaxTextAreaFieldToAddEditForm() -  Use this function to add a text area to the addedit form
 */
function addTaxTextAreaFieldToAddEditForm(&$form, $id, $title = '', $defaultValue = '', $tabIndex = null, $mandatory = false, $readOnly = false) {
	try {
  // Prepare the additional HTML attributes for the textfield
  $attributes = array();
  $attributes['autocomplete'] = 'off'; // Prevent browser autocomplete

  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $attributes['class'] = array('addedit-edit-' . $id); // This class must be prefixed with 'addedit-edit-' followed by the form field id.

  // Add class to apply common style to all text area fields.
  //$attributes['class'][] = 'addedit-edit-textarea';

  if ($readOnly) {
    $attributes['class'][] = 'addedit-readonly-textfield';
  }

  if (isset($tabIndex) && $tabIndex > 0) {
    $attributes['tabindex'] = $tabIndex;
  }
  //$attributes['data-default-text'] = t('LBL405');
  // Create the form element
  $form[$id] = array(
    '#type' => 'textarea',
    '#prefix' => addEditGetPrefix('FIELD', $title, $mandatory, ':' ,'vat_no_label'),
    '#suffix' => '<div class="vat-separator">'.t('MSG603').'</div></div><div class="clearBoth"></div></div>',//MSG603 -> Can add max of 10 VAT number with comma separator
    '#title' => $title,
    '#title_display' => 'invisible',
    '#default_value' => $defaultValue,
    '#disabled' => $readOnly,
    '#attributes' => $attributes,
    '#rows'=>'1',
    '#cols'=>'40',
  );
  } catch (Exception $ex) {
  	watchdog_exception('addTaxTextAreaFieldToAddEditForm', $ex);
  	expertusErrorThrow($ex);
  }
}


function exp_sp_administration_tax_addedit_form_validate($form, &$form_state){
	try {
  $form_state['hidden-save-submit'] = false;
  $form_state['esign_show_popup'] = false;
  expDebug::dPrint('$form_state[triggering_element][#name] = ' . $form_state['triggering_element']['#name'], 4);
  expDebug::dPrint('$form_state[values] = ' . print_r($form_state['values'], true), 4);

  if ($form_state['values']['op'] == t('LBL123')) {
    $form_state['input'] = array(); // Clear user input - raw
    $form_state['values'] = array(); // Clear user input - security cleared
    $form_state['rebuild'] = TRUE; // Rebuild the form. Submit handler will not be called.
    return;
  }

  $triggerElementByName  = $form_state['triggering_element']['#name'];

  if ($form_state['triggering_element']['#name'] == 'country') {
    // Since country has changed, we need to unset any selection for state made by the user
    unset($form_state['values']['states']);
    unset($form_state['input']['states']);
    $form_state['storage']['affected_dropdown'] = 'states';
    return;
  }

  if (($form_state['triggering_element']['#name'] == 'save' || $form_state['triggering_element']['#name'] == 'saveandpublish')) {
    $country = $form_state['values']['country'];
    $mandatory = ($country != 'US' && $country != 'CA' && $country) ? array('country','vat_number') : array('country');
    addEditCheckMandatoryFields($form, $form_state, $mandatory);
    // Validate the custom fields
    //validateCustomFieldsInAddEditForm($form, $form_state);
  }

  if($vat_numb = $form_state['values']['vat_number']){
    $vat_numbers = explode(',',$vat_numb);
    if(count($vat_numbers) > 10){
      form_set_error('vat_number', t("MSG602"));
      $form_state['esign_show_popup']= false;
    }
    // Fix for checking the new line character in vat numbers. #0061834
    foreach($vat_numbers as $key => $val){
    	if(strstr($val, "\n")) {
    		form_set_error('vat_number', t("MSG603"));
    		$form_state['esign_show_popup']= false;
    		return;
    	}
    }
  }

  if ($triggerElementByName == 'hidden-save' ) {
    $form_state['hidden-save-submit']=true;
    $form_state['esign_show_popup']= false;
  }

  if($form_state['triggering_element']['#name'] == 'delete' ||  $form_state['triggering_element']['#name'] == 'unpublish'){
    $form_state['esign_show_popup']= true;
  }

  $form_state['esign_validation_status'] = false;
  if(!($form_state['hidden-save-submit'])){
    unset($_SESSION['esign_validate']);
  }

  $form_state['esign_show_popup'] = false;
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_tax_addedit_form_validate', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_administration_tax_addedit_form_submit($form, &$form_state) {
	try {
   expDebug::dPrint('exp_sp_administration_tax_addedit_form_submit esign validate ' . $_SESSION['esign_validate'] , 4);
   $chkValidation = 1;
    expDebug::dPrint('exp_sp_administration_tax_addedit_form_submit esign validate trigger ' .$form_state['triggering_element']['#name'] , 5);
   $tempEsigndisable = 0;
   if(module_exists('exp_sp_esignature') && isActiveEsignRegion() && $tempEsigndisable){
     $chkValidation = 0;
     if($form_state['hidden-save-submit']==true && $_SESSION['esign_validate'] ==  1){
       $chkValidation = 1;
       $form_state['storage']['submit_triggering_element'] = $form_state['storage']['triggering_button_element'];
     }
     else{
       $form_state['storage']['triggering_button_element'] = $form_state['triggering_element']['#name'];
     }
   }
   else{
     $form_state['storage']['submit_triggering_element'] = $form_state['triggering_element']['#name'];
   }
   if($form_state['triggering_element']['#name'] == 'Add custom'){
     $chkValidation = 0;
   }
   if($chkValidation){
     $form_state['esign_validation_status'] = true;
     $loggedInUserId = getIdOfLoggedInUser();
     expDebug::dPrint('exp_sp_administration_tax_addedit_form_submit success validation ' . $form_state['storage']['submit_triggering_element'] , 5);
    //  Check whether add or edit
    if(empty($form_state['values']['id'])) {
      $returnArr = addNewTaxDetails($form, $form_state,$loggedInUserId);
      expDebug::dPrint(' $returnArr = ' . print_r($returnArr, true) , 5);
      $newTaxId = $returnArr[0]->id;
      expertus_set_message(t('MSG599') .' ' . t('MSG600')); //Tax details saved successfully

      $entityId                            = $form_state['values']['id'];
      $form_state['storage']['step']       = 'view';
      $form_state['build_info']['args'][]  = $newTaxId;
      $form_state['storage']['new_entity'] = TRUE;
    } else {
      updateTaxDetails($form, $form_state,$loggedInUserId);
      expertus_set_message(t('MSG599') .' ' . t('MSG601'));  //Tax details updated successfully
      $form_state['storage']['step']          = 'edit';
      $entityId                               = $form_state['values']['id'];
      $form_state['storage']['edited_entity'] = TRUE;
      unset($form_state['storage']['new_entity']);
    }
   $form_state['rebuild'] = TRUE;
   unset($_SESSION['esign_validate']);
   }
   } catch (Exception $ex) {
   	watchdog_exception('exp_sp_administration_tax_addedit_form_submit', $ex);
   	expertusErrorThrow($ex);
   }
}

/*
 * taxNewSubmitAddEditFormWithCancelAndSaveClose()
 */
function taxNewSubmitAddEditFormWithCancelAndSaveClose(&$form, $wrapperId = 'addedit-form-wrapper', $saveButtonId = 'save-button', $cancelButtonId = 'cancel-button', $taxId) {
  try {
	expDebug::dPrint(' taxNewSubmitAddEditFormWithCancelAndSaveClose() called.');

  $customHiddenButtonId = 'last-button-account';

  $esignHiddenButt = 'esign-'.$wrapperId;

  // Remove the temporary storage for API's to exchange information during form creation
  unset($form['addedit_tmp_storage']);
  global $theme_key;
  $leftBg ='';$rightBg='';$saveLeftBg='';
  if($theme_key == 'expertusoneV2') {
    $leftBg       = '<div class="white-btn-bg-left"></div>';
    $rightBg      = '<div class="white-btn-bg-right"></div>';
    $saveLeftBg   = '<div class="admin-save-button-left-bg"></div>';
  }
  // Add the Cancel button
  $ajaxCallbackCancel = 'addEditCancelRepaintForm';
  $cancelAttributes = array();
  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $cancelAttributes['class'] = array('addedit-edit-' . $cancelButtonId); // This class must be prefixed with 'addedit-edit-' followed by the form field id.

  // For common styling of all addedit cancel buttons
  //$cancelAttributes['class'][] = 'addedit-edit-cancel';

  // Using this class to applying bg color to the save button
  $cancelAttributes['class'][] = 'admin-action-button-middle-bg white-btn-bg-middle';

  // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
  $cancelAttributes['class'][] = 'addedit-form-expertusone-throbber';
  // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
  $cancelAttributes['data-wrapperid'] = array($wrapperId);

  // A common class for all addedit form cancel button, for styling to appear as a link.
  $cancelAttributes['class'][] = 'exp-addedit-form-cancel-button';

  $cancelAttributes['onclick'] = 'Drupal.CTools.Modal.dismiss(); return false;';
  $cancelLabel  = t('LBL123'); // Close
  $cancelAttributes['tabindex'][] = '10';

  $form[$cancelButtonId] = array(
    '#type' => 'submit',
    '#prefix' => '<div class="addedit-form-cancel-and-save-actions-row">' .
                 '<div class="addedit-form-cancel-container-actions">'.$leftBg,
    '#suffix' => $rightBg,
    '#value' => $cancelLabel,
    '#name' => $cancelLabel,
    '#attributes' => $cancelAttributes
  );

  // Add the Save button
  $ajaxCallbackSave = 'addEditRepaintForm';
  $saveAttributes = array();

  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $saveAttributes['class'] = array('addedit-edit-' . $saveButtonId); // This class must be prefixed with 'addedit-edit-' followed by the form field id.

  // Using this class to applying bg color to the save button
  //$saveAttributes['class'][] = 'admin-save-button-middle-bg';
  $saveAttributes['class'][] = 'edit-catalog-course-save-publish';

  // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
  $saveAttributes['class'][] = 'addedit-form-expertusone-throbber';
  // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
  $saveAttributes['data-wrapperid'] = array($wrapperId);
  $saveAttributes['tabindex'][] = '9';

  $taxStatus     = '';
  if (!empty($taxId)) {
    $taxDetails   = getTaxDetails($taxId,'fetchall');
    $taxStatus    = $taxDetails[0]->status;
  }
   $isSaveParent = 0;
   $setButtonId =  'tax_save_btn';
   if(empty($taxId) || $taxStatus != 'cme_tax_sts_atv'){
      $isSaveParent = 1;
      $saveAttributes['onclick'] = array();
      $form[$saveButtonId] = array(
	    '#type'   => 'submit',
      '#id'     => $setButtonId,
	    '#prefix' => '<div class="admin-save-pub-unpub-button-container">'.$saveLeftBg,
	    '#suffix' => '<span id="pub-unpub-action-btn" onclick="displayPubActionList()" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn ">&nbsp;</span></div>',
	    '#value'  => t('LBL141'),
      '#name'   => 'save',
	    '#attributes' => $saveAttributes,
        '#ajax' => array(
  	      'wrapper' => $wrapperId,
  	      'callback' => $ajaxCallbackSave,
          'customButtonId'=>$customHiddenButtonId,
  	      'method' => 'replace',
      	  'effect' => 'none', // 'fade',
  	      'event'=>'click',
  	      'keypress' => true,
  	      'progress' => array(
  	        'type' => 'throbber',
  	        'message' => ''
  	      ),
      	)
	  );
   }

    if($isSaveParent){
      $setButtonId =  'set_save_pub_btn';
      $form['addedit-button-group-ul-start'] = array(
        '#type' => 'markup',
        '#markup' => '<ul class="catalog-pub-add-list">',
      );
      $savePublishPrefix = '<li class="save-pub-unpub-sub-menu">';
      $savePublishSuffix = '</li>';
    }else{
      $savePublishPrefix = '<div class="admin-save-pub-unpub-button-container">'.$saveLeftBg;
      $savePublishSuffix = (($taxStatus == 'cme_tax_sts_atv') ? ('<span id="pub-unpub-action-btn" onclick="displayPubActionList()" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn ">&nbsp;</span>') : '<div class="admin-save-button-right-bg"></div>' ).'</div>';
    }
	  $saveButtonId = 'catalog-course-save-publish';
	  $savePublishAttributes['data-wrapperid'] = array($wrapperId);
	  $savePublishAttributes['onclick'] = array();
	  $savePublishAttributes['tabindex'][] = '5';
    $buttonLabel = ($taxStatus == 'cme_tax_sts_atv') ? t('LBL141') : t('LBL641');
    $savePublishAttributes['class'] = array('addedit-edit-' . $saveButtonId);
    $savePublishAttributes['class'][] = 'addedit-form-expertusone-throbber';
    $savePublishAttributes['class'][] = (($resultCnt==0) && ($taxStatus == 'cme_tax_sts_atv')) ? 'edit-catalog-course-save-publish' : 'pub-unpub-only-save-btn';
    $form[$saveButtonId] = array(
      '#type'   => 'submit',
      '#id'     => $setButtonId,
    	'#prefix' => $savePublishPrefix,
    	'#suffix' => $savePublishSuffix,
      '#value'  => $buttonLabel,
    	'#name'   => 'saveandpublish',
    	'#attributes' => $savePublishAttributes,
      '#ajax' => array(
	      'wrapper' => $wrapperId,
	      'callback' => $ajaxCallbackSave,
        'customButtonId'=>$customHiddenButtonId,
    	  'method' => 'replace',
	      'effect' => 'none', // 'fade',
	      'event'=>'click',
	      'keypress' => true,
	      'progress' => array(
	        'type' => 'throbber',
	        'message' => ''
	      ),
    	)
  );

   if(!$isSaveParent){
      $form['addedit-button-group-ul-start'] = array(
        '#type' => 'markup',
        '#markup' => '<ul class="catalog-pub-add-list">',
      );
    }

	if(($taxId) && $taxStatus == 'cme_tax_sts_atv'){
  	    $saveButtonId = 'tax-save-unpublish';
  	    $saveUnPublishAttributes['onclick'] = array();
        $saveUnPublishAttributes['class'] = array('addedit-edit-' . $saveButtonId);
        $saveUnPublishAttributes['class'][] = 'addedit-form-expertusone-throbber';
        $saveUnPublishAttributes['data-wrapperid'] = array($wrapperId);
        $form[$saveButtonId] = array(
  	    '#type' => 'submit',
  	    '#prefix' => '<li class="save-pub-unpub-sub-menu">',
  	    '#suffix' => '</li>',
  	    '#value' => t('LBL572'),
        '#name' => 'unpublish',
  	    '#attributes' => $saveUnPublishAttributes,
        '#ajax' => array(
    	      'wrapper' => $wrapperId,
    	      'callback' => $ajaxCallbackSave,
            'customButtonId'=>$customHiddenButtonId,
    	      'method' => 'replace',
        	  'effect' => 'none', // 'fade',
    	      'event'=>'click',
    	      'keypress' => true,
    	      'progress' => array(
    	        'type' => 'throbber',
    	        'message' => ''
    	      ),
        	)
  	   );
	}

    if(($taxId)){
      $countryName = getTaxCountryName($taxDetails[0]->country);
      $displayTitle = titleController('ADMIN-COMMERCE-TAX-COUNTRYNAME', $countryName,34);
	    $saveButtonId = 'catalog-course-delete';

	  $deleteAttributes['onclick'] = array();
      $deleteAttributes['onclick'][] = '$("#root-admin").data("narrowsearch").displayDeleteWizard("'.t('MSG357').' '.strtolower(t('Tax')).' '.
                                                 escape_string($countryName) . '","'.$taxId.'","Tax"); return false;';
      $deleteAttributes['class'][] = 'admin-delete-button-bg';
      $form[$saveButtonId] = array(
  	    '#type' => 'button',
  	    '#prefix' => '<li class="save-pub-unpub-sub-menu">',
  	    '#suffix' => '</li>',
  	    '#value' => t('LBL286'),
        '#name' => 'delete',
  	    '#attributes' => $deleteAttributes
  	  );
    }

	$form['addedit-button-group-ul-end'] = array(
      '#type' => 'markup',
      '#markup' => '</ul><div class="clearBoth"></div></div>' .
	             '<div class="clearBoth"></div></div>',
    );
  unset($saveAttributes['tabindex']);
  $saveAttributes['onclick'] = array();
  $saveAttributes['onclick'][] = 'Drupal.ajax.prototype.commands.addEditHideMessages();';
  $saveAttributes['onclick'][] = 'increasePopWidth();';
  $form[$customHiddenButtonId] = array(
	      '#type' => 'submit',
	      '#value' => t('hidden-save'),
	      '#name'	=> 'hidden-save',
      	'#prefix' => '<span id = "esign-admin-div" style="display:none;">',
	      '#suffix' => '</span>',
	      '#id' =>$customHiddenButtonId,
  		  '#attributes' => $saveAttributes,
	      '#ajax' => array(
		      'wrapper' => $wrapperId,
		      'callback' => 'addEditRepaintForm',
		      'method' => 'replace',
		      'effect' => 'none', // 'fade',
          'event'=>'click',
		      'keypress' => true,
		      'progress' => array(
		        'type' => 'throbber',
		        'message' => ''
		      ),
	    	)
	      );


  $form['addedit-left-col-end'] = array(
    '#type' => 'markup',
    '#markup' => '</div><div class="clearBoth"></div>',
  );
  } catch (Exception $ex) {
  	watchdog_exception('taxNewSubmitAddEditFormWithCancelAndSaveClose', $ex);
  	expertusErrorThrow($ex);
  }
}