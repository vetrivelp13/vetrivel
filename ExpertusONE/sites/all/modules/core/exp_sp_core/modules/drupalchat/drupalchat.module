<?php


/**
 * @file
 * Module code for DrupalChat.
 */

function drupalchat_verify_access() {
  global $user;
  // Match path if necessary.
  $page_match = FALSE;
  if (variable_get('drupalchat_path_pages', NULL)) {
    // Convert path to lowercase. This allows comparison of the same path
    // with different case. Ex: /Page, /page, /PAGE.
    $pages = drupal_strtolower(variable_get('drupalchat_path_pages', NULL));
    if (variable_get('drupalchat_path_visibility', BLOCK_VISIBILITY_NOTLISTED) < BLOCK_VISIBILITY_PHP) {
      // Convert the Drupal path to lowercase
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }
      // When $block->visibility has a value of 0 (BLOCK_VISIBILITY_NOTLISTED),
      // the block is displayed on all pages except those listed in $block->pages.
      // When set to 1 (BLOCK_VISIBILITY_LISTED), it is displayed only on those
      // pages listed in $block->pages.
      $page_match = !(variable_get('drupalchat_path_visibility', BLOCK_VISIBILITY_NOTLISTED) xor $page_match);
    }
    elseif (module_exists('php')) {
      $page_match = php_eval(variable_get('drupalchat_path_pages', NULL));
    }
    else {
      $page_match = FALSE;
    }
  }
  else {
    $page_match = TRUE;
  }
  return ($user->uid > 0 && $page_match && user_access('access drupalchat'));
}

/**
 * Implements hook_help().
 */
function drupalchat_help($path, $arg) {
  if ($path == 'admin/help#drupalchat') {
    return '<p>' . t('Provides one on one chat.') . '</p>';
  }
}
/**
 * Implements hook_permission().
 */
function drupalchat_permission() {
  return array(
    'administer drupalchat' => array(
      'title' => t('administer drupalchat'),
      'description' => t('Administer drupalchat'),
    ),
    'access drupalchat' => array(
      'title' => t('access drupalchat'),
      'description' => t('Access drupalchat'),
    ),
  );
}

/*
 * drupalchat_page_alter() - Implements hook_page_alter to add drupalchat to the site page(s)
 */
function drupalchat_page_alter(&$page) {
  if (drupalchat_verify_access()) {
    $page['page_bottom']['devel']= array(
      '#type' => 'markup',
      '#markup' => '<div style="clear:both;">' . theme('drupalchat') . '</div>',
    );
  }
}


/**
 * Implements hook_theme().
 */
function drupalchat_theme() {
  return array(
    'drupalchat' => array(
      'template' => 'drupalchat',
    ),
    
    'drupalchat_subpanel' => array(
      'variables' => array('subpanel' => NULL),
    	'template' => 'drupalchat-subpanel',
    ),
  );
}

/*
 * drupalchat_preprocess_drupalchat() - Implements hook_preprocess_theme() to provide variables to drupalchat theme
 *                                    - Modifies $variables which is received by reference
 */
function drupalchat_preprocess_drupalchat(&$variables) {
// 	expDebug::dPrint('$variables[subpanels] = ' . print_r($variables['subpanels'], true), 4);
	
	// Add online users list subpanel.
  $items = array();
  $items[] = array('data' => _drupalchat_chat(), 'id' => 'chatpanel');

  $variables['subpanels'] = theme('item_list', array('items' => $items,
                                                     'title' => NULL,
                                                     'type' => 'ul',
                                                     'attributes' => array('id' => 'mainpanel')));
//   expDebug::dPrint('$variables[subpanels] after modification = ' . print_r($variables['subpanels'], true), 4);
}

/*
 * _drupalchat_chat() - called by drupalchat_preprocess_drupalchat() to prepare online users list subpanel data.
 */
function _drupalchat_chat() {
  global $user;
  global $theme_key;

  $chat = array();
  $chat['name'] = 'chat';

  $signInState = 1;
  if ($user->uid > 0) {// authenticated user (must always be)
    $signInState = getUserChatSignedInStateFromSltperson($user->name);
  }
  $chat['signinbuttontext'] = ($signInState == 2)? t('Sign Out') : t('MSG526');

  if ($signInState == 2) {
    $chat['contents'] = theme('item_list', array('items' => array(array('data' => t('MSG524'), //No users online
                                                                         'class' => array('drupalchatnousers')))));  		
  }
  else { // Signed in
    
    $chat['signinstatus'] = 'TRUE'; //This is used for UI purpose. If the status is TRUE will show the sign in information to user.
    
    $chat['contents'] = theme('item_list', array('items' => array(array('data' => t('MSG526'), //Sign in for chat.
    																	   'title' => array(t('MSG526')),
                                                                           'class' => array('drupalchatnousers change-signin-state')))));
  }
  $chat['text'] = '<span class="chattitle">' . t('LBL855') . '</span>' . ' <span class="count_class">(<span class="online-count">' . count($items) . '</span>)</span>';

  $theme = variable_get('drupalchat_theme', ($theme_key == 'expertusoneV2')? 'expertusone_V2' : 'expertusone');
  $chat['icon'] = theme('image', array('path' => drupal_get_path('module', 'drupalchat') . '/themes/' . $theme . '/images/loading.gif',
                                       'width' => NULL, 'height' => NULL, 'alt' => '', 'attributes' => array('class' => 'icon')));

//   expDebug::dPrint('$chat = ' . print_r($chat, true), 4);
  return theme('drupalchat_subpanel', array('subpanel' => $chat));
}

/**
 * Implements hook_menu().
 */
function drupalchat_menu() {

    // Administration pages.
    $items['admin/config/drupalchat'] = array(
        'title' => 'DrupalChat',
        'description' => 'Administer DrupalChat.',
        'position' => 'left',
        'weight' => -10,
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('access administration pages'),
        'file' => 'system.admin.inc',
		    'file path' => drupal_get_path('module', 'system'),
    );

    $items['admin/config/drupalchat/configuration'] = array(
        'title' => 'Configure',
        'description' => 'Configure DrupalChat module.',
        'page callback' => 'drupal_get_form',
        'access arguments' => array('administer drupalchat'),
        'page arguments' => array('drupalchat_settings_form'),
        'file' => 'drupalchat.admin.inc',
        'weight' => 10,
    );
  
  $items['drupalchat/savemsg'] = array(
    'title' => 'Save Chat Message(s)',
    'page callback' => 'drupalchat_savemsg',
    'access arguments' => array('access drupalchat'),
    'type' => MENU_CALLBACK,
  );
  
  // Expertus added functionality
  $items['drupalchat/changeSignInState/%'] = array(
    'title' => 'Change Chat Sign In State',
    'page callback' => 'changeChatSignInState',
    'page arguments' => array(2),
    'access arguments' => array('access drupalchat'),
    'type' => MENU_CALLBACK, 
  );
  return $items;
}

/**
 * Implements hook_user_login().
 */
function drupalchat_user_login(&$edit, $account) {
  setcookie("DRUPALCHAT_NEWLOGIN", 1, time()+120); // Expertus Notes: Cookie is used to determine whether to get drupalchat from
                                                   // browser persistent storage or not in drupalchat.js
}

/*
 * drupalchat_init() - implements hook_init()
 */
function drupalchat_init() {
	global $user, $base_url, $theme_key;
	
	if ($user->uid <= 0) { // Anonymous user is not supported
		return;
	}
	
  if (drupalchat_verify_access()) {
    $account = user_load($user->uid);
     $user_name = check_plain(format_username($account));
    $signInState = getUserChatSignedInStateFromSltperson($account->name);
	  $theme = variable_get('drupalchat_theme', ($theme_key == 'expertusoneV2')? 'expertusone_V2' : 'expertusone');
	  if ($theme == 'expertusone_V2') {
	    $defaultChatUserIcon = 'expertusonev2_default_user.png';
    }
    else {
	    $defaultChatUserIcon = 'default_user.png';
    }
     
    $my_settings = array(
      'username' => $user_name,
      'userfullname' => getPersonFullName($user->uid,$user_name), //Expertus added
      'uid' => $user->uid,
      'userPictureFilename' => ($account->picture != null)? $account->picture->filename : $defaultChatUserIcon,
      'saveMsgs' => variable_get('drupalchat_log_messages', 2), //Expertus added
      'saveMsgUrl' => url('drupalchat/savemsg', array('absolute' => TRUE)), // Expertus added
      'changeSignInStateUrl' => url('drupalchat/changeSignInState', array('absolute' => TRUE)), // Expertus added
      'signInState' => $signInState,
      'signIntoChat' => t('MSG526'), //Sign into Chat
      'signOutOfChat' => t('Sign Out'), // using pre-existing msgid in en_us3.po file.
      'newMessage' => t('MSG527'), //New chat message!
      'noChatServer' => t('MSG528'), //Chat server is unavailable.
      'showChatTimeAfter' => 15000, //in milliseconds
      'undeliveredErrorMsg' => t('ERR179'), //did not receive your chat.
      'chatTimePrefix' => t('MSG529'), //Sent at
    	'chatClose' => t('LBL123'),
      'chatTimeSuffixAM' => t('LBL863'), //am
      'chatTimeSuffixPM' => t('LBL864'), //pm
      'me' => strtolower(t('Me')), //me
      'chatTitle' => t('LBL855'), //Chat
      'chatMinimizeText' => t('LBL893'),//minimize
      'chatMaximizeText' => t('LBL894'),//maximize
      'images' => $base_url . '/' . drupal_get_path('module', 'drupalchat') . '/themes/' . $theme . '/images/',
      'sound' => base_path() . drupal_get_path('module', 'drupalchat') . '/swf/sound.swf',
      'noUsers' =>   theme('item_list', array('items' => array(0 => array('data' => t('MSG524'), 'class' => array('drupalchatnousers'),)),)),
      'signedOut' => theme('item_list', array('items' => array(0 => array('data' => t('MSG526'), 'class' => array('drupalchatnousers change-signin-state'),)),)),
      'smileyURL' => base_path() . drupal_get_path('module', 'drupalchat') . '/smileys/very_emotional_emoticons-png/png-32x32/',
      'enableSimleys' => variable_get('drupalchat_enable_smiley', 2),
	    'notificationSound' => variable_get('drupalchat_notification_sound', 1),
      'useStopWordList' => variable_get('drupalchat_use_stop_word_list', 1), // EXPERTUS added
      'showUsersPictures' => variable_get('drupalchat_user_picture', 1), // EXPERTUS added
      'sessionCheckTimeout' => (1000 * (int)variable_get('drupalchat_session_check_timeout', 30)),
      'onlineUsersListScrollingSetting' => variable_get('drupalchat_user_list_scrolling_setting', 1) //EXPERTUS added
    );
    
    // EXPERTUS added if statement
    if($my_settings['useStopWordList'] != 1) {
        $my_settings['stopWordList'] = variable_get('drupalchat_stop_word_list',
                                                    'asshole,assholes,bastard,beastial,beastiality,beastility,bestial,bestiality,bitch,' .
                                                    'bitcher,bitchers,bitches,bitchin,bitching,blowjob,blowjobs,bullshit,clit,cock,cocks,' .
                                                    'cocksuck,cocksucked,cocksucker,cocksucking,cocksucks,cum,cummer,cumming,cums,cumshot,' .
                                                    'cunillingus,cunnilingus,cunt,cuntlick,cuntlicker,cuntlicking,cunts,cyberfuc,cyberfuck,' .
                                                    'cyberfucked,cyberfucker,cyberfuckers,cyberfucking,damn,dildo,dildos,dick,dink,dinks,' .
                                                    'ejaculate,ejaculated,ejaculates,ejaculating,ejaculatings,ejaculation,fag,fagging,faggot,' .
                                                    'faggs,fagot,fagots,fags,fart,farted,farting,fartings,farts,farty,felatio,fellatio,fingerfuck,' .
                                                    'fingerfucked,fingerfucker,fingerfuckers,fingerfucking,fingerfucks,fistfuck,fistfucked,' .
                                                    'fistfucker,fistfuckers,fistfucking,fistfuckings,fistfucks,fuck,fucked,fucker,fuckers,' .
                                                    'fuckin,fucking,fuckings,fuckme,fucks,fuk,fuks,gangbang,gangbanged,gangbangs,gaysex,' .
                                                    'goddamn,hardcoresex,horniest,horny,hotsex,jism,jiz,jizm,kock,kondum,kondums,kum,kumer,' .
                                                    'kummer,kumming,kums,kunilingus,lust,lusting,mothafuck,mothafucka,mothafuckas,mothafuckaz,' .
                                                    'mothafucked,mothafucker,mothafuckers,mothafuckin,mothafucking,mothafuckings,mothafucks,' .
                                                    'motherfuck,motherfucked,motherfucker,motherfuckers,motherfuckin,motherfucking,motherfuckings,' .
                                                    'motherfucks,niger,nigger,niggers,orgasim,orgasims,orgasm,orgasms,phonesex,phuk,phuked,' .
                                                    'phuking,phukked,phukking,phuks,phuq,pis,piss,pisser,pissed,pisser,pissers,pises,pisses,' .
                                                    'pisin,pissin,pising,pissing,pisof,pissoff,porn,porno,pornography,pornos,prick,pricks,' .
                                                    'pussies,pusies,pussy,pusy,pussys,pusys,slut,sluts,smut,spunk');    	
    }
		  
	  drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/jquery.titlealert.min.js');
	  drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/jquery.mousewheel.js');
	  //drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/mwheelIntent.js');
	  drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/swfobject.js');
	  drupal_add_css(drupal_get_path('module', 'drupalchat') . '/themes/' . $theme . '/' . $theme . '.css');
	  drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/jquery.json-2.3.min.js', array('group' => JS_LIBRARY, 'cache' => TRUE));
	  drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/drupalchat-jstorage.js');
	  drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/drupalchat.js'); 
		drupal_add_js(drupal_get_path('module', 'drupalchat') . '/js/ba-emotify.js');
		drupal_add_js(array('drupalchat' => $my_settings), array('type' => 'setting'));
  }
}

/*
 * Implements hook_user_picture_updated()
 */ 
function drupalchat_user_picture_updated($drupalUserId) {
	global $theme_key;
  $theme = variable_get('drupalchat_theme', ($theme_key == 'expertusoneV2')? 'expertusone_V2' : 'expertusone');
  if ($theme == 'expertusone_V2') {
	  $defaultChatUserIcon = 'expertusonev2_default_user.png';
  }
  else {
	  $defaultChatUserIcon= 'default_user.png';
  }
  
	if ($drupalUserId > 0) {
    $account = user_load($drupalUserId, true);
    expDebug::dPrint('$account = ' . print_r($account, true), 4);
    $message['uid'] = $drupalUserId;
    $message['name'] = $account->name;
    $message['pictureFilename'] = ($account->picture != null)? $account->picture->filename : $defaultChatUserIcon;
    $drupalchat_nodejs_message = (object) array(
      //'channel' => 'drupalchat_' . $drupalUserId,
      'channel' => 'expertus-chat-server',
      'broadcast' => FALSE,
      'type' => 'sendPictureFilename',
      'callback' => 'drupalchatNodejsMessageHandler',
      'data' => drupal_json_encode($message),
    );
    expDebug::dPrint('$drupalchat_nodejs_message = ' . print_r($drupalchat_nodejs_message, true), 4);
    nodejs_enqueue_message($drupalchat_nodejs_message);
	}
}


/*
 * drupalchat_savemsg() - Saves chat message in DB.
 * Acts as server side handler for session timeout check or session refresh when drupalchat_log_messages is set to Off (2).
 */
function drupalchat_savemsg() {
	// Acts as server side handler for session timeout check or session refresh when drupalchat_log_messages is set to Off (2).
	global $user;
	if ($user->uid > 0 && variable_get('drupalchat_log_messages', 2) == 1) {
		expDebug::dPrint('$_POST[drupalchat_msgs] = ' . print_r($_POST['drupalchat_msgs'], true), 4);
		
		foreach ($_POST['drupalchat_msgs'] as $msgObj) {
			expDebug::dPrint('$msgObj = ' . print_r($msgObj, true), 4);
			foreach ($msgObj['msgsList'] as $msg) {
		    $message = (object) array(
          'message_id' => check_plain($msg['id']),
          'uid1' => $user->uid,
          'uid2' => check_plain($msgObj['uid2']),
          'message' => check_plain($msg['msg']),
          'timestamp' => time(),
        );
        drupal_write_record('drupalchat_msg', $message);
			}
		} // end foreach
	} // end if
  
  drupal_json_output(array());
}

/*
 * get user chat_signed_in state from slt_person table by matching the user_name field
 * 
 */
function getUserChatSignedInStateFromSltperson($uname) {
  try {
    $select = db_select('slt_person', 'pers');
    $select->addField('pers', 'chat_signed_in', 'chat_sign_in');
    $select->condition('pers.user_name', $uname, '=');
    $result =  $select->execute()->fetchField();
    
    if (empty($result)) {
      return 1; // Signed out
    }
    return 2; // Signed in
  }
  catch (Exception $ex) {
    watchdog_exception('getUserChatSignedInStateFromSltperson', $ex);
    //expertusErrorThrow($ex);
    die(t("ERR155")); // temporary fix till we know why 'Fatal error: Call to undefined function' for expertusErrorThrow()
  }
}

/*
 * changeChatSignInState() - computes new state and updates chat_signed_in in slt_person. Informs nodejs node server.
 */
function changeChatSignInState($currentState) {
  global $user;
  try {
    if ($user->uid > 0) {
      if ($currentState == 2) { // currently signed in
        $newState = 1; // Sign out
      }
      else {
        $newState = 2; // Sign in
      }
      
      $personId = getIdForUserName($user->name);
      $updtStmt = db_update('slt_person');
      $updtStmt->fields(array(
              'chat_signed_in' => ($newState - 1),
            ));
      $updtStmt->condition('id', $personId);
      expDebug::dPrintDBAPI('$updtStmt', $updtStmt);
      $updtStmt->execute();
      
      echo drupal_json_encode(array('new_state' => $newState)); // Inform client that the status is changed in db

      // Inform node.js server of user's new state
      $message['uid'] = $user->uid;
      $message['name'] = $user->name;
      $message['signInState'] = $newState;
      $drupalchat_nodejs_message = (object) array(
        //'channel' => 'drupalchat_' . $user->uid,
        'channel' => 'expertus-chat-server',
        'broadcast' => FALSE,
        'type' => 'signInStateChanged',
        'callback' => 'drupalchatNodejsMessageHandler',
        'data' => drupal_json_encode($message),
      );
      expDebug::dPrint('$drupalchat_nodejs_message = ' . print_r($drupalchat_nodejs_message, true), 4);
      nodejs_enqueue_message($drupalchat_nodejs_message);
    }
    else {
      echo 1; // anonymous user not currently supported
    }
  }
  catch (Exception $ex) {
    watchdog_exception('changeChatSignInState', $ex);
    //expertusErrorThrow($ex);
    die(t("ERR155")); // temporary fix till we know why 'Fatal error: Call to undefined function' for expertusErrorThrow()
  }
}

/*
 * Implement hook_TYPE_alter() to alter append signInState to authData
 */
function drupalchat_nodejs_auth_user_alter(&$authData) {
  expDebug::dPrint('$authData = ' . print_r($authData, true), 4);
  $authData->signInState = 1;
  if ($authData->uid > 0) { // authenticated user
    $authData->signInState = getUserChatSignedInStateFromSltperson($authData->name);
  }
  
  expDebug::dPrint('$authData after mod = ' . print_r($authData, true), 4);
}

/*
 * Code brought in from drupalchat_nodejs.module - start
 */

/**
 * Implements hook_nodejs_handlers_info().
 */
function drupalchat_nodejs_handlers_info() {
  return array(
    drupal_get_path('module', 'drupalchat') . '/js/drupalchat_nodejs.js',
  );
}

/*
 * Code brought in from drupalchat_nodejs.module - end
 */
  
/**
 * Implements hook_default_theme_changed().
 */
function drupalchat_default_theme_changed($theme) {
	try {
		global $theme_key;	
		//expDebug::dPrint('$theme = ' . $theme, 4);
		if ($theme == 'expertusoneV2') {
			variable_set('drupalchat_theme', 'expertusone_V2');
		}
		else { //$theme == 'expertusone'
			variable_set('drupalchat_theme', 'expertusone');
		}		
		//expDebug::dPrint('Drupalchat theme set to ' . variable_get('drupalchat_theme', ($theme_key == 'expertusoneV2')? 'expertusone_V2' : 'expertusone'), 4);
	}
	catch (Exception $ex) {
		watchdog_exception('drupalchat_default_theme_changed', $ex);
		//expertusErrorThrow($ex);
		die(t("ERR155")); // temporary fix till we know why 'Fatal error: Call to undefined function' for expertusErrorThrow()
  }
}
