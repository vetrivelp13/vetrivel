<?php

/**
 * Implementation of hook_init().
 */
function exp_sp_administration_program_init() {
	global $theme_key;
	$css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
	if($theme_key == 'expertusoneV2') {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/font-awesome.min.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program_roster_v2.css', $css_theme_optional);
        
        if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_v2.css', $css_theme_optional);
        } //#custom_attribute_0078975 - End Check module status
        
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1300));
	} else {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program_roster.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
	}
	/*--- issue fix : 36124 - add a need files for class regiser ---*/
	if(stripos(request_uri(),'administration/tpexportoption')!==false){
	 include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_tp_register.inc');
	}
}

/**
 * Implementation of hook_menu().
 */
function exp_sp_administration_program_menu() {
 try{
  $items = array();
   $items['administration/learning/program'] = array(
    'title' => t('Training Plan'),
    'page callback' => 'empty_value',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'weight' => 2,
    'access arguments' => array('Training Program Details Admin Perm'),
    );

  $items['administration/learning/program/search/all'] = array(
    'title' => 'Fetch Program List to display in JQGrid',
    'page callback' => 'sendProgramListToJqGrid',
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_program.inc'
    );

  $items['administration/learning/program/%ctools_js/addedit'] = array(
    'title' => 'Add / Edit Traing plan',
   'page callback' => 'exp_sp_administration_program_display_addedit_form',
   //'page callback' => 'tudakozo_page_callback',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_program.inc'
    );

  $items['administration/learning/program/addedit'] = array(
    'title' => 'Add / Edit Organization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exp_sp_administration_program_addedit_form'),
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK
    );

  $items['administration/learning/program/textfilter-autocomplete'] = array(
    'title' => 'Search By Text Filter Autocomplete',
    'page callback' => 'getProgramAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_program.inc',
    );

  $items['administration/learning/program/%/survey-assessment-autocomplete'] = array(
    'title' => 'Survey/Assesment Autocomplete',
    'page callback' => 'getSurveyAssessmentAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK
    );

  $items['administration/learning/program/tag-autocomplete'] = array(
  'title' => 'Tag Autocomplete',
  'page callback' => 'getTagnameAutoComplete',
  'access callback' => 'user_access',
  'access arguments' => array('Training Program Details Admin Perm'),
  'type' => MENU_CALLBACK
  );
  $items['administration/learning/program/export'] = array(
    'title' => 'Program Search Results CSV Export',
    'page callback' => 'fetchProgramAll',
    'page arguments' => array('CSV'),
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_program.inc',
    );
  $items['administration/learning/program/print'] = array(
    'title' => 'Program Search Results CSV Export',
    'page callback' => 'fetchProgramAll',
    'page arguments' => array('PDF'),
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_program.inc',
    );
   $items['administration/learning/program/roster/%/%/%'] = array(
    'title' => 'Launch Roster',
    'page callback' => 'launchProgramRoster',
  	'page arguments' => array(4, 5, 6),
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK,
   'file' => 'exp_sp_administration_program_roster.inc'
    );

   $items['administration/learning/program/roster/load-drop-down/%'] = array(
    'title' => 'Drop Down List Roster',
    'page callback' => 'getProgramDropDownList',
  	'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK,
   'file' => 'exp_sp_administration_program_roster.inc'
    );

   $items['administration/learning/program/roster/update/%'] = array(
    'title' => 'Launch Roster',
    'page callback' => 'updateProgramRoster',
  	'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK,
   'file' => 'exp_sp_administration_program_roster.inc'
    );
   $items['ajax/administration/learning/program/publish-and-unpublish/%'] = array (
    'title' => 'Publish Or Unpublish Program for a user',
    'page callback' => 'publishOrUnpublishProgram',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
    'access arguments' => array('Training Program Details Admin Perm'),
    'file' => 'exp_sp_administration_program.inc'
	);

   $items['administration/learning/program/attachcourse/%/%/%/%'] = array(
    'title' => 'Attach Course',
    'page callback' => 'attachCourseDetails',
  	'page arguments' => array(4,5,6,7),
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK,
   'file' => 'exp_sp_administration_program.inc'
    );

   $items['administration/learning/program/course-autocomplete/%/%'] = array(
    'title' => 'Attach Course',
    'page callback' => 'getProgramCourseAutoComplete',
  	'page arguments' => array(4,5 ),
    'access callback' => 'user_access',
    'access arguments' => array('Training Program Details Admin Perm'),
    'type' => MENU_CALLBACK,
   'file' => 'exp_sp_administration_program.inc'
    );
   
   $items['administration/learning/program/course-autocomplete/search'] = array(
   		'title' => 'Attach Course',
   		'page callback' => 'getProgramCourseAutoCompleteSearch',
   		'page arguments' => array(),
   		'access callback' => 'user_access',
   		'access arguments' => array('Training Program Details Admin Perm'),
   		'type' => MENU_CALLBACK,
   		'file' => 'exp_sp_administration_program.inc'
   );

  $items['administration/update-attachedcourse-group/%/%/%/%/%'] = array(
    'title' => 'Attached Course Group Edit',
    'page callback' => 'attachedcourse_group_update',
    'page arguments' => array(2,3,4,5,6),
    'access callback' => 'user_access',
    'access arguments' => array('Learning Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_attach_course.inc',
  	'file path' => drupal_get_path('module', 'exp_sp_administration_learning')
  );

   $items['administration/update-attachedcourse-mandatory/%'] = array(
    'title' => 'Attached Course Mandatory Edit',
    'page callback' => 'attachedcourse_mandatory_update',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('Learning Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_attach_course.inc',
  	'file path' => drupal_get_path('module', 'exp_sp_administration_learning')
  );
   $items['administration/view-trainingplan/%ctools_js/addedit/%'] = array(
   		'title' => 'View trainingplan',
   		'page callback' => 'exp_sp_administration_viewtp_addedit_form',
   		'page arguments' => array(3,4),
   		'access callback' => 'user_access',
   		'access arguments' => array('Training Program Details Admin Perm'),
   		'type' => MENU_CALLBACK,
   		'file' => 'exp_sp_administration_program.inc'
   );
   $items['administration/learning/program/view-screen/%'] = array(
   		'title' => 'Get enrolled class/tp list for view screen',
   		'page callback' => 'getMasterEnrollmentsResultForViewScreen',
   		'page arguments' => array(4),
   		'access callback' => 'user_access',
   		'access arguments' => array('Training Program Details Admin Perm'),
   		'type' => MENU_CALLBACK,
   		'file' => 'exp_sp_administration_learning.inc',
   		'file path' => drupal_get_path('module', 'exp_sp_administration_learning'),

   );
   $items['administration/learning/program/add-group/%/%/%'] = array(
   		'title' => 'Add group title for Courses',
   		'page callback' => 'getAddGroupDisplay',
   		'page arguments' => array(4,5,6),
   		'access callback' => 'user_access',
   		'access arguments' => array('Training Program Details Admin Perm'),
   		'type' => MENU_CALLBACK,
   		//'file' => 'exp_sp_administration_program.inc',
   		//'file path' => drupal_get_path('module', 'exp_sp_administration_learning'),

   );
   $items['administration/learning/program/add-module/%/%/%'] = array(
   		'title' => 'Add module title for Program',
   		'page callback' => 'getAddModuleDisplay',
   		'page arguments' => array(4,5,6),
   		'access callback' => 'user_access',
   		'access arguments' => array('Training Program Details Admin Perm'),
   		'type' => MENU_CALLBACK,
   		//'file' => 'exp_sp_administration_program.inc',
   		//'file path' => drupal_get_path('module', 'exp_sp_administration_learning'),

   );
   $items['administration/learning/program/group-save/%/%/%'] = array(
   		'title' => 'Add group title for Courses',
   		'page callback' => 'groupEditSaveTP',
   		'page arguments' => array(4,5,6),
   		'access callback' => 'user_access',
   		'access arguments' => array('Training Program Details Admin Perm'),
   		'type' => MENU_CALLBACK,
   		'file' => 'exp_sp_administration_program.inc',
   		//'file path' => drupal_get_path('module', 'exp_sp_administration_learning'),

   );
   $items['administration/learning/program/add-assessment/%/%/%'] = array(
   		'title' => 'Add assessment for TP',
   		'page callback' => 'attachAssessmentDetails',
   		'page arguments' => array(4,5,6),
   		'access callback' => 'user_access',
   		'access arguments' => array('Training Program Details Admin Perm'),
   		'type' => MENU_CALLBACK,
   		'file' => 'exp_sp_administration_program.inc',
   		//'file path' => drupal_get_path('module', 'exp_sp_administration_learning'),

   );
   $items['administration/learning/program/add-survey/%/%/%'] = array(
   		'title' => 'Add assessment for TP',
   		'page callback' => 'attachSurveyDetails',
   		'page arguments' => array(4,5,6),
   		'access callback' => 'user_access',
   		'access arguments' => array('Training Program Details Admin Perm'),
   		'type' => MENU_CALLBACK,
   		'file' => 'exp_sp_administration_program.inc',
   		//'file path' => drupal_get_path('module', 'exp_sp_administration_learning'),

   );
   $items['administration/learning/program/delete-module/%/%/%'] = array(
   		'title' => 'Delete Module for TP',
   		'page callback' => 'deleteModuleTP',
   		'page arguments' => array(4,5,6),
   		'access callback' => 'user_access',
   		'access arguments' => array('Training Program Details Admin Perm'),
   		'type' => MENU_CALLBACK,
   		'file' => 'exp_sp_administration_program.inc',
   		//'file path' => drupal_get_path('module', 'exp_sp_administration_learning'),

   );
   
    $items['administration/module/enroll-cnt/%/%/%'] = array(
   		'title' => 'View trainingplan',
   		'page callback' => 'getEnrollmentCnt',
   		'page arguments' => array(3,4,5),
   		'access callback' => 'user_access',
   		'access arguments' => array('Training Program Details Admin Perm'),
   		'type' => MENU_CALLBACK,
   		'file' => 'exp_sp_administration_program.inc'
   );

   $items['administration/sequence-drag-drop-prg/%/%/%'] = array(
    'title' => 'Attached Course Group Edit',
    'page callback' => 'sequenceAttachCourse',
    'page arguments' => array(2,3,4),
    'access callback' => 'user_access',
    'access arguments' => array('Learning Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_attach_course.inc',
  	'file path' => drupal_get_path('module', 'exp_sp_administration_learning')
  );
  $items['administration/learning/program/appendtab/%'] = array(
    'title' => 'Append module tabs',
    'page callback' => 'append_module_tabs',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('Learning Admin Perm'),
    'type' => MENU_CALLBACK,
  );
  $items['administration/selectpath/%/%/%'] = array(
  		'title' => 'select path popup',
  		'page callback' => 'getSelectPathDisplay',
  		'page arguments' => array(2,3,4),
  		'access callback' => 'user_access',
  		'access arguments' => array('Learning Admin Perm'),
  		'type' => MENU_CALLBACK,
  		'file' => 'exp_sp_administration_program.inc'
  );
 
  expDebug::dPrint(' $items = ' . print_r($items, true), 4);
  return $items;
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_program_menu', $ex);
  	expertusErrorThrow($ex);
  }
}


/**
 * Implements hook_theme().
*/
function exp_sp_administration_program_preprocess() {
	if(stripos(request_uri(),'administration/learning/program')!== false)
		includeFilesForProgram();
}

function exp_sp_administration_program_display_addedit_form($js = NULL, $prgId) {
  try {
	 // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())

   $program_style = array(
    'ctools-admin-programform-addedit-style' => array(
      'modalSize' => array(
        'width' => 870,
        'minHeight' => 380,
       ),
    )
  );

  drupal_add_js($program_style, 'setting');

  if ($js) {
    $argsList = array();
    $programTitle = '';
    if (!empty($prgId)) {
      $argsList[] = $prgId;
      $programTitle = ' - '.titleController('EXP-SP-ADMIN-PGM-PGMID', getTpTitleDirect($prgId),60);
      $modId = getDefaultModuleId($prgId);
      $moduleId = $modId->module_id;
      $argsList[] = $moduleId;
    }

    // Prepare list of forms to be displayed in the modal
    $formIdList = array(
                      array('id' => 'exp_sp_administration_program_addedit_form', 'title' => t('Training Plan')),
                      array('id' => 'exp_sp_administration_program_attaching_courses_form', 'title' => t('LBL715'),'type' =>'program_tabs'),
                     );
    // $argumentMode='';
    exp_ctools_modal_multi_ajaxonly_forms_display($formIdList, $argsList);
  }
  else {
  	throw new Exception('exp_sp_administration_program.module: exp_sp_administration_program_display_addedit_form() : nojs');
  }
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_program_display_addedit_form', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * exp_sp_administration_program_addedit_form() - Build the addedit form.
 */
function exp_sp_administration_program_addedit_form($form, &$form_state, $renderMode, $arg) {
  try {
      expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
      expDebug::dPrint(' $form_state = ' . print_r($form_state, true) , 5);
      expDebug::dPrint(' $renderMode = ' . print_r($renderMode, true) , 4);
      expDebug::dPrint(' $arg = ' . print_r($arg, true) , 4);

      $showCancelSave = 1;
      if (empty($form_state['values'])) {
      	$currentUserId = getIdOfLoggedInUser();
      	$num_deleted = db_delete('slt_entity_reading_mapper')->condition('entity_id', '0')->condition('entity_type', 'cre_sys_obt_trp')->condition('created_by', $currentUserId)->execute();
      }
      includeFilesForProgram();
      if (empty($form_state['storage'])) {
          if(!empty($arg) && empty($form_state['storage'])) {
              $form_state['storage']['step'] = 'edit';
          } elseif(empty($arg) && empty($form_state['storage'])) {
              $form_state['storage']['step'] = 'add';
          }
      }
      $form = newAddEditFormWithCancelAndSave('program-addedit-form');
      //$emptyId        = empty($form_state['values']['empty_id']) ? microtime(false) : $form_state['values']['empty_id'];
      $emptyId = '';
      if(empty($arg)){
           $entityId       = $form_state['values']['id'];
           $emptyId        = empty($form_state['values']['empty_id']) ? microtime(false) : $form_state['values']['empty_id'];
      } else {
           $entityId       = $arg;
      }


      if (!empty($arg)) { // An edit operation. Is not form rebuild after save, in which case we
                                                            // can fetch values from $form_state.
        // Fetch program details to be displayed in the form
        $prgDetails = getTrainingProgramDetails($arg, array('id', 'type', 'lang_code', 'title', 'code', 'description','status','additional_info',
                                                               'short_desc', 'start_date', 'end_date', 'price', 'expires_in_value', 'expires_in_unit',
                                                               'object_type', 'currency_type',
                                                                   'end_date','author_vendor','in_active_reason','enforce_sequence','addn_catalog_show','addn_notification_show'));

      }

      expDebug::dPrint(' $form_state[storage][step] = ' . print_r($form_state['storage']['step'], true) , 4);

      // Create a new add/edit form
      //$form = newAddEditFormWithCancelAndSave('program-addedit-form');
      //$form = newAddEditFormWithCancelAndSave();
      //$entityId    = $arg;
      //$default_val = getModuleIdFromObjectId($entityId,1);
      addHiddenFieldToAddEditForm($form, 'empty_id', $emptyId);
      addHiddenFieldToAddEditForm($form, 'entity_value', '');
      //addHiddenFieldToAddEditForm($form, 'module_id', $default_val[0]->module_id);
      $objectType   = getObjectypeFromProgramID($entityId);
      //checkLearningProgramType($form, $form_state);
      $objectString = checkLearningProgramTypeString($objectType);
      $uniqueId     = $entityId.'-'.$objectType;
      $form['mapped_program_id'] = array(
          '#type' => 'hidden',
          '#name' => 'mapped_program_id',
          '#value' => $entityId
        );
      $form['mapped_program_type'] = array(
          '#type' => 'hidden',
          '#name' => 'mapped_program_type',
          '#value' => $objectType
        );
        $form['mapped_module_id'] = array(
          '#type' => 'hidden',
          '#name' => 'selected_enroll_path',
          '#value' => ''
        );
        $form['mapped_module_name'] = array(
          '#type' => 'hidden',
          '#name' => 'selected_enroll_path_name',
          '#value' => ''
        );
      $form['trainingplan_detail_disp'] = array(
      	  '#type'       => 'markup',
          '#prefix'     => '<div id="program-tp-basic-addedit-form-disp" style="position:relative;">',
          //'#suffix'     => '</div>',
          //'#attributes' => $editAttributes,
        );
      list_tp_forms($form, $form_state, $defaultValue, $arg);
      $form['trainingplan_detail_wrapper'] = array(
      	  '#type'       => 'markup',
          //'#prefix'     => '<div class="catalog-course-basic-addedit-form-container" id="program-tp-basic-addedit-form-container">',
    		'#prefix'     => '<div class="addedit-form-main-container">
          					<div class="round-corner-left"><div class="round-corner-right"><div class="round-corner-middle"></div></div></div>
          					<div class="catalog-course-basic-addedit-form-container" id="program-tp-basic-addedit-form-container">',

        );

      if($form_state['storage']['step'] == 'view') {
           //edit_course_details($form, $form_state, $defaultValue);
            edit_program_details($form, $form_state, $prgDetails);

           if($form_state['storage']['substep'] == 'details' || empty($form_state['storage']['substep'])) {
              	edit_program_view($form, $form_state, $prgDetails, $entityId);
              	$form_state['storage']['substep'] = 'details';
              }
            expDebug::dPrint('inside1234 view :'.$form_state['storage']['step'] , 5);
            //edit_program_view($form, $form_state, $prgDetails);
           if($form_state['storage']['substep'] == 'Attachment') {
              // To display the Attachment UI
              //displayAttachmentDetails($form, $form_state, $entityId, $entityType, $uniqueId);
              attachmentDetailsView($form, $form_state, $entityId, $objectType, $uniqueId);

            }
            if($form_state['storage']['substep'] == 'tag') {
              // To display the Tag UI
              //displayTagDetails($form, $form_state, $entityId, 'Course', $uniqueId);
              tagDetailsView($form, $form_state, $entityId, $objectString, $uniqueId);
            }

            // To display the Enroll User UI
            if($form_state['storage']['substep'] == 'enrolltpuser') {
              displayTPRegisterDetails($form, $form_state, $entityId, $objectType ,$uniqueId);
            }

            // To display the Pre-requisite UI
            if($form_state['storage']['substep'] == 'prerequisite') {
                displayPreRequisiteDetails($form, $form_state, $entityId, 'cre_sys_obt_trp', $uniqueId,'complete_view');
              //preRequisiteDetailsView($form, $form_state, $entityId, 'cre_sys_obt_trp', $uniqueId);
            }

            /*
             * 0024925: Enforce equivalence in training plans
            * for this ticket we created equivalence option for training plan
            * don't delete it. Its may need for feature enhancement
            *
            */
        	 // To display the equivalence UI
           /* if($form_state['storage']['substep'] == 'equivalence') {
               displayEquivalenceDetails($form, $form_state, $entityId, $objectType, $uniqueId, 'complete_view','trainingPlan');
              //preRequisiteDetailsView($form, $form_state, $entityId, 'cre_sys_obt_trp', $uniqueId);
            }

          */

            // To display the survey UI
            if($form_state['storage']['substep'] == 'survey') {
              //$form_state['storage']['display_mode'] ='view';
              displaySurveyDetails($form, $form_state, $entityId, $objectType, $uniqueId,'complete_view');
            }

            // To display the assessment UI
            if($form_state['storage']['substep'] == 'assessment') {
            // $form_state['storage']['display_mode'] ='view';
             displayAssessmentDetails($form, $form_state, $entityId, $objectType, $uniqueId,'complete_view');
            }

            // To display the Custom Fields UI
            if($form_state['storage']['substep'] == 'custom') {
             // displayCustomFieldsDetails($form, $form_state, $entityId, $entityType, $uniqueId);
              customFieldsDetailsView($form, $form_state, $entityId, $objectType, $uniqueId);
            }

            //Please do not delete this block temporarily commented
            /*if (!empty($entityId)){
              if($form_state['storage']['substep'] == 'notifications') {
                $form_state['storage']['substage'] = 'notifications';
                addNotificationsToAddEditForm($form,$entityId,'cre_sys_obt_trn',TRUE);
              }
            }*/

            if($form_state['storage']['substep'] == 'certificate') {
              displayCertificateToAddEditForm($form, $form_state, $entityId, 'cre_sys_obt_trn', $uniqueId,true);
            }
             unset($form['addedit_tmp_storage']);
            /*
              $form['addedit-left-col-end1'] = array(
                '#type'   => 'markup',
                '#markup' => '</div>',
              );*/

           /* attachmentDetailsView($form, $form_state, $entityId, $objectType, $uniqueId);

            tagDetailsView($form, $form_state, $entityId, $objectString, $uniqueId);

            preRequisiteDetailsView($form, $form_state, $entityId, 'cre_sys_obt_trp', $uniqueId);

            // To display the survey UI
            surveyDetailsView($form, $form_state, $entityId, $objectType, $uniqueId);

            assessmentDetailsView($form, $form_state, $entityId, $objectType, $uniqueId);

            registerDetailsView($form, $form_state, $entityId, 'cre_sys_obt_trn',$uniqueId);
           //For Notification

            customFieldsDetailsView($form, $form_state, $entityId, $objectType, $uniqueId);

            addNotificationsToAddEditForm($form,$entityId,'cre_sys_obt_trn',TRUE);

            unset($form['addedit_tmp_storage']);
            $form['addedit-left-col-end1'] = array(
              '#type'   => 'markup',
              '#markup' => '</div>',
            );*/

      }else /*if($form_state['storage']['step'] == 'edit') */ { // edit
            if($form_state['storage']['substep'] == 'details' || empty($form_state['storage']['substep'])) {
              expDebug::dPrint('inside1234 edit :'.$form_state['storage']['step'] , 5);
              $prgId =  getDefaultPrgAddEditFormFieldValue('id', $form_state, $prgDetails);
              addHiddenValueToAddEditForm($form, 'id', $prgId);

              //addTextFieldToAddEditForm($form, 'number', t('Number'), $defaultValue, null, false, true);

              $defaultValue =  getDefaultPrgAddEditFormFieldValue('title', $form_state, $prgDetails);
              addTextFieldToAddEditForm($form, 'title', t('LBL083'), $defaultValue, 1,true,false,300);

              addTwoColumnRowToAddEditForm($form, 'status_langcode');

              $defaultValue =  getDefaultPrgAddEditFormFieldValue('code', $form_state, $prgDetails);
              addTextFieldToAddEditForm($form, 'code', t('LBL096'), $defaultValue, 2,true,false,54);

              $prgDetails['lang_code'] = !empty($prgDetails['lang_code']) ? $prgDetails['lang_code'] : 'cre_sys_lng_eng';
              $defaultValue =  getDefaultAddEditFormFieldValue('lang_code', $form_state, $prgDetails);
              addDropDownToAddEditForm($form, 'lang_code', t('LBL038'), getProfileItemNamesKeyed('cre_sys_lng_'), $defaultValue, 3, true);

              endAddEditTwoColumnRow($form);


             /* $defaultValue =  getDefaultPrgAddEditFormFieldValue('short_desc', $form_state, $prgDetails);
              addTextAreaFieldForShortDescription($form, 'short_desc', t('LBL097'), $defaultValue, 3,true);*/
              // addHiddenFieldToAddEditForm($form, 'ckeditor_word_count', '5000');  // commented for 0076233
              $form['addedit-long-description-container'] = array(
                '#type'   => 'markup',
                '#markup' => '<div class="addedit-long-description-container">',
              );
              $defaultValue =  getDefaultPrgAddEditFormFieldValue('short_desc', $form_state, $prgDetails);
              //addTextAreaFieldToAddEditForm($form, 'description', t('LBL098'), $defaultValue, 4);
              addTextFormatFieldToAddEditForm($form, 'short_desc', t('LBL229'), $defaultValue, 'full_html', 4,true,false,5000);
              $form['addedit-long-description-container1'] = array(
                '#type'   => 'markup',
                '#markup' => '</div>',
              );

    /*          addTwoColumnRowToAddEditForm($form, 'status_langcode');


                //cre_sys_lng_eng
            $prgDetails['lang_code'] = !empty($prgDetails['lang_code']) ? $prgDetails['lang_code'] : 'cre_sys_lng_eng';
              $defaultValue =  getDefaultAddEditFormFieldValue('lang_code', $form_state, $prgDetails);
              addDropDownToAddEditForm($form, 'lang_code', t('LBL038'), getProfileItemNamesKeyed('cre_sys_lng_'), $defaultValue, 5, true);

              $statusUniqueCode = 'TP';
              $attributes['onchange'][] = 'getStatusReason(this,\''.$statusUniqueCode.'\');';
              $prgDetails['status'] = !empty($prgDetails['status']) ? $prgDetails['status'] : 'lrn_lpn_sts_atv';
              $defaultValue =  getDefaultAddEditFormFieldValue('status', $form_state, $prgDetails);
              addDropDownToAddEditForm($form, 'status', t('LBL102'), getProfileItemNamesKeyed('lrn_lpn_sts_'), $defaultValue, 6, true, false, $attributes);

              endAddEditTwoColumnRow($form);*/

              /* -------Inactive Reason text Area Start----------*/
    /*          if($prgDetails['status'] == 'lrn_lpn_sts_itv') {
                $displayPage = "display:block";
              }else{
                $displayPage = "display:none";
              }

              $form['admin_status_inactive_disp_start'] = array(
            		'#type' => 'markup',
            		'#markup' => '<div id="admin-status-inactive-part-'.$statusUniqueCode.'" style="'.$displayPage.'">'
              );

              $defaultValue =  getDefaultAddEditFormFieldValue('in_active_reason', $form_state, $prgDetails);
              addTextAreaFieldToAddEditForm($form, 'in_active_reason', t('LBL412'), $defaultValue, 8, false);

              $form['admin_status_inactive_disp_end'] = array(
              		'#type' => 'markup',
              		'#markup' => '</div>'
              );*/
            	/* -------Inactive Reason text Area End----------*/


              //Begin : Two column - object_type, expire/complete by
              addTwoColumnRowToAddEditForm($form, 'type_expireComp');

              $defaultValue =  getDefaultAddEditFormFieldValue('object_type', $form_state, $prgDetails);
              $trpCurrType = $defaultValue;
              $readonly = empty($prgId) ? false : true;
              $trpTypes = array('cre_sys_obt_trn','cre_sys_obt_crt','cre_sys_obt_cur');
              $attributes = array();
              $attributes['onchange'][] = 'changeTrpDeliveryType(this);';
              addDropDownToAddEditForm($form, 'object_type', t('LBL036'), getProfileItemNamesKeyedArrayCode($trpTypes), $defaultValue, 5, true, $readonly,$attributes);

             // $defaultValue =  getDefaultPrgAddEditFormFieldValue('price', $form_state, $prgDetails);
             // addTextFieldToAddEditForm($form, 'price', t('LBL040'), $defaultValue, 10, false, false, 50, 15);

              $defaultValue =  getDefaultPrgAddEditFormFieldValue('price', $form_state, $prgDetails);
              expDebug::dPrint('$defaultValue Length : '.strlen($defaultValue), 5);
              // added This For Length default this Ticket #0036013
	             if(strlen($defaultValue) >= 11){
	             		$defaultValue=(int)$defaultValue;
	             }

              $form['price'] = array(
            	'#type' => 'textfield',
              '#prefix' => '<div class="addedit-twocol-secondcol">' .
                             '<div class="addedit-new-field-title">' .
                               t('LBL040') . ':' .
                             '</div>' .
                             '<div class="addedit-secondcol-field-value">' .
                               '<div class="addedit-tpadmin-price-field">',
              '#suffix' =>     '</div>',
            	'#size' => 4,
            	'#title' => t('LBL040'),
              '#maxlength'=> 10,// added This Max lenght For this Ticket #0036013
              '#title_display' => 'invisible',
            	'#default_value' => $defaultValue,
            	'#attributes' => array('tabindex' => '6', 'class' => array('addedit-tpadmin-price-textfield'))
            	);

      	      $prgDetails['currency_type'] = !empty($prgDetails['currency_type']) ? $prgDetails['currency_type'] : 'USD';
              $defaultValue =  getDefaultPrgAddEditFormFieldValue('currency_type', $form_state, $prgDetails);

              $finalOptions = getProfileItemNamesKeyed('cre_sys_crn_');
              $form['currency_type'] = array(
              '#type' => 'select',
              '#title' => t('LBL101').' '.t('LBL036'),
              '#prefix' =>     '<div class="addedit-tpadmin-currency-field"><div class="expertus-dropdown-bg"><div class="expertus-dropdown-icon">',
              '#suffix' =>     '</div></div></div>' .
                             '</div>' .
                           '</div>',
              '#title_display' => 'invisible',
              '#options'=> $finalOptions,
              '#default_value' => $defaultValue,
              //'#disabled' => $readOnly,
              '#attributes' => array('tabindex' => '7', 'class' => array('addedit-tpadmin-currency-select')),
              );

              endAddEditTwoColumnRow($form);
              // End : Two column

             addTwoColumnRowToAddEditForm($form, 'enforce_sequence_expire');

              $defaultValue =  getDefaultAddEditFormFieldValue('enforce_sequence', $form_state, $prgDetails);
              $trpTypes = array('N'=>'No','Y'=>'Yes');
              addDropDownToAddEditForm($form, 'enforce_sequence', t('Enforce Sequencing'), $trpTypes, $defaultValue, 5, false, false,array(),'tp');

            if($trpCurrType=='cre_sys_obt_trn' || $trpCurrType == 'cre_sys_obt_crt')
                $deliveryPartDisp  = '';
              else
                $deliveryPartDisp  = 'admin-trp-delivery-data-part';

              if(empty($prgId) || $trpCurrType=='cre_sys_obt_trn' || $trpCurrType == 'cre_sys_obt_crt'){
                $form['trp_delivery_data_disp_start'] = array(
                	'#type' => 'markup',
                	'#markup' => '<div class="addedit-twocol-secondcol">' .
                	               '<div id="admin-trp-delivery-data-part" class="'.$deliveryPartDisp.'">'
                );
              }
              if($trpCurrType=='' || $trpCurrType == 'cre_sys_obt_crt'){
                $readonly = empty($prgId) ? false : (getEnrollmentCnt($prgId)>0 ? true : false);
                
                $defaultValue =  getDefaultPrgAddEditFormFieldValue('expires_in_value', $form_state, $prgDetails);
                if ($defaultValue == t('MSG566')) $defaultValue = '';
                $attributes = array();
                $attributes['class'][] = 'addedit-edit-expires-in-value';
                $attributes['class'][] = 'addedit-edit-textfield';

                if ($readonly) {
                  $attributes['class'][] = 'addedit-readonly-textfield';
                }

                $attributes['data-default-text'] = t('MSG566'); //0 - Never

                $maxChars = $attributes['data-default-text'] != t('MSG566') ? 6 : 25;
                $viewWidthInChars = 10;
                // If the view width is larger than max allowed characters, make view width equal to the max allowed characters
                //if ($viewWidthInChars > $maxChars) {
                //  $viewWidthInChars = $maxChars;
                //}
                $attributes['tabindex'] = 9;
              	$form['expires_in_value'] = array(
              	  '#type' => 'textfield',
              	  '#prefix' => '<div id="admin-trp-delivery-data-part-expires"  class="addedit-new-field-traninig-program-expires">' .
              	                 '<div class="addedit-new-field-title">' .
              	                   t('LBL233') . ':<span class="addedit-mandatory">*</span>' .
              	                 '</div>' .
              	                 '<div class="addedit-secondcol-field-value">' .
              	                   '<div class="addedit-tpadmin-expires-in-value-field">',
              	  '#suffix' =>     '</div>',
              	  '#title' => t('LBL233'), //Expires In
              	  '#title_display' => 'invisible',
              	  '#default_value' => $defaultValue,
                  '#disabled' => $readonly,
                  '#attributes' => $attributes,
                  '#size' => $viewWidthInChars,
                  '#maxlength' => $maxChars,
              	);

              	$defaultValue =  getDefaultPrgAddEditFormFieldValue('expires_in_unit', $form_state, $prgDetails);
                $expiresInUnitOptions = array();
                $expiresInUnitOptions['days'] = ucfirst(t('LBL605')); // Days
                $expiresInUnitOptions['months'] = t('LBL911'); //Months
                $expiresInUnitOptions['years'] = ucfirst(t('LBL915')); //Years
                $form['expires_in_unit'] = array(
                  '#type' => 'select',
                  '#prefix' =>     '<div class="addedit-tpadmin-expires-in-unit-field"><div class="expertus-dropdown-bg"><div class="expertus-dropdown-icon">',
                  '#suffix' =>     '</div></div></div>' .
                                 '</div>' .
                               '</div>',
                  '#title_display' => 'invisible',
                  '#options'=> $expiresInUnitOptions,
                  '#default_value' => $defaultValue,
                  '#disabled' => $readonly,
                  '#attributes' => array('tabindex' => '10', 'Class' => 'addedit-edit-expires-in-unit'),
                );
              }

              if($trpCurrType=='' || $trpCurrType == 'cre_sys_obt_trn'){
                $readonly = empty($prgId) ? false : true;
                $defaultValue =  getDefaultPrgAddEditFormFieldValue('end_date', $form_state, $prgDetails);
                if($defaultValue!='') $defaultValue = date('m-d-Y', strtotime($defaultValue));

                $attributes = array();
                $attributes['class'][] = 'addedit-edit-end_date';
                $attributes['data-datePickerDatesDisplayOption'] = 'all';
                $attributes['data-emptyDateFieldText'] =t('LBL112');
                $attributes['data-datePickerTooltip'] = t('LBL218');
                //$attributes['data-datePickerTooltip'] = $datePickerTooltip;
                $attributes['class'][] = 'addedit-edit-datefield';
                if ($readOnly) {
                  $attributes['class'][] = 'addedit-readonly-datefield';
                }
                $attributes['autocomplete'] = 'off';
                $attributes['tabindex'] = 11;
                $viewWidthInChars = 10;
                $maxChars = 40;
                $form['end_date'] = array(
                  '#type' => 'textfield',
                  '#prefix' => '<div id="admin-trp-delivery-data-part-compdate"  class="addedit-new-field-traninig-program-expires">' .
                                 '<div class="addedit-new-field-title">' .
                                   t('LBL234') . ':<span class="addedit-mandatory">*</span>' .
                                 '</div>' .
                                 '<div class="addedit-secondcol-field-value addedit-secondcol-field-date-picker">',
                  '#suffix' =>   '</div>' .
                               '</div>',
                  //'#title' => t('LBL100'),
                  //'#required' => TRUE,
                  '#default_value' => $defaultValue,
                  '#disabled' => $readOnly,
                  '#attributes' => $attributes,
                  '#size' => $viewWidthInChars,
                  '#maxlength' => $maxChars
                );

              }
              if(empty($prgId) || $trpCurrType=='cre_sys_obt_trn' || $trpCurrType == 'cre_sys_obt_crt'){
                $form['trp_delivery_data_disp_end'] = array(
            	  '#type' => 'markup',
            	  '#markup' => '</div></div>'
                );
              }
               endAddEditTwoColumnRow($form);
               addTwoColumnRowToAddEditForm($form, 'author_type');

               $defaultValue =  getDefaultAddEditFormFieldValue('author_vendor', $form_state, $prgDetails);
               addTextFieldToAddEditForm($form, 'author_vendor', t('LBL269'), $defaultValue, 8, false,false,50);

               endAddEditTwoColumnRow($form);

			   // addHiddenFieldToAddEditForm($form, 'ckeditor_word_count1', '5000');// commented for 0076233
			   $form['addedit-additional-info-container'] = array(
				'#type'   => 'markup',
				'#markup' => '
				<div class="addedit-long-description-container">
				',
				);
			   $defaultValue =  getDefaultPrgAddEditFormFieldValue('additional_info', $form_state, $prgDetails);
			   addTextFormatFieldToAddEditForm($form, 'additional_info', t('LBL3068'), $defaultValue, 'full_html', 4,false,false,500);
			   $form['addedit-additional-info-container1'] = array(
				'#type'   => 'markup',
				'#markup' => '
				</div>
				',
				);
	     // added for #0046671 

 			   addTwoColumnRowToAddEditForm($form, 'is_shown_is_noti');
			   $defaultValue =  getDefaultAddEditFormFieldValue('addn_catalog_show', $form_state, $prgDetails);
			   $path = $base_url.'/sites/all/themes/core/expertusoneV2/expertusone-internals/images';
               $choiceCheckboxAttributes['onclick'][] = 'checkboxSelectedUnselectedAddInf(this);';
		       $className = ($form_state['input']['addn_catalog_show']==1 || $defaultValue==1)? "checkbox-selected" : "checkbox-unselected";
              
         $form['addn_catalog_show'] = array(
	     '#type' => 'checkbox',
         '#prefix' => '
		 <div class="addedit-twocol-firstcol">
		 <div class="catalog-block">
		 <label class="show-label-catalog">'.t("LBL576").':</label><img src="'.$path.'/help.png" class="vtip info-enr-upload test-help-iconcatalog" title="'.t('MSG818').'" onload="vtip();" />
		 <div class="'.$className.'">
		 ',         
		 '#suffix' => '</div></div>',
		 '#attributes' => $choiceCheckboxAttributes,
		 '#default_value' => $defaultValue,
		  );
               $defaultValue = getDefaultAddEditFormFieldValue('addn_notification_show', $form_state, $prgDetails);
	     	   $className = ($form_state['input']['addn_notification_show']==1 || $defaultValue==1)? "checkbox-selected" : "checkbox-unselected";
		 
      	 $form['addn_notification_show'] = array(
	    '#type' => 'checkbox',
        '#prefix' => '
		<div class="notifi-block">
		<label class="show-label-notifications">'.t("LBL3069").':</label><img src="'.$path.'/help.png" class="vtip info-enr-upload test-help-iconnotification" title="'.t('MSG819').'" onload="vtip();" />
		<div class="'.$className.'">
		',         
		'#suffix' => '</div></div></div>',
		'#attributes' => $choiceCheckboxAttributes,
		'#default_value' => $defaultValue,
		);
		     endAddEditTwoColumnRow($form);
             
             if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/To display the Custom attributes UI
                 include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
                 renderCustomAttributesInAddEditForm($form, $form_state,'cre_sys_obt_trp',$entityId);
                 addCustomAttributesBlockToAddEditForm($form, $form_state, $entityId, 'tp', 'tp-custom-attributes', 'program-addedit-form');  
            }else{
               addCustomFieldsBlockToAddEditForm($form, $form_state, $entityId, 'cre_sys_obt_trp', 'tp-custom-fields', 'program-addedit-form', 17);
            } //#custom_attribute_0078975 - End Check module status
  
            
            }
           /* if(!empty($arg)){
              $form['list_type_'.$uniqueId] = array(
                '#type' => 'select',
                  '#prefix' => '<div class="admin-course-add-attachment">',
                  '#suffix' => '</div>',
                  '#options' => array(
                  ''                      => t('Add'),
                  'attachment_fieldset'   => t('Attachment'),
                  'tag_fieldset'          => t('Tags'),
              	  'prerequisite_fieldset' => t('Pre-requisite'),
              	  'survey_fieldset'       => t('Survey'),
            	  'assessment_fieldset'   => t('Assessment'),
              	  'register_fieldset'     => t('Enroll User'),
                  'custom_fieldset'       => t('Custom Fields'),
                  ),
                '#attributes' => array('onchange' => 'showHide(this,"'.$uniqueId.'")'),
              );
            }*/
            $form_state['esign_from_plugin']= false;
            if($form_state['storage']['substep'] == 'Attachment') {
              $form_state['esign_from_plugin']= true;
              // To display the Attachment UI
              //displayAttachmentDetails($form, $form_state, $entityId, $entityType, $uniqueId);
              displayAttachmentDetails($form, $form_state, $entityId, $objectType, $uniqueId);

            }
            if($form_state['storage']['substep'] == 'tag') {
              $form_state['esign_from_plugin']= true;
              // To display the Tag UI
              //displayTagDetails($form, $form_state, $entityId, 'Course', $uniqueId);
              displayTagDetails($form, $form_state, $entityId, $objectString, $uniqueId);
            }

            if($form_state['storage']['substep'] == 'enrolltpuser') {
              $form_state['esign_from_plugin']= true;
              $showCancelSave = 0;
              displayTPRegisterDetails($form, $form_state, $entityId, $objectType ,$uniqueId);

            }
            // To display the Pre-requisite UI
            if($form_state['storage']['substep'] == 'prerequisite') {
    		   $form_state['esign_from_plugin']= true;
               $showCancelSave = 0;
              //displayPreRequisiteDetails($form, $form_state, $entityId, $entityType, $uniqueId);
              displayPreRequisiteDetails($form, $form_state, $entityId, 'cre_sys_obt_trp', $uniqueId);
            }

          /*  // To display the Equivalence UI
           if($form_state['storage']['substep'] == 'equivalence') {
            $form_state['esign_from_plugin']= true;
            $showCancelSave = 0;
               displayEquivalenceDetails($form, $form_state, $entityId, $objectType, $uniqueId, '','trainingPlan');
            }
           */
            // To display the survey UI
            if($form_state['storage']['substep'] == 'survey') {
    			$showCancelSave = 0;
             // displaySurveyDetails($form, $form_state, $entityId, $entityType, $uniqueId);
              displaySurveyDetails($form, $form_state, $entityId, $objectType, $uniqueId);

            }

            // To display the assessment UI
            if($form_state['storage']['substep'] == 'assessment') {
    		$showCancelSave = 0;
              //displayAssessmentDetails($form, $form_state, $entityId, $entityType, $uniqueId);
              displayAssessmentDetails($form, $form_state, $entityId, $objectType, $uniqueId);
            }
            // To display the Custom Fields UI
            if($form_state['storage']['substep'] == 'custom') {
              $form_state['esign_from_plugin']= true;
             // displayCustomFieldsDetails($form, $form_state, $entityId, $entityType, $uniqueId);
              displayCustomFieldsDetails($form, $form_state, $entityId, $objectType, $uniqueId);
            }

            //Please do not delete this block temporarily commented
            /*if (!empty($entityId)){
              if($form_state['storage']['substep'] == 'notifications') {
                $form_state['storage']['substage'] = 'notifications';
                addNotificationsToAddEditForm($form,$entityId,'cre_sys_obt_trn');
              }
            }*/

            if($form_state['storage']['substep'] == 'certificate') {
              $form_state['esign_from_plugin']= true;
              displayCertificateToAddEditForm($form, $form_state, $entityId, 'cre_sys_obt_trn', $uniqueId,false);
            }
          /*
          // To display the Attachment UI
          displayAttachmentDetails($form, $form_state, $entityId, $objectType, $uniqueId);

          // To display the Tag UI
          displayTagDetails($form, $form_state, $entityId, $objectString, $uniqueId);

          // To display the Pre-requisite UI
          displayPreRequisiteDetails($form, $form_state, $entityId, 'cre_sys_obt_trp', $uniqueId);

          // To display the survey UI
          displaySurveyDetails($form, $form_state, $entityId, $objectType, $uniqueId);

           // To display the assessment UI
          displayAssessmentDetails($form, $form_state, $entityId, $objectType, $uniqueId);

          // To display the Custom Fields UI
          displayCustomFieldsDetails($form, $form_state, $entityId, $objectType, $uniqueId);

          displayRegisterDetails($form, $form_state, $entityId, 'cre_sys_obt_trn',$uniqueId);
         //For Notification
          if (!empty($arg)){
            addNotificationsToAddEditForm($form,$entityId,'cre_sys_obt_trn');
          }
          */
           //if($form_state['storage']['substep'] == 'details' || empty($form_state['storage']['substep'])){
            if($showCancelSave && $form_state['storage']['step'] != 'view') {
              $subStage = $form_state['storage']['substep'];
              ProgramAddEditFormWithCancelAndSaveClose($form,'program-addedit-form','newtheme-save-button','newtheme-cancel-link', $entityId, $subStage,$objectString,$objectType,$emptyId);
            }
            //}
      }//end storage if
      $form['trainingplan_detail_disp_end'] = array(
      	  '#type'       => 'markup',
          '#suffix'     => '<div class="clearBoth"></div>
          					<div class="round-corner-footer-left"><div class="round-corner-footer-right">
          					<div class="round-corner-footer-middle"></div></div></div></div><div class="clearBoth"></div></div>',

          //'#attributes' => $editAttributes,
        );
     /* if($form_state['storage']['step'] == 'view') {
        $form['trainingplan_detail_wrapper_end11'] = array(
      	  '#type'       => 'markup',
          '#suffix'     => '<div class="clearBoth"></div></div></div>',
        );
      }else{

      $form['trainingplan_detail_wrapper_end'] = array(
      	  '#type'       => 'markup',
          '#suffix'     => '<div class="clearBoth"></div></div>',
        );
      }*/
        if($showCancelSave && $form_state['storage']['step'] != 'view'){
          $form['trainingplan_detail_wrapper_end'] = array(
            '#type'       => 'markup',
            '#suffix'     => '</div>',
          );
        } else {
          $form['trainingplan_detail_wrapper_end'] = array(
            '#type'       => 'markup',
            '#suffix'     => '<div class="clearBoth"></div><div class="admin-class-course-separater"></div></div>',
          );
        }

      return $form;
  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_program_addedit_form', $ex);
    expertusErrorThrow($ex);
  }
}


function list_tp_forms(&$form, &$form_state, $defaultValue, $arg){
  try {
      $form['tp_actions_disp'] = array(
      	  '#type'       => 'markup',
          '#prefix'     => '<div class="catalog-course-basic-addedit-action-disp" id="program-tp-basic-addedit-action-disp">',
          //'#suffix'     => '</div>',
          //'#attributes' => $editAttributes,
      );
      $isSelected = ($form_state['storage']['substep'] == 'details' || empty($form_state['storage']['substep'])) ? 'selected' : '';
      $form['edit_btn_details'] = array(
      	  '#type'       => 'submit',
    	  '#value'      => t('LBL272'),
          '#name'       => 'details',
          //'#prefix'     => '<div id="wizard-course-form-wrapper"><div class="admin-course-edit-button-container"><div class="admin-save-button-left-bg"></div>',
          //'#suffix'     => '<div class="admin-save-button-right-bg"></div></div>',
          '#prefix'     => '<ul><li>',
          '#suffix'     => '</li>',
         // '#attributes' => ($form_state['storage']['substep'] == 'details' || empty($form_state['storage']['substep']))? array('Class' => 'selected'): '',
          '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'program-addedit-form'),
          '#ajax' => array(
      		'callback' => 'tpEditModeRepaintForm',
            'wrapper'  => 'program-addedit-form',
            'event'	   => 'click'
          ),
        );
         $entityId      =$form['mapped_program_id']['#value'];

         expDebug::dPrint('testing the ids.entity'.$entityId.'steps'.$form_state['storage']['step'] , 5);
         if($entityId && ($form_state['storage']['step'] == 'view' ||$form_state['storage']['step'] == 'edit' || empty($form_state['storage']['step']))){
            /*$isSelected = ($form_state['storage']['substep'] == 'Attachment') ? 'highlighted' : '';
           $form['edit_btn_att'] = array(
           	'#type'       => 'submit',
      	  	'#value'      => t('LBL231'),
            '#name'       => 'Attachment',
           	'#prefix'     => '<li>',
            '#suffix'     => '</li>',
            //'#prefix'     => '<div id="wizard-course-form-wrapper"><div class="admin-course-edit-button-container"><div class="admin-save-button-left-bg"></div>',
            //'#suffix'     => '<div class="admin-save-button-right-bg"></div></div>',
            //'#attributes' => ($form_state['storage']['substep'] == 'Attachment')? array('Class' => 'highlighted'): '',
            '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'program-tp-basic-addedit-form-disp'),
            '#ajax' => array(
        	  'callback' => 'tpEditModeRepaintForm',
              'wrapper'  => 'program-addedit-form',
              'event'	   => 'click'
            ),
          );*/

         $isSelected = ($form_state['storage']['substep'] == 'survey') ? 'highlighted' : '';
         $form['edit_btn_survey'] = array(
            '#type'       => 'submit',
      	    '#value'      => t('Survey'),
            '#name'       => 'survey',
            '#prefix'     => '<li>',
            '#suffix'     => '</li>',
            //'#attributes' => ($form_state['storage']['substep'] == 'survey')? array('Class' => 'highlighted'): '',
            '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'program-addedit-form'),
            '#ajax' => array(
        	  'callback' => 'tpEditModeRepaintForm',
              'wrapper'  => 'program-addedit-form',
              'event'	   => 'click'
            ),
          );

          $isSelected = ($form_state['storage']['substep'] == 'assessment') ? 'highlighted' : '';
          $form['edit_btn_assessment'] = array(
            '#type'       => 'submit',
      	    '#value'      => t('Assessment'),
            '#name'       => 'assessment',
            '#prefix'     => '<li>',
            '#suffix'     => '</li>',
            //'#attributes' => ($form_state['storage']['substep'] == 'assessment')? array('Class' => 'highlighted'): '',
            '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'program-addedit-form'),
            '#ajax' => array(
        	  'callback' => 'tpEditModeRepaintForm',
              'wrapper'  => 'program-addedit-form',
              'event'	   => 'click'
            ),
          );

          /*$isSelected = ($form_state['storage']['substep'] == 'tag') ? 'highlighted' : '';
          $form['edit_btn_tag'] = array(
          	'#type'       => 'submit',
      	    '#value'      => t('LBL191'),
            '#name'       => 'tag',
            '#prefix'     => '<li>',
            '#suffix'     => '</li>',
            //'#prefix'     => '<div id="wizard-course-form-wrapper"><div class="admin-course-edit-button-container"><div class="admin-save-button-left-bg"></div>',
            //'#suffix'     => '<div class="admin-save-button-right-bg"></div></div>',
            //'#attributes' => ($form_state['storage']['substep'] == 'tag')? array('Class' => 'highlighted'): '',
             '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'program-tp-basic-addedit-form-disp'),
            '#ajax' => array(
        	  'callback' => 'tpEditModeRepaintForm',
              'wrapper'  => 'program-tp-basic-addedit-form-disp',
              'event'	   => 'click'
            ),
          );*/
    	  $isSelected = ($form_state['storage']['substep'] == 'prerequisite') ? 'highlighted' : '';
    	  $form['edit_btn_prerequest'] = array(
            '#type'       => 'submit',
            '#value'      => t('LBL230'),
            '#name'       => 'prerequisite',
            '#prefix'     => '<li>',
            '#suffix'     => '</li>',
            //'#attributes' => ($form_state['storage']['substep'] == 'prerequisite')? array('Class' => 'highlighted'): '',
            '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'program-addedit-form'),
            '#ajax' => array(
          	  'callback' => 'tpEditModeRepaintForm',
              'wrapper'  => 'program-addedit-form',
              'event'	   => 'click'
            ),
    	  );
         $isSelected = ($form_state['storage']['substep'] == 'enrolltpuser') ? 'highlighted' : '';
         $form['class_btn_enrolltpuser'] = array(
            '#type'       => 'submit',
            '#value'      => t('LBL275'),
            '#name'       => 'enrolltpuser',
            '#prefix'     => '<li>',
            '#suffix'     => '</li>',
            //'#attributes' => ($form_state['storage']['substep'] == 'prerequisite')? array('Class' => 'highlighted'): '',
            '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'program-tp-basic-addedit-form-disp'),
            '#ajax' => array(
          	  'callback' => 'tpEditModeRepaintForm',
              'wrapper'  => 'program-addedit-form',
              'event'	   => 'click'
            ),
         );
         /*
 		 * 0024925: Enforce equivalence in training plans
		 * for this ticket we created equivalence option for training plan
 		 * don't delete it. Its may need for feature enhancement
 		 *
 		 */
         /*	$isSelected = ($form_state['storage']['substep'] == 'equivalence') ? 'highlighted' : '';
          $form['edit_btn_equivalence'] = array(
            '#type'       => 'submit',
      	    '#value'      => t('LBL279'),
            '#name'       => 'equivalence',
            '#prefix'     => '<li>',
            '#suffix'     => '</li>',
            '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'program-tp-basic-addedit-form-disp'),
            '#ajax' => array(
        	  'callback' => 'tpEditModeRepaintForm',
              'wrapper'  => 'program-addedit-form',
              'event'	   => 'click'
            ),
          );
         */
        /*  $form['edit_btn_equivalence'] = array(
            '#type'       => 'submit',
      	    '#value'      => t('LBL279'),
            '#name'       => 'equivalence',
            '#prefix'     => '<li>',
            '#suffix'     => '</li>',
            '#attributes' => ($form_state['storage']['substep'] == 'equivalence')? array('Class' => 'highlighted'): '',
            '#ajax' => array(
        	  'callback' => 'tpEditModeRepaintForm',
              'wrapper'  => 'program-tp-basic-addedit-form-disp',
              'event'	   => 'click'
            ),
          );
         */

         /*$isSelected = ($form_state['storage']['substep'] == 'certificate') ? 'highlighted' : '';
          $form['edit_btn_certificate'] = array(
          	'#type'       => 'submit',
      	    '#value'      => t('LBL205'),
            '#name'       => 'certificate',
            '#prefix'     => '<li>',
            '#suffix'     => '</li>',
            //'#prefix'     => '<div id="wizard-course-form-wrapper"><div class="admin-course-edit-button-container"><div class="admin-save-button-left-bg"></div>',
            //'#suffix'     => '<div class="admin-save-button-right-bg"></div></div>',
            //'#attributes' => ($form_state['storage']['substep'] == 'tag')? array('Class' => 'highlighted'): '',
             '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'program-tp-basic-addedit-form-disp'),
            '#ajax' => array(
        	  'callback' => 'tpEditModeRepaintForm',
              'wrapper'  => 'program-tp-basic-addedit-form-disp',
              'event'	   => 'click'
            ),
          );*/
          /*if(!empty($arg)){
             $isSelected = ($form_state['storage']['substep'] == 'notifications') ? 'highlighted' : '';
            $form['edit_btn_notifications'] = array(
              '#type'       => 'submit',
        	  '#value'      => t('LBL204'),
              '#name'       => 'notifications',
              '#prefix'     => '<li>',
              '#suffix'     => '</li>',
              //'#attributes' => ($form_state['storage']['substep'] == 'notifications')? array('Class' => 'highlighted'): '',
              '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected ), 'data-wrapperid' => 'program-addedit-form'),
              '#ajax' => array(
          	  'callback' => 'tpEditModeRepaintForm',
                'wrapper'  => 'program-addedit-form',
                'event'	   => 'click',
                'tabaction'=> 'notification'
              ),
            );
         }*/
          /*
          $form['edit_btn_equivalence'] = array(
            '#type'       => 'submit',
      	    '#value'      => t('Equivalence'),
            '#name'       => 'equivalence',
            '#prefix'     => '<li>',
            '#suffix'     => '</li>',
            '#attributes' => ($form_state['storage']['substep'] == 'equivalence')? array('Class' => 'highlighted'): '',
            '#ajax' => array(
        	  'callback' => 'tpEditModeRepaintForm',
              'wrapper'  => 'program-tp-basic-addedit-form-disp',
              'event'	   => 'click'
            ),
          );
          */
          /*$isSelected = ($form_state['storage']['substep'] == 'custom') ? 'highlighted' : '';
          $form['edit_btn_custom'] = array(
            '#type'       => 'submit',
      	    '#value'      => t('LBL276'),
            '#name'       => 'custom',
            '#prefix'     => '<li class="last-li">',
            '#suffix'     => '</li></ul>',
            //'#attributes' => ($form_state['storage']['substep'] == 'custom')? array('Class' => 'highlighted'): '',
            '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'program-tp-basic-addedit-form-disp'),
            '#ajax' => array(
        	  'callback' => 'tpEditModeRepaintForm',
              'wrapper'  => 'program-tp-basic-addedit-form-disp',
              'event'	   => 'click'
            ),
          );*/


       }
       else{
         $form['edit_btn_survey_disabled'] = array(
            '#type'       => 'item',
      	    '#title'      => t('Survey'),
            '#prefix'     => '<li><span class="deactive-links">',
            '#suffix'     => '</span></li>'
          );

          $form['edit_btn_assessment_disabled'] = array(
            '#type'       => 'item',
      	    '#title'      => t('Assessment'),
            '#prefix'     => '<li><span class="deactive-links">',
            '#suffix'     => '</span></li>'
          );

    	  $form['edit_btn_prerequest_disabled'] = array(
            '#type'       => 'item',
            '#title'      => t('LBL230'),
    		'#prefix'     => '<li><span class="deactive-links">',
            '#suffix'     => '</span></li>'
          );

         $form['class_btn_enrolltpuser_disabled'] = array(
            '#type'       => 'item',
            '#title'      => t('LBL275'),
    		'#prefix'     => '<li><span class="deactive-links">',
            '#suffix'     => '</span></li>'
          );
			/*
 			* 0024925: Enforce equivalence in training plans
 			* for this ticket we created equivalence option for training plan
 			* don't delete it. Its may need for feature enhancement
 			*

          $form['class_btn_equivalence_disabled'] = array(
            '#type'       => 'item',
            '#title'      => t('LBL279'),
    		'#prefix'     => '<li><span class="deactive-links">',
            '#suffix'     => '</span></li>'
          );
          */
          /*$form['edit_btn_notifications_disabled'] = array(
          '#type'       => 'item',
    	  '#title'      => t('LBL204'),
    		'#prefix'     => '<li><span class="deactive-links">',
            '#suffix'     => '</span></li>'
          );*/

         $form['tp_actions_ul_container_disp_end'] = array(
           '#type'       => 'markup',
           '#suffix'     => '</ul>',
         );
       }
       $form['tp_actions_disp_end'] = array(
         '#type'       => 'markup',
         '#suffix'     => '</div>',
       );
  } catch (Exception $ex) {
    watchdog_exception('list_tp_forms', $ex);
    expertusErrorThrow($ex);
  }

}
/*
 * exp_sp_administration_organization_addedit_form_submit() - Save the data entered by the user in the exp_sp_administration_organization_addedit_form form
 */
function exp_sp_administration_program_addedit_form_submit($form, &$form_state, $renderMode, $prgId) {

  try {
  	expDebug::dPrint(' $form_state inside submit test = ' . print_r($form_state, true) , 5);
  	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_tags.inc');
  	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_attachment.inc');
  	include_once(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access.inc');
 // 	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_equivalence.inc');
      $chkValidation = 1;

      if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
        $chkValidation = 0;
        if($form_state['hidden-save-submit']==true && $_SESSION['esign_validate'] ==  1){
          $chkValidation = 1;
          $form_state['storage']['submit_triggering_element'] = $form_state['storage']['triggering_button_element'];
        }else{
          $form_state['storage']['triggering_button_element'] = $form_state['triggering_element']['#name'];
        }
      }else{
        $form_state['storage']['submit_triggering_element'] = $form_state['triggering_element']['#name'];
      }

      if($form_state['triggering_element']['#name'] == 'Add custom'){
        $chkValidation = 0;
      }

      if($chkValidation){
        $form_state['esign_validation_status'] = true;

        include_once('exp_sp_administration_program.inc');
        expDebug::dPrint(' $form_state[values] = ' . print_r($form_state['values'], true) , 5);
        // Check whether add or edit
        // if ($form_state['triggering_element']['#value'] == 'Save'){
        if(isset($form_state['values']['title'])) {
          $loggedInUserId = getIdOfLoggedInUser();
          if (empty($form_state['values']['id'])) { // Add
            $returnArr = addNewProgram($form, $form_state, $loggedInUserId);
            $operation='insert';
            adminCreateLMSProductTpNode($form, $form_state, $operation);
            $newPrgId = $returnArr[0]->id;
            $newPrgObjectType = $returnArr[0]->object_type;
            //echo "<pre>";print_r($form_state['values']);echo "</pre>";
            
            if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/Save Custom Attribute Values
                include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
                saveCustomAttributesInAddEditForm($form, $form_state, $newPrgId, 'cre_sys_obt_trp', $loggedInUserId, 'Inserted');
            }else{
            saveCustomFieldsInAddEditForm($form, $form_state, $newPrgId, 'cre_sys_obt_trp', $loggedInUserId);
            } //#custom_attribute_0078975 - End Check module status
            
            expertus_set_message(t('LBL272').' '.t('MSG600').'.');
            $form_state['build_info']['args'][] = $newPrgId;
            $form_state['storage']['new_entity'] = TRUE;
            $form_state['storage']['step']       = 'view';
            $emptyId = $form_state['values']['empty_id'];
            $objString = checkLearningProgramTypeString($newPrgObjectType);

            _updateTagsEntity($newPrgId, $objString, $emptyId);
            _updateAccessEntity($newPrgId, $newPrgObjectType, $emptyId);
            updateAttachmentInfoOnAddForm($newPrgId,$emptyId);

          }
          else {
            unset($form_state['storage']['new_entity']);
            $operation='update';
            updateProgramDetails($form, $form_state, $loggedInUserId);
            adminCreateLMSProductTpNode($form, $form_state, $operation);
            
            if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/Save Custom Attribute Values
                include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
                saveCustomAttributesInAddEditForm($form, $form_state, $form_state['values']['id'], 'cre_sys_obt_trp', $loggedInUserId, 'Updated');
            }else{
            saveCustomFieldsInAddEditForm($form, $form_state, $form_state['values']['id'], 'cre_sys_obt_trp', $loggedInUserId);
            } //#custom_attribute_0078975 - End Check module status
            
            expertus_set_message(t('LBL272').' '.t('MSG601').'.');
            $form_state['storage']['edited_entity'] = TRUE;
            $form_state['storage']['step']          = 'edit';
            $form_state['build_info']['args'][]     = $form_state['values']['id'];
            $entityId = $form_state['values']['mapped_program_id'];
          }
        }
       else{
         $entityId = $form_state['values']['mapped_program_id'];
       }

       $form_state['show_add_another'] = TRUE;

       $objectType   = getObjectypeFromProgramID($entityId);
        //checkLearningProgramType($form, $form_state);
       $objectString = checkLearningProgramTypeString($objectType);

       $uniqueId     = $form_state['values']['id'].'-'.$objectType;
        expDebug::dPrint(' $objectString = ' . print_r($objectString, true) , 4);
        expDebug::dPrint(' $entityId = ' . $entityId , 4);
        expDebug::dPrint(' $form_state[values][attr_action] = ' . $form_state['values']['attr_action'] , 5);

        //$entityId  = $form_state['values']['id'];
        if(isset($form_state['values']['attr_action']) && isset($entityId)) {
          //$form_state['storage']['step']          = 'view';
          if($form_state['values']['attr_action'] == 'attachment') {
           //attachmentOperations($form, $form_state, $entityId, $entityType, $uniqueId);
            attachmentOperations($form, $form_state,$entityId ,$objectType,$uniqueId);

          }
          elseif($form_state['values']['attr_action'] == 'tag') {
            //tagOperations($form, $form_state, $entityId,'Course', $uniqueId);
            tagOperations($form, $form_state,$entityId,$objectString,$uniqueId);
          }
          elseif($form_state['values']['attr_action'] == 'prerequisite') {
           // prerequisiteOperations($form, $form_state, $entityId, $entityType, $uniqueId);
           // prerequisiteOperations($form, $form_state,$entityId,'cre_sys_obt_trp',$uniqueId);
           addNewPrerequisiteDetails($form, $form_state, $entityId, 'cre_sys_obt_trp');
          }
         /* elseif($form_state['values']['attr_action'] == 'equivalence') {
          	addNewEquivalenceDetails($form, $form_state, $entityId, $objectType);
          }*/
    	  elseif($form_state['values']['attr_action'] == 'enrolltpuser') {
    		//registerOperations($form, $form_state,$entityId,'cre_sys_obt_trn');
          	addNewEnrollTPUserDetails($form, $form_state,$entityId, $objectType);

            // Clear enrolltpuser-autocomplete form textfield as switching from enroll user view to roster view - fix for ticket #0022120
            clearTPRosterEnrollUserAutocomplete($form_state);
          }

          elseif($form_state['values']['attr_action'] == 'survey') {
            //surveyOperations($form, $form_state, $entityId, $entityType, $uniqueId);
            //surveyOperations($form, $form_state, $entityId, $objectType,$uniqueId);
            include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_survey.inc');
            addNewSurveyDetails($form, $form_state, $entityId, $objectType);
          }
          elseif($form_state['values']['attr_action'] == 'assessment') {
            //assessmentOperations($form, $form_state, $entityId, $entityType, $uniqueId);
            //assessmentOperations($form, $form_state, $entityId, $objectType,$uniqueId);
            addNewAssessmentDetails($form, $form_state, $entityId, $objectType);
          }
          elseif($form_state['values']['attr_action'] == 'custom') {
            //customfieldsOperations($form, $form_state, $entityId, $entityType, $uniqueId);
            customfieldsOperations($form, $form_state, $entityId, $objectType, $uniqueId);
          }
          elseif($form_state['values']['attr_action'] == 'notifications') {
            updateNotificationList($entityId,'cre_sys_obt_trn',$form_state['values']);
          }
          elseif($form_state['values']['attr_action'] == 'certificate') {
            updateCertificationList($entityId, 'cre_sys_obt_trn', $form_state['values'],$form_state);
          }
        //drupal_set_message('Trainingplan details updated successfully.');
        }
    	/*updateNotificationList($form_state['values']['id'],'cre_sys_obt_trn',$form_state['values']);    // Register user for training program
        // Register user for training program
    	registerOperations($form, $form_state,$form_state['values']['id'],'cre_sys_obt_trn');
        //Add Attachment for training program
        attachmentOperations($form, $form_state,$form_state['values']['id'],$objectType,$uniqueId);
        //Add Tags for training program
        tagOperations($form, $form_state,$form_state['values']['id'],$objectString,$uniqueId);
        //Pre-requisite for training program
        prerequisiteOperations($form, $form_state,$form_state['values']['id'],'cre_sys_obt_trp',$uniqueId);
        //Attach survey for training program
        surveyOperations($form, $form_state, $form_state['values']['id'], $objectType,$uniqueId);
        //Attach Assessment for training program
        assessmentOperations($form, $form_state, $form_state['values']['id'], $objectType,$uniqueId);
        //Custom Fields Operation
        customfieldsOperations($form, $form_state, $form_state['values']['id'], $objectType, $uniqueId);
        */
      //}
      //$form_state['input'] = array(); // Clear user input - raw
      //$form_state['values'] = array(); // Clear user input - security cleared
      }
      // Condition Added For This Ticket #0040313
      if(!module_exists('exp_sp_esignature')){
       $form_state['rebuild'] = TRUE;
      } else if ($form_state['storage']['step'] == 'view'){
       $form_state['rebuild'] = TRUE;
      }else if ($form_state['storage']['step'] == 'edit'){
      	$form_state['rebuild'] = TRUE;
      }
      //To sync solr
			syncSolrData('Program');
      return;
  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_program_addedit_form_submit', $ex);
    expertusErrorThrow($ex);
  }
}
/*
 * exp_sp_administration_program_addedit_form_validate - validate the data entered by the user in the exp_sp_administration_organization_addedit_form form
 */
/*#custom_attribute_0078975 - Added from API for Custom Attribute */
function exp_sp_administration_program_addedit_form_validate($form, &$form_state, $fromAPI='') {
  try {
  	global $secure_entities;
  	//expDebug::dPrint("form value 1111 ". print_r($form,true),5);
  	//expDebug::dPrint("form value 2222 ". print_r($form_state['input']['hidden_certificate_path_survey-163-cre_sys_obt_crt'],true),5);
  	/* (module_exists('exp_sp_esignature') && isActiveEsignRegion())   Is Fixed E-sign Enable issue */
	  if(strrpos($form_state['triggering_element']['#name'],'prerequisite') || (module_exists('exp_sp_esignature') && isActiveEsignRegion())){
	  		include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_prerequisite.inc');
	  }
	 /*  if(strrpos($form_state['triggering_element']['#name'],'equivalence')){
	  		include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_equivalence.inc');
	  }
	  */
	  if(strrpos($form_state['triggering_element']['#name'],'survey') || (module_exists('exp_sp_esignature') && isActiveEsignRegion())){
	  	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_survey.inc');
	  }
	  if(strrpos($form_state['triggering_element']['#name'],'assessment') || (module_exists('exp_sp_esignature') && isActiveEsignRegion())){
	  	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_assessment.inc');
	  }
	  //if(strrpos($form_state['triggering_element']['#name'],'enroll')){
	  	 include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_tp_register.inc');
	  //}
	  if (!empty($form_state['storage']['new_entity'])) {
	    unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
	   // unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
	  }
	  if (!empty($form_state['storage']['edited_entity'])) {
	    unset($form_state['storage']['edited_entity']); // Unset the variable to remove it from $form_state
	  }

      $form_state['hidden-save-submit'] = false;
      $form_state['esign_show_popup']= false;
      expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
      expDebug::dPrint(' $form_state = ' . print_r($form_state, true) , 5);
      //if ($form_state['values']['op'] == t('Close')) {
      if($form_state['triggering_element']['#name'] == 'cancelprogram'){
      	$form_state['input'] = array(); // Clear user input - raw
      	$form_state['values'] = array(); // Clear user input - security cleared
      	unset($form_state['custom_fields']); // Clear any change made to custom fields
        $form_state['rebuild'] = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['step'] = 'view';
        return;
      }

      if ($form_state['triggering_element']['#name'] == 'edit_training_plan') {
      	//$form_state['input'] = array(); // Clear user input - raw
      	//$form_state['values'] = array(); // Clear user input - security cleared
          $form_state['rebuild'] = TRUE; // Rebuild the form. Submit handler will not be called.
          $form_state['storage']['step'] = 'edit';
        return;
      }

      if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
        $triggerValue  = 'save';
      }else{
        $triggerValue  = 'hidden-save';
      }
      expDebug::dPrint(' $form_state[triggering_element][#name] = ' . $form_state['triggering_element']['#name'] , 5);
      $triggerElementByName  = $form_state['triggering_element']['#name'];
      if (($form_state['triggering_element']['#name'] == 'save' || $form_state['triggering_element']['#name'] == 'saveandpublish')){
      	$form_state['esign_show_popup']= true;

        /*if ($form_state['values']['op'] == t('Cancel')) {
        	$form_state['input'] = array(); // Clear user input - raw
        	$form_state['values'] = array(); // Clear user input - security cleared
          $form_state['rebuild'] = TRUE; // Rebuild the form. Submit handler will not be called.
          return;
        }*/

        include_once('exp_sp_administration_program.inc');

        addEditCheckMandatoryFields($form, $form_state, array('title', 'code',));
        if (empty($form_state['values']['short_desc']['value']) || $form_state['values']['short_desc']['value']==''){
          form_set_error('short_desc', $form['short_desc']['#title'] . t('ERR101'));
          $form_state['esign_show_popup']= false;
        }
        addEditCheckMandatoryFields($form, $form_state, array('lang_code','object_type'));

        // Validate email address
        if (!empty($form_state['values']['email']) && !validateEmail($form_state['values']['email'])) {
          form_set_error('email', t('ERR071') . ' ' . $form['email']['#title'] . '.');
          $form_state['esign_show_popup']= false;
        }
        if (!empty($form_state['values']['code']) && !uniquePrgCode($form_state)) {
          form_set_error('code', t('ERR072'));
          $form_state['esign_show_popup']= false;
        }
      //  if(!empty($_SESSION['availableFunctionalities']->exp_sp_commerce)) { Commented for #0049065
          if(($form_state['values']['price'])!="" && !is_numeric($form_state['values']['price'])){
            form_set_error('price', t('ERR069'));
            $form_state['esign_show_popup']= false;
          }
          if(trim($form_state['values']['price']) < 0){
          	 form_set_error('price', t('ERR069'));
             $form_state['esign_show_popup']= false;
          }
         // if (strlen(trim($form_state['values']['price'])) > 0){
                /*if (!is_numeric($form_state['values']['price']) && strlen(trim($form_state['values']['price']))) {
                    form_set_error('Price', t('ERR0691'));
                }*/
         // }
      //  }

        if($form_state['values']['object_type']=='cre_sys_obt_trn'){
          if($form_state['values']['end_date']=='' || $form_state['values']['end_date']==t('LBL112')){
            form_set_error('end_date', t('LBL234').t('ERR101'));
            $form_state['esign_show_popup']= false;
          }
          $old_dateformat=str_replace("-","/",$form_state['values']['end_date']);
          $end_date= date_format(date_create( $old_dateformat),'Y-m-d H:i');
          if(strtotime($end_date) <= time()){
            form_set_error('end_date', t('LBL234').' '.t('ERR139'));
            $form_state['esign_show_popup']= false;
          }
          expDebug::dPrint('My Course End date : '.print_r($form_state['values']['end_date'] , true),4);
          $trnDate = explode('-',$form_state['values']['end_date']);
          $countDate = count($trnDate);
          if($countDate < 2){ // If using MM/DD/YYYY Format
          	$trnDate = explode('/',$form_state['values']['end_date']);
          }
          if($trnDate[0] <= 0 || $trnDate[0] > 12 || $trnDate[1] <= 0 || $trnDate[1] > 31){
          	form_set_error('end_date', t('ERR243'));
          	$form_state['esign_show_popup']= false;
          }
        }

        if ($form_state['values']['object_type'] == 'cre_sys_obt_crt'){
          if ($form_state['values']['expires_in_value'] == '' || $form_state['values']['expires_in_value']==t('MSG566')){
            form_set_error('expires_in_value',  t('LBL233') . t('ERR101'));
            $form_state['esign_show_popup']= false;
          }
          if(!is_numeric($form_state['values']['expires_in_value']) || $form_state['values']['expires_in_value'] < 0){
            form_set_error('expires_in_value',  t('ERR102') . t('LBL233'));
            $form_state['esign_show_popup']= false;
          }
          if(!empty($form_state['values']['expires_in_value'])) {
            if(!preg_match('/^[0-9]*$/',trim($form_state['values']['expires_in_value']))) {
            form_set_error('expires_in_value', t('LBL233').' '.t('ERR185'));// Expires In cannot have decimal Value
            $form_state['esign_show_popup']= false;
            }
          }
        }

        if(module_exists('exp_sp_administration_customattribute') && !$fromAPI){   //#custom_attribute_0078975 - Check module status/Validate Custom Attributes
            include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
            validateCustomAttributesInAddEditForm($form, $form_state,'cre_sys_obt_trp');
        }else{ // Validate custom fields
        validateCustomFieldsInAddEditForm($form, $form_state);
        } //#custom_attribute_0078975 - End Check module status

      }else if($form_state['triggering_element']['#name'] == $triggerValue && $form_state['esign_from_plugin']==true){
      	$form_state['esign_show_popup']= true;
      }else if($triggerElementByName == 'esign-enrolltpuser' || $triggerElementByName == 'set-enrolltpuser' ||$triggerElementByName == 'set-enroll-tp-user-mandatory' ||$form_state['storage']['substep'] == 'enrolltpuser'){
        $form_state['esign_show_popup']= true;
        //Commented this line for 0023461: Incorrect view in Training plan Enrollments tab
        //$form_state['storage']['mode'] = 'edit';
        $entityId = $form_state['triggering_element']['#ajax']['entity_id'];
        $entityType = $form_state['triggering_element']['#ajax']['entity_type'];
        $entityPlugin = $form_state['triggering_element']['#ajax']['entity_plugin'];
        if (in_array($entityType, $secure_entities)) {
        	$uniqueId = "enrolltpuser-".core_encrypt($entityId)."-$entityType"; // URL encryption to retirve data
        } else {
        	$uniqueId = "enrolltpuser-".$entityId."-$entityType"; // URL encryption to retirve data
        }
        $form_state['hidden_idlist_'.$uniqueId] = $form_state['input']['hidden_idlist_'.$uniqueId];
				// Cloned TP Enroll user To Other Tabs Shows System Error need this Include File
        include_once('exp_sp_administration_program.inc');
        $prgDetails = getProgramObjDetails($entityId);
        $isPricedTP = $prgDetails[0]->price;
        $pricedErr = 0;
        /*-- #36602 - Issue fix --*/
        $isCommerceEnabled =  module_exists('exp_sp_commerce');
        if($isPricedTP > 0 && $triggerElementByName == 'commonsave'){
        	$selectedEnrolledIds = $form_state['input']['hidden_idlist_enrolltpuser-'.$entityId.'-'.$entityType];
        	$selectedIdsArray = explode(',', $selectedEnrolledIds);
        	foreach($selectedIdsArray as $enrollId){
        		$status = $form_state['input']['enrolled_status_'.$enrollId];
        		if($status == t('Enrolled')){
        			$pricedErr = 1;
        		}
        	}
        }
        if(($isPricedTP > 0 && $isCommerceEnabled ) && ($entityPlugin =='enrolltpuser' || $triggerElementByName=='enrolledandsave' || $pricedErr)){
        	form_set_error('',t('MSG716'));
        }
        if($triggerElementByName=='commonsave' || $triggerElementByName =='incompletedandsave' || $triggerElementByName=='completedandsave'|| $triggerElementByName=='enrolledandsave'||$triggerElementByName=='cancelledandsave'||$triggerElementByName=='noshowandsave') {
          if(empty($form_state['input']['hidden_idlist_'.$uniqueId])){
            expDebug::dPrint('enrolltpuser form_set_error1');
            form_set_error('', t('ERR106'));
            $form_state['esign_show_popup']= false;
          }
        }else if(isset($entityPlugin) && $entityPlugin=='enrolltpuser') {
          if(empty($form_state['input']['hidden_idlist_'.$uniqueId])){
            expDebug::dPrint('enrolltpuser form_set_error2');
            form_set_error('', t('ERR106'));
            $form_state['esign_show_popup']= false;
          }
        }

        expDebug::dPrint(' $form_state[esign_show_popup] before hidden.'.$form_state['esign_show_popup'] , 5);
      }else if($triggerElementByName == 'esign-prerequisite' || $triggerElementByName == 'set-prerequisite'){
        $form_state['esign_show_popup']= true;
        $form_state['storage']['mode'] = 'edit';
        $entityId = $form_state['triggering_element']['#ajax']['entity_id'];
        $entityType = $form_state['triggering_element']['#ajax']['entity_type'];
        $entityPlugin = $form_state['triggering_element']['#ajax']['entity_plugin'];

        if (in_array($entityType, $secure_entities)) {
        	 $uniqueId = "prerequisite-".core_encrypt($entityId)."-$entityType"; // URL encryption to retrive the data
        } else {
        	 $uniqueId = "prerequisite-".$entityId."-$entityType"; // URL encryption to retrive the data
        }
        $form_state['hidden_idlist_'.$uniqueId] = $form_state['input']['hidden_idlist_'.$uniqueId];
        expDebug::dPrint(' check prerequisite list hidden list'.print_r($form_state['input']['hidden_idlist_'.$uniqueId],true) , 5);
        if(isset($entityPlugin) && $entityPlugin=='prerequisite') {
          if(empty($form_state['input']['hidden_idlist_'.$uniqueId])){
            expDebug::dPrint('check prerequisite list Ilayaraja');
            drupal_set_message(t('ERR106'),'error');
            $form_state['esign_show_popup']= false;
          }
        }
  /*    }else if($triggerElementByName == 'esign-equivalence' || $triggerElementByName == 'set-equivalence'){
        $form_state['esign_show_popup']= true;
        $form_state['storage']['mode'] = 'edit';
        $entityId = $form_state['triggering_element']['#ajax']['entity_id'];
        $entityType = $form_state['triggering_element']['#ajax']['entity_type'];
        $entityPlugin = $form_state['triggering_element']['#ajax']['entity_plugin'];
        $uniqueId = "equivalence-".$entityId."-".$entityType;
        $form_state['hidden_idlist_'.$uniqueId] = $form_state['input']['hidden_idlist_'.$uniqueId];
        if(isset($entityPlugin) && $entityPlugin=='equivalence') {
          if(empty($form_state['input']['hidden_idlist_'.$uniqueId])){
            drupal_set_message(t('ERR106'),'error');
            $form_state['esign_show_popup']= false;
          }
        }*/
      }else if($triggerElementByName == 'esign-survey' || $triggerElementByName == 'set-survey'){
          $form_state['esign_show_popup']= true;
          $form_state['storage']['mode'] = 'edit';
          $entityId = $form_state['triggering_element']['#ajax']['entity_id'];
          $entityType = $form_state['triggering_element']['#ajax']['entity_type'];
          $entityPlugin = $form_state['triggering_element']['#ajax']['entity_plugin'];

          if (in_array($entityType, $secure_entities)) {
          	$uniqueId = "survey-".core_encrypt($entityId)."-$entityType"; // URL encryption to retrive the data
          } else {
          	$uniqueId = "survey-".$entityId."-$entityType"; // URL encryption to retrive the data
          }
          $form_state['hidden_idlist_'.$uniqueId] = $form_state['input']['hidden_idlist_'.$uniqueId];
          if(isset($entityPlugin) && $entityPlugin=='survey') {
            if(empty($form_state['input']['hidden_idlist_'.$uniqueId])){
              form_set_error('', t('ERR106'));
              $form_state['esign_show_popup']= false;
            }
             if($entityType == 'cre_sys_obt_crt'){
	            //Module Validate
	            $uniqueId2 = "survey-".$entityId."-$entityType";
	            $module_id = $form_state['input']['hidden_certificate_path_'.$uniqueId2];
	            
	            if(isset($form_state['input']['hidden_idlist_'.$uniqueId]) && !empty($form_state['input']['hidden_idlist_'.$uniqueId])){
		          $idListArray = explode(',', $form_state['input']['hidden_idlist_'.$uniqueId]);
	            }else{
		          $idListArray = explode(',', $form_state['hidden_idlist_'.$uniqueId]);
          }
		        $idListArray = array_unique($idListArray);
	            foreach($idListArray as $surveyIdList){
	            	$viewOptionList = explode("-",$surveyIdList);
		        	$surveyId = $viewOptionList[0];
	            $survey = getSurveyMappedOrNot($entityId,$entityType,$module_id,$surveyId);
	            if(!empty($survey)){
	            	 form_set_error('',$survey.' - '. t('MSG812'));
		                $form_state['esign_show_popup']= false;
		            }
	            }
             }
          }
         
          expDebug::dPrint('catalog class set survey triggered.');
      }else if($triggerElementByName == 'esign-assessment' || $triggerElementByName == 'set-assessment'){
          $form_state['esign_show_popup']= true;
          $form_state['storage']['mode'] = 'edit';
          $entityId = $form_state['triggering_element']['#ajax']['entity_id'];
          $entityType = $form_state['triggering_element']['#ajax']['entity_type'];
          $entityPlugin = $form_state['triggering_element']['#ajax']['entity_plugin'];

          if (in_array($entityType, $secure_entities)) {
          	$uniqueId = "assessment-".core_encrypt($entityId)."-$entityType"; // URL encryption to retrive the data
          } else {
          	$uniqueId = "assessment-".$entityId."-$entityType"; // URL encryption to retrive the data
          }
          $form_state['hidden_idlist_'.$uniqueId] = $form_state['input']['hidden_idlist_'.$uniqueId];
          if(isset($entityPlugin) && $entityPlugin=='assessment') {
            if(empty($form_state['input']['hidden_idlist_'.$uniqueId])){
              drupal_set_message(t('ERR106'),'error');
              $form_state['esign_show_popup']= false;
            }
          }
          if($entityType == 'cre_sys_obt_crt'){
      		if(isset($form_state['input']['hidden_idlist_'.$uniqueId]) && !empty($form_state['input']['hidden_idlist_'.$uniqueId])){
	          	$idListArray = explode(',', $form_state['input']['hidden_idlist_'.$uniqueId]);
	        }else{
	          	$idListArray = explode(',', $form_state['hidden_idlist_'.$uniqueId]);
	        }
	        $idListArray = array_unique($idListArray);
	        $uniqueId2 = "assessment-".$entityId."-$entityType";
            $module_id = $form_state['input']['hidden_certificate_path_'.$uniqueId2];
            foreach($idListArray as $surveyIdList){
            	$viewOptionList = explode("-",$surveyIdList);
	        	$surveyId = $viewOptionList[0];
	            $survey = getSurveyMappedOrNot($entityId,$entityType,$module_id,$surveyId);
	            if(!empty($survey)){
	            	 form_set_error('',$survey.' - '. t('MSG812'));
	                 $form_state['esign_show_popup']= false;
	            }
            }
          }
      }else if($form_state['triggering_element']['#name'] == $triggerValue && $form_state['values']['attr_action'] == 'notifications') {
        $form_state['esign_show_popup']= true;
        addEditNotificationMandatoryCheck($form,$form_state);
      }

   //  if ($triggerElementByName == 'hidden-save' || $triggerElementByName == 'set-prerequisite' || $triggerElementByName == 'set-survey' || $triggerElementByName == 'set-enrolltpuser' || $triggerElementByName == 'set-assessment' || $triggerElementByName == 'set-equivalence') {
       if ($triggerElementByName == 'hidden-save' || $triggerElementByName == 'set-prerequisite' || $triggerElementByName == 'set-survey' || $triggerElementByName == 'set-enroll-tp-user-mandatory'||$triggerElementByName == 'set-enrolltpuser' || $triggerElementByName == 'set-assessment') {
        $form_state['hidden-save-submit']=true;
        $form_state['esign_show_popup']= false;
     }
     if ($form_state['triggering_element']['#value'] == t('LBL272')) {
        $form_state['display_class']   = TRUE;
        $form_state['input']     = array(); // Clear user input - raw
        $form_state['values']    = array(); // Clear user input - security cleared
        $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['substep'] = 'details';
        //$form_state['storage']['step'] = 'edit';
        return;
      }

        if ($form_state['triggering_element']['#name'] == 'Attachment') {
        $form_state['display_class']   = TRUE;
        $form_state['show_add_another'] = TRUE;
        $form_state['input']     = array(); // Clear user input - raw
        $form_state['values']    = array(); // Clear user input - security cleared
        $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['substep'] = 'Attachment';
        unset($form_state['delete_attachment_index']);
        unset($form_state['delete_attachment_fieldset']);
        $form_state['num_attachment'] = 0;
        return;
      }
      if ($form_state['triggering_element']['#value'] == t('LBL191')) {
        $form_state['display_class']   = TRUE;
        $form_state['input']     = array(); // Clear user input - raw
        $form_state['values']    = array(); // Clear user input - security cleared
        $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['substep'] = 'tag';
        unset($form_state['delete_tag_index']);
        unset($form_state['delete_tag_fieldset']);
        $form_state['num_tag'] = 0;
        return;
      }
     if ($form_state['triggering_element']['#value'] == t('LBL275')) {
        //$form_state['display_class']   = TRUE;
       // $form_state['input']     = array(); // Clear user input - raw
       // $form_state['values']    = array(); // Clear user input - security cleared
        $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['substep'] = 'enrolltpuser';
        return;
      }
      if ($form_state['triggering_element']['#value'] == t('LBL230')) {
        $form_state['display_class']   = TRUE;
        $form_state['input']     = array(); // Clear user input - raw
        $form_state['values']    = array(); // Clear user input - security cleared
        $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['substep'] = 'prerequisite';
        unset($form_state['delete_prerequisite_index']);
        unset($form_state['delete_prerequisite_fieldset']);
        $form_state['num_prerequisite'] = 0;
        return;
      }
      if ($form_state['triggering_element']['#value'] == t('Survey')) {
        //$form_state['display_class']   = TRUE;
        //$form_state['input']     = array(); // Clear user input - raw
        //$form_state['values']    = array(); // Clear user input - security cleared
        $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['substep'] = 'survey';
        //unset($form_state['delete_survey_index']);
        //unset($form_state['delete_survey_fieldset']);
        //$form_state['num_survey'] = 0;
        return;
      }
      if ($form_state['triggering_element']['#value'] == t('Assessment')) {
        //$form_state['display_class']   = TRUE;
        //$form_state['input']     = array(); // Clear user input - raw
        //$form_state['values']    = array(); // Clear user input - security cleared
        $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['substep'] = 'assessment';
        //unset($form_state['delete_assessment_index']);
        //unset($form_state['delete_assessment_fieldset']);
        //$form_state['num_assessment'] = 0;
        return;
      }
      if ($form_state['triggering_element']['#value'] == t('LBL276')) {
        $form_state['display_class']   = TRUE;
        $form_state['input']     = array(); // Clear user input - raw
        $form_state['values']    = array(); // Clear user input - security cleared
        $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['substep'] = 'custom';
        unset($form_state['delete_custom_index']);
        unset($form_state['delete_custom_fieldset']);
        $form_state['num_custom'] = 0;
        return;
      }
      if ($form_state['triggering_element']['#value'] == t('LBL204')) {
        $form_state['display_class']   = TRUE;
        $form_state['input']     = array(); // Clear user input - raw
        $form_state['values']    = array(); // Clear user input - security cleared
        $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['substep'] = 'notifications';
        return;
      }
      if ($form_state['triggering_element']['#value'] == t('LBL205')) {
        $form_state['display_class']   = TRUE;
        $form_state['input']     = array(); // Clear user input - raw
        $form_state['values']    = array(); // Clear user input - security cleared
        $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['substep'] = 'certificate';
        return;
      }

   /*   if ($form_state['triggering_element']['#value'] == t('LBL279')) {
        $form_state['display_class']   = TRUE;
        $form_state['input']     = array(); // Clear user input - raw
        $form_state['values']    = array(); // Clear user input - security cleared
        $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
        $form_state['storage']['substep'] = 'equivalence';
        return;
      }

   */
      if($form_state['triggering_element']['#name'] == 'delete' ||  $form_state['triggering_element']['#name'] == 'unpublish'){
        $form_state['esign_show_popup']= true;
      }


  if ($form_state['triggering_element']['#id'] == 'attach_crs_pg_next') { expDebug::dPrint("Validate herrrrr : 1");
      $form_state['display_class']   = TRUE;
      $form_state['input']           = array();
      $form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['step'] = 'view';
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];

        expDebug::dPrint('55555555555555------------ : '.print_r($form_state['triggering_element']['#ajax']['question_pgn_page'],true) , 5);
      return;
    }

    if ($form_state['triggering_element']['#id'] == 'attach_crs_pg_previous') {expDebug::dPrint("Validate herrrrr : 2");
      $form_state['display_class']   = TRUE;
      $form_state['input']           = array();
      $form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['step'] = 'view';
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
      return;
    }
    if ($form_state['triggering_element']['#id'] == 'attach_crs_pg_first') {
    	expDebug::dPrint("Validate herrrrr : 2");
    	$form_state['display_class']   = TRUE;
    	$form_state['input']           = array();
    	$form_state['values']          = array();
    	$form_state['rebuild']         = TRUE;
    	$form_state['storage']['step'] = 'view';
    	$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
    	return;
    }
    if ($form_state['triggering_element']['#id'] == 'attach_crs_pg_last') {
    	expDebug::dPrint("Validate herrrrr : 2");
    	$form_state['display_class']   = TRUE;
    	$form_state['input']           = array();
    	$form_state['values']          = array();
    	$form_state['rebuild']         = TRUE;
    	$form_state['storage']['step'] = 'view';
    	$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
    	return;
    }

      $form_state['esign_validation_status']= false;
      if(!($form_state['hidden-save-submit'])){
        unset($_SESSION['esign_validate']);
      }
  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_program_addedit_form_validate', $ex);
    expertusErrorThrow($ex);
  }
  //return;
}

function exp_sp_administration_program_attaching_courses_form($form, &$form_state, $renderMode, $arg){
	expDebug::dPrint("Form State in course list form ".print_r($form_state['triggering_element'],true),5);
	$callType = isset($form_state['call_type']) && !empty($form_state['call_type']) ? $form_state['call_type'] : "render_full_form";
	if($callType != 'render_full_form'){
		$program_id = isset($form_state['program_id']) ? $form_state['program_id'] : '';
		$obtType = isset($form_state['object_type']) ? $form_state['object_type'] : '';
		$form_state['storage']['search_attch_tpcourse'] = $form_state['values']['hiddengpval'];
    $form_state['storage']['search_tpn_gptype']     = $form_state['values']['hiddengptype'];
    $form_state['storage']['search_module']     = $form_state['values']['mapped_module_id'];
    if($form_state['triggering_element']['#name'] == 'course-search'){
	  	$courseName = isset($_POST['hiddengpval']) ? $_POST['hiddengpval'] : '';
	    $courseSearchType = isset($_POST['hiddengptype']) ? $_POST['hiddengptype'] : '';
    }else{
    	$courseName = '';
    	$courseSearchType = '';
    }
    $search_mod = isset($form_state['values']['mapped_module_id']) ? $form_state['values']['mapped_module_id'] : 
    				(isset($form_state['module_id']) ? $form_state['module_id'] : '' );
    if((empty($obtType))){
    	$prgDetails = getProgramObjDetails($program_id);
    	$obtType = $prgDetails[0]->object_type;
	  	$form_state['object_type'] = $obtType;
    }
	}
	expDebug::dPrint("Call type ".$callType,4);
	if($callType == "render_full_form"){
		exp_sp_administration_program_attaching_module_section($form, $form_state, $renderMode, $arg);
	}else if($callType == "render_tab_list"){
		exp_sp_administration_program_rendertabs($form,$form_state,$program_id,$obtType,$courseName,$courseSearchType,$search_mod);
	}else if($callType == 'render_course_list'){
    	$modulelist = getModuleIdFromObjectId($program_id,'',$search_mod);
		exp_sp_administration_program_rendercourse_list($form,$form_state,$program_id,$obtType,$courseName,$courseSearchType,$search_mod,$modulelist,0,0);
	}
	if($_POST['_triggering_element_name'] == 'course-search'){
		 $setAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg attach-list-view-attach-btn';
     $setAttributes['data-wrapperid'] = 'attach_course_dt';
     $form["course-search"] = array(
          '#type' => 'submit',
          '#name'	=> 'course-search',
     			'#value'	=> '',
          '#prefix' => '<span id = "attach-crs-div" style="display:none;">',
          '#suffix' => '</span>',
          '#id' => "atach-course-hidden",
      	  '#attributes' => $setAttributes,
          '#ajax' => array(
    	      'wrapper' => 'attach_course_dt',
    	      'callback' => 'attachGroupCallBack',
      		  'program_id' =>$program_id,
      		  'entity_type' => $obtType,
      		  'module_id' =>$search_mod,
    	      'method' => 'replace',
    	      'effect' => 'none', // 'fade',
    	      'event'=>'click',
    	      'keypress' => true,
    	      'progress' => array(
    	        'type' => 'throbber',
    	        'message' => ''
    	      ),
        	)
       );
	}
	return $form;
}

function exp_sp_administration_program_attaching_module_section(&$form, &$form_state, $renderMode, $arg) {
   try {
   	global $theme_key;
    include_once('exp_sp_administration_program.inc');
      
    expDebug::dPrint("form value ". print_r($form,true),5);
	  expDebug::dPrint("form state value ". print_r($form_state,true),5);
	  expDebug::dPrint("arguement value  ". print_r($arg,true),5);
    if(!empty($form_state['program_id'])) {
      $program_id   =    $form_state['program_id'];
      //$module_id = $form_state['build_info']['args'][2];
    }else if(empty($arg)){
      $program_id   =   $form_state['storage']['new']['program_id'];
      $courseId     =   $form_state['storage']['new']['course_id'];
    }else{
      $program_id   =    $arg;
    }
		
    // Save triggering element for delete operations, as delete is implemented in #ajax callback of delete button, which gets
    // invoked after the form is rebuilt.
    unset($form_state['attached_crs_form_triggering_element']);
    if (!empty($form_state['triggering_element']['#name'])) {
     	expDebug::dPrint('$form_state[triggering_element] = ' . print_r($form_state['triggering_element'], true) , 5);
     	$actionCheck = explode("-", $form_state['triggering_element']['#name']);
     	if ($actionCheck[0] == 'deleteAttachedCourse' || $actionCheck[0] == 'recertify') {
     		$form_state['attached_crs_form_triggering_element'] = $form_state['triggering_element'];
     	}
    }

    $form = array();
    addHiddenFieldToAddEditForm($form, 'hiddengptype','crstit');
    addHiddenFieldToAddEditForm($form, 'hiddengpval','');
    addHiddenFieldToAddEditForm($form, 'mapped_module_id','');
    addHiddenFieldToAddEditForm($form, 'tab_count','');
    // Attached Course Search
		$obtType = getObjectypeFromProgramID($program_id);
    // Classs Search auto-complete start

     
    $popupentityId      = $program_id;
    $popupentityType    = 'cre_sys_obt_trp';
    $popupAttachcourseIdInit        	 = $popupentityId.'_'.$popupentityType;
    $popupattachcoursevisibPopupId  = 'qtip_visible_disp_addcrs_'.$popupAttachcourseIdInit; //".$popupentityId."/".$popupentityType."
    $popupAttachCourse    = "{'entityId':".$popupentityId.",'entityType':'".$popupentityType."',
													        'url':'administration/learning/program/attachcourse/".$popupentityId."/".$popupentityType."',
													        'popupDispId':'".$popupattachcoursevisibPopupId."',
													        'catalogVisibleId':'qtipAttachCrsIdqtip_visible_disp_".$popupAttachcourseIdInit."',
													        'wBubble':460,'hBubble':'auto','tipPosition':'bottomRight',
													        'wid':440,'heg':'330','postype':'bottomright','poslwid':'',
													        'qdis':'','linkid':'add-new-coursetoTp-".$popupentityId."'}";

    $addAttributes['class'][] = 'narrow-search-actionbar-orange-btnBG';

    $form['add-attachcourse-button'] = array(
          '#type' => 'markup',
          '#prefix' => "<input type='hidden' id='qtip_position' value=''>
        									<div id='".$popupattachcoursevisibPopupId."' class='add-attachcourse-button' >
        								<a style='display:none' id='add-new-coursetoTp-".$popupentityId."' onclick =\"callVisibility(".$popupAttachCourse."); return false;\"
        											class='admin-save-button-container clsenableattachcourse'><div class='narrow-search-actionbar-orange-btnLeft'></div>
        										<div class='narrow-search-actionbar-orange-btnBG tp-attach-course-btn'>".t("LBL700").'</div><div class="narrow-search-actionbar-orange-btnRight"></div></a>'.
        		
        		"<a style='display:none' id='add-new-coursetoTp-".$popupentityId."' 
        											class='admin-save-button-container clsdisbleattachcourse'><div class='narrow-search-actionbar-orange-btnLeft'></div>
        										<div class='narrow-search-actionbar-orange-btnBG tp-attach-course-btn'>".t("LBL700").'</div><div class="narrow-search-actionbar-orange-btnRight"></div></a>',
          '#suffix' =>'
        							<span id="visible-popup-'.$popupentityId.'" class="qtip-popup-visible" style="display:none; position:absolute; left:0px;top:0">
        							</span></div>',
          '#value' => t("LBL700"),
          '#name' => "Attach Course",
          '#attributes' => $addAttributes,
    );

    $addgroupurl = 'administration/learning/program/add-group/'.$popupentityId;
    $enrollPopupId       = 'qtip_visible_assessment_disp_'.$program_id.'_'.$popupentityType;
    $qtipAssessmentObj    = "{'entityId':".$popupentityId.",'entityType':'".$popupentityType."','url':'administration/learning/program/add-assessment/".$popupentityId."/".$obtType."',
    						'popupDispId':'qtip_addassessment_div','catalogVisibleId':'qtipAttachIdqtip_add_assessment','wid':700,'heg':'500','postype':'middle','posrwid':'',
						    'qdis':'','linkid':'add-assessment-tp','scrollid':'admin-add-scroll','tipPosition':'tipfaceMiddleRight','qtipClass':'admin-qtip-access-parent'}";
   
    $qtipGrpObj = "{'entityId':".$popupentityId.",'entityType':'".$popupentityType."','url':'".$addgroupurl."',
    						'popupDispId':'qtip_addgrp_div','catalogVisibleId':'qtipAttachIdqtip_add_grp','wid':200,'heg':'100','postype':'customLeft','postwid':'',
						    'qdis':'','linkid':'add-grp-tp','scrollid':'admin-add-scroll','tipPosition':'topleft','qtipClass':'admin-qtip-access-parent'}";
    
	  $form['attach-entity-load'] = array(
                '#type' => 'markup',
                '#prefix' => '<div id = "list-options-tp" class = "admin-list-option">
            				 <span style="display:none" class="clsenableattachcourse fa-stack pull-down-circle-menu" onclick="attachToggle(\'attach-grp-links\');vtip();">
                     <i class="fa fa-circle"></i>
                     <i class="fa fa-circle"></i>
                     <i class="fa fa-circle"></i>
                     </span>
                   	 <span style="display:none" class="clsdisbleattachcourse fa-stack pull-down-circle-menu">
                     <i class="fa fa-circle"></i>
                     <i class="fa fa-circle"></i>
                     <i class="fa fa-circle"></i>
                     </span>
    								 <ul class="attach-grp-links" style = "display:none">
                     <li><div id="qtip_addgrp_div"><a id="add-grp-tp" class="tab-title" onclick = "callVisibility('.$qtipGrpObj.');">'.t("Add group").'</a><span id="visible-popup-'.$popupentityId.'" class="qtip-popup-visible" style="display:none;">
        						 </span></div></li>
                     </ul>',
                '#suffix' => '</div>',
	  );
    $form['#prefix'] = '<div id="attach_course_dt">';
    $form['#suffix'] = '</div>';

    $formId = 'attach_course_form';

    expDebug::dPrint(' $coursesList = ' . print_r($coursesList,true), 4);


		/* ------------------------------------Start Pagination----------------------------*/

 
	  if(!empty($form_state['storage']['search_attch_tpcourse']) ){
	    $courseName = $form_state['storage']['search_attch_tpcourse'];
	    $courseSearchType = $form_state['storage']['search_tpn_gptype'];
	    $search_mod = $form_state['storage']['search_module'];
	
	  }else{
	    $courseName='';
	    $courseSearchType = '';
	  }
	  //Reset search module
	  if(!empty($form_state['values']['mapped_module_id'])){
	  	$search_mod = $form_state['values']['mapped_module_id'];
	  }
		expDebug::dPrint("course name ". $courseName .">>> <<< ".$courseSearchType. " <<< ".$search_mod);
	  /* ------------------------------------End Pagination----------------------------*/

		$modcnt = getModuleIdFromObjectId($program_id,'','',-1,'','count');
    $form['edit-tp-attachcourse-details-start'] = array(
          '#prefix' => "<div id='view-tp-list-wrapper'><div id='program-trainingplan-addedit-form-details'><div id ='page-container-tabs-prg'><input id='total-modules' value='".$modcnt."' type='hidden'>",
    );
        
		exp_sp_administration_program_rendertabs($form,$form_state,$program_id,$obtType,$courseName,$courseSearchType,$search_mod);
			  
		$form['edit-tp-attachcourse-details-end'] = array(
	    		'#suffix' => "</div></div></div>",
	  );
	  $setAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg attach-list-view-attach-btn';
    $setAttributes['data-wrapperid'] = 'attach_course_dt';
	  $form["course-search"] = array(
    	      '#type' => 'submit',
    	      '#value' => '',
    	      '#name'	=> 'course-search',
          	  '#prefix' => '<span id = "attach-crs-div" style="display:none;">',
    	      '#suffix' => '</span>',
    	      '#id' => "atach-course-hidden",
      		  '#attributes' => $setAttributes,
    	      '#ajax' => array(
    		      'wrapper' => 'attach_course_dt',
    		      'callback' => 'attachGroupCallBack',
	      		  'program_id' =>$program_id,
	      		  'entity_type' => $obtType,
	      		  'module_id' =>$search_mod,
    		      'method' => 'replace',
    		      'effect' => 'none', // 'fade',
    		      'event'=>'click',
    		      'keypress' => true,
    		      'progress' => array(
    		        'type' => 'throbber',
    		        'message' => ''
    		      ),
    	    	)

    );

    return $form;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_program_attaching_courses_form', $ex);
    expertusErrorThrow($ex);
  }
}

function exp_sp_administration_program_rendertabs(&$form,&$form_state,$program_id,$obtType,$courseName,$courseSearchType,$search_mod){
	try{
		$modulelist = array();
		$module_count = 0;
		//	$program_id = empty($program_id) ? $form_state['program_id'] : $program_id;
		expDebug::dPrint("Program ID - ".$program_id);
		$obtType = empty($obtType) ? 'cre_sys_obt_crt' : $obtType;
	  //$render_tabs = exp_sp_program_render_tabs_forms($program_id, $courseName, $courseSearchType, $search_mod, $modulelist, $module_count);
	
	  $form['edit-tp-tab-modules-start'] = array(
	    '#prefix' => '<div id="exp_sp_administration_program_attaching_courses" class="addedit-addl-form-newui-action-btn">'
	 	);
	 	
	 	exp_sp_program_render_tabs_forms($form,$form_state,$program_id, $courseName, $courseSearchType, $search_mod, $modulelist, $module_count);
	 	
	 	$form['edit-tp-tab-modules-end'] = array(
	    '#suffix' => '</div>'
	 	);
		if(isset($_POST['tab_count']) || isset($_POST['module_sel'])){
		  	$form['hiddengptype-pev-start'.$_POST['tab_count']] = array(
		          '#prefix' => '<div id="modules-classes-all">',
		    );
		}
		$i = 0;
		expDebug::dPrint("module_list ".print_r($modulelist,true),3);
		for($j=0;$j<count($modulelist);$j++){
			$curr_module = $modulelist[$j]->module_id;
			$courseSearchType = empty($form_state['values']['hiddengptype']) ? "" : $form_state['values']['hiddengptype'];
	    $courseName = empty($form_state['values']['hiddengpval']) ? "" : $form_state['values']['hiddengpval'];
	    //addHiddenFieldToAddEditForm($form, 'hiddengptype-'.$curr_module,$srcType);
			//addHiddenFieldToAddEditForm($form, 'hiddengpval-'.$curr_module,$srcVal);
			$form['hiddengptype'.$curr_module] = array(
		        '#type' => 'markup',
		        '#prefix' => '<div id="module-course-list-'.$curr_module.'" class="module-course-lists"><div><input id="hiddengptype-'.$curr_module.'" type="hidden" value="'.$courseSearchType.'"><input id="hiddengpval-'.$curr_module.'" type="hidden" value="'.$courseName.'">',
		  );
		 	exp_sp_administration_program_rendercourse_list($form,$form_state,$program_id,$obtType,$courseName,$courseSearchType,$search_mod,$modulelist,$i,$j);
	 	}
		if(isset($_POST['tab_count']) || isset($_POST['module_sel'])){
		  $form['hiddengptype-pev-end'.$_POST['tab_count']] = array(
		        '#prefix' => '</div>',
		  );
		}
		$form['edit-tp-attachcourse-details-end'] = array(
		   		'#suffix' => "<div class='clearBoth'></div>",
		);
		/*if(isset($_POST['tab_count'])){
      	$data['form'] = $form;
      	$data['modcnt'] = $module_count;
      	return $data;
		}*/
	}catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_program_attaching_courses_form', $ex);
    expertusErrorThrow($ex);
  }
}

function exp_sp_administration_program_rendercourse_list(&$form,&$form_state,$program_id,$obtType,$courseName,$courseSearchType,$search_mod,$modulelist,$i,$j){
	try{
		include_once(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program.inc');
    if(stripos($_SERVER['HTTP_USER_AGENT'], 'Firefox') || (stripos($_SERVER['HTTP_USER_AGENT'], 'Chrome'))){
      $width = '12%';
    }else{
      $width = '10%';
    }
      
    //$modulelist = getModuleIdFromObjectId($program_id);
    expDebug::dPrint("module count inside module >> ". print_r($modulelist,true),4);
					
		expDebug::dPrint("module inside module >> ". print_r($modulelist[$j]->module_id." --- PP --- ".$program_id,true),4);
		$curr_module = $modulelist[$j]->module_id;
		$total_enroll = getEnrollmentCnt($program_id,$curr_module);
		//Added for #0072459
       		
    expDebug::dPrint("enroll count inside module >> ". print_r($total_enroll,true),4);
       			
		//Pagination calculation
	  $pg_page     = 0;
	  $start       = 0;
	  $limit       = 5;
		if(!empty($courseSearchType) && !empty($courseName) && ($form_state['storage']['search_module'] == $curr_module)){
			if(!empty($form_state['values']['mapped_module_id'])){
	  		$search_mod = $form_state['values']['mapped_module_id'];
			}else{
	  		$search_mod = $form_state['storage']['search_module'];
	  	}
		}else{
	    $courseName='';
	    $courseSearchType = '';
		}
		expDebug::dPrint("attach courses name >>> ".$courseName . "course search type ". $courseSearchType . "   Module id ".$curr_module,4);		  
    $attachCrsListCount =  getAttachedTpCourses($program_id, 0, 0,$courseName,$courseSearchType,$curr_module);
    expDebug::dPrint("attach courses list >>> ".print_r($attachCrsListCount,true),4);
		$attachCrsListCount = count($attachCrsListCount);
		expDebug::dPrint("attach courses list count >>> ".$attachCrsListCount,4);
		if( $attachCrsListCount > 0 ){
		  $total_pages = ceil($attachCrsListCount/$limit);
		}else{
		  $total_pages = 0;
		}
			
	  if($pg_page > $total_pages) {
	  	$pg_page = $total_pages;
	  }
	  expDebug::dPrint("total_pages value - ".$total_pages,4);
		
	  if(stripos($form_state['triggering_element']['#name'],'attach_courses_pagination_next')!==false) {
	    $pg_pagenew  = $form_state['storage']['page'];
	    expDebug::dPrint("Inside the conditon page_priv ".$pg_pagenew. " total page ".$total_pages,4);
			if($pg_pagenew > $total_pages){
			  $pg_page  = $form_state['storage']['page']- 1;
			  $form_state['storage']['page'] = $pg_page;
			}else{
			  $pg_page  = $form_state['storage']['page'] + 1 ;//$form_state['question_pgn_page'];
			}
		}
 		$form_state['storage']['page'] = $pg_page;
 		expDebug::dPrint("Page value - ".$pg_page,4);
	  //$limit = $pg_page * 5;
	  $start = $pg_page * 5;
		expDebug::dPrint("search type>> " .$courseSearchType . "searh name >>". $courseName." -- page ".$pg_page,4);
	  $coursesList =  getAttachedTpCourses($program_id, $start, $limit, $courseName,$courseSearchType,$curr_module);
  	expDebug::dPrint("attach courses list for module >>> ".print_r($coursesList,true),4);
	  expDebug::dPrint("current module id >> ".$curr_module,4);
           
	  $form['heading-attached-course-start-'.$curr_module] = array(
	        '#type' => 'markup',
	        '#prefix' => '<div id = "module-program-'.$curr_module.'">',
	  );
	            
	  if(!empty($courseName)){
	   	$crs_cnt = count($coursesList);
	   	$grp_cnt = 0;
	  }else{
		  $crs_cnt = getGrpCourseCnt($program_id,$modulelist[$j]->module_id);
		  $grp_cnt = listOfgrpsUnderModule($modulelist[$j]->module_id);
	  }
	  if($crs_cnt >0 || $grp_cnt >0){
	  	$drag1 = 'dragndrop-'.$curr_module;
	    $form['drag-and-drop-attached-course-common-start-'.$curr_module] = array(
		  	    '#type' => 'markup',
		        '#prefix' => "<div id='".$drag1."' class= 'div-main-container'>",
		    	  '#suffix' =>  "",
		  );
	    //$getGrpList = explode(',',listOfGrpsProgram($curr_module));// listOfgrpsUnderModule($modulelist[$j]->module_id,$modulelist[$j]->sequence);
	    expDebug::dPrint("list of groups >>> ".print_r($getGrpList,true),5);
		  expDebug::dPrint("courses List >>>> ". print_r($coursesList,true),5 );
		  $grpId = 0;
		  $grp_flag = false;
			for($i=0;$i<count($coursesList);$i++) {
			 	$lstModId = $coursesList[$i]->module_id;
			 	$lstGrpId = $coursesList[$i]->group_id;
			 	$lstCrsId = $coursesList[$i]->course_id;
			 	$modgrp = $lstModId . "-" . $lstGrpId;
			 	$modcrs = $modgrp . "-" . $lstCrsId;
			 	$drag = 'dragndrop-'.$modgrp;
			  if($grpId != $coursesList[$i]->group_id){
		  		$grp_flag = true;
		  		$dragId1 = 'Group-'.$curr_module.'-'.$coursesList[$i]->group_code.'-'.$coursesList[$i]->group_id;
		  		if($grpId != 0){
		  			$form['drag-and-drop-attached-course-end-'.$modcrs] = array(
		              '#type' => 'markup',
		              '#prefix' => "",
		              '#suffix' =>  "</ul></div>", // group close div
	         	);
            
	          $form['sortable-load-'.$modcrs] = array(
		              '#type' => 'markup',
		              '#prefix' => '<img src="'.base_path().'sites/all/themes/core/expertusoneV2/expertusone-internals/images/drag.png" width="0" height="0" onload="sequenceDragAndDropPrg(\''.$drag.'\', \'attach_course\',\''.$drag1.'\',\''. $program_id.'\',\''. $curr_module.'\');vtip();" />',
		        );
              
         		$form['drag-and-drop-attached-course-common-group-end-'.$modcrs] = array(
		              '#type' => 'markup',
		              //'#prefix' => '<div class="dragndrop-selectable-item"><img src="'.base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/drag.png" />',
		              '#suffix' => '</li>', // vinc
		        );
		  		}elseif($grpId == 0){
		  			if(!$total_enroll){
		  				 $form['sortable-load-'.$modcrs] = array(
			               '#type' => 'markup',
			               '#prefix' => '<img src="'.base_path().'sites/all/themes/core/expertusoneV2/expertusone-internals/images/drag.png" width="0" height="0" onload="sequenceDragAndDropPrg(\''.$drag.'\', \'attach_course\',\''.$drag1.'\',\''. $program_id.'\',\''. $curr_module.'\');vtip();" />',
			         );
		  			}
		  		}
      		$form['drag-and-drop-attached-course-common-group-start-'.$modcrs] = array(
		            '#type' => 'markup',
		            '#prefix' => "<li id='".$dragId1."' data = '".$coursesList[$i]->group_id."' class='draggable-list $alterNateRow drag-grp-head'>",
		            '#suffix' =>  "",
		      );
          if(!$total_enroll){
			    	$total_crs = getGrpCourseCnt($program_id,$coursesList[$i]->module_id,$coursesList[$i]->group_id);
		       	if(!$total_crs){
            	$form['delete-group-title-button-start-'.$modgrp] = array(
	                	'#type' => 'markup',
	                  '#prefix' => '<div class="drag-and-delete-container"><div class="attach-course-delete grp-delete recertify-grp-delete" onclick="attachCrsDelete(\'deleteGrpCrs-'.$modgrp.'\')" title='.t("LBL286").'>&nbsp;</div> <div class="infinite-scrolling-separator recertify-grps-separator">|</div><span style="display:none;">',
	            );
	          }else{
	          	$form['delete-group-title-button-start-'.$modgrp] = array(
	                	'#type' => 'markup',
	                  '#prefix' => '<div class="drag-and-delete-container"><div class="attach-course-delete grp-delete recertify-grp-delete-disable" param="attachCrsDelete(\'deleteGrpCrs-'.$modgrp.'\')" title='.t("LBL286").'>&nbsp;</div> <div class="infinite-scrolling-separator recertify-grps-separator">|</div>',
	            );
	          }
            $deleteAttributes = '';
            // $deleteAttributes['class'][]   = 'addedit-edit-cancel';
            $deleteAttributes['class'][]   = 'addedit-form-expertusone-throbber';
            $deleteAttributes['class'][]   = 'admin-delete-img';
            $deleteAttributes['class'][]   = 'attach-course-delete';
            $wrapperId                     =	'attach_course_dt';
            $deleteAttributes['data-wrapperid'] = array($wrapperId);
            $form['delete-group-title-button-'.$modgrp] = array(
                  '#type' => 'submit',
                  '#name' => 'deleteGrpCrs-'.$lstModId.'-'.$lstGrpId,
                  '#id' => 'deleteGrpCrs-'.$lstModId.'-'.$lstGrpId,
                  //'#prefix' => '',
                  '#suffix' => '</span>',
                  '#attributes' => $deleteAttributes,
                  '#ajax' => array(
                     'callback' => 'exp_sp_administration_grouping_course_delete_callback',
                     'wrapper' =>'attach_course_dt',
                     'program_id' =>$program_id,
                     'module_id' =>$coursesList[$i]->module_id,
                     'group_id' => $coursesList[$i]->group_id,
                     'entity_type' =>$obtType,
                       'event' => 'click',
                      ),
            );
	              
	          $drag_class = listOfgrpsUnderModule($coursesList[$i]->module_id) > 1 ? "dragndrop-selectable-item" : "dragndrop-selectable-item-disable";
	          //group sequence
	          $form['drag-and-drop-attached-course-common-grp-'.$modcrs] = array(
	            		'#type' => 'markup',
	             		//'#prefix' => '<div class="dragndrop-selectable-item"><img src="'.base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/drag.png" width="0" height="0" onload="sequenceDragAndDrop(\''.$drag1.'\', \'attach_course_list\');vtip();" />',
	             		'#prefix' => '<div class="'.$drag_class.' recertify-grps-drag"><img src="'.base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/drag.png" />',
	             		'#suffix' =>  "</div></div>",
	          );
	              
				  }   
		      $form['heading-attached-Group-'.$modcrs] = array(
		            '#type' => 'markup',
		            '#prefix' => '<div id = "module-program-group-'.$modcrs.'" class = "tp-list-groups-module"><div class="module-program-group-title-container">
		      				<span class="tp-list-module-name-hline"></span>
		       				<span class="tp-list-group-module-name vtip" title="'.htmlentities(ucwords($coursesList[$i]->group_title),ENT_QUOTES,'UTF-8').'">'.ucwords($coursesList[$i]->group_title).'</span>
		       				</div>',
	        );
	            	
       		$form['drag-and-drop-attached-course-start-'.$modcrs] = array(
                '#type' => 'markup',
                '#prefix' => "<ul id='".$drag."'>",
                '#suffix' =>  "",
          );
     			$grpId = $coursesList[$i]->group_id;
   		  }	
				    	
				if(!empty($coursesList[$i]->course_id)){
          $uniqueId = $program_id.'-'.$coursesList[$i]->course_id.'-'.$coursesList[$i]->group_id;
          $dynamic_cos_id      =    $coursesList[$i]->course_id;
          $dynamic_div         =	"delete_all_".$uniqueId;
    		  $title = $coursesList[$i]->title;
		    	$displayTitle = titleController('EXP-SP-ADMIN-PGM-TITLE', $title,100);
		    	$code  = $coursesList[$i]->code;
		    	$displayCode = titleController('EXP-SP-ADMIN-PGM-CODE', $code,16);
		      //id=".$dynamic_div."
		      $dragId = $coursesList[$i]->mapping_id.'-'.$grp_code;
          $form['edit-attachcourse-list-'.$modcrs] = array(
	               '#type' => 'markup',
		             '#prefix' => "<li id='".$dragId."' class='draggable-list drag-crs-head crs-prg-style'><table cellpadding='0' cellspacing='0' border='0' width='100%' class='addedit-training-program-course-list'><tr height='30px'><td width='36%' style='text-transform:uppercase;font-size:11px;padding-left:10px'>",
		             '#suffix' =>  "<span class='vtip' title='".htmlentities($coursesList[$i]->title,ENT_QUOTES,'UTF-8')."'>".$displayTitle."</span></td>",
		      );
          $form['edit-attachcourse-list-code-'.$modcrs] = array(
                 '#type' => 'markup',
		             '#prefix' => "<td width='20%'>",
		             '#suffix' =>  "<span class='vtip' title='".htmlentities($coursesList[$i]->code,ENT_QUOTES,'UTF-8')."'>".$displayCode."</span></td>",
		      );
		
		      $data1 = $program_id.'-'.$obtType.'-'.$coursesList[$i]->course_id.'-'.$curr_module.'-Y';
		      $data2 = $program_id.'-'.$obtType.'-'.$coursesList[$i]->course_id.'-'.$curr_module.'-N';
		
		      if($coursesList[$i]->is_required == 'Y') {
		         $manValue = 'Mandatory';
		      }else{
		        $manValue = 'Optional';
		      }
		             
		      expDebug::dPrint("total enrollment ". $total_enroll ,5);
		      if(!$total_enroll){
		        	$form['edit-attachcourse-list-man-'.$modcrs] = array(
		           			'#type' => 'markup',
		           			'#prefix' => "<td width='10%'>",
		           			'#suffix' => '<div id="mandatory-list">
			           			<ul class="man-opt">
		             			<li>
		             			<span class="selected-man-opt">'.t($manValue).'</span><span class="man-opt-selection"></span>
		             			<ul class="sub-menu">
		             			<li data="'.$data1.'">'.t(Mandatory).'</li>
		             			<li data="'.$data2.'">'.t(Optional).'</li>
		             			</ul>
		             			</li>
		             			</ul>
		             			</div></td>',
		      	 );
		     	}else {
			       $form['edit-attachcourse-list-man-'.$modcrs] = array(
			             '#type' => 'markup',
			             '#prefix' => "<td width='10%'>",
			             '#suffix' => '<div id="mandatory-list-enrolled">
			       	        <ul class="man-opt">
			                  <li>
			                  	<span class="selected-man-opt">'.t($manValue).'</span><span class="man-opt-selection"></span>
			                  </li>
			                </ul>
			                </div></td>',
			       );
		      }
		        
          $cls_cnt = count(getClassIds($coursesList[$i]->course_id));
					$form['edit-attachcourse-classes-list-'.$modcrs] = array(
		             '#type' => 'markup',
		             '#prefix' => "<td width='20%'>",
		        		             '#suffix' =>  "<span class='attachcourse-classes-list vtip'>".t('LBL353')." : ".$cls_cnt."</span></td>",
	        );
		              	
	        if(!$total_enroll){
						$deleteAttributes = '';
	          // $deleteAttributes['class'][]   = 'addedit-edit-cancel';
	          $deleteAttributes['class'][]   = 'addedit-form-expertusone-throbber';
	          $deleteAttributes['class'][]   = 'admin-delete-img';
	          $deleteAttributes['class'][]   = 'attach-course-delete';
	          $wrapperId                     =	'attach_course_dt';
	          $deleteAttributes['data-wrapperid'] = array($wrapperId);
	
	          $form['delete-group-list-button-start-'.$modcrs] = array(
	               	'#type' => 'markup',
	                '#prefix' => '<td width="1%"><div class="attach-course-delete" onclick="attachCrsDelete(\'deleteAttachedCourse-'.$modcrs.'\')" title='.t("LBL286").'>&nbsp;</div><span style="display:none;">',
	          );
	
	          $form['delete-group-list-button-'.$modcrs] = array(
	                '#type' => 'submit',
	                '#name' => 'deleteAttachedCourse-'.$lstModId.'-'.$lstGrpId.'-'.$lstCrsId,
	                '#id' => 'deleteAttachedCourse-'.$lstModId.'-'.$lstGrpId.'-'.$lstCrsId,
	                '#suffix' => '</span></td>',
	                '#attributes' => $deleteAttributes,
	                '#ajax' => array(
	                   'callback' => 'exp_sp_administration_grouping_course_delete_callback',
	                 	 'wrapper' =>'attach_course_dt',
	                 	 'course_id' =>$coursesList[$i]->course_id,
	                   'program_id' =>$program_id,
	                   'module_id' =>$coursesList[$i]->module_id,
	                	 'group_id' => $coursesList[$i]->group_id,
	                 	 'entity_type' =>$obtType,
	                   'event' => 'click',
	                 ),
	          );
	        }
		
	        $prgDetails = getTrainingProgramDetails($program_id, array('enforce_sequence'));
			    if(!$total_enroll) {
	         	 $prefix = '<div class="dragndrop-selectable-item"><img src="'.base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/drag.png" />';
	         	 $separator = '<td width="1%"><div class="infinite-scrolling-separator">|</div></td>';
	        }
	
          $form['edit-group-list-button-'.$modcrs] = array(
	              '#type' => 'markup',
	              '#prefix' => $separator.'<td width="1%" align="center">'.$prefix.'</div>',
	              '#suffix' => '</td></tr></table></li>',
	        );
			  }
      }//course close
      if($grp_flag == true){  
	      $form['drag-and-drop-attached-course-end-'.$modgrp] = array(
		          '#type' => 'markup',
		          '#prefix' => "",
		          '#suffix' =>  "</ul>", // group close div
	     	);
             
	      $form['sortable-load-'.$modgrp] = array(
		          '#type' => 'markup',
		          '#prefix' => '<img src="'.base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/drag.png" width="0" height="0" onload="sequenceDragAndDropPrg(\''.$drag.'\', \'attach_course\',\''.$drag1.'\',\''. $program_id.'\',\''. $curr_module.'\');vtip();" />',
		    );
            
      	$form['drag-and-drop-attached-course-common-group-end-'.$modgrp] = array(
		          '#type' => 'markup',
		          //'#prefix' => '<div class="dragndrop-selectable-item"><img src="'.base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/drag.png" />',
		          '#suffix' => '</div></li>',
		    );
      }
	       		
	    $form['drag-and-drop-attached-course-common-mod-end-'.$modgrp] = array(
	          '#type' => 'markup',
	          '#prefix' => "",
	          '#suffix' =>  "</div>", // group close div
      );
              	
			$form['drag-and-drop-attached-course-common-end-'.$modgrp] = array(
		        '#type' => 'markup',
		        '#prefix' => '<img src="'.base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/drag.png" width="0" height="0" onload="sequenceDragAndDropPrg(\''.$drag1.'\', \'attach_course_list\',\''.$drag1.'\',\''. $program_id.'\',\''. $curr_module.'\');vtip();" />',
		        '#suffix' =>  "",
		  );
		  // For Show more records #0022926
	    if($attachCrsListCount > 5){
	     	$attrShowMore = array();
	     	$attrShowMore['class'][] = 'addedit-form-expertusone-throbber';
	     	$attrShowMore['class'][] = 'infinite-scrolling';
	     	$attrShowMore['data-wrapperid'] = 'attach_course_dt';
	
	     	expDebug::dPrint(' Records Count $attachCrsListCount = '.$attachCrsListCount, 5);
	     	expDebug::dPrint(' Records Count $limit = '.$limit,5);
	
	     	$ShowMore = (($start + $limit) >= $attachCrsListCount) ? 0 : 1 ;
				$form['infinite-scrolling-container-start'.$curr_module] = array(
		          '#markup' => '<div id="course_pagination_'.$curr_module.'">',
		    );
	     	if($ShowMore == 1){
	     		expDebug::dPrint("Added paging script".$curr_module,4);
	     		$form['infinite-scrolling-'.$curr_module] = array(
	      				'#type' => 'submit',
	      				'#id' => 'attach_crs_pg_next_'.$curr_module,
	      				'#prefix' => '<div class="infinite-loader-container">',
	      				'#suffix' => '</div>',
	      				'#value' => t('LBL1251'),
	      				'#name' => 'attach_courses_pagination_next'.$curr_module,
	      				'#attributes' => $attrShowMore,
	      				'#ajax' => array(
	      						'wrapper' => 'attach_course_dt',
	      						'callback' => 'attach_course_pagination_callback',
	      						'method' => 'replace',
	      						'effect' => 'none',
	      						'event'=> 'click',
	      						'question_pgn_page' => $pg_page,
	      						'program_id' =>$program_id,
	      						'module_id' =>$curr_module,
	      						'entity_type' =>$obtType,
	      						'keypress' => true,
	      						'progress' => array(
	      								'type' => 'throbber',
	      								'message' => ''
	      						),
	      				)
	      	);
	      }else{
	      	$form['infinite-scrolling-'.$curr_module] = array(
	      				'#markup' => '<div class="infinite-loader-container infinite-loader-no-records">'.t('LBL1252').'</div>',
	      				'#attributes' => $attrShowMore,
	     		);
	      }
				$form['infinite-scrolling-container-end'.$curr_module] = array(
		          '#markup' =>  "</div>",
		    );
	
	    }// End    
    }else{
     	expDebug::dPrint("search type >>". $courseName,4);
     if(empty($courseSearchType)) {
          if($obtType == 'cre_sys_obt_crt'){
              $noCourseListMsg = t("ERR264", array('@modulename' => $modulelist[$j]->module_title));
          }else{
              $noCourseListMsg = t("ERR144");
          }  
			}else {
			  $noCourseListMsg = t('MSG381').'.';
			}
	    $form['no-course-list'.$curr_module] = array(
			      '#type' => 'item',
			      '#prefix' => '<div class="clearBoth"></div><div class="nonlist" id="no-courses-list-'.$curr_module.'">' . $noCourseListMsg,
			      '#suffix' => '</div>',
			);
	  }        
		$form['heading-attached-course-end'.$curr_module] = array(
	        '#type' => 'markup',
	        '#prefix' => "",
	        '#suffix' =>  "</div>",
	  );
	  $form['hiddengptype-end'.$curr_module] = array(
	        '#prefix' => '</div></div>',
	  );
	  //  }//module close
				
	  return $form;
	}catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_program_attaching_courses_form', $ex);
    expertusErrorThrow($ex);
  }
}

function attachGroupCallBack($form, &$form_state){
	try {
		$programId = $form_state['triggering_element']['#ajax']['program_id'];
		$entityType = $form_state['triggering_element']['#ajax']['entity_type'];
		$moduleId = (!empty($_POST['mapped_module_id']) ? $_POST['mapped_module_id'] : '' );//Modified for #0072459
		$question_pgn_page    = 1;
		$object_type = $form_state['triggering_element']['#ajax']['entity_type'];
		
		$min_form_state = array(
		      'ajax' => TRUE,
		      're_render' => FALSE,
		      'no_redirect' => TRUE,
		      'program_id' => $programId,
		      'module_id' => $moduleId,
		      'question_pgn_page' => $question_pgn_page,
		      'object_type' => $object_type,
		       //'build_info' => array('args' => array('ajax'),'question_pgn_page' => $question_pgn_page),
		       'call_type' => 'render_course_list'
		);
		$min_form_state['values']['mapped_module_id'] = $moduleId;
				
		$form_state['rebuild'] = TRUE;
		$form_state = array_merge($form_state,$min_form_state);
		$form_state['rebuild_info']['copy']['#build_id'] = TRUE;
		$form_state['rebuild_info']['copy']['#action'] = TRUE;
		$form_state['values']['mapped_module_id'] = $moduleId;
		$form_state['storage']['page'] = $question_pgn_page;
		
		$formId = 'exp_sp_administration_program_attaching_courses_form';
		$builtForm = drupal_rebuild_form($formId, $form_state, $form);
		$form = array_merge($form,$builtForm);
					
		form_set_cache($form['#build_id'], $form, $form_state);
					
		$commands = array();
		$commands[] = ajax_command_replace(NULL, drupal_render($builtForm));
		$settings = get_drupal_ajax_settings($builtForm);
		
		$dom = new DOMDocument();
		$dom->loadHTML('<?xml encoding="utf-8" ?>' . $commands[0]['data']);
		$node = $dom->getElementById('module-program-'.$moduleId);
		$tabContant ='';
		if($node)
			$tabContant = getInnerHtml($node);
		$node = $dom->getElementById('attach-crs-div');
		$srcNode ='';
		if($node)
			$srcNode = getInnerHtml($node);
		
		$commands = array();
		$data = '<div id = "module-program-'.$moduleId.'">' . $tabContant . '</div>';
		$commands[] = ajax_command_replace('#module-program-'.$moduleId, mb_convert_encoding($data, "HTML-ENTITIES", "UTF-8"));
		$commands[] = ajax_command_invoke(NULL, "postPagination",array($settings,'attachgrp','#attach-crs-div', '<span id="attach-crs-div">' . $srcNode . '</span>'));
		$commands[] = ajax_command_invoke(NULL, "attachClose", array($programId.'-'.$moduleId, $entityType,'attachgrp'));
		expDebug::dPrint("Attach group callback final result - ".print_r($commands,true),5);
		return array(
		    '#type' => 'ajax',
		    '#commands' => $commands
		);
	}catch (Exception $ex) {
	 watchdog_exception('attachCourseCallBack', $ex);
	 expertusErrorThrow($ex);
	}
}



function edit_group($form, &$form_state) {
  try {
    expDebug::dPrint(' $form_state = ' . print_r($form_state, true) , 5);
    $courseId = $form_state['triggering_element']['#ajax']['course_id'];
    $programId = $form_state['triggering_element']['#ajax']['program_id'];
    $moduleId = $form_state['triggering_element']['#ajax']['module_id'];

    $form_state['program_id'] = $programId;
    $form_state['course_id']  = $courseId;
    $form_state['module_id']  = $moduleId;

     expDebug::dPrint($courseId.$programId.'edit_groupattachment'.$moduleId.$arg , 5);
    $form_state['rebuild'] = TRUE;
  } catch (Exception $ex) {
    watchdog_exception('edit_group', $ex);
    expertusErrorThrow($ex);
  }
}




function delete_tp_attachcourse($form, &$form_state){
  //return $form['attach_course_form'];
  	try{

  	} catch (Exception $ex) {
  		watchdog_exception('delete_tp_attachcourse', $ex);
  		expertusErrorThrow($ex);
  	}
}

function exp_sp_administration_grouping_course_delete_callback($form, &$form_state){
	expDebug::dPrint( '$form_state[triggering_element] = testing show more records ' . print_r($form_state, true) , 5);
  try {
    if (!empty($form_state['attached_crs_form_triggering_element'])) {
    	$triggeringElement = $form_state['attached_crs_form_triggering_element'];
    }else {
  	 	$triggeringElement = $form_state['triggering_element'];
    }

    expDebug::dPrint( '$triggeringElement = ' . print_r($triggeringElement, true) , 5);

    $actionCheck = explode("-", $triggeringElement['#name']);

    $courseId = $triggeringElement['#ajax']['course_id'];
    $programId = $triggeringElement['#ajax']['program_id'];
    $moduleId = $triggeringElement['#ajax']['module_id'];
    $re_certify_flag = $triggeringElement['#ajax']['re_certify_flag'];
    $entityType = $triggeringElement['#ajax']['entity_type'];
    $recertified = $triggeringElement['#ajax']['recertified'];
    $grpId = $triggeringElement['#ajax']['group_id'];

      /**	38503: Loader icon loading but no action when click on 2nd time recertify check box in TP
       * 	change by: ayyappans
       * 	check for recertification exists already
       * */
    if($recertified == 1) {
     	$commands[] = ajax_command_replace('#show_expertus_message', '<div id="show_expertus_message"><div id="message-container" style="visibility: visible;"><div class="messages error"><ul><li style="width: 200px;"><span>'.t('LBL429').t('LBL271').'</span></li></ul><div onclick="$(\'body\').data(\'learningcore\').closeErrorMessage();" class="msg-close-btn"></div></div></div></div>');
     	return array(
     			'#type' => 'ajax',
     			'#commands' => $commands
     	);
    }
    if($actionCheck[0] == 'deleteAttachedCourse') {
    	include_once(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program.inc'); /*Viswanathan added for #79463*/
        /*if($re_certify_flag == 1 && $entityType == 'cre_sys_obt_crt') {
        	$delete=deleteTpAttachedReCertifyCourse($programId, $courseId);
        } else {*/
     	expDebug::dPrint('calling deleteTpAttachedCourse() for $programId = ' . $programId . ' and $courseId = ' . $courseId , 4);
     	$delete=deleteTpAttachedCourse($programId, $courseId,$moduleId,$grpId);
       //}
    }

    if($actionCheck[0] == 'recertify') {
     	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_attach_course.inc');
      attachedcourse_recertify_update($programId, $entityType, $re_certify_flag, $courseId);
    }
    if($actionCheck[0] == 'deleteGrpCrs'){
     	deleteTPAttachedGroups($programId,$moduleId,$grpId);
    }

    $min_form_state = array(
       'ajax' => TRUE,
       're_render' => FALSE,
       'no_redirect' => TRUE,
       'program_id' => $programId,
       'course_id' =>  $courseId,
       'module_id' => $moduleId,
       're_certify_flag' => $re_certify_flag,
       'recertified' => $recertified,
       'object_type'=>$entityType,
       //'build_info' => array('args' => array('ajax'))
       'call_type' => 'render_course_list'
    );

    //$form_state = $min_form_state;
		$min_form_state['values']['mapped_module_id'] = $moduleId;
    expDebug::dPrint(' formstateee : '.print_r($form_state,true) , 5);
	
	  $form_state['rebuild'] = TRUE;
    $form_state = array_merge($form_state,$min_form_state);
    $form_state['rebuild_info']['copy']['#build_id'] = TRUE;
 		$form_state['rebuild_info']['copy']['#action'] = TRUE;
		$form_state['values']['mapped_module_id'] = $moduleId;
    $form_state['storage']['page'] = $question_pgn_page;



    $formId = 'exp_sp_administration_program_attaching_courses_form';
    $builtForm = drupal_rebuild_form($formId, $form_state, $form);
		$form = array_merge($form,$builtForm);

		form_set_cache($form['#build_id'], $form, $form_state);
			
    $commands = array();
    $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));

		$dom = new DOMDocument();
		$dom->loadHTML('<?xml encoding="utf-8" ?>' . $commands[0]['data']);
		$node = $dom->getElementById('module-program-'.$moduleId);

		$tabContant ='';
		if($node)
			$tabContant = getInnerHtml($node);
		$commands = array();
		$data = '<div id = "module-program-'.$moduleId.'">' . $tabContant . '</div>';
		$commands[] = ajax_command_replace('#module-program-'.$moduleId, mb_convert_encoding($data, "HTML-ENTITIES", "UTF-8"));
		$commands[] = ajax_command_invoke(NULL, "attachClose", array($programId.'-'.$moduleId, $entityType,'pagination'));
		expDebug::dPrint("Group course delete callback final result - ".print_r($commands,true),5);
    return array(
          '#type' => 'ajax',
          '#commands' => $commands
    );
  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_grouping_course_delete_callback', $ex);
    expertusErrorThrow($ex);
  }

}

function attach_course_pagination_callback($form, &$form_state){
	try {
	 	$programId = $form_state['triggering_element']['#ajax']['program_id'];
	 	$moduleId = $form_state['triggering_element']['#ajax']['module_id'];
	  $question_pgn_page    = $form_state['triggering_element']['#ajax']['question_pgn_page'];
	  $object_type = $form_state['triggering_element']['#ajax']['entity_type'];
		$entityType = 'cre_sys_obt_trp';
		$moduleId = empty($moduleId) ? $form_state['mapped_module_id'] : $moduleId;
	
		$min_form_state = array(
	       'ajax' => TRUE,
	       're_render' => FALSE,
	       'no_redirect' => TRUE,
	       'program_id' => $programId,
	       'module_id' => $moduleId,
	       'question_pgn_page' => $question_pgn_page,
	       'object_type' => $object_type,
	       //'build_info' => array('args' => array('ajax'),'question_pgn_page' => $question_pgn_page),
	       'call_type' => 'render_course_list'
	  );
		
  	$form_state['rebuild'] = TRUE;
    $form_state = array_merge($form_state,$min_form_state);
    $form_state['rebuild_info']['copy']['#build_id'] = TRUE;
 		$form_state['rebuild_info']['copy']['#action'] = TRUE;
		$form_state['values']['mapped_module_id'] = $moduleId;
    $form_state['storage']['page'] = $question_pgn_page;

    $formId = 'exp_sp_administration_program_attaching_courses_form';
    $builtForm = drupal_rebuild_form($formId, $form_state, $form);
		$form = array_merge($form,$builtForm);

		form_set_cache($form['#build_id'], $form, $form_state);
			
    $commands = array();
    $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));

    $settings = get_drupal_ajax_settings($builtForm);

		$dom = new DOMDocument();
		$dom->loadHTML('<?xml encoding="utf-8" ?>' . $commands[0]['data']);
		$node = $dom->getElementById('dragndrop-'.$moduleId); 
		$tabContant ='';
		if($node)
			$tabContant = getInnerHtml($node);
			
		$node = $dom->getElementById('course_pagination_'.$moduleId);
		$showmore = '';
		if($node)
			$showmore = getInnerHtml($node);
		$commands = array();
		$data = '<div id = "module-program-'.$moduleId.'">' . $tabContant . '</div>';
		//$moredata = '<div id = "course_pagination_'.$moduleId.'" class="infinite-loader-container">' . $showmore . "<div>";
		//$commands[] = ajax_command_replace('#module-program-'.$moduleId, mb_convert_encoding($data, "HTML-ENTITIES", "UTF-8"));
		$commands[] = ajax_command_invoke(NULL, "postPagination", array(null,'show_more_scroll',"course_pagination_".$moduleId,$showmore));
		$commands[] = ajax_command_invoke(NULL, "postPagination", array($settings,'show_more',"dragndrop-".$moduleId,$data));
		$commands[] = ajax_command_invoke(NULL, "attachClose", array($programId.'-'.$moduleId, $entityType,'pagination'));
		expDebug::dPrint("Pagination final call result - ".print_r($commands,true),4);
    return array(
         '#type' => 'ajax',
         '#commands' => $commands
    );

  } catch (Exception $ex) {
    watchdog_exception('attach_course_pagination_callback', $ex);
    expertusErrorThrow($ex);
  }
}

function attach_tp_course_search_callback($form, &$form_state){
 try {
 $programId = $form_state['triggering_element']['#ajax']['program_id'];
 $question_pgn_page    = $form_state['triggering_element']['#ajax']['question_pgn_page'];
 $get_course_name       = $form_state['values']['tpattchedcoursename-autocomplete'];


  expDebug::dPrint('new form state values: '.print_r($form_state['values'],true) , 5);

 $form_state = array();

 $form_state['rebuild'] = TRUE;



      $min_form_state = array(
       'ajax' => TRUE,
       're_render' => TRUE,
       'no_redirect' => TRUE,
       'program_id' => $programId,
       'question_pgn_page' => $question_pgn_page,
       'get_course_name' =>  $get_course_name,
       'build_info' => array('args' => array('ajax'),'question_pgn_page' => $question_pgn_page,'get_course_name'=> $get_course_name)
      );

      $form_state = $min_form_state;

     //$form_state['storage']['page'] = $question_pgn_page;

      expDebug::dPrint('attached Coursese : '.print_r($form_state,true) , 5);

      $formId = 'exp_sp_administration_program_attaching_courses_form';
      $builtForm = drupal_build_form($formId, $form_state);

      $commands = array();
      $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));

      return array(
            '#type' => 'ajax',
            '#commands' => $commands
      );
      } catch (Exception $ex) {
      	watchdog_exception('attach_tp_course_search_callback', $ex);
      	expertusErrorThrow($ex);
      }

}

function prepare_triggering_element($element){
	unset($element['#attached']);
	unset($element['#ajax_processed']);
	unset($element['#sorted']);
	unset($element['#validated']);
	$element['#processed'] = 0;
}

function exp_sp_administration_program_attaching_courses_form_validate($form, &$form_state){
  try{
  	expDebug::dPrint("Form state in course form validate ".print_r($form_state['triggering_element'],true),5);

  	if ($form_state['triggering_element']['#id'] == 'attach_crs_pg_txtfld') { expDebug::dPrint("Validate herrrrr : 3",3);
      $form_state['display_class']   = TRUE;
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['step'] = 'view';
      $form_state['storage']['page'] = $form_state['input']['attach_crs_pg_txtfld'];//$form_state['triggering_element']['#ajax']['question_pgn_page'];//
      return;
    }
    
  	if ($form_state['triggering_element']['#id'] == 'tab-left-arrow') { expDebug::dPrint("tab-left-arrow: 1",3);
      $form_state['display_class']   = TRUE;
      //$form_state['input']           = array();
      //$form_state['values']          = array();
      //$form_state['rebuild']         = TRUE;
      $form_state['storage']['step'] = 'view';
      //$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
      return;
    }

    if (stripos($form_state['triggering_element']['#id'],'attach_crs_pg_next') !== FALSE) { expDebug::dPrint("Validate herrrrr : 1",3);
      /*$form_state['display_class']   = TRUE;
      //$form_state['input']           = array();
      //$form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];*/
    	$form_state['storage']['step'] = 'view';
      return;
    }
    
  	if (stripos($form_state['triggering_element']['#id'],'deleteAttachedCourse') !== FALSE) { expDebug::dPrint("Validate deleteAttachedCourse : 1",3);
      /*$form_state['display_class']   = TRUE;
      //$form_state['input']           = array();
      //$form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];*/
    	$form_state['storage']['step'] = 'view';
      return;
    }
    
  	if (stripos($form_state['triggering_element']['#id'],'deleteGrpCrs') !== FALSE) { expDebug::dPrint("Validate deleteGrpCrs : 1",3);
      /*$form_state['display_class']   = TRUE;
      //$form_state['input']           = array();
      //$form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];*/
    	$form_state['storage']['step'] = 'view';
      return;
    }
    
  	if (stripos($form_state['triggering_element']['#id'],'atach-course-hidden') !== FALSE) { expDebug::dPrint("Validate atach-course-hidden : 1",3);
      /*$form_state['display_class']   = TRUE;
      //$form_state['input']           = array();
      //$form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];*/
    	$form_state['storage']['step'] = 'view';
      return;
    }

    if ($form_state['triggering_element']['#id'] == 'attach_crs_pg_previous') {expDebug::dPrint("Validate herrrrr : 2",3);
      $form_state['display_class']   = TRUE;
      $form_state['input']           = array();
      $form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['step'] = 'view';
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
      return;
    }
    if ($form_state['triggering_element']['#id'] == 'attach_crs_pg_first') {
    	expDebug::dPrint("Validate herrrrr : 2",3);
    	$form_state['display_class']   = TRUE;
    	$form_state['input']           = array();
    	$form_state['values']          = array();
    	$form_state['rebuild']         = TRUE;
    	$form_state['storage']['step'] = 'view';
    	$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
    	return;
    }
    if ($form_state['triggering_element']['#id'] == 'attach_crs_pg_last') {
    	expDebug::dPrint("Validate herrrrr : 2",3);
    	$form_state['display_class']   = TRUE;
    	$form_state['input']           = array();
    	$form_state['values']          = array();
    	$form_state['rebuild']         = TRUE;
    	$form_state['storage']['step'] = 'view';
    	$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
    	return;
    }

//if ($form_state['triggering_element']['#id'] == 'search_attach_tp_crs') {expDebug::dPrint("Validating ..");
	else {expDebug::dPrint("Validating ..",3);
      $form_state['storage']['search_attch_tpcourse'] = $form_state['values']['hiddengpval'];
      $form_state['storage']['search_tpn_gptype']     = $form_state['values']['hiddengptype'];
      $form_state['storage']['search_module']     = $form_state['values']['mapped_module_id'];
      $form_state['display_class']   = TRUE;
      $form_state['input']           = array();
      $form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['step'] = 'view';
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];

      return;
    }
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_program_attaching_courses_form_validate', $ex);
    expertusErrorThrow($ex);
  }
}

function edit_program_details(&$form, &$form_state, $defaultValue){
  try {
    unset($editAttributes['onclick']);
    $editAttributes['class'][] = 'addedit-form-expertusone-throbber admin-add-edit-button';
    // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
    //$editAttributes['data-wrapperid'] = array('wizard-course-form-wrapper');
    $editAttributes['data-wrapperid'] = array('program-addedit-form');
    $editAttributes['onclick'][]       = '$(document).ready(function(){ editTPDetailsView() }); remove_success_messages();remove_error_messages();hideMessageInfo();';
    if($form_state['storage']['display_mode'] != 'view' && ($form_state['storage']['substep'] == 'details' || empty($form_state['storage']['substep']))){
			//Using the below veriable we can find current loaded theme name
  		global $theme_key;

    	$form['edit_btn_new_details'] = array(
    		//'#type' => 'image_button', '#src' => base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/edit.png',
	    	'#type'=> 'submit',
	  	 	'#value'  => ($theme_key=='expertusoneV2')? '' : t('LBL063'),
	      '#name'   => 'edit_training_plan',
	      '#prefix' => '<div id="addedit-form-wrapper"><div class="admin-course-edit-button-container">',
	      '#suffix' => '</div></div>',
	      //'#prefix' => '<div id="addedit-form-wrapper"><div class="admin-course-edit-button-container">',
	      //'#suffix' => '</div>',
	      '#attributes' => $editAttributes,
	      '#ajax' => array(
	    	'callback' => 'tpEditModeRepaintForm',
	         'wrapper' => 'program-addedit-form',
	    		 'event'	   => 'click'
	       ),
	     );
    }
  } catch (Exception $ex) {
    watchdog_exception('edit_program_details', $ex);
    expertusErrorThrow($ex);
  }
}

function edit_program_view(&$form, &$form_state, $defaultValue, $entityId){
  try {
     /* // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
      $editAttributes['class'][] = 'addedit-form-expertusone-throbber';
      // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
      //$editAttributes['data-wrapperid'] = array('wizard-course-form-wrapper');
      $editAttributes['data-wrapperid'] = array('program-addedit-form');
      $editAttributes['class'][] = 'admin-save-button-middle-bg';
      $editAttributes['onclick'][]       = '$(document).ready(function(){ editTPDetailsView() }); remove_success_messages();remove_error_messages();';
      $form['edit_btn'] = array(
      	  '#type'   => 'submit',
    	  '#value'  => t('Edit'),
          '#name'   => 'Edit Training Plan',
          '#prefix' => '<div id="addedit-form-wrapper"><div class="admin-course-edit-button-container"><div class="admin-save-button-left-bg"></div>',
          '#suffix' => '<div class="admin-save-button-right-bg"></div></div>',
          '#attributes' => $editAttributes,
          '#ajax' => array(
      		'callback' => 'tpEditModeRepaintForm',
             'wrapper' => 'program-tp-basic-addedit-form-disp',
      		 'event'	   => 'click'
          ),
        );
      */
     $form['onload-vtip-class'] = array(
                '#type' => 'markup',
                '#prefix' => '<img src="'.base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/drag.png" width="0" height="0" onload="vtip();" />',
              );
        $form['title'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL083').':',
        	'#prefix'   => '<div class="addedit-new-field"><div class="addedit-course-field-title">',
            '#markup'   => '</div><div class="addedit-new-field-value view-mode-field-value-txt vtip " title ="'.htmlentities($defaultValue['title'],ENT_QUOTES,'UTF-8').'">'.titleController('EXP-SP-ADMIN-PGM-DEFAULT-TITLE', $defaultValue['title'] ,55).'</div><div class="clearBoth"></div>',
        	'#suffix'   => '</div>',
         );


         $form['code'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL096').':',
         	'#prefix'   => '<div class="two-column-container-view"><div class="first-col-container-view tp-view-mode">',
            '#markup'   => '<div class="first-col-value-view view-mode-field-value-txt"><span title="'.htmlentities($defaultValue['code'],ENT_QUOTES,'UTF-8').'" class="vtip">'.titleController('EXP-SP-ADMIN-PGM-DEFAULT-CODE', $defaultValue['code'],20).'</span></div>',
         	'#suffix'   => '</div>',
         );
         $form['lang_code'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL038').':',
         	'#prefix'   => '<div class="second-col-container-view">',
            '#markup'   => '<div class="second-col-value-view view-mode-field-value-txt">'.t($defaultValue['language_name']).'</div>',
         	'#suffix'   => '</div></div><div class="clearBoth"></div>',
         );


        /* $form['short_description'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL282'),
         	'#prefix'   => '<div class="admin-course-class-short-description"><div class="addedit-new-field"><div class="addedit-course-field-title">',
            '#markup'   => '</div><div class="addedit-new-field-value view-mode-field-value-txt">'.$defaultValue['short_desc'].'</div><div class="clearBoth"></div>',
            '#suffix'   => '</div></div>',
         );
         $form['hidden_markup_short'] = array(
            '#type'     => 'markup',
         	'#prefix'   => '<img style="display:none;" src="sites/all/themes/core/expertusone/expertusone-internals/images/close.png" onload="displayLongDescription(\'short_description\')" />',
         );
         $form['short_description'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL331'),
         	'#prefix'   => '<div class="admin-course-class-long-description"><div class="addedit-new-field"><div class="addedit-course-field-title">',
            '#markup'   => '</div><div class="addedit-new-field-value view-mode-field-value-txt">'.$defaultValue['short_desc'].'</div><div class="clearBoth"></div>',
         	'#suffix'   => '</div></div>',
         );*/
         
          $form['short_description'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL229').':',
         	'#prefix'   => '<div class="admin-course-class-long-description"><div class="addedit-new-field"><div class="addedit-course-field-title">',
            '#markup'   => '</div><div class="addedit-new-field-value view-mode-field-value-txt '.$defaultValue['object_type'].' limit-desc trunk8-fade">'.$defaultValue['short_desc'].'</div><div class="clearBoth"></div>',
         	'#suffix'   => '</div></div>',
         );


         $form['hidden_markup_long'] = array(
            '#type'     => 'markup',
         	'#prefix'   => '<img style="display:none;" src="sites/all/themes/core/expertusone/expertusone-internals/images/close.png" onload="displayLongDescription(\'long_description\')" />',
         );

    /*     $form['status'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL285'),
         	'#prefix'   => '<div class="second-col-container-view">',
            '#markup'   => '<div class="second-col-value-view">'.$defaultValue['status_name'].'</div>',
         	'#suffix'   => '</div></div><div class="clearBoth"></div>',
         );*/

        if(!empty($defaultValue['in_active_reason'])) {
         $form['in_active_reason'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL412'),
         	'#prefix'   => '<div class="addedit-new-field"><div class="addedit-course-field-title">',
            '#markup'   => '</div><div class="addedit-new-field-value view-mode-field-value-txt">'.$defaultValue['in_active_reason'].'</div><div class="clearBoth"></div>',
         	'#suffix'   => '</div>',
         );
        }


         $form['object_type'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL036').':',
         	  '#prefix'   => '<div class="two-column-container-view">' .
         	                   '<div class="first-col-container-view">',
            '#markup'   =>     '<div class="first-col-value-view">' .
                                 t($defaultValue['object_type_name']) .
                               '</div>',
         	'#suffix'   =>     '</div>',
         );
         $form['price'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL040').':',
         	  '#prefix'   =>   '<div class="second-col-container-view">',
            '#markup'   =>     '<div class="second-col-value-view">' .
                                 $defaultValue['price'] . ' ' . substr($defaultValue['currency_name'],0,3) .
                               '</div>',
         	  '#suffix'   =>   '</div>' .
         	                 '</div>' .
         	                 '<div class="clearBoth"></div>',
         );

         /*     $form['price'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL288'),
         	'#prefix'   => '<div class="two-column-container-view"><div class="first-col-container-view">',
            '#markup'   => '<div class="first-col-value-view">'.$defaultValue['price'].'</div>',
         	'#suffix'   => '</div>',
         );
         $form['currency_type'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL289'),
         	'#prefix'   => '<div class="second-col-container-view">',
            '#markup'   => '<div class="second-col-value-view">'.$defaultValue['currency_name'].'</div>',
         	'#suffix'   => '</div></div><div class="clearBoth"></div>',
         );
         $form['object_type'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL036'),
         	'#prefix'   => '<div class="two-column-container-view"><div class="first-col-container-view">',
            '#markup'   => '<div class="first-col-value-view">'.$defaultValue['object_type_name'].'</div>',
         	'#suffix'   => '</div>',
         );*/

         // Enforce Sequencing For the View Mode
         if($defaultValue['enforce_sequence'] == 'Y'){
         		$Sequencing_Status = t('Yes');
         }else{
         		$Sequencing_Status = t('No');
         }

         $form['enforce_sequence'] = array(
         		'#type'     => 'item',
         		'#title'    => t('Enforce Sequencing').':',
         		'#prefix'   => '<div class="two-column-container-view">' .
         									 	'<div class="first-col-container-view">',
         		'#markup'   =>     '<div class="first-col-value-view">' .
         												$Sequencing_Status.
         												'</div>',
         		'#suffix'   =>  '</div></div>',
         );// enforce sequence field ends

         $form['author_vendor'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL269').':',
         	  '#prefix'   => '<div class="two-column-container-view">' .
         	                   '<div class="first-col-container-view">',
            '#markup'   =>     '<div class="first-col-value-view">' .
                               titleController('EXP-SP-ADMIN-PGM-DEFAULT-AUTHOR-VENDOR', $defaultValue['author_vendor'] ,20).
                               '</div>',
         	'#suffix'   =>     '</div>',
         );
         if($defaultValue['object_type']=='cre_sys_obt_crt'){
         	 if (empty($defaultValue['expires_in_value'])) {
         	   $expiresInMarkupHTML = '<div class="second-col-value-view">' .
                                      t('Never') .
                                    '</div>';
         	 }
         	 else {
         	 	 $pluralExpiresInUnit = false;
         	   if ($defaultValue['expires_in_value'] != 1) {
         	     $pluralExpiresInUnit = true;
         	   }

         	   $expiresInUnit = $pluralExpiresInUnit? t('LBL605') : t('LBL910'); // LBL605 = days, LBL910 = day
         	   if ($defaultValue['expires_in_unit'] == 'months') {
         	   	 $expiresInUnit = $pluralExpiresInUnit? strtolower(t('LBL911')) : t('LBL913'); //LBL912 = months, LBL913 = month
         	   }
         	   else if ($defaultValue['expires_in_unit'] == 'years') {
         	   	 $expiresInUnit = $pluralExpiresInUnit? t('LBL915') : t('LBL916'); //LBL915 = years, LBL916 = year
         	   }

         	   $expiresInMarkupHTML = '<div class="second-col-value-view">' .
                                      $defaultValue['expires_in_value'] . '&nbsp;' . $expiresInUnit .
                                    '</div>';
         	 }

           $form['expires_in'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL233').':', //Expires In
           	'#prefix'   => '<div class="second-col-container-view">',
            '#markup'   =>   $expiresInMarkupHTML,
           	'#suffix'   => '</div>' .
           	             '</div>' .
           	             '<div class="clearBoth"></div>',
           );
         }else if($defaultValue['object_type']=='cre_sys_obt_trn'){
           $form['end_date'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL234').':',
           	'#prefix'   => '<div class="second-col-container-view">',
            '#markup'   => '<div class="second-col-value-view">'.date('m-d-Y', strtotime($defaultValue['end_date'])).'</div>',
           	'#suffix'   => '</div></div><div class="clearBoth"></div>',
           );
         }else{
           $form['end_date'] = array(
            '#type'     => 'item',
           	'#prefix'   => '<div class="second-col-container-view">',
            '#markup'   => '<div class="second-col-value-view"></div>',
           	'#suffix'   => '</div></div><div class="clearBoth"></div>',
           );
         }
         
         /*$form['additional_info'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL156'),
         	'#prefix'   => '<div class="addedit-new-field"><div class="addedit-course-field-title">',
            '#markup'   => '</div><div class="addedit-new-field-value view-mode-field-value-txt">'.$defaultValue['additional_info'].'</div><div class="clearBoth"></div>',
         	'#suffix'   => '</div><div class="clearBoth"></div>',
         );*/
         
         $form['additional_info'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL3068').':',
         	'#prefix'   => '<div class="admin-course1-class-long-description"><div class="addedit-new-field"><div class="addedit-course-field-title">',
            '#markup'   => '</div><div id="additionalinfotp" class="addedit-new-field-value view-mode-field-value-txt">'.descController('ADMIN_CATALOG_ADDINFO',$defaultValue['additional_info']).'</div><div class="clearBoth"></div>',
         	'#suffix'   => '</div></div>',
         );
		 $form['addn_catalog_show'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL576').':',
         	  '#prefix'   => '<div class="two-column-container-view">' .
         	                   '<div class="first-col-container-view">',
            '#markup'   =>     '<div class="first-col-value-view">'.(($defaultValue['addn_catalog_show'] == 1) ? t('Yes') : t('No')).'</div>',
         	'#suffix'   =>     '</div>',
         );
		 $form['addn_notification_show'] = array(
            '#type'     => 'item',
            '#title'    => t('LBL3069').':',
           	'#prefix'   => '<div class="second-col-container-view">',
            '#markup'   => '<div class="second-col-value-view">'.(($defaultValue['addn_notification_show'] == 1) ? t('Yes') : t('No')).'</div>',
           	'#suffix'   => '</div>' .
           	             '</div>' .
           	             '<div class="clearBoth"></div>',
           );
         
         if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/Get Custom Attributes for Program Edit View
                 include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
                 $customAttrValues = getCustomAttributesForView($entityId, 'cre_sys_obt_trp','edit-view');
        
                 $k=1;
                 $reached_2_col=0; 
                 foreach($customAttrValues as $cuskey=>$cusvalue){
                    if($k%2==1){
                        $form['crs_custom_attr_left_'.$k] = array(
                                '#type'     => 'item',
                                '#title'    => t($cuskey).':',
                                '#prefix'   => '<div class="two-column-container-view"><div class="first-col-container-view">',
                                '#markup'   => '<div class="first-col-value-view view-mode-field-value-txt" ><span title="'.sanitize_data($cusvalue).'" class="vtip">'.titleController('ADMIN-NARROW-TPVIEW-CUSTOMATTRIBUTE-LEFT-COL', sanitize_data($cusvalue),20).'</span></div>',
                                '#suffix'   => '</div>',
                        );
                         $reached_2_col=0;
                    }
                    if($k%2==0){
                        $form['crs_custom_attr_right_'.$k] = array(
                                '#type'     => 'item',
                                '#title'    => t($cuskey).':',
                                '#prefix'   => '<div class="second-col-container-view">',
                                '#markup'   => '<div class="second-col-value-view view-mode-field-value-txt"><span title="'.sanitize_data($cusvalue).'" class="vtip">'.titleController('ADMIN-NARROW-TPVIEW-CUSTOMATTRIBUTE-RIGHT-COL', sanitize_data($cusvalue),10).'</span></div>',
                                '#suffix'   => '</div><div class="clearBoth"></div></div>',
                        );
                         $reached_2_col=1;
                    }
                    $k++;
                 }
                 if($reached_2_col==0){
                    $form['crs_custom_attr_finish'.$k-1] = array(
                            '#type'     => 'item',
                            '#markup'   => '<div class="clearBoth"></div></div>',
                        );
                }

         }else{ //To display the custom fields in edit desc screen
         
         $customDetails = getCustomFieldsDetails($entityId, 'cre_sys_obt_trp');

         for ($i = 0; $i < count($customDetails); $i++) {

            $form['custom_'.$i] = array(
            '#type'     => 'item',
    		'#title'    => '<div class="surv-ass-customLbl vtip" title="'.htmlentities(t($customDetails[$i]->label_txt),ENT_QUOTES,'UTF-8').'">'.$customDetails[$i]->label_txt.':</div>',
            '#prefix'   => '<div class="addedit-new-field"><div class="addedit-course-field-title">',
            '#markup'   => '</div><div class="addedit-new-field-value view-mode-field-value-txt">'.$customDetails[$i]->value_txt.'</div><div class="clearBoth"></div>',
            '#suffix'   => '</div>',
            );

         }
        } //#custom_attribute_0078975 - End Check module status 
        
         $form['addedit-left-col-end1'] = array(
                '#type'   => 'markup',
                '#markup' => '</div>',
              );

        /* $form['addedit-left-col-view-extend-func'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="crs-tab-titles-container-view  tp-tab-section"><div class="attachment-tab-icon"></div><div class="tab-title">Attachments</div><div class="tab-seperator"></div><div class="tags-tab-icon"></div><div class="tab-title">Tags</div><div class="tab-seperator"></div><div class="certificate-tab-icon"></div><div class="tab-title">Certificate</div><div class="tab-seperator"></div>
        			  <div class="access-tab-icon"></div>'.
        			  "<div id='".$visibPopupId."' onmouseover =\"$('#root-admin').data('narrowsearch').getBubblePopup(".$qtipOptObj.");\" class=\"tab-title\">Access</div>".
        			  '</div>',
          );
         */
      //return $from;

  } catch (Exception $ex) {
    watchdog_exception('edit_program_view', $ex);
    expertusErrorThrow($ex);
  }

}

/*
 * newAddEditGroupNameFormWithCancelAndSave()
 */
/*function newAddEditGroupNameFormWithCancelAndSave($wrapperId = 'addedit-form-wrapper', $miscAction = array()) {
  $form = array();
  $form['#prefix'] = '<div id="' . $wrapperId . '" class="addedit-form-wrapper addedit-training-program-arrow-icon">';
  $form['#suffix'] = '</div>';
  // Add a class to the form so that we can apply custom style (margin, padding, etc).
  $form['#attributes'] = array('class' => array('addedit-form'));
  $form['#attributes']['autocomplete'] = 'off';
  $form['#tree'] = TRUE; // Show full path of values (hierarchical values)
  $form['addedit-right-col-start'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="addedit-right-col">',
  );
  $form['addedit-right-col-end'] = array(
    '#type'   => 'markup',
    '#markup' => '</div>',
  );
  $form['addedit-left-col-start'] = array(
    '#type'   => 'markup',
    '#markup' => '<div class="addedit-left-col">',
  );

  return $form;
}*/

function tpEditModeRepaintForm($form, &$form_state) {
  try {
      expDebug::dPrint(' tpEditModeRepaintForm() called.');
      expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
      expDebug::dPrint(' $form_state = ' . print_r($form_state['values'], true) , 5);
      expDebug::dPrint(' $form_state[storage] = ' . print_r($form_state['storage'], true) , 5);
      expDebug::dPrint(' $form_state[build_info] = ' . print_r($form_state['build_info'], true) , 5);

      // If a new entity was added, build additional forms
      if (!empty($form_state['storage']['new_entity']) && $form_state['storage']['new_entity'] == TRUE) {
        // Create the additional now editable forms if any present
        $formInfoList = $form_state['storage']['form_info_list'];
        $argsList = $form_state['build_info']['args'];
        array_shift($argsList); // The first arg is 'ajax', which we need to drop from $argsList

        $renderedAddlForms = exp_ctools_modal_multi_ajaxonly_forms_render($formInfoList, $argsList, 'ADD-TO-EDIT');
      }

      $commands = array();
      $commands[] = ajax_command_replace(NULL, drupal_render($form));
      //$commands[] = ajax_command_prepend(NULL, theme('status_messages'));

      if (!empty($renderedAddlForms)) {
      //  $commands[] = ajax_command_after(NULL, $renderedAddlForms);
      }
      $statusMsgHTML = theme('status_messages');
      expDebug::dPrint(' $statusMsgHTML = ' . print_r($statusMsgHTML, true) , 4);
      if (!empty($statusMsgHTML)) {
      	// Show the messages
        $commands[] = ajax_command_html('#show_expertus_message', $statusMsgHTML);
      }

      $commands[] = exp_ctools_modal_adjust();

      if ($form_state['storage']['new_entity'] == TRUE || $form_state['storage']['edited_entity'] == TRUE) {
        $commands[] = ajax_command_refresh_narrow_search_results('onclose');
      }

      if($form_state['triggering_element']['#ajax']['tabaction']=='notification'){
        $commands[] = ajax_command_invoke(NULL, "setNotifyContainerWidth",array());
      }

      expDebug::dPrint(' $commands = ' . print_r($commands, true) , 4);

      return array('#type' => 'ajax', '#commands' => $commands);
  } catch (Exception $ex) {
    watchdog_exception('tpEditModeRepaintForm', $ex);
    expertusErrorThrow($ex);
  }
}
function addEditOverallTPRepaintForm($form, &$form_state) {
  try {
      expDebug::dPrint(' addEditOverallTPRepaintForm() called.');
      expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
      expDebug::dPrint(' $form_state = ' . print_r($form_state['values'], true) , 5);
      expDebug::dPrint(' $form_state[storage] = ' . print_r($form_state['storage'], true) , 5);
      expDebug::dPrint(' $form_state[build_info] = ' . print_r($form_state['build_info'], true) , 5);

      // If a new entity was added, build additional forms
      if (!empty($form_state['storage']['new_entity']) && $form_state['storage']['new_entity'] == TRUE) {
        // Create the additional now editable forms if any present
        $formInfoList = $form_state['storage']['form_info_list'];
        $argsList = $form_state['build_info']['args'];
        array_shift($argsList); // The first arg is 'ajax', which we need to drop from $argsList

        $renderedAddlForms = exp_ctools_modal_multi_ajaxonly_forms_render($formInfoList, $argsList, 'ADD-TO-EDIT',array(),$form_state['build_info']['files']);
      }else{ // Added for this ticket 0047227      
      	$formInfoList = $form_state['storage']['form_info_list'];
      	$argsList = $form_state['build_info']['args'];
      	array_shift($argsList); // The first arg is 'ajax', which we need to drop from $argsList
      	$renderedReloadlForms = exp_ctools_modal_multi_ajaxonly_forms_render($formInfoList, $argsList, 'EDIT-RELOAD',array(),$form_state['build_info']['files']);
      }
      $objectType  = $form_state['values']['object_type'];
      $commands = array();
			if(empty($form_state['storage']['substep']))
			{
			$path = $base_url.'/sites/all/themes/core/expertusoneV2/expertusone-internals/images';
										$add_shw_cat = t("LBL576");
										$add_shw_cat_label = t('MSG818');
										$add_shw_not = t("LBL3069");
										$add_shw_not_label = t('MSG819');
			
			if($form_state['input']['addn_catalog_show'] == 1)
			{
			$form['addn_catalog_show']['#prefix'] = "<div class=addedit-twocol-firstcol><div class=catalog-block><label class=show-label-catalog> $add_shw_cat :</label><img src=$path/help.png class='vtip info-enr-upload test-help-iconcatalog' 
			title='$add_shw_cat_label' onload=vtip() /><div class=checkbox-selected >"; 
			$form['addn_catalog_show']['#suffix'] =  "</div></div>";
			}
            else
	        {
	        $form['addn_catalog_show']['#prefix'] = "<div class=addedit-twocol-firstcol><div class=catalog-block><label class=show-label-catalog> $add_shw_cat :</label><img src=$path/help.png class='vtip info-enr-upload test-help-iconcatalog' 
	        title='$add_shw_cat_label' onload=vtip() /><div class=checkbox-unselected >";        
			$form['addn_catalog_show']['#suffix'] =  "</div></div>";
			}
      	    if($form_state['input']['addn_notification_show'] == 1)
			{
			$form['addn_notification_show']['#prefix'] = "<div class=notifi-block><label class=show-label-notifications> $add_shw_not :</label><img src=$path/help.png class='vtip info-enr-upload test-help-iconcatalog' 
			title='$add_shw_not_label' onload=vtip() /><div class=checkbox-selected >";        
			$form['addn_notification_show']['#suffix'] =  "</div></div></div>";
			}
            else
	        {
	        $form['addn_notification_show']['#prefix'] = "<div class=notifi-block><label class=show-label-notifications> $add_shw_not :</label><img src=$path/help.png class='vtip info-enr-upload test-help-iconcatalog' 
	        title='$add_shw_not_label' onload=vtip() /><div class=checkbox-unselected >";        
			$form['addn_notification_show']['#suffix'] =  "</div></div></div>";
			}
            }
      $commands[] = ajax_command_replace(NULL, drupal_render($form));

      //$commands[] = ajax_command_prepend(NULL, theme('status_messages'));

      //if($form_state['storage']['step']=='details'){
     //if($form_state['storage']['substep'] == 'Attachment') || $form_state['storage']['substep'] == 'tag') ||$form_state['storage']['substep'] == 'prerequisite') {

        if (!empty($renderedAddlForms)) {
          if($form_state['storage']['substep'] == 'details' || empty($form_state['storage']['substep'])){
          $commands[] = ajax_command_after(NULL, $renderedAddlForms);
          }
        }
      //}

      $statusMsgHTML = theme('status_messages');
      expDebug::dPrint(' $statusMsgHTML = ' . print_r($statusMsgHTML, true) , 4);
      if (!empty($statusMsgHTML)) {
      	// Show the messages
        $commands[] = ajax_command_html('#show_expertus_message', $statusMsgHTML);
      }

      $commands[] = exp_ctools_modal_adjust();

      if ($form_state['storage']['new_entity'] == TRUE || $form_state['storage']['edited_entity'] == TRUE) {
      	$refresh_grid = ((isset($form_state['storage']['edited_entity']) && $form_state['storage']['edited_entity']) ? false : true);
        $commands[] = ajax_command_refresh_narrow_search_results('onclose', $refresh_grid);
      }
      expDebug::dPrint(' $commands = ' . print_r($commands, true) , 4);

      // Reload secound forms while saving
      if (!empty($renderedReloadlForms)) {
      	$commands[] = ajax_command_html('#attach_course_dt', $renderedReloadlForms);
      }

      $commands[] = ajax_command_invoke(NULL, "validateDeliveryPart",array($objectType));
      if(module_exists('exp_sp_esignature') && isActiveEsignRegion() && (!$form_state['esign_validation_status'])){
        $esignObj  = '{"popupDiv":"ctools-face-table","esignFor":"AddAdmin","esignButtId":"'.$form_state['triggering_element']['#ajax']['customButtonId'].'"}';
        if($form_state['esign_show_popup']==true)
          $commands[] = ajax_command_invoke(NULL, 'getNewEsignPopup',array($esignObj));
      }

      if($form_state['values']['attr_action'] == 'notifications'){
        $commands[] = ajax_command_invoke(NULL, "setNotifyContainerWidth",array());
      }
		//expDebug::dPrint('module test DDDDDDDDDDD  '. $moduleId);
      $commands[] = ajax_command_invoke(NULL, "attachClose", array($form_state['values']['id'], $objectType,'addEdit'));

      return array('#type' => 'ajax', '#commands' => $commands);
  } catch (Exception $ex) {
    watchdog_exception('addEditOverallTPRepaintForm', $ex);
    expertusErrorThrow($ex);
  }
}
function ProgramAddEditFormWithCancelAndSaveClose(&$form, $wrapperId = 'addedit-form-wrapper', $saveButtonId = 'save-button', $cancelButtonId = 'cancel-button', $programId = '', $subStage = '',$objectString = '' , $objectType = '', $emptyId = '') {
  try {
  	global $theme_key;
      expDebug::dPrint(' addEditFormWithCancelAndSaveClose() called.');
    //print $programId;
      // Remove the temporary storage for API's to exchange information during form creation
      unset($form['addedit_tmp_storage']);

      // Add the Cancel button
      $ajaxCallbackCancel = 'addEditCancelRepaintForm';

      // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
      // each time the form is re-built.
      $cancelAttributes['class'] = array('addedit-edit-' . $cancelButtonId); // This class must be prefixed with 'addedit-edit-' followed by the form field id.
      // For common styling of all addedit cancel buttons
      //$cancelAttributes['class'][] = 'addedit-edit-cancel';

      // Using this class to applying bg color to the save button
      $cancelAttributes['class'][] = 'admin-action-button-middle-bg white-btn-bg-middle';

      // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
      $cancelAttributes['class'][] = 'addedit-form-expertusone-throbber';
      $cancelAttributes['tabindex'][] = '15';
      // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
      $cancelAttributes['data-wrapperid'] = array($wrapperId);


      if(empty($programId)){
        $cancelAttributes['onclick'] = 'Drupal.CTools.Modal.dismiss();return false;';
        $cancelLabel  = t('LBL123'); // Close
      }else{
        $cancelLabel  = t('LBL109'); // Cancel
      }

      // A common class for all addedit form cancel button, for styling to appear as a link.
      $cancelAttributes['class'][] = 'exp-addedit-form-cancel-button';
      $trainingProgrmDetails;
      $tpStatus;
      $ifprogramValid;
      $resultCnt;
      $isMultiAction;
  		if($programId){
	  		if($subStage == 'details' || empty($subStage)) {
			  		if (!empty($programId)) {
		          $trainingProgrmDetails   = getTrainingProgramDetails($programId, array('id','object_type','title','status'));
		          //print_r($trainingProgrmDetails);
		          $tpStatus    =  $trainingProgrmDetails['status'];
		        }
          $ifprogramValid = getIfProgramValid($programId);
          $resultCnt = delete_object_record($programId,'TP');
	    		if($tpStatus != 'lrn_lpn_sts_atv'){
	    			$isMultiAction=1;
	    		}
	    		if($tpStatus == 'lrn_lpn_sts_atv'){
	    		//	$isMultiAction=1;
	    		}
	    		if($ifprogramValid == 0){
	    		//	$isMultiAction=1;
	    		}
	    		if($resultCnt == 0){
	    			$isMultiAction=1;
	    		}
	  		}
      }
      $addclass = ($theme_key=='expertusoneV2')?'':($isMultiAction==1)?'resize-save_btn4':'resize-save_btn';
      $form[$cancelButtonId] = array(
        '#type'   => 'submit',
        '#prefix' => '<div class="addedit-form-cancel-and-save-actions-row enroll-edit-save-cancel-btn">' .
                       '<div class="addedit-form-cancel-container-actions program-addedit-actions '.$addclass.'"><div class="white-btn-bg-left"></div>',
        '#suffix' =>   '<div class="white-btn-bg-right"></div>',
        '#name'   => 'cancelprogram',
        '#value'  => $cancelLabel,
        '#attributes' => $cancelAttributes,
      );

      if (!empty($programId)) { // Cancel button is ajax enabled.
      	$form[$cancelButtonId]['#ajax'] = array(
          'wrapper' => $wrapperId,
          'callback' => $ajaxCallbackCancel,
          'method' => 'replace',
          'effect' => 'none', // 'fade',
          'event'=>'click',
          'keypress' => true,
          'progress' => array(
            'type' => 'throbber',
            'message' => ''
          )
        );
      }

      // Add the Save button
      $ajaxCallbackSave = 'addEditOverallTPRepaintForm';
      //$ajaxCallbackSave = 'addEditRepaintForm';

      // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
      // each time the form is re-built.
      $saveAttributes['class'] = array('addedit-edit-' . $saveButtonId); // This class must be prefixed with 'addedit-edit-' followed by the form field id.

      // For common styling of all addedit save buttons
      //$saveAttributes['class'][] = 'addedit-edit-save';

      // Using this class to applying bg color to the save button
      //$saveAttributes['class'][] = 'admin-save-button-middle-bg';
      //$saveAttributes['class'][] = 'edit-catalog-course-save-publish';
      $saveAttributes['tabindex'][] = '12';


      //Increase the width of the popup while clicking on save button
      $saveAttributes['onclick'][] = 'increasePopWidth();';

      // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
      $saveAttributes['class'][] = 'addedit-form-expertusone-throbber';
      // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
      $saveAttributes['data-wrapperid'] = array($wrapperId);

      $esignHiddenButt = 'esign-'.$wrapperId;

      $eSignatureAvailable = ($subStage == 'Attachment') ? false : true;

      /*if(module_exists('exp_sp_esignature') && isActiveEsignRegion() && $eSignatureAvailable){
      	  $saveAttributes['onclick'][] = 'hideMessageInfo();';
      	  //$saveAttributes['onclick'][] = '$("body").data("learningcore").getEsignPopup({"popupDiv":"ctools-face-table","esignFor":"CatalogClassAdmin"});return false;';
      	  $form[$saveButtonId] = array(
    	    '#type' => 'submit',
      	  	'#name' => 'save',
    	    '#prefix' => '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>',
    	    '#suffix' =>
    	               '<div class="admin-save-button-right-bg"></div></div>' .
    	               '<div class="clearBoth"></div></div>' .
    	             '<div class="clearBoth"></div></div>',
    	    '#value' => t('LBL141'),
    	    '#attributes' => $saveAttributes,
      	  	'#id' =>$saveButtonId,
    	    '#ajax' => array(
      	  	  'customButtonId' => $esignHiddenButt,
    	      'wrapper' => $wrapperId,
    	      'callback' => $ajaxCallbackSave,
    	      'method' => 'replace',
    	      'effect' => 'none', // 'fade',
    	      'event'=>'click',
    	      'keypress' => true,
    	      'progress' => array(
    	        'type' => 'throbber',
    	        'message' => ''
    	      ),
    	    )
    	  );

      }*/

      if($subStage == 'details' || empty($subStage)) {
        //$tpStatus     = '';
        /*if (!empty($programId)) {
          $trainingProgrmDetails   = getTrainingProgramDetails($programId, array('id','title','status'));
          //print_r($trainingProgrmDetails);
          $tpStatus    =  $trainingProgrmDetails['status'];
        }
        if($programId){
          $ifprogramValid = getIfProgramValid($programId);
    	}*/
       $isSaveParent = 0;
       $deleteCheck = adminVisibilityForAddEditDelete($programId,$trainingProgrmDetails['object_type'],'cre_sys_obt_trp','slt_program');
       if(empty($programId) || $tpStatus != 'lrn_lpn_sts_atv'){
          $isSaveParent = 1;
          $saveAttributes['class'][] = 'admin-save-button-middle-bg';
          $saveAttributes['class'][] = (($programId) ? 'admin-save-button-dropdown-middle-bg-wrapper' : '');

          //$saveAttributes['class'][] = 'edit-catalog-course-save-publish';
          $saveAttributes['onclick'] = array();

          //$saveAttributes['onclick'][] = 'hideMessageInfo();';
          $saveAttributes['onclick'][] = 'increasePopWidth();';
         // $saveAttributes['onclick'][] = '$("#'.$customHiddenButtonId.'").click();';
          $form[$saveButtonId] = array(
    	    '#type' => 'submit',
    	    '#prefix' => '<div class="admin-save-pub-unpub-button-container"><div class="admin-save-button-left-bg"></div>',
    	    '#suffix' => (($programId) ? '<span id="pub-unpub-action-btn" onclick="displayPubActionList()" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn">&nbsp;</span>' : '<div class="admin-save-button-right-bg"></div>').'</div>',
    	    '#value' => t('LBL141'), // Save
          	'#name' => 'save',
    	    '#attributes' => $saveAttributes,
          	'#id' =>$saveButtonId,
            '#ajax' => array(
      	      'wrapper' => $wrapperId,
      	      'callback' => $ajaxCallbackSave,
              'customButtonId'=>$esignHiddenButt,
      	      'method' => 'replace',
      	      'effect' => 'none', // 'fade',
      	      'event'=>'click',
      	      'keypress' => true,
      	      'progress' => array(
      	        'type' => 'throbber',
      	        'message' => ''
      	      ),
          	)
    	  );
       }

      	/*if($programId){
          $resultCnt = delete_object_record($programId,'TP');
    	}*/

    	    if($isSaveParent){
    	      $form['addedit-button-group-ul-start'] = array(
    	        '#type' => 'markup',
    	        '#markup' => '<ul class="catalog-pub-add-list">',
    	      ); //  catalog-save-btn
    	      $savePublishPrefix = '<li class="save-pub-unpub-sub-menu">';
    	      $savePublishSuffix = '</li>';
    	    }else{
    	      $savePublishPrefix = '<div class="admin-save-pub-unpub-button-container"><div class="admin-save-button-left-bg"></div>';
    	      $savePublishSuffix = ((($resultCnt==0) && ($tpStatus == 'lrn_lpn_sts_atv')) ? ('<span id="pub-unpub-action-btn" onclick="displayPubActionList()" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn">&nbsp;</span>') : '<div class="admin-save-button-right-bg"></div>' ).'</div>';
    	      $savePublishAttributes['class'][] = ((($resultCnt==0) && ($tpStatus == 'lrn_lpn_sts_atv')) ? 'admin-save-button-dropdown-middle-bg-wrapper' : '' );
    	    }

    	    if($programId && $ifprogramValid[0]->sesavailable != 0){
    		  $saveButtonId = 'catalog-course-save-publish';
    		  $savePublishAttributes['onclick'] = array();
    	     // $savePublishAttributes['onclick'][] = 'Drupal.ajax.prototype.commands.addEditHideMessages();';
    	      $savePublishAttributes['onclick'][] = 'increasePopWidth();';
    	      $savePublishAttributes['class'][] = 'addedit-form-expertusone-throbber';
            $savePublishAttributes['data-wrapperid'] = array($wrapperId);
    	      $savePublishAttributes['tabindex'][] = '13';
    	     // $savePublishAttributes['onclick'][] = '$("#'.$customHiddenButtonId.'").click();';
    	     $buttonLabel = ($tpStatus == 'lrn_lpn_sts_atv') ? t('LBL141') : t('LBL614'); //LBL141 = Save (when active), LBL614=Save and Publish (when inactive)
    	     $savePublishAttributes['class'][] = 'admin-save-button-middle-bg';
    	      $form[$saveButtonId] = array(
    		    '#type' => 'submit',
    		    '#prefix' => $savePublishPrefix,
    		    '#suffix' => $savePublishSuffix,
    		    '#value' => $buttonLabel,
    	      	'#name' => 'saveandpublish',
    		    '#attributes' => $savePublishAttributes,
    	        '#ajax' => array(
    	  	      'wrapper' => $wrapperId,
    	  	      'callback' => $ajaxCallbackSave,
    	          'customButtonId'=>$esignHiddenButt,
    	  	      'method' => 'replace',
    	  	      'effect' => 'none', // 'fade',
    	  	      'event'=>'click',
    	  	      'keypress' => true,
    	  	      'progress' => array(
    	  	        'type' => 'throbber',
    	  	        'message' => ''
    	  	      ),
    	      	)
    		  );
    	}
    	  // resource-add-action-wrapper
      //if($isSaveParent){
      /*
          $form['addedit-button-group-ul-start-ext'] = array(
            '#type' => 'markup',
            //'#markup' => '<span onclick="displayPubActionList()" class="pub-unpub-add-action-wrapper">Exp</span>',
            '#markup' => '<span id="pub-unpub-action-btn" onclick="displayPubActionList()" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn">Exp</span>',
          );
          */
       //}

        // resource-add-action-wrapper

       if(!$isSaveParent){
          $form['addedit-button-group-ul-start'] = array(
            '#type' => 'markup',
            '#markup' => '<ul class="catalog-pub-add-list">',
          );
        }

        // <span onclick="displayPubActionList()" class="resource-add-action-wrapper">

    	  //print $programId.$tpStatus;
    	if(($programId) && $tpStatus == 'lrn_lpn_sts_atv'){
    	  if($resultCnt == 0){
      	    $saveButtonId = 'catalog-course-save-unpublish';
      	    $saveUnPublishAttributes['onclick'] = array();
            //$saveAttributes['onclick'][] = 'hideMessageInfo();';
            $saveUnPublishAttributes['onclick'][] = 'increasePopWidth();';
            $saveUnPublishAttributes['tabindex'][] = '14';
           // $savePublishAttributes['onclick'][] = '$("#'.$customHiddenButtonId.'").click();';
            $form[$saveButtonId] = array(
      	    '#type' => 'submit',
      	    '#prefix' => '<li class="save-pub-unpub-sub-menu">',
      	    '#suffix' => '</li>',
      	    '#value' => t('LBL571'),
            '#name' => 'unpublish',
      	    '#attributes' => $saveUnPublishAttributes,
            '#ajax' => array(
        	      'wrapper' => $wrapperId,
        	      'callback' => $ajaxCallbackSave,
                  'customButtonId'=>$esignHiddenButt,
        	      'method' => 'replace',
        	      'effect' => 'none', // 'fade',
        	      'event'=>'click',
        	      'keypress' => true,
        	      'progress' => array(
        	        'type' => 'throbber',
        	        'message' => ''
        	      ),
            	)
      	   );
    	  }
    	}

      if(!$isSaveParent){
          /*$form['addedit-button-group-ul-start-extend'] = array(
            '#type' => 'markup',
            '#markup' => '<span id="pub-unpub-action-btn" onclick="displayPubActionList()" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn">&nbsp;</span>',
          );*/
        }
        $deleteCheck = adminVisibilityForAddEditDelete($programId,$trainingProgrmDetails['object_type'],'cre_sys_obt_trp','slt_program');
        if(($programId && ($deleteCheck[0]->deletevisible > 0 || !empty($deleteCheck[0]->deletecount) || $GLOBALS["user"]->uid == 1))){
          if($resultCnt == 0){
            $displayTitle = titleController('EXP-SP-ADMIN-PGM-TP-TITLE', $trainingProgrmDetails['title'],34);
      	   $saveButtonId = 'catalog-course-delete';
      	   $deleteAttributes['tabindex'][] = '16';
      	   $deleteAttributes['onclick'] = array();
            $deleteAttributes['onclick'][] = '$("#root-admin").data("narrowsearch").displayDeleteWizard("'.t('MSG357').' '.strtolower(t($trainingProgrmDetails['object_type_name'])).' '.escape_string($trainingProgrmDetails['title']) . '","'.$programId.'","TP"); return false;';
            $deleteAttributes['class'][] = 'admin-delete-button-bg';
             $form[$saveButtonId] = array(
        	    '#type' => 'button',
        	    '#prefix' => '<li class="save-pub-unpub-sub-menu">',
        	    '#suffix' => '</li>',
        	    '#value' => t('LBL286'),
                '#name' => 'delete',
        	    '#attributes' => $deleteAttributes,
        	  );
          }
        }
    	$form['addedit-button-group-ul-end'] = array(
          '#type' => 'markup',
          '#markup' => '</ul><div class="clearBoth"></div></div>' .
    	             '<div class="clearBoth"></div></div>',
        );
      }
      else{
          $saveAttributes['class'][] = 'admin-save-button-middle-bg';
     	  // Using this onclick function to hide message div
          if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
            $saveCallback = $ajaxCallbackSave;
            $customButtonId = $esignHiddenButt;
          }else{
      	    $saveAttributes['onclick'][] = 'hideMessageInfo();';
      	    $saveAttributes['onclick'][] = '$("#'.$esignHiddenButt.'").click(); return false;';
          }

    	  $form[$saveButtonId] = array(
    	    '#type' => 'submit',
    	    '#prefix' => '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>',
    	    '#suffix' =>
    	               '<div class="admin-save-button-right-bg"></div></div>' .
    	               '<div class="clearBoth"></div></div>' .
    	             '<div class="clearBoth"></div></div>',
    	    '#value' => t('LBL141'),
    	    '#attributes' => $saveAttributes,
    	  	'#name' => 'save',
    	  );

        if (module_exists('exp_sp_esignature') && isActiveEsignRegion()) { // When eSign is enabled, the above Save button is also ajax enabled.
        	$form[$saveButtonId]['#ajax'] = array(
            'wrapper' => $wrapperId,
            'callback' => $saveCallback,
            'customButtonId' => $customButtonId,
            'method' => 'replace',
            'effect' => 'none', // 'fade',
            'event'=>'click',
            'keypress' => true,
            'progress' => array(
              'type' => 'throbber',
              'message' => ''
            ),
          );
        }

      }
      unset($saveAttributes['tabindex']);
      $saveAttributes['onclick'] = array();
      $saveAttributes['onclick'][] = 'hideMessageInfo();';
      $form[$esignHiddenButt] = array(
    	      '#type' => 'submit',
    	      '#value' => t('hidden-save'),
    	      '#name'	=> 'hidden-save',
          	  '#prefix' => '<span id = "esign-admin-div" style="display:none;">',
    	      '#suffix' => '</span>',
    	      '#id' => $esignHiddenButt,
      		  '#attributes' => $saveAttributes,
    	      '#ajax' => array(
    		      'wrapper' => $wrapperId,
    		      'callback' => $ajaxCallbackSave,
    		      'method' => 'replace',
    		      'effect' => 'none', // 'fade',
    		      'event'=>'click',
    		      'keypress' => true,
    		      'progress' => array(
    		        'type' => 'throbber',
    		        'message' => ''
    		      ),
    	    	)

    	    	);
    $entityId          	 = $programId;
      if(!empty($emptyId)){
      	$entityId = 0;
      } else {
        $emptyId = 0;
      }
      if($subStage == 'details' || empty($subStage)){
      $tagsentityType    = $objectString;
      $tagsentityType = str_replace(' ','-',$tagsentityType);
      if(empty($programId)){
      	$programId = 0;
      	$tagsentityType = "Training-Plan";
      }

      $tagsentityId      = $programId;//.',"'.$entityType
      $qtipTagsIdInit        	 = $tagsentityId.'_'.$tagsentityType;

		if($theme_key == 'expertusoneV2') {
	      $tagsvisibPopupId  = 'qtip_visible_disp_tags_'.$qtipTagsIdInit;
	      $qtipTagsOptObj    = "{'entityId':".$tagsentityId.",'entityType':'".$tagsentityType."',
													      'url':'administration/catalog-tags/ajax/".$tagsentityId."/".$tagsentityType."/".$emptyId."',
													      'popupDispId':'".$tagsvisibPopupId."','catalogVisibleId':'renderTagsId".$qtipTagsIdInit."',
													      'wid':400,'heg':'170','postype':'middle','poslwid':'','qdis':'ctool',
															  'linkid':'visible-tp-ctool-tags-".$entityId."'}";
		} else {
	      $tagsvisibPopupId  = 'qtip_visible_disp_tags_'.$qtipTagsIdInit;
	      $qtipTagsOptObj    = "{'entityId':".$tagsentityId.",'entityType':'".$tagsentityType."',
												      'url':'administration/catalog-tags/ajax/".$tagsentityId."/".$tagsentityType."/".$emptyId."',
												      'popupDispId':'".$tagsvisibPopupId."','catalogVisibleId':'renderTagsId".$qtipTagsIdInit."',
															'wid':400,'heg':'130','postype':'middle','poslwid':'','qdis':'ctool',
															'linkid':'visible-tp-ctool-tags-".$entityId."'}";
		}
		  $objectType          = ($objectType == '') ? 'cre_sys_obt_trn' : $objectType;
      $entityType        	 = 'cre_sys_obt_trp';
      $qtipIdInit        	 = $entityId.'_'.$entityType;
      $qtipIdInitAccess    = $entityId.'_'.$objectType;
      if($theme_key == 'expertusoneV2') {
      	$qtipOptAccessObj      = "{'entityId':".$entityId.",'entityType':'".$objectType."',
      	'url':'administration/catalogaccess/".$entityId."/".$objectType."/".$emptyId."','popupDispId':'qtip_visible_disp_".$qtipIdInit."','catalogVisibleId':'qtipAccessqtip_visible_disp_".$qtipIdInitAccess."','wid':685,'heg':'270','postype':'middle','poslwid':'200','qdis':'ctool','linkid':'visible-tp-".$entityId."'}";
      } else {
      	$qtipOptAccessObj      = "{'entityId':".$entityId.",'entityType':'".$objectType."','url':'administration/catalogaccess/".$entityId."/".$objectType."/".$emptyId."','popupDispId':'qtip_visible_disp_".$qtipIdInit."','catalogVisibleId':'qtipAccessqtip_visible_disp_".$qtipIdInitAccess."','wid':685,'heg':'270','postype':'middle','poslwid':'200','qdis':'ctool','linkid':'visible-tp-".$entityId."'}";
      }
      $dummy_entity_id       = empty($entityId) ? ereg_replace(" ", "",$emptyId) : $entityId;
      $qtipOptAttachmentObj  = "{'entityId':".$entityId.",'entityType':'".$entityType."',
														      'url':'administration/catalog-attachment/".$dummy_entity_id."/".$entityType."',
														      'popupDispId':'qtip_attachment_disp_".$qtipIdInit."',
														      'catalogVisibleId':'qtipAttachIdqtip_visible_disp_".$qtipIdInit."',
														      'wid':650,'heg':'185','postype':'bottomleft','poslwid':'','qdis':'ctool',
															    'linkid':'visible-tp-ctools-attachment-".$entityId."','scrollid':'scrolldiv'}";

      $visibCertificatePopupId  = 'qtip_visible_certificatedisp_'.$entityId.'_'.$entityType;
      $qtipCertOptObj          = "{'entityId':".$entityId.",'entityType':'".$entityType."',
															      'url':'administration/print-certificate/".$entityId."/".$entityType."/".$emptyId."','popupDispId':'".$visibCertificatePopupId."',
															      'catalogVisibleId':'renderPrintCerId',
															      'wid':376,'heg':'100','postype':'middle','poslwid':'','qdis':'ctool',
															      'linkid':'visible-tp-ctool-certificate-".$entityId."',
															      'scrollid': 'certificate-display-table'}";

      $form['addedit-left-col-extend-func'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="crs-tab-titles-container"><div class="attachment-tab-icon"></div>'.
        				"<div id='qtip_attachment_disp_".$qtipIdInit."'>
      						 <a id='visible-tp-ctools-attachment-".$entityId."' class=\"tab-title\" onclick = \"callVisibility(".$qtipOptAttachmentObj.");\">".t('LBL231').
      						 "</a><span id='visible-popup-".$entityId."' class='qtip-popup-visible' style='display:none; position:absolute; left:0px; top:0px;'></span>".
      					"</div><div class=\"tab-seperator\"></div><div class=\"tags-tab-icon\"></div>".
        				"<div id='".$tagsvisibPopupId."'>".
					      		"<a id='visible-tp-ctool-tags-".$entityId."' class=\"tab-title\" onclick = \"callVisibility(".$qtipTagsOptObj.");\">".t('LBL191')."</a>".
					      		"<span id='visible-popup-".$entityId."' class='qtip-popup-visible' style='display:none; position:absolute; left:0px; top:0px;'></span>".
      					"</div><div class=\"tab-seperator\"></div>".
        				 "<div class='certificate-tab-icon'></div>".
      					 "<div id='".$visibCertificatePopupId."' class = multiple-certificate-display>".
					      		"<a id='visible-tp-ctool-certificate-".$entityId."' class=\"tab-title\" onclick = \"callVisibility(".$qtipCertOptObj.");\">".t('LBL205')."</a>".
					      		"<span id='visible-popup-".$entityId."' class='qtip-popup-visible' style='display:none; position:absolute; left:0px; top:0px;'></span>".
                 '</div><div class="tab-seperator"></div><div class="access-tab-icon"></div>'.
        			    "<div id='qtip_visible_disp_".$qtipIdInit."'><a id='visible-tp-".$entityId."' class=\"tab-title\" onclick = \"callVisibility(".$qtipOptAccessObj.");\">".t('LBL642')."</a><span id='visible-popup-".$entityId."' class='qtip-popup-visible' style='display:none; position:absolute; left:0px; top:0px;'></span></div>".
        			  '</div>',
      );
      }
      $pngPath = base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/spacer.gif';
      $form['addedit-left-col-end'] = array(
        '#type' => 'markup',
        '#markup' => '</div><div class="clearBoth"></div>',
      	'#prefix' => '<div style="display:none;"><img id= "edit-program-img" src="'.$pngPath.'" ></div>',
      );
  } catch (Exception $ex) {
    watchdog_exception('ProgramAddEditFormWithCancelAndSaveClose', $ex);
    expertusErrorThrow($ex);
  }
    }
function exp_sp_administration_program_permission() {
  try {
      return array(
      'Training Program Details Admin Perm' => array(
        'title' => t('Training Program Details Admin Perm')
      )
    );
  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_program_permission', $ex);
    expertusErrorThrow($ex);
  }
}

/*
 * function to load list of files needs to be included for the module.
 * */
function includeFilesForProgram(){
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_tp_register.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_attachment.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_survey.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_assessment.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_tags.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_prerequisite.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_equivalence.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_notification.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_catalog') .'/exp_sp_administration_catalog_roster.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program_roster.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_notification_insert.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_attach_course.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program.inc');
	include_once(drupal_get_path('module', 'exp_sp_learning_plan_detail') .'/exp_sp_learning_plan_detail.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_catalog') .'/exp_sp_administration_catalog_class.inc');
	drupal_add_js('misc/ui/jquery.ui.sortable.min.js', 'file');
	drupal_add_js('misc/ui/jquery.ui.droppable.min.js', 'file');

	$js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program.js', $js_module_optional);
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') . '/exp_sp_administration_learning.js', $js_module_optional);
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program_roster.js', $js_module_optional);
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program.js', $js_module_optional);

	global $theme_key;
	$css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
	if($theme_key == 'expertusoneV2') {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1300));
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program_roster_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_view_v2.css', $css_theme_optional);
	} else {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_program') .'/exp_sp_administration_program_roster.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_view.css', $css_theme_optional);
	}

	// Data Grid
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
	return '';
}
/**
 * @author ayyappans
 * @since 02.09.2014
 * @method to return true if recertification available for a course in training plan already
 * @param array $course
 * @param array $coursesList
 * @return boolean
 */
function checkRecertificationExists($course, $coursesList) {
	foreach ($coursesList as $value) {
		if($course->course_id == $value->course_id && $course->module_id == $value->module_id && $value->is_re_certify == 1) {
			return true;
		}
	}
	return false;
}

function append_module_tabs($form,&$form_state){
	try {
		 	expDebug::dPrint("Prog id ".print_r($form_state,true),3);
		  $min_form_state = array(
		   'ajax' => TRUE,
		   're_render' => FALSE,
		   'no_redirect' => TRUE,
		   'program_id' => $form_state['triggering_element']['#ajax']['program_id'],
		   //'build_info' => array('args' => array('ajax')),
		   'call_type' => 'render_tab_list',
		   'object_type'=>$form_state['triggering_element']['#ajax']['entity_type'],
		  );
		 	$form_state['rebuild'] = TRUE;
		 	$form_state = array_merge($form_state,$min_form_state);
		 	$form_state['rebuild_info']['copy']['#build_id'] = TRUE;
		 	$form_state['rebuild_info']['copy']['#action'] = TRUE;
		 	
		 	
		  $formId = 'exp_sp_administration_program_attaching_courses_form';
		  $builtForm = drupal_rebuild_form($formId, $form_state, $form);
		
		  $form = array_merge($form,$builtForm);
		  form_set_cache($form['#build_id'], $form, $form_state);
		
		  $commands = array();
		  $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));
		
		  $renderedTabContentHTML = $commands[0]['data'];
		  
		  $dom = new DOMDocument();
			$dom->loadHTML('<?xml encoding="utf-8" ?>' . $renderedTabContentHTML);	
			$node = $dom->getElementById('exp_sp_administration_program_attaching_courses');
			$tabContant ='';
			if($node)
				$tabContant = '<div id="dummy-tab-content">'.getInnerHtml($node).'</div>';;
			
			$node->parentNode->removeChild($node);
			$xpath = new DOMXPath($dom);
			$Node = $xpath->query('//div[@id="modules-classes-all"]')->item(0);
			$courseContent = array();
			if($Node)
				$courseContent = '<div id="dummy-course-content">'.getInnerHtml($Node).'</div>';
				
			$commands = array();
		  $commands[] = ajax_command_after('#exp_sp_administration_program_attaching_courses #program_attach_tabs ul li:eq(0)', mb_convert_encoding($tabContant, "HTML-ENTITIES", "UTF-8"));
		  $commands[] = ajax_command_after('#page-container-tabs-prg #exp_sp_administration_program_attaching_courses', mb_convert_encoding($courseContent, "HTML-ENTITIES", "UTF-8"));
		  $settings = get_drupal_ajax_settings($builtForm);
		  $commands[] = ajax_command_invoke(NULL, "postPagination", array($settings,'tab_paginate'));
			expDebug::dPrint("Append module tabs callback final result - ".print_r($commands,true),5);
		  return array(
		    '#type' => 'ajax',
		    '#commands' => $commands
		  );
			
	} catch (Exception $ex) {
	  	watchdog_exception('attachCourseCallBack', $ex);
	  	expertusErrorThrow($ex);
	}
}

function getInnerHtml(DOMNode $elem , $return_array = FALSE){
  $html = $return_array === TRUE ? array() : '';
	$children = $elem->childNodes;
	foreach ($children as $child){
		if($return_array === TRUE){
			$html[] = $elem->ownerDocument->saveHTML( $child );
		}else{
	    $html .= $elem->ownerDocument->saveHTML( $child );
		}
	}
	return $html;
 }
 
 function exp_sp_program_render_tabs_forms(&$form, &$form_state,$program_id, $courseName='', $searchtype ='', $moduleId='', &$modulelist=array(), &$module_count=0){
	try {
		global $theme_key;
    include_once('exp_sp_administration_program.inc');
    $objectType   = getObjectypeFromProgramID($program_id);
    //$qtipaddmoduleobj  = "{'entityId':".$program_id.",'entityType':'addModule','url':'administration/learning/program/add-module/".$program_id."','popupDispId':'qtip_addmodule_div','catalogVisibleId':'qtipAttachIdqtip_add_module','wid':200,'heg':'200','postype':'bottomright','poslwid':'','qdis':'','linkid':'add-module-tp','scrollid':'module-topic'}";

    $maxList = 4;
    $module_count = getModuleIdFromObjectId($program_id,'','',-1,'','count');
    $tabtype = isset($_POST['module_sel']) ? 'addtab' : (isset($_POST['tab_count']) ? 'paginate' : '');
    expDebug::dPrint("Selected tab action type -- ".$tabtype,4);
    $totalList = (isset($_POST['tab_count']) ? $_POST['tab_count'] : 0);
    expDebug::dPrint("Total tab counts - ".$totalList,4);
    $start = $module_count > $totalList ? ($module_count-$totalList)-$maxList : 0;
    $start = $start < 0 ? 0 : $start;
    $row =  ($module_count-$totalList) >= $maxList ? $maxList : ($module_count-$totalList);
    $row = $row < 0 ? 4 : $row;
    //expDebug::dPrint("module list count ".,5);
    if(!empty($moduleId) && isset($_POST['module_sel']))
     	$module_list = getModuleIdFromObjectId($program_id,'',$moduleId);
    else
    	$module_list = getModuleIdFromObjectId($program_id,'','',$start,$row);
    expDebug::dPrint("module list of an array ".print_r($module_list,true),5);
      
    $i = 1;
    $searchval ='';
    $prgDetails = getTrainingProgramDetails($program_id, array('expires_in_value','expires_in_unit'));
    // $units = ($prgDetails['expires_in_unit'] == 'days') ? ucfirst(t('LBL605')) : ($prgDetails['expires_in_unit'] == 'months') ? t('LBL911') : ucfirst(t('LBL915'));
    if(count($prgDetails) > 0 ){
     	if($prgDetails['expires_in_unit'] == 'days' ){
     		$units = ucfirst(t('LBL605'));
	    }elseif($prgDetails['expires_in_unit'] == 'months'){
	     	$units = t('LBL911');
	    }else{
	     	$units = ucfirst(t('LBL915'));
	    }  
    }        
      
    $tmod = $totalList;
	 	$smod = 0;
		$emod = ($maxList-1);
		//$moduleId = !empty($moduleId) ? $moduleId : (isset($_POST['module_sel']) ? $module_list[$tmod]->module_id : '');
		$moduleId = !empty($moduleId) ? $moduleId : $module_list[$row-1]->module_id ;
		if(!empty($moduleId) && $tmod > ($maxList-1) && $module_count > 1){
	    $srcmod = '';
	    foreach($module_list as $k=>$v){
	        if($v->module_id == $moduleId){
	            $srcmod = $k;
	            break;
	        }
	    }
			if($srcmod == $tmod){ //last moduel
	       $smod = $tmod-($maxList-1);
	       $emod = $tmod;
	    }elseif($srcmod >= ($tmod-($maxList-1))){ 
	     $smod = $tmod-($maxList-1);
	     $emod = $tmod;
	    }else{
	      $smod = $srcmod;
	      $emod = $srcmod+($maxList-1);
	    }
		}      
		expDebug::dPrint("Module list ".print_r($module_list,true),3);
		expDebug::dPrint("Selected module id ".$moduleId." Selected Moduel index ".$srcmod." Start Module index ". $smod . " End Module index ".$emod,3);
		if($totalList == 0 && $tabtype == '' ){
			$form['mod-tab-main-container-start'] = array(
				'#type' => 'markup',
	    	'#prefix' => '<div id="program_attach_tabs">',
			);
			$form['mod-tab-main-ul-start'] = array(
				'#type' => 'markup',
	    	'#prefix' => '<ul class = "admin-module-navigation">',
			);
		}
		if($module_count>$maxList && $totalList<=$maxList && ($tabtype == '' || $tabtype == 'addtab')){
			$c = 'first-arrow';
			if($start==0){
				$c .= ' first-reached';
			}
			//$form .= '<li class="'.$c.'"> <a id="tab-left-arrow" onclick ="scorllModTabPrev();" class="page-menu-tab-navigator page-menu-tab-navigator-prev"> << </a> </li>';
			$form['mod-tab-left-arrow'] = array(
					'#type' => 'markup',
		    	'#prefix' => '<li class="'.$c.'"> <a onclick ="scorllModTabPrev();" class="page-menu-tab-navigator page-menu-tab-navigator-prev"> &lt;&lt; </a> ',
			);
			$tabShowMore = array();
	      //$tabShowMore['class'][] = 'page-menu-tab-navigator';
	      //$tabShowMore['class'][] = 'page-menu-tab-navigator-prev';
	      //$tabShowMore['onclick'][] = 'scorllModTabPrev()';
	    $tabShowMore['data-wrapperid'] = 'attach_course_dt';
			$form['mod-tab-show-more-tab'] = array(
		      				'#type' => 'submit',
		      				'#id' => 'tab-left-arrow',
		      				'#prefix' => '<div style="height:1px; width:1px; overflow:hidden;">',
		      				'#suffix' => '</div></li>',
		      				//'#value' => '',
		      				'#name' => 'tab-left-arrow',
		      				'#attributes' => $tabShowMore,
		      				'#ajax' => array(
		      						'wrapper' => 'attach_course_dt',
		      						'callback' => 'append_module_tabs',
		      						'method' => 'replace',
		      						'effect' => 'none',
		      						'event'=> 'click',
		      						//'question_pgn_page' => $pg_page,
		      						'program_id' =>$program_id,
		      						//'module_id' =>$curr_module,
		      						'entity_type' =>'cre_sys_obt_crt',
		      						'keypress' => true,
		      						'progress' => array(
		      								'type' => 'throbber',
		      								'message' => ''
		      						),
		      				)
		      		);
	   }
	foreach($module_list as $k=>$val){
	     	$i = $val->sequence;
	     	$modulelist[] = $val;
	      	//$class = ($i>$maxList) ? "hidden-main-tab" : "visible-main-tab";
	     	$class = ($k>=$smod && $k<=$emod) ? "tp-module-tab visible-main-tab" : "tp-module-tab hidden-main-tab"; 
	     	$href = "#module-program-".$val->module_id;
	     	//0073705:single and double quotes
	     	$module_title = str_replace('"','\\"', $val->module_title);
	     	$module_title = str_replace("'","\\'",$module_title);
	     	$data = 'data={"entityId":"'.$program_id.'","entityType":"module","fullGroupName":"'.$module_title.'","courseId":"'.$val->module_id.'","recertifyFlag":"0"}';
	   		//$data = 'data={"entityId":"'.$program_id.'","entityType":"module","fullGroupName":"'.addslashes($val->module_title).'","courseId":"'.$val->module_id.'","recertifyFlag":"0"}';
				$data = str_replace('"',"&quot;", $data);
				if($i == 1 && $start==0)
					$delete_cls = "display:none";
				else
					$delete_cls = "display:block";
				if($i== 1 && $start==0){
					$inline_txt = ($objectType == "cre_sys_obt_crt") ? t('To Acquire Certificate') : '';
				}else{
					/*$inc = ($i-1)*(($prgDetails['expires_in_value'])+1);
				 	$inline_txt = empty($prgDetails['expires_in_value']) ? '' : $inc.'-'.( $inc + $prgDetails['expires_in_value']).' '.$units;*/
				 	$inc = ($val->sequence -1) + (($val->sequence -1) * $prgDetails['expires_in_value']);
				 	$inline_txt = empty($prgDetails['expires_in_value']) ? '' : $inc.'-'.( $inc + $prgDetails['expires_in_value']).' '.$units;
				}
				$total_enroll = getEnrollmentCnt($program_id,$val->module_id);
				if($total_enroll > 0 && $i != 1){
					//$form .= '<li id = "module-list-'.$val->module_id.'" class = "'.$class.'"><span id ="delete-module" class ="delete-module-cls-disable" ></span><div class="attachedcourse-name-container vtip" id = "attachedcourse-name-div-'.$val->module_id.'-0" title = "'.filterSpecialCharacters($val->module_title).'"><a href="'.$href.'" onclick = "moduleTabclick('.$val->module_id.');" ondblclick ="$(\'#root-admin\').data(\'narrowsearch\').getInlineEditAttachedCourse(\''.$data.'\',this);">'.titleController('ADMIN-PGM-MODULE', $val->module_title,15).'</a><span id ="expires_duration">'.$inline_txt.'</span></div></li>';
					$val->module_title = str_replace('"',"&quot;",$val->module_title);
					$form['mod-tab-list-'.$val->module_id] = array(
						'#type' => 'markup',
			    	'#prefix' => '<li id = "module-list-'.$val->module_id.'" class = "'.$class.'"><span id ="delete-module'.$val->module_id.'" class ="delete-module-cls-disable" ></span><div class="attachedcourse-name-container vtip" id = "attachedcourse-name-div-'.$val->module_id.'-0" title = "'.filterSpecialCharacters($val->module_title).'"><a href="'.$href.'" ondblclick ="moduleTabDblClick('.$data.',this);" onclick = "moduleTabclick('.$val->module_id.');">'.titleController('ADMIN-PGM-MODULE', $val->module_title,15).'</a><span id ="expires_duration">'.$inline_txt.'</span></div></li>',
					);
				}else{
		      //$form .= '<li id = "module-list-'.$val->module_id.'" class = "'.$class.'"><span id ="delete-module" class ="delete-module-cls" style ="'.$delete_cls.'" onclick = "confirmationForMdlDel('.$program_id.','.$val->module_id.',\''.addslashes($val->module_title).'\',\''.$objectType.'\');" ></span><div class="attachedcourse-name-container vtip" id = "attachedcourse-name-div-'.$val->module_id.'-0" title = "'.filterSpecialCharacters($val->module_title).'" ><a href="'.$href.'" onclick = "moduleTabclick('.$val->module_id.');" ondblclick ="$(\'#root-admin\').data(\'narrowsearch\').getInlineEditAttachedCourse(\''.$data.'\',this);">'.titleController('ADMIN-PGM-MODULE', $val->module_title,15).'</a><span id ="expires_duration">'.$inline_txt.'</span></div></li>';
					$val->module_title = str_replace('"',"&quot;",$val->module_title);
					$form['mod-tab-list-'.$val->module_id] = array(
						'#type' => 'markup',
			    	'#prefix' => '<li id = "module-list-'.$val->module_id.'" class = "'.$class.'"><span id ="delete-module'.$val->module_id.'" class ="delete-module-cls" style ="'.$delete_cls.'" onclick = "confirmationForMdlDel('.$program_id.','.$val->module_id.',\''.addslashes($val->module_title).'\',\''.$objectType.'\');" ></span><div class="attachedcourse-name-container vtip" id = "attachedcourse-name-div-'.$val->module_id.'-0" title = "'.$val->module_title.'" ><a href="'.$href.'" ondblclick ="moduleTabDblClick('.$data.',this);" onclick = "moduleTabclick('.$val->module_id.');">'.titleController('ADMIN-PGM-MODULE', $val->module_title,15).'</a><span id ="expires_duration">'.$inline_txt.'</span></div></li>',
					);
				}
      }

      expDebug::dPrint(" Mod cnt - ".$module_count." - max list - ".$maxList." - Tatal tabs - ".$totalList." tab type ".$tabtype,3);
		 if($module_count>$maxList && $totalList<=$maxList && ($tabtype == '' || $tabtype == 'addtab')){
			 	expDebug::dPrint("Inside pagination",3);
			 	$lrc = "last-arrow";
			 	$sty = 'opacity:1';
			 	if($totalList == 0){
			 		$lrc .= " ui-state-disabled";
			 		$sty = 'opacity:0.35';
			 	}
			  //$form .= '<li class="'.$lrc.'" style="'.$sty.'"> <a  id="tab-right-arrow" onclick="scorllModTabNext();" class="clspatharraowenabled page-menu-tab-navigator page-menu-tab-navigator-next"> >> </a> </li>';
				$form['mod-tab-right-arrow'] = array(
						'#type' => 'markup',
			    	'#prefix' => '<li class="'.$lrc.'" style="'.$sty.'"> <a  id="tab-right-arrow" onclick="scorllModTabNext();" class="clspatharraowenabled page-menu-tab-navigator page-menu-tab-navigator-next"> >> </a> </li>',
				);
		 } 
		 $lastModId = getModuleIdFromObjectId($program_id,$module_count);
		 expDebug::dPrint("end of the functions -->> ".print_r($lastModId,true) ,5 );
		 $crs_cnt = getGrpCourseCnt($program_id,$lastModId[0]->module_id);
		 expDebug::dPrint("course count for last module -->> ".$crs_cnt ,5 );
		 if($objectType == "cre_sys_obt_crt" && $prgDetails['expires_in_value'] > 0 && $totalList == 0 && $tabtype==''){
				$style = 'display:none';
				if($crs_cnt >0 )
					$style = 'display:block';
				$url = "administration/learning/program/add-module/".$program_id;
				$form['mod-tab-add-module'] = array(
							'#type' => 'markup',
				    	'#prefix' => '<li id = "add-module-list"  style ="'.$style.'">
								       <div id="qtip_addmodule_div">
								       		<span class="fa-stack" onclick = "loadCustomPopupLeft('.$program_id.',\''.$url.'\');">
							            <i class="fa fa-circle-thin fa-stack-2x"></i>
							            <i class="fa fa-plus fa-stack-1x"></i>
								        	<a id="add-module-tp" class="tab-title" >
								        </a>
								        </span>
								        
								        <ul class="attach-module-link-dummy">
								       		<li class="first-dummy">
								        <span id="add_new_module_popup" class="qtip-popup-visible" style="display:none;">	</span>
							           </div>
							           </li>
							          </ul>
								      </li>',
				);
		  }
     	if($totalList == 0 &&  $tabtype == ''){
      	$form['mod-tab-main-ul-end'] = array(
					'#type' => 'markup',
		    	'#prefix' => '</ul>',
				);
      	$form['mod-tab-main-container-end'] = array(
					'#type' => 'markup',
		    	'#prefix' => '</div>',
				);
     	}else{
     		return $form;
     	}
		  $searchtype = !empty($searchtype) ? $searchtype : 'crstit';
		  if(!empty($searchtype)){
		  	if($searchtype == 'crstit') 
		  		$searchval = t('LBL083');
		  	else if($searchtype == 'grpnametype')
		  		$searchval = t('Group');
		  	else
		  		$searchval = t('LBL096');
		  }else{
		  	$searchval = t('LBL083');
		  }

      //Drop down for search autocomplete
      $paintMultiAction .= "<span id='search-dropdwn-list-course' style='display:none;'>";
      $paintMultiAction .= "<input type='hidden' id='search_all_course_type-hidden' value='".$searchtype."' />";
      $paintMultiAction .= "<input type='hidden' id='group_typehidden' value='' />";
      $paintMultiAction .= "<input type='hidden' id='tpattchedcoursename-autocomplete_hidden' value='".t('LBL088').' '.t('LBL083')."' />";
      $paintMultiAction .= "<span id='select-list-course-dropdown' class='select-list-dropdown-course'>".$searchval."</span>";
      $paintMultiAction .= "<a id='admin-dropdown-arrow' class='select-list-course-dropdown-link' onclick='$(\"#root-admin\").data(\"narrowsearch\").showExpAdminDropdownMenu(\"select-list-course-dropdown-list\");'> </a>";
      $paintMultiAction .= "<ul id='select-list-course-dropdown-list'>";
      $paintMultiAction .= "<li class='select-list-filter' onclick=\"moreCourseSearchTypeText('".t('LBL083')."','crstit');\">".t('LBL083')."</li>";
      $paintMultiAction .= "<li class='select-list-filter' onclick=\"moreCourseSearchTypeText('".t('Group')."','grpnametype');\">".t('Group')."</li>";
      $paintMultiAction .= "<li class='select-list-filter' onclick=\"moreCourseSearchTypeText('".t('LBL096')."','crscode');\">".t('LBL096')."</li>";
      $paintMultiAction .= "</ul>";
      $paintMultiAction .= "</span>";

      $tabName = "tp-admin-crs-search";
      $textSearchListHtml = "<div class='text-search-filter-container'>
	    			<div id='tp-text-search-filter'  onclick='attachToggle(\"text-filter-box-class\");'><i class='fa fa-search' id='advanced_serach' aria-hidden='true'></i></div>";
      	//tp-list-search-container
      $textSearchListHtml .= "<div id='tp-admin-text-filter-box' class='text-filter-box-class' style='display:none;'><div class='text-based-search'>";
		  //$acMenuPath = $value->acurl;
			//$textSearchListHtml .= "<div id='tp-admin-crs-search' class='textsearch-labelclass1'>";
			//$textSearchListHtml .= "</div>";
			//$args = explode(',',$value->args);
			//	$args = 't("'.implode('")." ".t("',$args).'")';
			$args = empty($courseName) ? t('LBL088').' '.t('LBL083') : $courseName;
			//expDebug::dPrint('$acMenuPath$acMenuPath'.print_r($acMenuPath,true),5);	
			$attrOnblur = 'onblurInputSearch(this);';
			$attrOnfocus ='onfocusInputSearch(this);';
			$textSearchListHtml .= $paintMultiAction;
		
			$textSearchListHtml .="<div class='search-container-full-bg'>
				<div class='filter-search-start-date-left-bg'></div>
		    <div class='".$tabName."-box-container'>
				    <input value='$args' tabindex='$i' name='searchword' onblur='$attrOnblur'  onfocus='$attrOnfocus'
				    class='ac_input searchtext filter-search-start-date-middle-bg vtip' size='25' maxlength='70' id='".$tabName."-textsearch'
				alt='search...' autocomplete='off' ondrop='return false;' type='text'>
				</div>
				</div>
						<a title='Search' class='admin-attachedcourse-search-go' onclick='searchCourseTP(".$program_id.");'></a>
						<div class='filter-search-start-date-right-bg'></div>";
			$textSearchListHtml .= '</div></div></div>';
		
      //$textSearchListHtml .= '</div>';
			//$form .= $textSearchListHtml;
			$form['mod-tab-main-search-container'] = array(
					'#type' => 'markup',
		    	'#prefix' => $textSearchListHtml,
			);
     
	  	return  $form;
		} catch (Exception $ex) {
	    watchdog_exception('exp_sp_program_render_tabs_forms', $ex);
	    expertusErrorThrow($ex);
	  }
}

function getAddGroupDisplay($program_id,$module_id,$crsform_build_id){
 try {
  expDebug::dPrint("program id -->>> ".$program_id . " Module Id --->> ".$module_id,4);
  $form_state = array(
   'no_redirect'  => TRUE,
   'build_info'   => array('args' => array('ajax')),
   'program_id'    => $program_id,
   'module_id'  => $module_id,
   'crsform_build_id' => $crsform_build_id,
  );      
  
  $formId                 = 'add_group_topic_html';
  $builtForm              = drupal_build_form($formId, $form_state);
  $renderedTabContentHTML = drupal_render($builtForm);   
  $drupalSettings         = getDrupalSettings();

  $response       = array(
    'drupal_settings'     => $drupalSettings,
    'render_content_main' => $renderedTabContentHTML,
  ); 
 
  echo drupal_json_output($response);
  exit;  
  } catch (Exception $ex) {
  	watchdog_exception('getAddGroupDisplay', $ex);
  	expertusErrorThrow($ex);
  }
}

function add_group_topic_html($form, &$form_state) {
 try{
	expDebug::dPrint("Form state value >> ". print_r($form_state,true),5);
	expDebug::dPrint("Form value >> ". print_r($form,true),5);
	 expDebug::dPrint("program id add_group_topic_html -->>> ".$program_id . " Module Id --->> ".$module_id,4);
	  $formName = "add-group";
	  $entityId = $form_state["program_id"];
      $modId = $form_state["module_id"];     		
      
	  if(empty($form)){
		    $form = array(
		      '#type' => 'markup',
		   		// '#prefix' => (( stripos($_SERVER['HTTP_USER_AGENT'], 'Chrome')  || stripos($_SERVER['HTTP_USER_AGENT'], 'Firefox'))? '</form>' : '' ),
		      '#prefix' =>  '</form>',
		    );
	   	}	
	  $form[$formName]['add_group_topic_details'] = array(
	    '#type' => 'markup',
	    '#markup' => '<div id="group-topic"></div>',
	  );
	
	  $form[$formName]['add_group_topic_start'] = array(
	    '#type' => 'markup',
	    '#markup' => '<div id="admin-group-add-topic-container" class="admin-group-add-topic-container">',
	  );
	
	 // $saveAttributes['onblur'][] = 'courseGroupSave('.$form_state["program_id"].');';
	  $form[$formName]['group_topic_title'] = array(
	    '#name' => 'group_topic_title',
		'#id' => 'group_topic_title',
	    '#type' => 'textfield',
	    '#prefix' => '<div class="admin-group-add-topic-list"> <label class="addedit-new-field-title">'.t('LBL379').'</label>',
	    '#suffix' => '<div class="clearBoth"></div></div>',
	  	'#attributes' => $saveAttributes,
	  	'#size' => 20,
	    '#maxlength' => 120,
	    '#default_value' => '',
	  );

      $setAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg add-group-btn';
      $setAttributes['data-wrapperid'] = 'attach_course_dt';
      $form[$formName]['group_done'] = array(
          '#type' => 'submit',
          '#prefix' => '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>',
          '#suffix' => '<div class="admin-save-button-right-bg"></div></div></div>',
		  '#id' => 'group-save-done',
          '#title' => t('LBL569'), //Attach Course
          '#value' => t('LBL569'), //Attach
          '#name' => '',
          '#submit' => array('addGrptoProgram'),
          '#attributes' => $setAttributes,
          '#ajax' => array(
        	    'wrapper' => 'attach_course_dt',
        	    'callback' => 'groupSaveCallback',
                'program_id' =>$entityId,
            	'module_id' => $modId,
      				'crsform_build_id'=>$form_state['crsform_build_id'],
                  // 'entity_type' =>$entity_type,
                'method' => 'replace',
                'effect' => 'none', // 'fade',
                'event'=>'click',
                'keypress' => true,
                'progress' => array(
                	'type' => 'throbber',
                	'message' => ''
                 ),
               ),
            );
        
  expDebug::DPrint("final form result ". print_r($form,true),5);
   return $form;
   }catch (Exception $ex) {
   	watchdog_exception('add_group_topic_html', $ex);
   	expertusErrorThrow($ex);
   }
}
function addGrptoProgram($form, &$form_state) {
	try {
		$program_id = $form_state['program_id'];
		$module_id = $form_state['module_id'];
		$group_name = $form ['add-group']['group_topic_title']['#value'];
		include_once('exp_sp_administration_program.inc');
		groupEditSaveTP($program_id,$module_id,$group_name);
	} catch (Exception $ex) {
		watchdog_exception('addcrs_addedit_form_html_validate', $ex);
		expertusErrorThrow($ex);
	}
}
function add_group_topic_html_validate($form, &$form_state) {
	try {
		include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_attach_course.inc');
		$program_id = $form_state['program_id'];
		$module_id = $form_state['module_id'];
		$group_name = trim($form ['add-group']['group_topic_title']['#value']);
		if(empty($group_name)){
			form_set_error('empty_check',t('ERR103'));
			$form_state['esign_show_popup']= false;
		}
		$exists = checkGrpNameExistsForModule($module_id,$program_id,$group_name);
		expDebug::dPrint("exists triggering element >> ". $exists,5);
		if(!empty($exists)){
			form_set_error('exist_check',t('LBL949'));
			$form_state['esign_show_popup']= false;
		}
		
	} catch (Exception $ex) {
		watchdog_exception('addcrs_addedit_form_html_validate', $ex);
		expertusErrorThrow($ex);
	}
}

function groupSaveCallback($form, &$form_state){
 	try {
  	expDebug::dPrint("group add form state result - ".print_r($form_state,true),5);
	  $programId = $form_state['program_id'];
	  $entityType = $form_state['entity_type'];
	  $moduleId = $form_state['module_id'];
	  $crsform_build_id = $form_state['triggering_element']['#ajax']['crsform_build_id'];
	  $prgDetails = getProgramObjDetails($programId);
	  $entity_type = $prgDetails[0]->object_type;
	  $min_form_state = array(
	   'ajax' => TRUE,
	   're_render' => TRUE,
	   'no_redirect' => TRUE,
	   'program_id' => $programId,
	  	'module_id' => $moduleId,
	   'build_info' => array('args' => array('ajax'),
	  											 'files' => array('menu'=>'sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_learning/exp_sp_administration_program/exp_sp_administration_program.inc')
	  											),
	   'object_type' => $entity_type,
	   'call_type' => 'render_course_list',
	  );
		$min_form_state['values']['mapped_module_id'] = $moduleId;
	
	  $statusMsgHTML = theme('status_messages');
	  if (!empty($statusMsgHTML)) {
	  	$commands[] = ajax_command_html('#bubble-face-table #show_expertus_message', $statusMsgHTML);
	  }
	  else{

	  	$form_state = array();
  		$_POST['form_build_id'] = $crsform_build_id;
  		$min_form_state['triggering_element'] = $form_state['triggering_element'];
  		$min_form_state['triggering_element']['#name'] = "add_group";

  		list($form, $form_state) = ajax_get_form();
  		
  		$form_state = array_merge($form_state,$min_form_state);
  		$form_state['input']['form_build_id'] = $crsform_build_id;
		 	$form_state['rebuild_info']['copy']['#build_id'] = TRUE;
	 		$form_state['rebuild_info']['copy']['#action'] = TRUE;
	 		$form_state['rebuild'] = true;
	 		$form_state['storage']['page'] = '1';
	 		$formId = 'exp_sp_administration_program_attaching_courses_form';
	 		$builtForm = drupal_rebuild_form($formId, $form_state, $form);
			
			$form = array_merge($form,$builtForm);
			form_set_cache($form['#build_id'], $form, $form_state);
			
      $commands = array();
      $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));

      $dom = new DOMDocument();
			$dom->loadHTML('<?xml encoding="utf-8" ?>' . $commands[0]['data']);
			$node = $dom->getElementById('module-program-'.$moduleId);
			$tabContant ='';
			if($node)
				$tabContant = getInnerHtml($node);
			$commands = array();
			$data = '<div id = "module-program-'.$moduleId.'">' . $tabContant . '</div>';
			$commands[] = ajax_command_replace('#module-program-'.$moduleId, mb_convert_encoding($data, "HTML-ENTITIES", "UTF-8"));
		  $commands[] = ajax_command_invoke(NULL, "attachClose", array($programId.'-'.$moduleId, $entity_type));
		  $commands[] = ajax_command_refresh_narrow_search_results('onclose');
			expDebug::dPrint("Group save callback final result - ".print_r($commands,true),5);
	  }
	  return array(
	        '#type' => 'ajax',
	        '#commands' => $commands
	  );
  	} catch (Exception $ex) {
  		watchdog_exception('attachCourseCallBack', $ex);
  		expertusErrorThrow($ex);
  	}
}

function getAddModuleDisplay($program_id,$redderedTabs,$crsform_build_id){
 try {
  expDebug::dPrint("program id -->>> ".$program_id,4);
  $form_state = array(
   'no_redirect'  => TRUE,
   'build_info'   => array('args' => array('ajax')),
   'program_id'    => $program_id,
   //'module_id'  => $module_id
   'crsform_build_id' => $crsform_build_id,
   'tab_rendered' => $redderedTabs
  );      
  
  $formId                 = 'add_module_topic_html';
  $builtForm              = drupal_build_form($formId, $form_state);
  $renderedTabContentHTML = drupal_render($builtForm);   
  $drupalSettings         = getDrupalSettings();

  $response       = array(
    'drupal_settings'     => $drupalSettings,
    'render_content_main' => $renderedTabContentHTML,
  ); 
 
  echo drupal_json_output($response);
  exit;  
  } catch (Exception $ex) {
  	watchdog_exception('getAddModuleDisplay', $ex);
  	expertusErrorThrow($ex);
  }
}

function add_module_topic_html($form, &$form_state) {
 try{
	expDebug::dPrint("Form state value >> ". print_r($form_state,true),5);
	expDebug::dPrint("Form value >> ". print_r($form,true),5);
	$formName = "add-module-parent";
	$program_id = $form_state["program_id"];
	$wrapperId = 'tp-module-wrapper-'.$program_id;
	
	
  if(empty($form)){
	    $form = array(
	      '#type' => 'markup',
	   		// '#prefix' => (( stripos($_SERVER['HTTP_USER_AGENT'], 'Chrome')  || stripos($_SERVER['HTTP_USER_AGENT'], 'Firefox'))? '</form>' : '' ),
	      '#prefix' =>  '</form>',
	    );
   	}
   	$module_list = getModuleIdFromObjectId($program_id); 
   	$mod_cls = count($module_list) > 3 ? "max-heg" : "min-heg";
  $form[$formName]['add_module_topic_details_start'] = array(
    '#type' => 'markup',
    	'#markup' => '<div id="module-topic-'.$mod_cls.'" class="module-scroll-pane">',
  );
  	addHiddenFieldToAddEditForm($form, 'module_sel', '');
  	$form[$formName]['module_td_start'] = array(
	     		'#type' => 'markup',
	     		'#prefix' =>'<table width="100%" cellpadding="4" cellspacing="0" border="0" id="add-module-table"><tr id = "add_module_new"  onclick= "updInput(\'new\');">',
	     		'#suffix' => '<td class = "module_select_cls">'.t("LBL817").' '.t("LBL754").' '.t("LBL3060").'</td></tr>',
	     );
	   
	 if(count($module_list)>0){
	 		$markup .= '<tr id="dis_line"><td class = "module_select_cls clsordivder"><span class="add-modu-tbl-divder"></span><span class="add-modu-tbl-or">[or]</span><span class="add-modu-tbl-divder"></span></td></tr>';
	 		$markup .= '<tr id="dis_line"><td class = "module_select_notehint"><div class="word_wrap">'.t("MSG833").'</div></td></tr>';
		 foreach($module_list as $val){
		 $titleconn = $val->module_title;
		  $titleRestricted = titleController('ADMIN-PGM-ADD-MODULE', $titleconn,25);
		 	$markup .= '<tr id="add_module_'.$val->module_id.'"  onclick= "updInput('.$val->module_id.'); " ><td class = "module_select_cls vtip"  title = "'.htmlentities("$titleconn",ENT_QUOTES,'UTF-8').'">'.$titleRestricted.' </td></tr>';
		 } 
	 }   
    $form[$formName]['module_td_end'] = array(
	      			'#type' => 'markup',
	      			'#prefix' => $markup,
	      			'#suffix' => '</table>',
	      	);
    $form[$formName]['add_module_topic_details_end'] = array(
	    '#type' => 'markup',
	    '#markup' => '</div>',
	  	);   
    $cancelAttributes['class'][] = 'addedit-form-expertusone-throbber admin-action-button-middle-bg white-btn-bg-middle';
    $cancelAttributes['onclick'][]         = "closeQtip('','$cancelButtonId'); $('.attach-module-link').hide(); return false;";
    $cancelAttributes['data-wrapperid'] = array($wrapperId);
        
   $form[$formName]['cancel_addmodule_edit_mode'] = array(
          '#type' => 'submit',
          '#value' => t('LBL109'),
          '#title' => t('LBL109'),
          '#prefix' => '<div class="admin-datagrid-save-cancel-button-align-bottom"><div class="addedit-form-cancel-container-actions admin-save-button-container resize-save_btn"><div class="white-btn-bg-left"></div>',
          '#suffix' => '<div class="white-btn-bg-right"></div>',
          '#name' => 'Cancel attachcourse',
          '#attributes' => $cancelAttributes,
   );
        
    $setAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg attach-list-view-attach-btn';
    $setAttributes['data-wrapperid'] = 'attach_course_dt';
    $form[$formName]['set_attachmodule_edit_mode'] = array(
              '#type' => 'submit',
              '#prefix' => '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>',
    	      '#suffix' => '<div class="admin-save-button-right-bg"></div></div></div>',
              '#title' => t('LBL569'), //Done
              '#value' => t('LBL569'), //Done
              //'#name' => $buttonName,
              '#name' => 'add_module',
              '#submit' => array('attachModuleDetails'),
              '#attributes' => $setAttributes,
              '#ajax' => array(
        		    'wrapper' => 'attach_course_dt',
        		    'callback' => 'add_module_callback',
                    'program_id' =>$program_id,
    								'crsform_build_id'=>$form_state['crsform_build_id'],
    								'tab_rendered' => $form_state['tab_rendered'],
                    //'entity_type' =>$entityType,
              	      'method' => 'replace',
            	      'effect' => 'none', // 'fade',
            	      'event'=>'click',
            	      'keypress' => true,
            	      'progress' => array(
            	        'type' => 'throbber',
            	        'message' => ''
            	      ),
               ),
            );
   
         
            
  expDebug::DPrint("final form result ". print_r($form,true),5);
   return $form;
   }catch (Exception $ex) {
   	watchdog_exception('add_module_topic_html', $ex);
   	expertusErrorThrow($ex);
   }
}
function attachModuleDetails($form, &$form_state) {

  $txn = db_transaction();

  try {
  	include_once('exp_sp_administration_program.inc');
  	expDebug::dPrint("form value -->> " .print_r($form,true),5);
  	expDebug::dPrint("module selected  -->> " . $form_state['input']['module_sel']);
  	expDebug::dPrint("Module selected  -->> " .$form_state['values']['module_list_fields'],5);
  	$program_id = $form_state["program_id"];
  	$selected = $form_state['input']['module_sel'];
  	expDebug::dPrint("Program id  -->> " .$program_id . "<<--- ".$selected ,5);
  	$userid = getIdOfLoggedInUser();
  	$module_id = addnewModuleForTP($program_id,$userid,'cre_sys_obt_crt');
  	
  	if($selected != "new"){
		$grpModFields = array('code', 'title','sequence','id');
		$form_state['values']['mapped_module_id'] = $module_id;
		// Add groups to module
  		$grpModquery = db_select('slt_module_groups', 'grp');
		$grpModquery->fields('grp',$grpModFields);
		$grpModquery->condition('grp.program_id', $program_id,'=');
		$grpModquery->condition('grp.module_id', $selected,'=');
		expDebug::dPrintDBAPI('Module group List  bulk insert ', $grpModquery);
		$ListOfGrps = $grpModquery->execute()->fetchAll();
		foreach($ListOfGrps as $grp){
			$InsertGroup = db_insert('slt_module_groups');
	        $GroupFields = array(
	                    'code'      => $grp->code,
	                    'title'     => $grp->title,
	    	            'sequence'  => $grp->sequence,
	    		       	'module_id' => $module_id,
	                    'program_id' => $program_id,
	                    'created_by' => $userid,
	        			'created_on' => now(),
	        			'updated_by' => $userid,
	        			'updated_on' => now()
	              );
	        $InsertGroup->fields($GroupFields);
	        expDebug::dPrintDBAPI('Module group List  bulk insert ', $InsertGroup);
	        $Grpid = $InsertGroup->execute();
	        
	        $modcrsmapFields = array('course_id', 'object_type','is_required','sequence',
							'recommended_start_date', 'recommended_end_date', 'status', 'custom0', 'custom1', 'custom2', 'custom3', 'custom4');
	  		// Add module course mapping
	  		$modcrsmapquery = db_select('slt_module_crs_mapping', 'modcrsmap');
			$modcrsmapquery->fields('modcrsmap',$modcrsmapFields);
			$modcrsmapquery->addExpression($program_id,'program_id');
			$modcrsmapquery->addExpression($module_id,'module_id');
			$modcrsmapquery->addExpression($Grpid,'group_id');
			$modcrsmapquery->addExpression($userid,'created_by');
			$modcrsmapquery->addExpression('now()','created_on');
			$modcrsmapquery->addExpression($userid,'updated_by');
			$modcrsmapquery->addExpression('now()','updated_on');
			$modcrsmapquery->condition('modcrsmap.program_id', $program_id,'=');
			$modcrsmapquery->condition('modcrsmap.module_id', $selected,'=');
			$modcrsmapquery->condition('modcrsmap.group_id', $grp->id,'=');
			expDebug::dPrintDBAPI('Module crs mapping  bulk insert ', $modcrsmapquery);
	
			db_insert('slt_module_crs_mapping')
			->from($modcrsmapquery)
			->execute();
		
		}
		 $crs_cnt = getGrpCourseCnt($program_id,$selected);
	     if(count($ListOfGrps) == 0 && $crs_cnt >0){
	     	$modcrsmapFields = array('course_id', 'object_type','is_required','sequence',
							'recommended_start_date', 'recommended_end_date', 'status', 'custom0', 'custom1', 'custom2', 'custom3', 'custom4');
	     	$modcrsmapquery = db_select('slt_module_crs_mapping', 'modcrsmap');
			$modcrsmapquery->fields('modcrsmap',$modcrsmapFields);
			$modcrsmapquery->addExpression($program_id,'program_id');
			$modcrsmapquery->addExpression($module_id,'module_id');
			$modcrsmapquery->addExpression(0,'group_id');
			$modcrsmapquery->addExpression($userid,'created_by');
			$modcrsmapquery->addExpression('now()','created_on');
			$modcrsmapquery->addExpression($userid,'updated_by');
			$modcrsmapquery->addExpression('now()','updated_on');
			$modcrsmapquery->condition('modcrsmap.program_id', $program_id,'=');
			$modcrsmapquery->condition('modcrsmap.module_id', $selected,'=');
			expDebug::dPrintDBAPI('Module crs mapping  bulk insert ', $modcrsmapquery);
	
			db_insert('slt_module_crs_mapping')
			->from($modcrsmapquery)
			->execute();
	     }
		
  	}
  	$form_state['rebuild'] = TRUE;
  }catch (Exception $ex) {
   	watchdog_exception('attachModuleDetails', $ex);
   	expertusErrorThrow($ex);
   }
}
function add_module_callback($form, &$form_state){
	 try {	
		 	expDebug::dPrint("add_module_callback  -->> " .print_r($form_state,true),4);
			$programId = $form_state["program_id"];
			$crsform_build_id = $form_state['triggering_element']['#ajax']['crsform_build_id'];
			$redderedTabs = $form_state['triggering_element']['#ajax']['tab_rendered'];
		  $min_form_state = array(
		   'ajax' => TRUE,
		   're_render' => TRUE,
		   'no_redirect' => TRUE,
		   'program_id' => $programId,
		   //'build_info' => array('args' => array('ajax'))
		   'call_type' => 'render_tab_list',
		  );
			$min_form_state['build_info'] = $form_state['build_info'];
		
		  // get the last module id
		  
		  $select = db_select('slt_module', 'sltmodule');
		 	$select->addField('sltmodule','id','module_id');
		 	$select->condition('sltmodule.program_id', $programId, '=');
		 	$select->orderBy('sltmodule.id','desc');
		 	$select->range(0,1);
		 	expDebug::dPrintDBAPI('getDefaultModuleIdForAddModule',$select);
		 	$module_id = $select->execute()->fetchField();
		  
		  expDebug::dPrint('add_module_callback : '.print_r($form_state,true) , 5);
		  $statusMsgHTML = theme('status_messages');
		  expDebug::dPrint(' $statusMsgHTML = ' . print_r($statusMsgHTML, true) , 4);
		  if (!empty($statusMsgHTML)) {
		  	$commands[] = ajax_command_html('#bubble-face-table #show_expertus_message', $statusMsgHTML);
		  }
		  else{
		   	$min_form_state['triggering_element'] = $form_state['triggering_element'];
				$min_form_state['triggering_element']['#name'] = "add_module";
		  	$form_state = array();
		  	$_POST['form_build_id'] = $crsform_build_id;
		  	$_POST['tab_count'] = $redderedTabs;
				list($form, $form_state) = ajax_get_form();
				$form_state = array_merge($form_state,$min_form_state);
			  $form_state['rebuild'] = TRUE;
			  $form_state['values']['mapped_module_id'] = $module_id;
			 	$form_state = array_merge($form_state,$min_form_state);
			 	$form_state['rebuild_info']['copy']['#build_id'] = TRUE;
			 	$form_state['rebuild_info']['copy']['#action'] = TRUE;
			 	
			 	
			  $formId = 'exp_sp_administration_program_attaching_courses_form';  
			  $builtForm = drupal_rebuild_form($formId, $form_state, $form);
			  $form = array_merge($form,$builtForm);
			  form_set_cache($form['#build_id'], $form, $form_state);
			
			  $commands = array();
			  $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));
			  $renderedTabContentHTML = $commands[0]['data'];
			  
			  $dom = new DOMDocument();
				$dom->loadHTML('<?xml encoding="utf-8" ?>' . $renderedTabContentHTML);	
				$node = $dom->getElementById('exp_sp_administration_program_attaching_courses');
				$tabContant ='';
				if($node)
					$tabContant = '<div id="dummy-tab-content">'.getInnerHtml($node).'</div>';;
				
				$node->parentNode->removeChild($node);
				$xpath = new DOMXPath($dom);
				$Node = $xpath->query('//div[@id="modules-classes-all"]')->item(0);
				$courseContent = array();
				if($Node)
					$courseContent = '<div id="dummy-course-content">'.getInnerHtml($Node).'</div>';
		
				$commands = array();
			  $commands[] = ajax_command_after('#exp_sp_administration_program_attaching_courses #program_attach_tabs ul li:eq(0)', mb_convert_encoding($tabContant, "HTML-ENTITIES", "UTF-8"));
			  $commands[] = ajax_command_after('#page-container-tabs-prg #exp_sp_administration_program_attaching_courses', mb_convert_encoding($courseContent, "HTML-ENTITIES", "UTF-8"));
			  $settings = get_drupal_ajax_settings($builtForm);
			  $commands[] = ajax_command_invoke(NULL, "postPagination", array($settings,'add_tabs'));
			  $commands[] = ajax_command_refresh_narrow_search_results('onclose');
				expDebug::dPrint("Add new module callback final result - ".print_r($commands,true),5);
		  }
		  expDebug::dPrint("commands >>> ".print_r($commands,true),4);
		  return array(
		        '#type' => 'ajax',
		        '#commands' => $commands
		  );
	 } catch (Exception $ex) {
	  	watchdog_exception('add_module_callback', $ex);
	  	expertusErrorThrow($ex);
	  }
}

?>