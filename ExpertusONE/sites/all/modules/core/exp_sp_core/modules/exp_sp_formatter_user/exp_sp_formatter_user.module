<?php
/**
 * Implementation of hook_menu().
 */
function exp_sp_formatter_user_menu(){
	try {
  $items = array();
  $items['ajax/user/profile/%']=array(
		'title' => 'User Profile',
		'page callback' => 'user_profile_callback',
		'page arguments' => array(3),
		'access arguments' => array('expertus learner'),
		'type' => MENU_CALLBACK,
	    'file' => 'exp_sp_formatter_user.inc'
	    );
  return $items;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_formatter_user_menu', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 *  Implementation of hook_init()
 */
function exp_sp_formatter_user_init(){
	try{
	// Condition added by Vincent on May 05, 2014 for Refactoring #0033772
	if(module_exists('ldap_authentication') && stripos(request_uri(),'learning/enrollment')!==false)
  		drupal_add_js(drupal_get_path('module','exp_sp_formatter_user').'/exp_sp_formatter_user.js');
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_formatter_user_init', $ex);
  	expertusErrorThrow($ex);
  }
}

/** 
* Compares the request IP with whitelist IP's configured Mantis#:0055065
*/
function exp_sp_whitelist_ips() {
	if(module_exists('ip_ranges')){
	$whitelist = ip_ranges_get_ip_list('whitelist');
  	$current_ip = ip_address();
  		foreach ($whitelist as $ip) {
    		if (ip_ranges_check_ip($ip->ip, $current_ip)) {
				return 1;
				break;
    		}
  		}
  	}
	return 0;
}

/**
 * Implements hook_theme().
 */
function exp_sp_formatter_user_theme() {
	try {
  return array(
    'user_profile_online' => array(
      'variables' => array('result' => array()),
      'template' => 'exp_sp_user_profile_online-view',
  )
  );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_formatter_user_theme', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function exp_sp_formatter_user_form_user_login_alter(&$form, $form_state, $form_id) {
  try{
  global $theme_key;
  $form_state['title'] = t('Sign In');
  $form['#validate'] = user_login_custom_validators();
  $form['#prefix'] = '<div id="my-login-container" class="my-login-frm">';
  $form['#suffix'] = '</div>';

  // Disable Register link when LDAP enabled
  $authenticationMode="disabled_ldap";
  $const_var="";
   if(module_exists('ldap_authentication'))
   {
  		$auth_conf = ldap_authentication_get_valid_conf();
  		$authenticationMode=$auth_conf->authenticationMode;
  		$const_var=LDAP_AUTHENTICATION_EXCLUSIVE;
  }
  if((module_exists('saml') || module_exists('adfs')) && e1_sso_login_accessible()){
  $form['login-wrap-start']['#attributes']   = array('Class' => 'login-grouping');
  $form['login-wrap-start']['#prefix'] = '<div class="my-login-wrapper">';
  $form['login-wrap-start']['#weight']   = 3;

  $form['name']['#size']         = 32;
  $form['name']['#weight']       = 4;
  $form['name']['#description']  = '';
  $form['name']['#attributes']   = array('tabindex' => '101','class' => array('loginusername'),'autocomplete' => 'off','mandatory' => true,'onkeypress' => "return enableLogin(event);");
  $form['name']['#prefix']       = '<div class="row-holder">';
  $form['name']['#suffix']       = '</div>';

  $form['pass']['#size']         = 32;
  $form['pass']['#weight']       = 5;
  $form['pass']['#description']  = '';
  $form['pass']['#attributes']   = array('tabindex' => '102','autocomplete' => 'off','mandatory' => true,'onkeypress' => "return enableLogin(event);");
  $form['pass']['#prefix']       = '<div class="row-holder">';
  $form['pass']['#suffix']       = '</div>';

  if(!module_exists('ldap_authentication') || $authenticationMode !=$const_var ){

	  $form['request_password']      = array('#markup' => l(t('LBL003'), 'user/password'));
	  $form['request_password']['#prefix'] = '<div class="my-login-links-actions"><div class="req-pwd-form-wrapper">';
	  $form['request_password']['#suffix']   = '</div>';
	  $form['request_password']['#weight'] = 6;
	  $form['request_password']['#attributes']   = array('tabindex' => '105');
  }
  if($theme_key == "expertusoneV2"){

  $form['actions']['#weight']    = 7;
  $form['actions']['submit']['#value'] = t('Sign In');
  $form['actions']['submit']['#attributes']   = array('tabindex' => '103', 'Class' => 'admin-save-button-middle-bg');
  $form['actions']['submit']['#prefix']   = '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>';
  $form['actions']['submit']['#suffix'] = '<div class="admin-save-button-right-bg"></div></div></div>';//Added closing div for User account UI misalignment - #0058945

  }else{
  $form['actions']['#weight']    = 7;
  $form['actions']['submit']['#value'] = t('Sign In');
  $form['actions']['submit']['#attributes']   = array('tabindex' => '103', 'Class' => 'admin-save-button-middle-bg');
  $form['actions']['submit']['#prefix']   = '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>';
  $form['actions']['submit']['#suffix'] = '<div class="admin-save-button-right-bg"></div></div></div><div class="region-header"></div>';
  }
  if(module_exists('exp_sp_userregister') && $authenticationMode !=$const_var){
  	//if(module_exists('exp_sp_userregister') ){
  	/*-- Change registration link for widget pages --*/
    if (arg(3) == 'widget' || (isset($_SESSION['widgetCallback']) && $_SESSION['widgetCallback']==true)) {
     $form['new_user']   = array('#markup' => l(t('Register'), 'widget/register'));
    } else {
     //$form['new_user']   = array('#markup' => l(t('Register'), 'learning/register'));
    	$menu_link = db_query("SELECT link_path FROM menu_links WHERE link_title = 'Register'")->fetchField();
    	$form['new_user'] = array('#markup' => l(t('Register'), $menu_link));
    }
  	$form['new_user']['#prefix'] = '<div class="my-login-register">'.' ' .t('MSG709'). ' ? ' .'<span class="login-note">';
  	$form['new_user']['#suffix'] = '</span></div>';
  	$form['new_user']['#weight']   = 8;
  	$form['new_user']['#attributes']   = array('tabindex' => '104');
  }else{
  	$form['new_user']['#prefix'] = '<div class="my-login-register">'.t('MSG946');
  	$form['new_user']['#suffix'] = '</div>';
  	$form['new_user']['#weight']   = 8;
  	$form['new_user']['#attributes']   = array('tabindex' => '104');
  }
  $form['login-wrap-end']['#suffix'] = '</div>';
  $form['login-wrap-end']['#weight']   = 9;


  	$form['links']['#size']         = '';
  	$form['links']['#weight']       = 10;
  	$form['links']['#attributes']   = array('class' => array('corporate-links'));
  	$form['links']['#prefix']       = '<div class="corporate-links">';
  	$form['links']['#suffix']       = '</div>';


  	$form['links_image']['#size']         = '';
  	$form['links_image']['#weight']       = 11;
  	$form['links_image']['#attributes']   = array('class' => array('corporate-image'));
  	$form['links_image']['#prefix']       = '<div class ="corporate-image">';
  	$form['links_image']['#suffix']       = '</div>';
  }
  else{

	  if(module_exists('exp_sp_userregister') && $authenticationMode !=$const_var){
	  	//if(module_exists('exp_sp_userregister') ){
	  	expDebug::dPrint('session value in the ses widget callback' . print_r($form, 1), 4);
	   /*-- Change registration link for widget pages --*/
	  	if (arg(3) == 'widget' || (isset($_SESSION['widgetCallback']) && $_SESSION['widgetCallback']==true)) {
 	    $form['new_user']   = array('#markup' => l(t('Register'), 'widget/register'));
       } else {
        //$form['new_user']   = array('#markup' => l(t('Register'), 'learning/register')); //52158
       	$menu_link = db_query("SELECT link_path FROM menu_links WHERE link_title = 'Register'")->fetchField();
       	$form['new_user'] = array('#markup' => l(t('Register'), $menu_link));
       }
	  	$form['new_user']['#prefix'] = '<div class="single-my-login-register">'.' ' .t('LBL425').'<span class="login-note">('.t('LBL430').' ';
	  	$form['new_user']['#suffix'] = '?)</span></div>';
	  	$form['new_user']['#weight']   = 1;
	  	$form['new_user']['#attributes']   = array('tabindex' => '104');
	  }else{
	  	$form['new_user']['#prefix'] = '<div class="single-my-login-register">'.t('MSG946');
	  	$form['new_user']['#suffix'] = '</div>';
	  	$form['new_user']['#weight']   = 1;
	  	$form['new_user']['#attributes']   = array('tabindex' => '104');
	  }


	  $form['name']['#size']         = 32;
	  $form['name']['#weight']       = 2;
	  $form['name']['#description']  = '';
	  $form['name']['#attributes']   = array('tabindex' => '101','class' => array('loginusername'),'autocomplete' => 'off','onkeypress' => "return enableLogin(event);");
	  $form['name']['#prefix']       = '<div class="signin-holder">';
	  $form['name']['#suffix']       = '</div>';

	  $form['pass']['#size']         = 32;
	  $form['pass']['#weight']       = 3;
	  $form['pass']['#description']  = '';
	  $form['pass']['#attributes']   = array('tabindex' => '102','autocomplete' => 'off','onkeypress' => "return enableLogin(event);");
	  $form['pass']['#prefix']       = '<div class="signin-holder">';
	  $form['pass']['#suffix']       = '</div>';

	  if(!module_exists('ldap_authentication') || $authenticationMode !=$const_var ){

	  	$form['request_password']      = array('#markup' => l(t('LBL003'), 'user/password'));
	  	$form['request_password']['#prefix'] = '<div class="my-login-links-actions-single"><div class="single-req-pwd-form-wrapper">';
	  	$form['request_password']['#suffix']   = '</div>';
	  	$form['request_password']['#weight'] = 4;
	  	$form['request_password']['#attributes']   = array('tabindex' => '105');
	  }
	  /*-- unset forgot password link for widget page login --*/
	   if (arg(3) == 'widget') {
	   unset($form['request_password']);
	  }
	  if($theme_key == "expertusoneV2"){

	  	$form['actions']['#weight']    = 5;
	  	$form['actions']['submit']['#value'] = t('Sign In');
	  	$form['actions']['submit']['#attributes']   = array('Class' => 'admin-save-button-middle-bg');
	  	$form['actions']['submit']['#prefix']   = '<div class="single-admin-save-button-container"><div class="admin-save-button-left-bg"></div>';
	  	$form['actions']['submit']['#suffix'] = '<div class="admin-save-button-right-bg"></div></div>';

	  	$form['actions']['#weight']    = 6;
	  	$form['actions']['close']['#value'] = t('LBL123');
	  	$form['actions']['close']['#attributes']   = array('Class' => 'white-btn-bg-middle close learner-sign-close-link','onclick'=>'Drupal.CTools.Modal.dismiss();return false');
	  	$form['actions']['close']['#type']   ='button';
	  	$form['actions']['close']['#prefix']   = '<div class="white-btn-bg-container"><div class="white-btn-bg-left"></div>';
	  	$form['actions']['close']['#suffix'] = '<div class="white-btn-bg-right"></div></div></div><div class="region-header"></div>';

	  }else{
	  	$form['actions']['#weight']    = 5;
	  	$form['actions']['submit']['#value'] = t('Sign In');
	  	$form['actions']['submit']['#attributes']   = array('tabindex' => '103', 'Class' => 'admin-save-button-middle-bg');
	  	$form['actions']['submit']['#prefix']   = '<div class="single-admin-save-button-container"><a href="#" onclick="Drupal.CTools.Modal.dismiss();return false;" class="close learner-sign-close-link admin-action-button-middle-bg">'.t('LBL123').'</a><div class="admin-save-button-left-bg"></div>';
	  	$form['actions']['submit']['#suffix'] = '<div class="admin-save-button-right-bg"></div></div></div><div class="region-header"></div>';
	  }
  }
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_formatter_user_form_user_login_alter', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * A simple list of validate functions.
 */
function user_login_custom_validators() {
  try{
    return array('user_login_name_validate', 'user_login_authenticate_validate', 'user_login_custom_final_validate');
  }catch (Exception $ex) {
    watchdog_exception('user_login_custom_validators', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * The final validation handler on the login form.
 *
 * Sets a form error if user has not been authenticated, or if too many
 * logins have been attempted. This validation function should always
 * be the last one.
 */
function user_login_custom_final_validate($form, &$form_state) {
  try{
  if (empty($form_state['uid'])) {
    // Always register an IP-based failed login event.
    // Check to control Whitelisted IP blocking - Mantis#:0055065
    if(!exp_sp_whitelist_ips()){
    	flood_register_event('failed_login_attempt_ip', variable_get('user_failed_login_ip_window', 3600));
    }
    // Register a per-user failed login event.
    if (isset($form_state['flood_control_user_identifier'])) {
      flood_register_event('failed_login_attempt_user', variable_get('user_failed_login_user_window', 21600), $form_state['flood_control_user_identifier']);
    }

    if (isset($form_state['flood_control_triggered'])) {
      if ($form_state['flood_control_triggered'] == 'user') {
        form_set_error('name', format_plural(variable_get('user_failed_login_user_limit', 5), 'Sorry, there has been more than one failed login attempt for this account. It is temporarily blocked. Try again later.', 'Sorry, there have been more than @count failed login attempts for this account. It is temporarily blocked. Try again later.', array('@url' => url('user/password'))));
      }
      else {
        // We did not find a uid, so the limit is IP-based.
        form_set_error('name', t('Sorry, too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later.', array('@url' => url('user/password'))));
        //Notification to DevOps intimating a non-categorized IP is temporarily blocked.
        iprange_adminNotify();
      }
    }
    else {
      form_set_error('name', t('ERR128', array('@password' => url('user/password'))));
      watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
    }
  }
  elseif (isset($form_state['flood_control_user_identifier'])) {
    // Clear past failures for this user so as not to block a user who might
    // log in and out more than once in an hour.
    flood_clear_event('failed_login_attempt_user', $form_state['flood_control_user_identifier']);
  }
  }catch (Exception $ex) {
    watchdog_exception('user_login_custom_final_validate', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * Triggers notification to E1 devops team.
 */
function iprange_adminNotify(){
	try{
		if(module_exists('ip_ranges')){
			$config           = getConfig("exp_sp");
			$message = new stdClass;
			$message->sendmail_to = trim($config["iprange_to"]);
			if (!(empty($message->sendmail_to))) {
				
				include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/exp_sp_notify/exp_sp_notify.inc";
				$current_ip = ip_address();
				
				global $base_url;
				expDebug::dPrint('base_url>>>>>>>>> iprange_adminNotify'. print_r($base_url, 1), 5);
				$site_name ="<html><a href='".$base_url."'>".variable_get('site_name', 'ExpertusONE')."</a></html>";
				
				$subject = str_replace("@@IPAddress@@",$current_ip,$config["iprange_subject"]);
				$message->subject = $subject;
				$message->cc = $config["iprange_cc"];
					
				//Frame subject
				$msg = "<img src='".get_logo_path()."'></img>"."<br><br>";
				$msg .=$config["iprange_mailttile"]."<br><br>";
				$body = $config["iprange_body"];
				$site_name = variable_get('site_name', 'ExpertusONE');
				$siteLINK = "<html><a href='".$base_url."'>".$site_name."</a></html>";
				
				$body = str_replace("@@IPAddress@@",$current_ip,$body);
				$body = str_replace("@@sitename@@",$siteLINK,$body);
				$msg = $msg.$body."<br><br>";
				$msg = $msg."<br>Thank you,<br>";
				$msg = $msg.$site_name."<br>";
					
				$msg = $msg."Note : This is an automated message. Do not reply directly to this email.";
				
				$message->body = $msg;
				expDebug::dPrint('message->sendmail_to' . print_r($message->sendmail_to, 1), 5);
				expDebug::dPrint('message->sendmail_cc' . print_r($message->cc, 1), 5);
				expDebug::dPrint('message->sendmail_subject' . print_r($message->subject, 1), 5);
				expDebug::dPrint('message->sendmail_body' . print_r($message->body, 1), 5);
					
				$sendmsg = new notificationProcess();
				$sendmsg->sendNotification($message);
			} else {
				expDebug::dPrint('unable to send IP block alert, iprange_to email is not set in exp_sp.ini', 5);
			}
			//$sentStatus = sendMessageToUser($message);
			/*if(isset($sentStatus)){
				  throw new Exception('sendMessageToUser');
			}*/
		}
		}catch (Exception $ex) {
			expDebug::dPrint('sendNotification failed', 5);
			watchdog_exception('sendNotification', $ex);
			expertusErrorThrow($ex);
		}
}

/**
 * Implements hook_menu_alter().
 */
function exp_sp_formatter_user_menu_alter(&$items){
	try {
  unset($items['user/register']);
  unset($items['user/%/edit']);
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_formatter_user_menu_alter', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Callback of the user profile.
 *
 * @param $user_id
 *   The ID of a user.
 *
 * @return
 *   Returns HTML for a user profile.
 *
 */
function user_profile_callback($user_id)
{
	try {
  print theme('user_profile_online', array('result' => getUserProfile($user_id)));
  }catch (Exception $ex) {
  	watchdog_exception('user_profile_callback', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_preprocess_user_picture().
 */
/*
 * @TODO: exp_sp_formatter_user_preprocess_user_picture
 */
/*function exp_sp_formatter_user_preprocess_user_picture(&$variables) {
 $variables['picture'] = '';
 if (variable_get('user_pictures', 0)) {
 $account = $variables['account'];
 if (!empty($account->picture) && file_exists($account->picture)) {
 $picture = file_create_url($account->picture);
 }
 else if (variable_get('user_picture_default', '')) {
 $picture = variable_get('user_picture_default', '');
 }

 if (isset($picture)) {
 $alt = t("@user's picture", array('@user' => getScreenName($account->uid) ? getScreenName($account->uid) : variable_get('anonymous', t('Anonymous'))));
 $variables['picture'] = theme('image', $picture, $alt, $alt, '', FALSE);
 if (!empty($account->uid) && user_access('access user profiles')) {
 $variables['picture'] = '<a href="javascript:void(0);" class="user-profile" title="'.getScreenName($account->uid).'" id="'.$account->uid.'" >'.$variables['picture'].'</a>';
 }
 }
 }
 }*/

/**
 * Implementation of hook_theme_registry_alter().
 */
function exp_sp_formatter_user_theme_registry_alter(&$theme_registry) {
  try{
  foreach($theme_registry as $template => $template_val)
  {
    if ($template == "username") {
      $theme_registry[$template]['function']='alter_theme_username';
    }
    else if ($template == "item_list") {
      $theme_registry[$template]['function']='alter_theme_item_list';
    }
  }
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_formatter_user_theme_registry_alter', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * override of theme_username()
 * Returns HTML for a username, potentially linked to the user's page.
 *
 * @param $variables
 *   An associative array containing:
 *   - account: The user object to format.
 *   - name: The user's name, sanitized.
 *   - extra: Additional text to append to the user's name, sanitized.
 *   - link_path: The path or URL of the user's profile page, home page, or
 *     other desired page to link to for more information about the user.
 *   - link_options: An array of options to pass to the l() function's $options
 *     parameter if linking the user's name to the user's page.
 *   - attributes_array: An array of attributes to pass to the
 *     drupal_attributes() function if not linking to the user's page.
 *
 * @see template_preprocess_username()
 * @see template_process_username()
 */
function alter_theme_username($variables) {
	try {
  require_once "exp_sp_formatter_user.inc";
  $account = $variables['account'];
  return '<div class="profile-item"><a class="profile-image">'.getUserPicture($account->uid).'</a><div class="profile-desc"><span class="user-profile-link"><a href="javascript:void(0);" class="user-name user-profile"  title="'.getScreenName($account->uid).'" id="'.$account->uid.'">'.getScreenName($account->uid).'</a><span class="job-title">'.sanitize_data(getUserJobtitle($account->uid)).'</span></span></div></div>';
  }catch (Exception $ex) {
  	watchdog_exception('alter_theme_username', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 *  * override of theme_item_list()
 * Returns HTML for a list or nested list of items.
 *
 * @param $variables
 *   An associative array containing:
 *   - items: An array of items to be displayed in the list. If an item is a
 *     string, then it is used as is. If an item is an array, then the "data"
 *     element of the array is used as the contents of the list item. If an item
 *     is an array with a "children" element, those children are displayed in a
 *     nested list. All other elements are treated as attributes of the list
 *     item element.
 *   - title: The title of the list.
 *   - type: The type of list to return (e.g. "ul", "ol").
 *   - attributes: The attributes applied to the list element.
 */
function alter_theme_item_list($variables) {
  try{
  $items = $variables['items'];
  $title = $variables['title'];
  $type = $variables['type'];
  $attributes = $variables['attributes'];

  if (isset($title) && $title == 'exp_sp_formatter_user online') {
    if (count($items) <= 0) {
      $output =  '<div class="no-online-user-item-list">';
      $output .= 'There are currently no users online.';
      $output .= '</div>';
      return $output;
    }

    $title = NULL;
  }

  $output = '<div class="item-list">';
  if (isset($title)) {
    $output .= '<h3>' . $title . '</h3>';
  }

  if (!empty($items)) {
    $output .= "<$type" . drupal_attributes($attributes) . '>';
    $num_items = count($items);
    foreach ($items as $i => $item) {
      $attributes = array();
      $children = array();
      if (is_array($item)) {
        foreach ($item as $key => $value) {
          if ($key == 'data') {
            $data = $value;
          }
          elseif ($key == 'children') {
            $children = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $data = $item;
      }
      if (count($children) > 0) {
        // Render nested list.
        $data .= theme_item_list(array('items' => $children, 'title' => NULL, 'type' => $type, 'attributes' => $attributes));
      }
      if ($i == 0) {
        $attributes['class'][] = 'first';
      }
      if ($i == $num_items - 1) {
        $attributes['class'][] = 'last';
      }
      $output .= '<li' . drupal_attributes($attributes) . '>' . $data . "</li>\n";
    }
    $output .= "</$type>";
  }
  $output .= '</div>';
  return $output;
  }catch (Exception $ex) {
    watchdog_exception('alter_theme_item_list', $ex);
    expertusErrorThrow($ex);
  }
}

?>