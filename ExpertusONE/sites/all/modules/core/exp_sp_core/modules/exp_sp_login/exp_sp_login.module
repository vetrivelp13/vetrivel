<?php 
include_once DRUPAL_ROOT."/sites/all/services/SCSoapClient.php";
/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function exp_sp_login_form_user_login_block_alter(&$form, &$form_state) {
	try {
  $form['#submit'][] = "smart_connect_user_login_submit";
  if(strstr($form['#action'], 'destination=node'))
  $form['#action'] = '/?q=node';
   }catch (Exception $ex) {
  	watchdog_exception('exp_sp_login_form_user_login_block_alter', $ex);
  	expertusErrorThrow($ex);
  }
}
/**
 * Implementation of hook_user_login().
 */

function exp_sp_login_user_login(&$edit, $account) 
{
  try{
 	$edit["values"]["name"] = trim($edit["values"]["name"]); // Fixed For the Giving space after username Throws Error #0039377
	$pwd=$edit["values"]["pass"];
	expDebug::dPrint(" account values....".$pwd , 4);
	expDebug::dPrint($account , 4);
	expDebug::dPrint(" edit values....");
	expDebug::dPrint($edit , 4);
	$username=$edit["values"]["name"];
	 
	if($username=="" && $pwd=="")
	{
		  expDebug::dPrint("inside empty ".arg(1).arg(0) , 4);
		  if(arg(0) == 'user' && arg(1) == 'reset'){
			 authenticateUser($edit,$account);
		  }	
 		if(arg(0) == 'user' && arg(1) == 'login')
 		{
 		
	 		// Get authentication type.
			$authenticationMode="disabled_ldap";
	  		$const_var="";
	  		$const_mixed_mode="";
			if(module_exists('ldap_authentication'))
			{
			 	$auth_conf = ldap_authentication_get_valid_conf();
		  		$authenticationMode=$auth_conf->authenticationMode;
		  		$const_var=LDAP_AUTHENTICATION_EXCLUSIVE;
		  		$const_mixed_mode=LDAP_AUTHENTICATION_MIXED;
			}
			 
		  	$edit["values"]["name"]=$account->name;//"sureshkumarv";
		  	$edit["values"]["pass"]="";//$_SESSION["pass"];//"welcome8@";
		  	global $user;
		  	
			if($user->uid!=1)
			{ 
			  	$lms_id=exp_sp_login_user_is_usr_avail_lms($edit["values"]["name"],"");
			     expDebug::dPrint(" lms id ".$lms_id , 4);
			  	if($lms_id>0 && $authenticationMode == $const_var)
			  	{
				 	//authenticateUser($edit,$account);
				 	include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/ldap/LDAPService.php";
				  	$ldap_conn=new LDAPService();
				  	$resultObj=$ldap_conn->getData($edit["values"]["name"],$edit["values"]["pass"]);	
			  		// Get LDAP Data for user updation
			  		create_update_user_byrest($resultObj,$lms_id,$account,$edit["values"]["pass"]);
					$edit=null;
					authenticateUser($edit,$account); 
					
				}
				else
				{
					if($authenticationMode == $const_var || ($lms_id<=0 && $authenticationMode == $const_mixed_mode ))
					{
						include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/ldap/LDAPService.php";
					  	$ldap_conn=new LDAPService();
					  	$resultObj=$ldap_conn->getData($edit["values"]["name"],$edit["values"]["pass"]);	
						//$lms_id=exp_sp_login_user_is_usr_avail_lms($edit["values"]["name"],"");
				  		// Get LDAP Data for user creation
				  		create_update_user_byrest($resultObj,$lms_id,$account,$edit["values"]["pass"]);
						$edit=null;
						$_SESSION['newusersaved']="yes";
						authenticateUser($edit,$account); 
					}
					else
					{
						//user exist already in lms and ldap, auth mode is mixed
						if($lms_id>0 && $authenticationMode == $const_mixed_mode)
							authenticateUser($edit,$account);
					}
				}
			}
		 }	
	}
	else
	{
		// Get authentication type.
		 $authenticationMode="disabled_ldap";
  		 $const_var="";
  		 $const_mixed_mode="";
		 if(module_exists('ldap_authentication'))
		 {
		 	$auth_conf = ldap_authentication_get_valid_conf();
	  		$authenticationMode=$auth_conf->authenticationMode;
	  		$const_var=LDAP_AUTHENTICATION_EXCLUSIVE;
	  		$const_mixed_mode=LDAP_AUTHENTICATION_MIXED;
		 }
	  	if($authenticationMode == $const_var || $authenticationMode == $const_mixed_mode )
		{
			global $user;
			if($user->uid!=1)
			{
			 	expDebug::dPrint("inside if part");
			  	$lms_id=exp_sp_login_user_is_usr_avail_lms($account->name,$account->mail);
			
			  	$pwd=$edit["values"]["pass"];
			  	$username=$edit["values"]["name"];
			
				 if($lms_id <=0 && $authenticationMode == $const_mixed_mode)
				 {
					 include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/ldap/LDAPService.php";
				  	$ldap_conn=new LDAPService();
				  	$resultObj=$ldap_conn->getData($username,$pwd);	
				
			  		// Get LDAP Data for user creation
			  		create_update_user_byrest($resultObj,$lms_id,$account,$pwd);
			  		$_SESSION['newusersaved']="yes";
					$edit=null; 
				 }
				  if($lms_id >=0 && $authenticationMode == $const_var) //only ldap
				  {
				  	include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/ldap/LDAPService.php";
				  	$ldap_conn=new LDAPService();
				  	$resultObj=$ldap_conn->getData($username,$pwd);	
				
			  		// Get LDAP Data for user creation
			  		create_update_user_byrest($resultObj,$lms_id,$account,$pwd);
					$edit=null;
				 } 
			}
	  		authenticateUser($edit,$account);
		 
		}
	    else
		  {
			  authenticateUser($edit,$account);
		  }
	}
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_login_user_login', $ex);
    expertusErrorThrow($ex);
  }
}

function create_update_user_byrest($resultObj,$lmsid,$account,$pwd)
{
  try{
		// create lms user
  		include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/dao/UserDAO.php";
  		
  		$paramsobj=new stdClass();
  		if($lmsid>0)
  		{
  			$paramsobj->Id=$lmsid;
  			$results=db_query("SELECT first_name,last_name,middle_name,full_name,user_type,employment_type,hire_date,terminated_date,".
  								"is_rehire,is_instructor,manager_id,org_id,dept_code,addr1,addr2,city,state,country,zip,preferred_loc_id,location_name,time_zone,custom3,updated_on".
  								" FROM slt_person where status='cre_usr_sts_atv' and  id=".$lmsid );
  			
  			foreach($results as $row)
  			{
  				expDebug::dPrint("hire date....".$row->hire_date , 4);
  				$paramsobj->MiddleName=$row->middle_name;
		  		$paramsobj->Address1=$row->addr1;
		  		$paramsobj->Address2=$row->addr2;
		  		$paramsobj->City=$row->city;
		  		$paramsobj->State=$row->state;
		  		$paramsobj->Country=$row->country;
		  		$paramsobj->PostalCode=$row->zip;
		  		$paramsobj->UserType=$row->user_type;
		  		$paramsobj->EmploymentType=$row->employment_type;
		  		$paramsobj->HireDate=$row->hire_date;
		  		$paramsobj->TerminationDate=$row->terminated_date;
		  		$paramsobj->IsRehire=$row->terminated_date;
		  		$paramsobj->IsInstructor=$row->terminated_date;
		  		$paramsobj->ManagerId=$row->terminated_date;
		  		$paramsobj->OrganizationId=$row->org_id;
		  		$paramsobj->DepartmentId=$row->dept_code;
		  		$paramsobj->LocationId=$row->preferred_loc_id;
		  		$paramsobj->LocationName=$row->location_name;
		  		$paramsobj->UpdatedOn = $row->updated_on;
		  		$paramsobj->LDAPUpdatedOn = $row->custom3;
		  		$paramsobj->TimeZone = $row->time_zone;
  			}
  			$results=null; 
  		}
  		else
  		{
  			$paramsobj->MiddleName="";
	  		$paramsobj->Address1="";
	  		$paramsobj->Address2="";
	  		$paramsobj->City="";
	  		$paramsobj->State="";
	  		$paramsobj->Country="";
	  		$paramsobj->PostalCode="";
	  		$paramsobj->UserType="";
	  		$paramsobj->EmploymentType="";
	  		$paramsobj->HireDate="";
	  		$paramsobj->TerminationDate="";
	  		$paramsobj->IsRehire="";
	  		$paramsobj->IsInstructor="";
	  		$paramsobj->ManagerId="";
	  		$paramsobj->DepartmentId="";
	  		$paramsobj->LocationId="";
	  		$paramsobj->LocationName="";

  		}
  		$paramsobj->FirstName=$resultObj->firstname;
  		$paramsobj->LastName=$resultObj->lastname;
  		$paramsobj->UserName=$account->name;
  		$paramsobj->Password=$pwd;
  		$paramsobj->Email=$account->mail;
  		$paramsobj->Notification="";//"sendnotification";
  		$paramsobj->PhoneNo=$resultObj->telephoneno;
  		if($account->status=="1")
  			$paramsobj->Status="cre_usr_sts_atv";

  		$results=db_query("select lms_field_name,ldap_field_name from slt_ldap_field_mapping");
  		$tempTimeZone = $paramsobj->TimeZone;
  		$updflag = false;
  		foreach($results as $row)
  		{
  			$lms_field_name=$row->lms_field_name;
  			$ldap_field_name=$row->ldap_field_name;
  			$paramsobj->$lms_field_name=$resultObj->$ldap_field_name;
  			expDebug::dPrint("result obj...".$resultObj->$ldap_field_name." &&&&& lms field name=".$lms_field_name."====".$ldap_field_name." param setup...".$paramsobj->$lms_field_name , 4);
  		}
  		
  		$lmsupddt = strtotime($paramsobj->UpdatedOn)?strtotime($paramsobj->UpdatedOn):0;
  		$ldapupddt = strtotime($paramsobj->LDAPUpdatedOn)?strtotime($paramsobj->LDAPUpdatedOn):0;
  		if($lmsupddt<$ldapupddt || $lmsupddt == 0 || $ldapupddt == 0){
  			$paramsobj->TimeZone=exp_sp_login_user_get_timezone_code($paramsobj->TimeZone);
  			$updflag = true;
  		} else {
  			$paramsobj->TimeZone = $tempTimeZone;
  			$updflag = false;
  		}
  		expDebug::dPrint("lms id..".$lmsid , 4);
  		expDebug::dPrint($paramsobj , 4);
  		
        expDebug::dPrint(' $JobCode before '.$paramsobj->JobTitle , 4);
		  if($paramsobj->JobTitle != '' || $paramsobj->JobTitle!=null){
			    $paramsobj->JobTitle=exp_sp_login_user_get_job_code($resultObj->title);
		  }
		expDebug::dPrint(' $JobCode after '.$paramsobj->JobTitle , 4);

		if($lmsid=="" || $lmsid==0)
		{
	  		$obj=new UserDAO();
			$result1=$obj->insertUser($paramsobj,true);
		
			if($result1->Id != -1 && $result1->Id != -2 && $result1->Id != -3)
			{
				$_GET["mode"]="ldap_insert";
				$_GET["Notification"]=$paramsobj->Notification;
				$_GET["UserName"]=$paramsobj->UserName;
				$_GET["Password"]=$paramsobj->Password;
				$_GET["Email"]=$paramsobj->Email;
				include_once  $_SERVER["DOCUMENT_ROOT"]."/sites/all/services/DrupalUserCreate.php";
			} 
		}
		else
		{
			/*$obj=new UserDAO();
			$result1=$obj->updateUser($paramsobj,$updflag);*/ 
			$custom0 = LdapFetchUSerDetails();
			$update = db_update('slt_person');
			$update->fields(array(
			      'first_name'          =>     (strpos($custom0[0]->custom0,'firstname') === false) ? $paramsobj->FirstName : $custom0[0]->first_name,
			      'last_name'           =>     (strpos($custom0[0]->custom0,'lastname') === false) ? $paramsobj->LastName : $custom0[0]->last_name,
			      'email'               =>     $paramsobj->Email,
			      'phone_no'            =>     $paramsobj->PhoneNo,
			      'time_zone'           =>     (strpos($custom0[0]->custom0,'timezone') === false) ? $paramsobj->TimeZone : $custom0[0]->tzone,
			  	  'job_title'           =>     $paramsobj->JobTitle,
			));
			  
			$update->condition('id', $userid);
			$update->execute();
		}	
  }catch (Exception $ex) {
    watchdog_exception('create_update_user_byrest', $ex);
    expertusErrorThrow($ex);
  } 
}



function exp_sp_login_user_get_job_code($jobTitle)
{
  try{
		$jobCode="";
		if($jobTitle!=null || $jobTitle!="")
		{
			include_once  $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/exp_sp_my_profile/exp_sp_my_profile.inc";
			$jobCode=getJobCode(trim($jobTitle));
	    } 
	    expDebug::dPrint("job code...".$jobCode , 4);
		return $jobCode;
 }catch (Exception $ex) {
    watchdog_exception('exp_sp_login_user_get_job_code', $ex);
    expertusErrorThrow($ex);
  } 
}


function exp_sp_login_user_get_timezone_code($tzName)
{
  try{
		$tzCode="";
		if($tzName!=null && $tzName!="")
		{
			include_once  $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/exp_sp_my_profile/exp_sp_my_profile.inc";
			
			$timeZoneList=getTimeZone();
			foreach ($timeZoneList as $id => $row) 
			{
				expDebug::dPrint("tzName.".$tzName."====".$row->zonename , 4);
				if(strcmp(trim($tzName),trim($row->zonename))==0)
				{
					$tzCode=$row->zonecode;
					break;
				}
	      	}
	      }
	    expDebug::dPrint("timezone code...".$tzCode , 4);
		return $tzCode;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_login_user_get_timezone_code', $ex);
    expertusErrorThrow($ex);
  } 
}
function exp_sp_login_user_is_usr_avail_lms($name,$email)
{
  try{		
		include_once  $_SERVER["DOCUMENT_ROOT"]."/sites/all/dao/AbstractDAO.php";
		$dao = new AbstractDAO();
		$dao->connect();
		$dao->query("select id from slt_person where user_name='".$name."'");
				
		$results = $dao->fetchResult();
		$lmsid=$results->id;
		$dao->closeconnect();
		return $lmsid;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_login_user_is_usr_avail_lms', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Implementation of hook_user_logout().
 */
function exp_sp_login_user_logout($account) {
  try{
  	
  	/*
  	 * Start # 0040632 -  Salesforce Logout Issue
  	* Added By : Ganesh Babu V, Nov 11th 2014 4:45 PM
  	* Description:  To avoid the home page redirectin salesforce if session expires in LMS
  	* Ticket : #0040632: Requesting to avoid the logout in salesforce if user has logged out or session timedout from LMS
  	* Updated by : Ganesh babu V, Feb 5th 2015 11:56 AM due to avoid the salesforce debug unnessarily when not enable the salesforce module
  	*/
  	
  	if(module_exists('salesforce_integration')){
  	
	  	expDebug::dPrint("Salesforce Session = ".$_SESSION['salesforce_session'], 4);
	  	expDebug::dPrint("Salesforce HTTP Referer = ".$_SERVER["HTTP_REFERER"], 4);	
  	 
	  	if($_SESSION['salesforce_session']!="" && $_SESSION['salesforce_session']=="1" && stristr($_SERVER["HTTP_REFERER"],'canvas')==TRUE){
	  		expDebug::dPrint("Salesforce session is extended without logout the salesforce user. Redirect to salesforce mylearning page", 4);
	  		drupal_goto("canvas/mylearning");
	  	}
  	
  	}
  	 
  	/* End # 0040632 -  Salesforce Chatter Feed */
  	global $base_url, $user;
	// Add audit trail entry for logout
  	$browser_session_id = session_id();
  $userId = getIdForUserName($account->name);
  if(module_exists('exp_sp_commerce')) {
  $select = db_select('slt_enrollment', 'enr');
	$select->addField('enr', 'id', 'enroll_id');
	$select->addField('enr', 'master_enrollment_id', 'master_enroll_id');
	$select->addField('enr', 'reg_status', 'reg_status');
	$select->condition('enr.user_id', $userId);
	$select->condition('enr.reg_status', 'lrn_crs_reg_rsv');
	$select->condition('enr.browser_session', $browser_session_id);
	$retResult = $select->execute()->fetchAll();
	expDebug::dPrintDBAPI("getPrgWaitlist",$select);
	expDebug::dPrint("Get retResult :".print_r($retResult,true),5);
	foreach ($retResult as $result){
		expDebug::dPrint("for each retResult :".print_r($result,true),5);
		$enroll_id = $result->enroll_id;
		$reg_status = $result->reg_status;
		$master_enroll_id = $result->master_enroll_id;
		//if($result->master_enroll_id == NULL){
		if($reg_status == "lrn_crs_reg_rsv"){
			$reg_status = "lrn_crs_reg_rsc";
		}
		$updateStmt = db_update('slt_enrollment');
		// Set conditions
		$updateStmt->condition('id',$enroll_id,'=');
		$updateStmt->condition('user_id',$userId,'=');
		$updateStmt->condition('browser_session',$browser_session_id,'=');
		//$updateStmt->condition('reg_status','lrn_crs_reg_rsv','=');
		// Set new values of fields
		$updateStmt->fields(array(
				'reg_status' => 'lrn_crs_reg_rsc',
				'updated_on'    => now(),
				'updated_by'    => $userId
		));
		expDebug::dPrintDBAPI(' $updateStmt = ', $updateStmt);
		$updateStmt->execute();
		
		//}else{
		if($master_enroll_id != ''){
			$updateStmt = db_update('slt_master_enrollment');
			// Set conditions
			$updateStmt->condition('id',$master_enroll_id,'=');
			$updateStmt->condition('user_id',$userId,'=');
			$updateStmt->condition('browser_session',$browser_session_id,'=');
			//$updateStmt->condition('reg_status','lrn_crs_reg_rsv','=');
			// Set new values of fields
			$updateStmt->fields(array(
					'overall_status' => 'lrn_tpm_ovr_rsc',
					'updated_on'    => now(),
					'updated_by'    => $userId
			));
			expDebug::dPrintDBAPI(' $updateStmt = ', $updateStmt);
			$updateStmt->execute();
		}
		//}
	}
	// Since the update is recerved cancel no need ot sync solr
	//syncSolrData('Enrollment');
  //syncSolrData('MasterEnrollment');
  }     
  add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_login', 'Logout', 'Logout');

  
  
  setcookie("SPCertificate","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("SPLearnerInfo","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("SPSessionId","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));

  //reset cookies of catalog narrow search filters on user logout - for 45898: Catalog narrow filters are not refining even though user logged out and logged in 
  setcookie("catalog_searchStr","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("catalog_temp_searchStr","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("searchStr_read","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("priceLftCkValue","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("priceRgtCkValue","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("user_selected_page_number","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("user_selected_row_number","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("user_selected_class_id","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("user_selected_url","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("catalog_temp_searchStr","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("catalog_searchStr_passurl","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("widget_searchstr","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("catalogAppliedFilters","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("filters-state","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  // reset cookie of cart timer cookie 
  setcookie("cart_elapsed_time","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  setcookie("admin_cart_elapsed_time","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
  
   // Added this block to destroy drupal session and redirect to the URL specified in exp_sp.ini
   setcookie("saml_request_id","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
   setcookie("admincalendar_pref","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
   setcookie("admincalendar_view","",null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));

   $config=getConfig("exp_sp");
   session_destroy();
   //echo '<pre>'; print_r($_SERVER); echo '</pre>'; exit;
   /* added the embed widget seesion time out redirect work */
   $referer_arr = parse_url($_SERVER['HTTP_REFERER']);
   $url_arr = explode('=',$referer_arr['query']);
   $widget_arr = explode('/',$url_arr[1]);
   $redirect_url = $base_url.$_SERVER['REQUEST_URI'];  
   if($widget_arr[0] == 'widget')
   	drupal_goto($redirect_url);
   	/* added the embed widget seesion time out redirect work */
   drupal_goto($config["logout_redirection_url"]);
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_login_user_logout', $ex);
    expertusErrorThrow($ex);
  } 
}
/**
 * Implements hook_menu().
 */
function exp_sp_login_menu() {
  try{
  // Login pages.
  $items['learning/login'] = array(
    'title' => 'Log in',
    'page callback' => 'empty_value',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  $items['ctools_ajax_sample/ajax/user_login'] = array(
    'title' => t('Sign In'),
    'page callback' => 'render_login_dialog_callback',
    'page arguments' => array(1),
    'access callback' => 'user_is_anonymous',
    'menu_name' => 'user-menu',
    'weight' => 50,
  );
  $items['learning/login-process'] = array(
  		'title' => 'Log in Process',
  		'type' => MENU_CALLBACK,
  		'page callback' => 'user_after_login_process',
  		'access callback' => 'user_access',
  		'access arguments' => array('expertus learner'),
  );
  return $items;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_login_menu', $ex);
    expertusErrorThrow($ex);
  } 
}

/*
 *  Used login callback.
 */
function render_login_dialog_callback($js = NULL) {
    global $theme_key;
  try{
     if($theme_key == 'expertusoneV2') {
        drupal_add_css(drupal_get_path('module', 'exp_sp_login') .'/exp_sp_login_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
     }else{
        drupal_add_css(drupal_get_path('module', 'exp_sp_login') .'/exp_sp_login.css', array('type' => 'file', 'group' => CSS_DEFAULT));
     }
     if (!$js) {
    return drupal_get_form('user_login');
  }

  ctools_include('modal');
  ctools_include('ajax');

  $form_state = array(
    'title' => t('Sign In'),
    'ajax' => TRUE,
  );

  $output = ctools_modal_form_wrapper('user_login', $form_state);
  if (!empty($form_state['executed'])) {
    exp_sp_ajax_sample_login_success();
  }
  $outval = ajax_render($output);
  $clength = strlen(trim($outval));
  header('Content-Type:text/plain; charset=utf-8');
  header("Content-Length:$clength");
  print $outval;
  exit;
  }catch (Exception $ex) {
    watchdog_exception('render_login_dialog_callback', $ex);
    expertusErrorThrow($ex);
  } 
}


/**
 * Post-login processor: should we go to the user account or stay in place?
 */

function exp_sp_ajax_sample_login_success() 
{
 try{ 
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  global $catalog_reg;
  $catalog_reg = 'Class';
  if(module_exists('lang_dropdown')) {
    $param = variable_get('locale_language_negotiation_session_param', 'language');
    if(isset($_SESSION[$param])) {
      unset($_SESSION[$param]);
    }
  }
  $commands = array();
  
  // Suresh modified for oauth integration Start
  include_once  DRUPAL_ROOT ."/apis/core/BaseAPI.php";
  $url=$_SERVER['HTTP_REFERER'];
  $source=BaseAPI::getURLParamValue($url,"source");
  $goto=BaseAPI::getURLParamValue($url,"goto");
  $sitename=BaseAPI::getURLParamValue($url,"sitename");
  $redirect_uri=BaseAPI::getURLParamValue($url,"redirect_uri");
  global $user;
  $drupalUid=$user->uid;
  expDebug::dPrint(' $user = ' . print_r($user, true) , 4);
  
  
  /*if(isset($source) && $source=="external" && isset($goto) && $goto=="")
  {*/
  	//include_once DRUPAL_ROOT .'/apis/expertusone_oauth/lib/expertusone_oauth.php';
	//include_once DRUPAL_ROOT .'/apis/expertusone_oauth/lib/config.php';
	//$connection = new ExpertusONE_OAuth(CONSUMER_KEY, CONSUMER_SECRET);
	 
	/*
	$request_token = $connection->getRequestToken(OAUTH_CALLBACK);
	$token = $request_token['oauth_token'];
	$tokenSec= $request_token['oauth_token_secret'];
	$goto="/apis/core/oauth/authorize?oauth_token=".$token;
	
	$third_party_url= parse_url($url);
  	$baseUrl = $third_party_url["scheme"] . "://" . $third_party_url["host"];
  	$sitename=$baseUrl;*/
	

	
 // }
  if(isset($source) && $source=="external")
  {
  	if($redirect_uri!="")
	  {
		  $_SESSION["redirect_uri"]=$redirect_uri;
		  //echo "values in session ".$_SESSION["redirect_uri"];exit();
	  }
	
 	  $commands[] = ctools_ajax_command_redirect('oauth/grant_access/'.$sitename.'/source/'.$source.'/userid/'.$drupalUid.'/goto/'.$goto);
  	
  }
  else
  {

	// #6034 - Validating the account page redirect
  	$httpReferer = explode("&",$_SERVER['HTTP_REFERER']);
  	expDebug::dPrint("test area2.".arg(0)." arg1 ".arg(1) . 'httprefer--' , 4);
  	expDebug::dPrint($httpReferer , 4);
  	$userId         = getIdOfLoggedInUser();
  	$drupal_user_id = getDrupalIdOfUser($userId);
  	$user_info      = user_load($drupal_user_id);
  	$is_admin_perm  = user_access('Administration Perm', $user_info);
  	$_SESSION['Pref_Language'] = userLanguageSelect($userId); // Issue Fix - 54665
  	
  	if(in_array('destination=learning/my-account',$httpReferer)) {
  		expDebug::dPrint("test area2.");
      add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_login', 'Login', 'Login after clicking on Account link in welcome email');
  		$commands[] = ctools_ajax_command_redirect('learning/my-account');
  		
  	} else {
  		expDebug::dPrint("test area3.".arg(0)."/".arg(1) , 4);
  		$httpRefererQryStr = explode("q=",$_SERVER['HTTP_REFERER']);  		  		
  		//drupal_set_message(t('MSG009'));
  		// Allow user to login and process user backgroud task with logic-process call
		$_SESSION['syncUpdate'] = true;
		$_SESSION['force_password_change'] = $user->force_password_change;
		$isSSO_redirect=isSSOauthenticated();
  		//Mandatory class and program auto_registration end
  		//after login auto register or add to cart related work start
		if(isset($_COOKIE['user_selected_url']) && !empty($_COOKIE['user_selected_url'])){
			add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_login', 'Login', 'Login using click on register button');
  			if($isSSO_redirect) {
  				header("location:?q=" . $_COOKIE['user_selected_url']);
  			} else {
  				$commands[] = ctools_ajax_command_redirect($_COOKIE['user_selected_url']);
  			}
  		}		
		else if(in_array('learning/register',$httpRefererQryStr) && $_SESSION['newusersaved']=='yes') {
		    unset($_SESSION['newusersaved']);
   			drupal_set_message(t('MSG009'));
        add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_login', 'Login', 'Login via LMS after Register');
  			$commands[] = ctools_ajax_command_redirect('learning/register/success');
  		} 
  		else if(in_array('destination=learning/myteam-search',$httpReferer)) {
  		  add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_login', 'Login', 'Login via LMS');
  		  $commands[] = ctools_ajax_command_redirect('learning/myteam-search');
  		} 
  		elseif(in_array('widget/register',$httpRefererQryStr)){
  			/* added the embed widget registration redirect work */
  			add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_login', 'Login', 'Login via embed widget');
  			if(isset($_SESSION['widget']['widget_catalog_url'])){
  				$commands[] = ctools_ajax_command_redirect($_SESSION['widget']['widget_catalog_url']);
  				unset($_SESSION['widget']['widget_catalog_url']);
  			}
  			/* added the embed widget registration redirect work */
  		}
  		else {
  			if(arg(0)=="user" && arg(1)=="login")  //if login via sso
  			{
  				if($_SESSION['newusersaved']=='yes')
  				{
  				 	unset($_SESSION['newusersaved']);
            add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_login', 'Login', 'Login via SSO - new user');
  				 	header("location:?q=learning/catalog-search");
  				}
  				else {
            add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_login', 'Login', 'Login via SSO - exisiting user');
  					if(checkIfEnrolled($userId) > 0){
	      				header("location:?q=learning/enrollment-search");
	    			}else{
	    				header("location:?q=learning/catalog-search");
	    			}
  					
  				}
  				exit();
  			}
  			else
  			{
          add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_login', 'Login', 'Login via LMS');
          /* Start - Added code for sales force integration, which is taken from ININ */
          
          // To show the My Enrollments widget in Salesforce.
          // Salesforce module will load the "My Learning Widget" using block_load.
          // We simply return here. This ensures that if any "Mandator/Compliance" course is assigned,
          // the user is automatically registered.
          global $widgetLogin;
          if(!empty($widgetLogin) && $widgetLogin==='login_for_widget'){
            
           // Widget rendering. Simply return
           // Reset the global variable to empty
           $widgetLogin=NULL;
           return;
          }
          
          /* End - Added code for sales force integration, which is taken from ININ */
		  
		  $relayURL=getRelayURL();
		  expDebug::dPrint(" Is SSO Authenticated ------------------> ".$isSSO_redirect,4);
		  expDebug::dPrint(" Relay URL ------------------> ".$relayURL,4);
		  $relayURL = rawurldecode($relayURL);
		  if( $isSSO_redirect && !empty($relayURL)){
		  	// check to remove any language attribute is added in the url eg: https://refactor.expertusone.com/?language=zh-hans
		  	$relayURL = html_entity_decode ($relayURL);
		  	if(preg_match("/language=/i", $relayURL)){
		  		$relayURL = substr($relayURL,0,strpos($relayURL,'language')-1);
		  	}
		  	
		  	if(preg_match("/unauthorised/i", $relayURL)){
		  		$relayURL = explode("destination=",$relayURL);
		  		$repRelayUrl = str_replace('%2F', '/', $relayURL[1]);
		  		$relayURL = $base_url."/?q=".$repRelayUrl;
		  	}else{
		  		// #56618: Deeplink URL is not working via SSO login.
		  		expDebug::dPrint('destination value:: before ' . $relayURL, 4);
		  		if(preg_match("/destination=/i", $relayURL)){
		  			if(strpos($relayURL, "/&destination=") !== FALSE) {
		  				$relayURL = str_replace("/&destination=", "", $relayURL);
		  			} else {
		  				$relayURL = str_replace("&destination=", "", $relayURL);
		  			}
		  			
		  			expDebug::dPrint('destination value::' . $relayURL, 4);
		  		}
		  	}
		  	
		  	if(isset($_COOKIE['SurUrlName']))
		  		$relayURL = str_replace("destination", "q", $relayURL);
		  	
		  	expDebug::dPrint('$relayURL after decode '.$relayURL, 4);
		  	
				header("location:".$relayURL);
			
		  }else
		  {
		  	  $httpRefererQryStr[1] = rawurldecode($httpRefererQryStr[1]);
    		  if(preg_match("/catalog-search/i", $httpRefererQryStr[1]) || preg_match("/learning-plan-details/i", $httpRefererQryStr[1]) || preg_match("/class-details/i", $httpRefererQryStr[1]) || preg_match("/course-details/i", $httpRefererQryStr[1])
    		  		 || preg_match("/unauthorised/i", $httpRefererQryStr[1])) {
    		  	if(preg_match("/unauthorised/i", $httpRefererQryStr[1])){
    		  		$qryStr = explode("destination=",$httpRefererQryStr[1]);
    		  		$httpRefererQryStr[1] = $qryStr[1];
    		  		$httpRefererQryStr[1] = str_replace('%2F', '/', $httpRefererQryStr[1]);
    		  	}else{
    		  		if(preg_match("/destination=/i", $httpRefererQryStr[1])){
    		  			$httpRefererQryStr[1] = str_replace("&destination=", "", $httpRefererQryStr[1]);
    		  		}
    		  		$httpRefererQryStr[1] = str_replace('%20', ' ', $httpRefererQryStr[1]);
    		  	}
    			  $commands[] = ctools_ajax_command_redirect($httpRefererQryStr[1]);
    			}
    			else{
    			   #0014648 - When admin logs in system his landing page should be administer
    			   if($is_admin_perm == 1) {
						 if($isSSO_redirect)
						 {
							header("location:?q=administration");
							
						 }else
						 {
						 	if(isset($_COOKIE['SurUrlName'])) {
						 		$commands[] = ctools_ajax_command_redirect($_COOKIE['Surpath']);
						 	} else {
								$commands[] = ctools_ajax_command_redirect('administration');
						 	}
						 }
    			     
    			   } else if(checkIfEnrolled($userId) > 0 || $_COOKIE['isclickmyenroll']){	
						if( $isSSO_redirect)
						{
							header("location:?q=learning/enrollment-search");
						
						}else
						{
							if(isset($_COOKIE['SurUrlName'])) {
								$commands[] = ctools_ajax_command_redirect($_COOKIE['Surpath']);
							} else {
								$commands[] = ctools_ajax_command_redirect('learning/enrollment-search');
							}
							
						}
	    			}else{
					
						if( $isSSO_redirect)
						{
							header("location:?q=learning/catalog-search");
						
						}else
						{
							if(isset($_COOKIE['SurUrlName'])) {
								$commands[] = ctools_ajax_command_redirect($_COOKIE['Surpath']);
							} else {
								$commands[] = ctools_ajax_command_redirect('learning/catalog-search');
							}
	    				}
    			}
  			}
		}
  		}
  	}
  	}
  	
  }
  // Suresh modified End
  
  // Added by Vincent on 9th Mar, 2015 - 0046489: Unable to login through sso using embedable widget -- Starts
  if( isset($_POST['SAMLResponse']) && sizeOf($commands[0])>=1 && isset($commands[0]['url']) 
  		&& stripos($commands[0]['url'],'/catalog-search')!==false ){
  	$reurl = explode('q=',$commands[0]['url']);
  	header("location:?q=".$reurl[1]);
  }
  // Added by Vincent on 9th Mar, 2015 - 0046489: Unable to login through sso using embedable widget -- End
  
  $catalog_reg = getConfigValue('registration_level');
  $outval = ajax_render($commands);
  $clength = strlen(trim($outval));
  //To sync solr
	syncSolrData('User','Login');
	//syncSolrData('Enrollment');
  ob_clean();
  header('Content-Type:text/plain; charset=utf-8');
  header("Content-Length:$clength");
  print $outval;
  exit;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_ajax_sample_login_success', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Verifies a course's complete by date
 */
function chkCrsCompleteByDate($crsId) {
	try {
		$selStmt = db_select('slt_course_template', 'crs');
		$selStmt->addField('crs', 'id', 'id');
		$selStmt->condition('crs.id', $crsId);
		/*$selStmt->condition(db_or()->isNull('crs.complete_date')
                               ->condition('crs.complete_date', NOW(), '>'));*/
		$selStmt->where('(crs.complete_date IS NULL ) OR (crs.complete_date >= CURDATE())');
		expDebug::dPrintDBAPI('$selStmt', $selStmt);
		$result = $selStmt->execute()->fetchField();
		expDebug::dPrint('$result = ' . print_r($result, true), 5);
		if (empty($result)) {
			return false;
		}
		
		return true;
  }
  catch (Exception $ex) {
    watchdog_exception('chkCrsCompleteByDate', $ex);
  	if (isset($_GET['cron_key'])) {
			expertusLogError($ex);
			throw new Exception($ex);
		}
    expertusErrorThrow($ex);
  }
}


/**
 * Implements hook_block_info().
 */
function exp_sp_login_block_info() {
  try{
  global $user;
  $blocks['user_login'] = array(
    'info' => t('User login page'),
  	'cache' => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'learning/login'
    );
    return $blocks;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_login_block_info', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Implements hook_block_view().
 */
function exp_sp_login_block_view($delta = '') {
  try{
  global $user;

  $block = array();

  switch ($delta) {
    case 'user_login':
      // For usability's sake, avoid showing two login forms on one page.
      if (!$user->uid && !(arg(0) == 'user' && !is_numeric(arg(1)))) {

        $block['subject'] = t('User login');
        $block['content'] = drupal_get_form('user_login_page_block');
      }
      return $block;
  }
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_login_block_view', $ex);
    expertusErrorThrow($ex);
  } 
}

function user_login_page_block($form) {
  try{
  $form['#action'] = url($_GET['q'], array('query' => drupal_get_destination()));
  $form['#id'] = 'user-login-form';
  $form['#validate'] = user_login_default_validators();
  $form['#submit'][] = 'user_login_submit';
  $form['name'] = array('#type' => 'textfield',
    '#title' => t('LBL054').':',
    '#maxlength' => USERNAME_MAX_LENGTH,
    '#size' => 15,
    '#attributes' => array('tabindex' => '1'),
    '#required' => TRUE,
  );
  $form['pass'] = array('#type' => 'password',
    '#title' => t('LBL060').':',
    '#maxlength' => 60,
    '#size' => 15,
    '#attributes' => array('tabindex' => '2'),
    '#required' => TRUE,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit',
  	'#attributes' => array('tabindex' => '3'),
    '#value' => t('Sign In'),
  );
  $items = array();
  if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
    //$items[] = l(t('Create new account'), 'user/register', array('attributes' => array('title' => t('Create a new user account.'))));
  }
  $items[] = l(t('Request new password'), 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.'))));
  $form['links'] = array('#markup' => theme('item_list', array('items' => $items)));
  return $form;
  }catch (Exception $ex) {
    watchdog_exception('user_login_page_block', $ex);
    expertusErrorThrow($ex);
  } 
}
/**
 * Submit handler for the login form. Redirects the user to a page.
 *
 * The user is redirected to the My Account page. Setting the destination in
 * the query string (as done by the user login block) overrides the redirect.
 */
function smart_connect_user_login_submit($form, &$form_state) {
  try{
  expDebug::dPrint("inside  smart_connect_user_login_submit");
  global $user;

  if ($user->uid) {
    $form_state['redirect'] = 'learning/enrollment-search';
    expDebug::dPrint("Login redirectttttt smart_connect_user_login_submit");

  }
  }catch (Exception $ex) {
    watchdog_exception('smart_connect_user_login_submit', $ex);
    expertusErrorThrow($ex);
  } 
}

function authenticateUser($edit,$account) {
  global $user;
  try {
  	
  	if(module_exists('password_policy')) {
  		$roles = is_array($account->roles) ? array_keys($account->roles) : array();
  		$policy = _password_policy_load_active_policy($roles);
  		if ($policy && ((!empty($account->uid) && $account->uid > 1) || variable_get('password_policy_admin', 0)) && !empty($edit["values"]["name"])) {
  			exp_sp_login_expiry_check($edit, $account);
  		}
  	}
	$config=getConfig("exp_sp");
    $url=$config["service_url"]."?actionkey=".$config["actionkey"];
    expDebug::dPrint("url1 testttt ".$url , 4);
    expDebug::dPrint($edit , 4);
    $username;
    $pwd;
    if(!empty($edit)){
	    $username = $edit["values"]["name"];
	    $pwd = $edit["values"]["pass"];
    }else{
    	$username = $account->name;
    	$pwd = '';
    }
	expDebug::dPrint("username===...".$username , 4);
    $requestXML = getRequestXML_authenticate($username, $pwd,120);
    expDebug::dPrint($requestXML , 4);
    $xmlstr = SCSoapClient::connect(null,$url,$requestXML,'','');
    expDebug::dPrint($xmlstr , 4);
    
    if($xmlstr && strlen($xmlstr)>0)
     {
     $dom = new DOMDocument('1.0','UTF-8');
     $dom->loadXML(trim($xmlstr));
     $node1=$dom->getElementsByTagName("faultcode");
     expDebug::dPrint("Value1 : ".print_r($node1,true),4);
     /*foreach($node1 as $nodes)
     {
     expDebug::dPrint("inside loop>>>>>>>>>>>>>>>>");
     $tagName=$nodes->childNodes->item(0)->nodeName;
     $appName=$nodes->getAttribute('name');
     if($appName=="SmartPortalLMS" && $tagName=="Error")
     {
     unload_user('Invalid username or password.');
     }
     }
     }else {
     unload_user('SmartConnect not responding.' );
     }*/
     if($node1->length > 0 ){
	      foreach($node1 as $nodes){
		     $tagName=$nodes->childNodes->item(0)->nodeValue;
		     throw new SoapFault("SPLMS",$tagName);
	      }
     	//unload_user($msg);
     }
     }
    //$form_state['redirect'] = 'learning/enrollment-search';
    $session_name 	= session_name();
    $sid 			= $_COOKIE[$session_name];
    setcookie("SPSessionId",session_id(),null,"/","",(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""),(isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"]=='on'?TRUE:""));
    expDebug::dPrint(arg(0)." ".arg(1).".....uid ...".$user->uid , 4);
    if ($user->uid) {
    	getIdOfLoggedInUser();
    	if(arg(0) == 'user' && arg(1) == 'login'){
    		exp_sp_ajax_sample_login_success();
    	}
    	if(arg(0) != 'user' && arg(1) != 'reset'){
    		exp_sp_ajax_sample_login_success();
    	}
    //  drupal_goto('learning/enrollment-search');
    }

  } catch(SoapFault $exception) {
    expDebug::dPrint("Login Error -- ".print_r($exception,true),1);
    $msg='SmartConnect server is down.';
    form_set_error($exception->getMessage());
    unload_user($msg);
  }
	catch(Exception $exception) {
    expDebug::dPrint("Login Error -- ".print_r($exception,true),1);
    $msg='SmartConnect server is down.';
    form_set_error($exception->getMessage());
    unload_user($msg);
  }

}
function getRequestXML_authenticate($username, $pwd,$valid) {
  try{
  expDebug::dPrint("inside getRequestXML_authenticate");
  $xml = '<?xml version="1.0" encoding="UTF-8"?>';
  $xml .= '<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">';
  $xml .= '<SOAP-ENV:Body>';
  $xml .= '<Authenticate>';
  $xml .= '<Username>'.htmlspecialchars($username).'</Username>';
  $xml .= '<Password>'.htmlspecialchars($pwd).'</Password>';
  $xml .= '<Locale>en_US</Locale>';
  $xml .= '<ValidityInMin>'.$valid.'</ValidityInMin>';
  //$xml .= '<isGlobal>true</isGlobal>';
  $xml .= '</Authenticate>';
  $xml .= '</SOAP-ENV:Body>';
  $xml .= '</SOAP-ENV:Envelope>';

  return $xml;
  }catch (Exception $ex) {
    watchdog_exception('getRequestXML_authenticate', $ex);
    expertusErrorThrow($ex);
  }
}
function unload_user($msg) {
  try{
  global $user;
  session_destroy();
  $user = drupal_anonymous_user();
  if (!$user->uid)
  {
    form_set_error('name', t($msg));
  }
  }catch (Exception $ex) {
    watchdog_exception('unload_user', $ex);
    expertusErrorThrow($ex);
  }
}

function isSSOauthenticated(){
	try{
	expDebug::dPrint(" In SSO Authenticated....",4);
	global $ssoauthenticated;
			
	if(module_exists('saml') || module_exists('adfs')){
		if(isset($ssoauthenticated) &&($ssoauthenticated === 'saml' || $ssoauthenticated==='adfs')){
			expDebug::dPrint(" In SSO Authenticated.... returning -> TRUE",4);
			$ssoauthenticated = NULL;
			return  TRUE;
		}
	}
	expDebug::dPrint(" In SSO Authenticated.... returning FALSE",4);
	return FALSE;
	}catch (Exception $ex) {
		watchdog_exception('isSSOauthenticated', $ex);
		expertusErrorThrow($ex);
	}
}

function getRelayURL(){
try{
	
	if(module_exists('saml') || module_exists('adfs')){
	
		global $relayState;
		
		if(isset($relayState)){
		
			return urldecode($relayState);
		}
	
	}
	return NULL;
	
	}catch (Exception $ex) {
		watchdog_exception('getRelayURL', $ex);
		expertusErrorThrow($ex);
	}
}
function exp_sp_login_expiry_check($edit, $account) {
	try{
		$roles = is_array($account->roles) ? array_keys($account->roles) : array();

		$policy = _password_policy_load_active_policy($roles);
		if ($policy && ((!empty($account->uid) && $account->uid > 1) || variable_get('password_policy_admin', 0)) && (!empty($edit['name']) || !empty($edit["values"]["name"])) ){
			// Calculate expiration and warning times.
			$expiration = $policy['expiration'];
			$warning = max(explode(',', $policy['warning']));
			$expiration_seconds = $expiration*60*60*24;
			$warning_seconds = $warning*60*60*24;
			// The policy was enabled
			$policy_start = $policy['created'];
			if (variable_get('password_policy_begin', 0) == 1) {
				$policy_start -= $expiration_seconds;
			}
			if (!empty($expiration)) {
				$result = db_query_range("SELECT * FROM {password_policy_history} WHERE uid = :uid ORDER BY created DESC", 0, 1, array(':uid'=> $account->uid))->fetchObject();
				if ($row = $result) {
					$last_change = $row->created;
				}
				else {
					// A user has not changed his pwd after this module had been enabled.
					$last_change = $account->created;
				}
				$time = time();
				if ($time > max($policy_start, $last_change) + $expiration_seconds) {
					// Redirect user and let password force change handle.
					db_update('password_policy_force_change')
					->fields(array(
							'force_change' => 1,
					))
					->condition('uid', $account->uid)
					->execute();

				}
			}
		}
	}	catch(Exception $exception) {
		expDebug::dPrint("Login Error -- ".print_r($exception,true),1);
	}
}


function user_after_login_process() {
	try {
		global $user, $catalog_reg;
		$catalog_reg = 'Class';
		include_once(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user.inc');
		$userId			= $_POST['learner_id']; // learner id
		
		expDebug::dPrint('$userId values in bg process: ' . $userId, 4);
		expDebug::dPrint('saml ses values in bg process: ' . var_export($_SESSION['saml_auth'], 1), 4);
		
		
		// update mandatory/compliance enrollments
		/*
		if ( $_SESSION['saml_auth'] == 1){
		
			expDebug::dPrint('saml user update mandatory/compliance part begins', 4);
			$upd_user_id = $userId;
			$results = getGrpEntityIdListByUser($upd_user_id,'cre_sys_inv_man');
			$comp_status = array('lrn_crs_cmp_cmp','lrn_crs_cmp_inc','lrn_crs_cmp_exp');
			$overlAllStatus = array('lrn_tpm_ovr_cmp','lrn_tpm_ovr_inc','lrn_tpm_ovr_exp');
			$created_by = array($upd_user_id,2);
			$entityArr = array();
			foreach($results as $arr){
				if($arr->entity_type == 'cre_sys_obt_cls')
					$entityArr['class'][] = $arr->entity_id;
				if($arr->entity_type == 'cre_sys_obt_cur' || $arr->entity_type == 'cre_sys_obt_cur' || $arr->entity_type == 'cre_sys_obt_cur')
					$entityArr['tp'][] = $arr->entity_id;
			}
       
			db_query("update slt_enrollment set mandatory=null,updated_on=now() where user_id=:user_id AND created_by IN (:created_by) AND comp_status NOT IN (:comp_status) AND master_enrollment_id is null", array(":user_id"=>$upd_user_id,":comp_status"=>$comp_status,":created_by"=>$created_by));
			db_query("update slt_master_enrollment set mandatory=null,updated_on=now() where user_id=:user_id AND created_by IN (:created_by) AND overall_status NOT IN (:overall_status)", array(":user_id"=>$upd_user_id,":overall_status"=>$overlAllStatus,":created_by"=>$created_by));
			if(count($entityArr['class']) > 0)
				db_query("update slt_enrollment set mandatory='Y',updated_on=now() where user_id IN (:user_id) AND class_id IN (:class_id) AND comp_status NOT IN (:comp_status) AND master_enrollment_id is null", array(":user_id"=>$upd_user_id, ":class_id"=>$entityArr['class'],":comp_status"=>$comp_status));
			if(count($entityArr['tp']) > 0)
				db_query("update slt_master_enrollment set mandatory='1',updated_on=now() where user_id IN (:user_id) AND program_id IN (:program_id) AND overall_status NOT IN (:overall_status)", array(":user_id"=>$upd_user_id, ":program_id"=>$entityArr['tp'],":overall_status"=>$overlAllStatus));
					
			//Complince update 
			$Complainceresult = getGrpEntityIdListByUser($upd_user_id,'cre_sys_inv_opt');	
			$entityArr1 = array();					
			foreach($Complainceresult as $arr){			
				$is_compliance = checkCourseClassCompliance($arr->entity_id,$arr->entity_type);
				if($is_compliance[0]->is_compliance == 1){
					if($arr->entity_type == 'cre_sys_obt_cls')
						$entityArr1['class'][] = $arr->entity_id;
					}
				}				
			$complianceAccess = compliance_access();			
			foreach ($complianceAccess as $class_id){
				$class_ids[] = $class_id->class_id;
			}
			// Update all enrollments except compliance classes
			$comUpdateQuery = "update slt_enrollment set is_compliance=null,updated_on=now() where user_id=:user_id AND comp_status NOT IN (:comp_status) AND master_enrollment_id is null";
			if (!empty($class_ids)) {
				$comUpdateQuery .= " AND class_id NOT IN (:class_id)";
				expDebug::dPrint('com1' . $comUpdateQuery);
				db_query($comUpdateQuery, array(":user_id"=>$upd_user_id,":comp_status"=>$comp_status, ":class_id"=>$class_ids,));
			} else {
				expDebug::dPrint('com2' . $comUpdateQuery);
				db_query($comUpdateQuery, array(":user_id"=>$upd_user_id,":comp_status"=>$comp_status));
			}
			
			// Update all enrollments to  compliance classes
			if(count($entityArr1['class']) > 0){	
			  db_query("update slt_enrollment set is_compliance='1',updated_on=now() where user_id IN (:user_id) AND class_id IN (:class_id) AND comp_status NOT IN (:comp_status) AND master_enrollment_id is null", array(":user_id"=>$upd_user_id, ":class_id"=>$entityArr1['class'],":comp_status"=>$comp_status));
			}
		
		}
		 */
		
		// Reigstration workflow
		//Mandatory class and program auto_registration start
		if(variable_get('exp_sp_mandatory_auto_registration_allowed', FALSE)  && $userId  ){ //
		
			$solrSource = getConfigValue('solr_search');
			if($solrSource == 1){
				require_once $_SERVER['DOCUMENT_ROOT'].'/sites/all/modules/core/exp_sp_solr/exp_sp_solr_catalog.php';
				try{
					expDebug::dPrint ( "Solr Search Testing", 1 );
					$solrObj = new CatalogSolrSearch ();
					$search_results = $solrObj->getSolrSearchResult ( 'login' );
					$resultSet = $search_results ['records'];
					expDebug::dPrint ( 'Result set from solrlogin file' . print_r ( $resultSet, true ), 5 );
					$count = $search_results ['recCount'];
					expDebug::dPrint ( 'Result set count' . print_r ( $count, true ), 5 );
				}catch(Exception $e){
					expDebug::dPrint("Error in Solr Search -- ".print_r($e->getMessage(),true),1);
				}
				expDebug::dPrint("Solr search result - Final ".print_r($qry_search_results,1),4);
			}
			else {
				// Include the search file.
				module_load_include('inc', 'exp_sp_lnrsearch', 'exp_sp_lnrsearch');
				$lnrSrch = new LnrSearchCatalog();
				//$lnrSrch -> searchResultsQry();
				//$lnrSrch->select = $lnrSrch->catalogSearchQuery();
		
				$lnrSrch->catalogSearchQueryClass('login','auto_register');
				if(module_exists('exp_sp_commerce')){
					$lnrSrch->searchPriceClass('$0-$0');
		
				}
				//$lnrSrch->searchDate('', '');
				$lnrSrch->setTrainingType('cre_sys_inv_com|cre_sys_inv_man',true);
				$classQuery=$lnrSrch->select;
				 
				$lnrSrch->catalogSearchQueryTP();
				if(module_exists('exp_sp_commerce')){
					$lnrSrch->searchPriceTP('$0-$0');
				}
				//$lnrSrch->searchDate('', '');
				$lnrSrch->setTrainingTypeTP('cre_sys_inv_man',true);
				$TPQuery=$lnrSrch->select;
		
				$classQuery->union($TPQuery,'UNION ALL');
				$resultSet = $classQuery->execute()->fetchAll();
				expDebug::dPrintDBAPI('$resultSet',$classQuery);
			}
			expDebug::dPrint('auto reg resultset '. print_r($resultSet,true) , 4);
			foreach ($resultSet as $result) {
				$object_type  	= $result->object_type;
				$crs_id	    	= ($result->crs_id)? $result->crs_id : $result->course_id;
				$cls_id 		= $result->cls_id;
				$node_id 		= $result->node_id;
				$mro_id 		= $result->mro_id;
				$is_compliance  = $result->is_compliance;
				$published_on = $result->published_on;
				if (($mro_id == 'cre_sys_inv_man' || ($is_compliance == 1 && chkCrsCompleteByDate($crs_id))) && $userId !=1) {
					if($object_type == 'Class'){
						$maxCount = getIfSingleClass($crs_id,$userId,$is_compliance);
						if($maxCount[0]->maxcnt == 1 && $maxCount[0]->cmpcnt == 0) {
							$exmpId = getRegisteredEnrollmentExmeptedorNot('class',$userId,$crs_id,$cls_id);
							$getRegister = getRegisteredOrNot($crs_id,$cls_id,$userId,'','','login');
							if(empty($getRegister->enrolled_id)){
								$delivery_type_code = $result->delivery_type_code;
								$available_seats = 1;
								if($delivery_type_code == 'lrn_cls_dty_ilt' || $delivery_type_code == 'lrn_cls_dty_vcl'){
									$available_seats = getAvailableSeats($cls_id);
								}
								$registerEndDateCheck = registerEndDateCheck($crs_id,$cls_id);
								$preRequisite = checkCatalogPrerequisite($crs_id,'cre_sys_obt_crs',$userId); //if there is pre-requestie set for this course it should not register directly.
								expDebug::dPrint('class register call.' . $available_seats .' end date ' .$registerEndDateCheck . 'enroll' .$getRegister->enrolled_id , 4);
								if(count($preRequisite) == 0) {
									if($available_seats >= 1 && $registerEndDateCheck == 0){
										expDebug::dPrint("class register call.");
										$waitlist = false;
										$isAdminSide = 'N';
										if(empty($exmpId))
											register_user_to_course_class($userId, $crs_id, $cls_id,$waitlist,$isAdminSide,false);
									}
								}else{
									$published = explode(" ",$published_on);
									$getVal = getFrequencyDataValue('man_comp_multiple_class_register',$published[0]);
									if($getVal == 1)	{
										insertNotification("MultipleComplianceClassNotification", $crs_id, $cls_id, $userId, $updateUserId);
									}
								}
							}else{
								if(!empty($crs_id)){
									if(!empty($exmpId)){
										$is_compliance = null;
									}else{
										$is_compliance  = $result->is_compliance;
									}
								}
								/*#	0032377 : compliance class update when jobrole or ORG or UserType change*/
								/*
								$updateStmt = db_update('slt_enrollment');
								// Set conditions
								$updateStmt->condition('id',$getRegister->enrolled_id,'=');
								$updateStmt->condition('comp_status', array('lrn_crs_cmp_inc'),'NOT IN');
								$updateStmt->condition('reg_status', array('lrn_crs_reg_can'),'NOT IN');
									
								// Set new values of fields
								$updateStmt->fields(array(
										'is_compliance' => $is_compliance,
										'updated_on'    => now(),
										'updated_by'    => $userId
								));
								expDebug::dPrintDBAPI(' $updateStmt = ', $updateStmt);
								$updateStmt->execute();
								*/
							}
						}/*else{
						if($is_compliance == 1 || $mro_id == 'cre_sys_inv_man'){
						if($is_compliance == 1){$label = 'MultipleComplianceClassNotification';}else{$label='MultipleMandatoryClassNotification';}
						$getRegister = getRegisteredOrNot($crs_id,$cls_id,$userId);
						if(empty($getRegister->enrolled_id)){
						$published = explode(" ",$published_on);
						$getVal = getFrequencyDataValue('man_comp_multiple_class_register',$published[0]);
						expDebug::dPrint("Remainder to Register Mutiple Class Noification ".print_r($getVal,true),4);
						if($getVal == 1)	{
						insertNotification($label, $crs_id, $cls_id, $userId, $updateUserId);
						}
						}
						}
						} */
		
						} else {
						$resultsMasterEnroll = getObjectRegisteredOrNot($cls_id,$userId);
						if(empty($resultsMasterEnroll->master_enrolled_id)){
						$prm_available_seats = getObjectAvailableSeats($cls_id,$userId);
						if(($prm_available_seats > 0 || $prm_available_seats == -1)){
						$maxClassCnt = getCourseClassCountForLP($cls_id,$userId,'N');
						$preRequisite = checkCatalogPrerequisite($cls_id,'cre_sys_obt_trp'); //if there is pre-requestie set for this Training Plan it should not register directly.
						if($maxClassCnt[0]->cnt == 1 && count($preRequisite) == 0  ) {
						$classId = $maxClassCnt[0]->classids;
						$exmpId = getRegisteredEnrollmentExmeptedorNot('tp',$userId,$cls_id);
							if(empty($exmpId))
								register_user_to_training_plan($userId,$cls_id, "$classId",false,'N',false);
						}/*else{
						$prm_id 		= $result->cls_id;
							$published_on = $result->published_on;
							$published = explode(" ",$published_on);
							$getVal = getFrequencyDataValue('mandatory_tp_multiple_register',$published[0]);
							if($getVal == 1)	{
							insertNotification("MultipleMantadoryTPNotification", $prm_id, null, $userId, $updateUserId);
							}
							}*/
							}
						}
					}
				}
			}
		}
		//syncSolrData('MasterEnrollment');
		
		// Data population - report user entity
		// Commented out for stopping flat table population as it takes much time in production environments
		/* if (user_access('View Report Perm') & $user->uid > 0)
			createUserEntityFlatTable($userId, 1); // flat table sync up on every one hour
		  */
	} catch(Exception $ex){
		watchdog_exception('user_after_login_process', $ex);
		expertusErrorThrow($ex);
	}
}

function invokeUserUpdateBackgroundProcess($userId) { // $form, $form_state, $updateUser, $action, 
	try {
		global $base_url, $user;
		expDebug::dPrint('invokeUserUpdateBackgroundProcess user' . var_export($user, 1), 4);
		
		$headers[] = 'Accept: application/json, text/plain, */*';
		$headers[] = 'Connection: Keep-Alive';
		$headers[] = 'Content-type: application/x-www-form-urlencoded;charset=UTF-8';
	
		$url 	= $base_url. '/?q=learning/login-process';
		$useragent = $_SERVER['HTTP_USER_AGENT'];
		$data 	= array(
				'learner_id'		=> $userId,
		);
		$cookie = array();
		foreach( $_COOKIE as $key => $value ) {
 			$cookie[] = "{$key}={$value}";
		};
 		$cookie = implode('; ', $cookie);
		$headers[]	= 'Cookie:' . $cookie;
		
		$curl	= curl_init();
		$curl_options = array(
				//CURLOPT_COOKIEJAR => NULL,
				//CURLOPT_URL => $url,
				CURLOPT_FOLLOWLOCATION => FALSE,
				CURLOPT_RETURNTRANSFER => FALSE,
				CURLOPT_SSL_VERIFYPEER => FALSE, // Required to make the tests run on https.
				CURLOPT_SSL_VERIFYHOST => FALSE, // Required to make the tests run on https.
				CURLOPT_HEADER => FALSE,
				CURLOPT_COOKIESESSION=> true,
				CURLOPT_USERAGENT => $useragent,
				CURLOPT_REFERER => $base_url,
				//CURLOPT_BINARYTRANSFER => TRUE,
				CURLOPT_TIMEOUT => 1,
				CURLOPT_CONNECTTIMEOUT => 1,
				CURLOPT_HTTPHEADER => $headers,
				// CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0',
				CURLOPT_HEADER => 0,
				CURLOPT_FORBID_REUSE => TRUE,
				//CURLOPT_DNS_CACHE_TIMEOUT => 10,
				CURLOPT_FRESH_CONNECT => TRUE
		);
		$param = http_build_query($data);
		curl_setopt_array($curl, $curl_options);
		curl_setopt($curl, CURLOPT_POSTFIELDS, $param); // Set post param
		curl_setopt($curl, CURLOPT_URL, $url);
		$result = curl_exec($curl);
		curl_close($curl);
	} catch(Exeception $ex){
		watchdog_exception('invokeUserUpdateBackgroundProcess', $ex);
		expertusErrorThrow($ex);
	}
}
?>