<?php

function exp_sp_refer_course_init(){
	try {
	 global $user;
	 drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/qtippopup.js',$js_module_optional);
	if(stripos(request_uri(),'learning/catalog')!==false || stripos(request_uri(),'learning/enrollment-search')!==false || stripos(request_uri(),'learning/class-details')!==false || stripos(request_uri(),'learning/course-details')!==false || stripos(request_uri(),'learning/learning-plan-details')!==false){
	  drupal_add_js(drupal_get_path('module','exp_sp_refer_course').'/exp_sp_refer_course.js', array('type' => 'file', 'group' => JS_DEFAULT));
	  drupal_add_js(drupal_get_path('module','exp_sp_refer_course').'/exp_sp_request_class.js', array('type' => 'file', 'group' => JS_DEFAULT));
	  include_once(drupal_get_path('module', 'exp_sp_lnrsearch') .'/exp_sp_lnrsearch.inc');
	  drupal_add_css(drupal_get_path('module', 'exp_sp_refer_course') .'/exp_sp_refer_course.css');
	  drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/qtippopup.js',$js_module_optional);
	}
	// Check Learning Admin Perm access for embed menu
	if (user_access('Learning Admin Perm', $user)){
	 $setting = array('refer_course' => array('admin_access' => TRUE));
	} else {
	 $setting = array('refer_course' => array('admin_access' => FALSE));
	}
	drupal_add_js($setting, 'setting');
	if($_SESSION['share_details']){
	 drupal_add_js(array('refer_course' => array('share_details' => $_SESSION['share_details'])), 'setting');
	 setcookie('widget_searchstr', true);
	 unset($_SESSION['share_details']);
	}
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_refer_course_init', $ex);
  	expertusErrorThrow($ex);
  }
}
/*
 * Implementation of hook_menu()
 */
function exp_sp_refer_course_menu(){
	try{
  require_once('exp_sp_refer_course.inc');
  
  $items = array();
  			
  $items['ajax/refer-course/%/%'] = array(
    'title' => 'Refer Class',
    'page callback' => 'getCourseClassDetail',
    'page arguments' => array(2,3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('expertus learner'),
    'file' => 'exp_sp_refer_course.inc'
  );
  
  $items['ajax/refer-course-submit/%/%/%/%/%/%'] = array(
    'title' => 'Refer Class Submit',
    'page callback' => 'sendCourseClassDetail',
    'page arguments' => array(2,3,4,5,6,7),
    'type' => MENU_CALLBACK,
    'access arguments' => array('expertus learner'),
    'file' => 'exp_sp_refer_course.inc'
  );
  
  $items['ajax/request-class-details/%'] = array(
    'title' => 'Request Class Form',
    'page callback' => 'getDetailsForRequestClassDialog',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('expertus learner'),
    'file' => 'exp_sp_request_class.inc'
  );
  
  $items['ajax/request-class-submit/%/%/%'] = array(
    'title' => 'Request Class Submit',
    'page callback' => 'sendRequestForClass',
    'page arguments' => array(2,3,4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('expertus learner'),
    'file' => 'exp_sp_request_class.inc'
  );
  
  $items['ajax/embed-widget/%/%'] = array(
    'title' => 'Embed Widget',
    'page callback' => 'getEmbedCourseClassDetail',
    'page arguments' => array(2,3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('expertus learner'),
    'file' => 'exp_sp_refer_course.inc'
  );
  
  $items['ajax/embed-widget-save/%/%'] = array(
    'title' => 'Embed Widget',
    'page callback' => 'saveEmbedCourseClassDetail',
    'page arguments' => array(2,3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('expertus learner'),
    'file' => 'exp_sp_refer_course.inc'
  );
  
  $items['share/training/%'] = array(
    'title' => 'Share Training',
    'page callback' => 'shareTrainingRedirect',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'exp_sp_refer_course.inc'
  );
  
  $items['share/unauthorised'] = array(
  		'title' => 'Share Class/Course/TP/Catalog Unautorised',
  		'page callback' => 'empty_value',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  
  return $items;  
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_refer_course_menu', $ex);
  	expertusErrorThrow($ex);
  }
}



function exp_sp_refer_course_block_info() {
	try{
		$blocks = array();
		
		$blocks['share_unauthorised'] = array(
				'info' => t('Share Class/Course/TP/Catalog Unautorised'),
				'cache' => DRUPAL_CACHE_PER_ROLE,
				'visibility' => BLOCK_VISIBILITY_LISTED,
				'pages' => 'share/unauthorised'
		);
		return $blocks;
		}catch (Exception $ex) {
			watchdog_exception('exp_sp_refer_course_block_info', $ex);
			expertusErrorThrow($ex);
		}
}


/**
 * Implementation of hook_block_view().
 */
function exp_sp_refer_course_block_view($delta = ''){
	try{
		$block = array();
		expDebug::dPrint("delta with in block".$delta,4);
		if($delta == 'share_unauthorised'){
			$block['subject'] = 'Share Unauthorised';
			$block['content'] =  "Signin to continue";
		}
		return $block;
		}catch (Exception $ex) {
			watchdog_exception('exp_sp_refer_block_view', $ex);
			expertusErrorThrow($ex);
		}
}

function ajax_refer_course_page(){
	try{
  // Create a list of clickable links.
  $links = array();
  // Four ways to do our animal picking wizard.
  if(function_exists('ctools_modal_text_button')){
    $links[] = ctools_modal_text_button(t('Refer Course'), 'ctools_ajax_sample/ajax/refer_course', t('Refer Course'),  'ctools-modal-ctools-sample-style');  
  }
  return theme('item_list', array('items' => $links, 'title' => t('')));  
  } catch (Exception $ex) {
  	watchdog_exception('ajax_refer_course_page', $ex);
  	expertusErrorThrow($ex);
  }
}

function refer_course_validate() {
	try{
  return array('rc_validate_fields');
  } catch (Exception $ex) {
  	watchdog_exception('refer_course_validate', $ex);
  	expertusErrorThrow($ex);
  }
}
function rc_validate_fields(&$form, &$form_state) {
	try{
  if (!valid_email_address($form_state['values']['emailfrom'])) {
    form_set_error('emailfrom', t('ERR002'));
  }
  if (!valid_email_address($form_state['values']['emailto'])) {
    form_set_error('emailto', t('ERR002'));
  }
  if (!is_string($form_state['values']['subject'])) {
    form_set_error('subject', t('ERR026'));
  }
  } catch (Exception $ex) {
  	watchdog_exception('rc_validate_fields', $ex);
  	expertusErrorThrow($ex);
  }
}


?>