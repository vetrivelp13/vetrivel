<?php

/**
* Implementation of hook_init().
*/
function exp_sp_administration_commerce_discounts_init(){
        try{
  if(arg(1) == 'commerce' && arg(2) == 'discounts'){
     global $theme_key;
     $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
        if($theme_key == 'expertusoneV2') {
                //NEWUI THEME STYLE SHEET
                drupal_add_css(drupal_get_path('module', 'exp_sp_administration_commerce_discounts') .'/exp_sp_administration_commerce_discounts_v2.css', $css_theme_optional);
        }else {
                drupal_add_css(drupal_get_path('module', 'exp_sp_administration_commerce_discounts') .'/exp_sp_administration_commerce_discounts.css', $css_theme_optional);
        }
        if(arg(2) == 'discounts'){
                $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
                drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
                drupal_add_js(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access.js', $js_module_optional);

                global $theme_key;
                $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
                if($theme_key == 'expertusoneV2') {
                        drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', $css_theme_optional);
                        drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
                        drupal_add_css(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access_v2.css', $css_theme_optional);
                        drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning_v2.css', $css_theme_optional);
                } else {
                        drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
                        drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
                        drupal_add_css(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access.css', $css_theme_optional);
                        drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.css', $css_theme_optional);
                }
        }

    if(!variable_get('delivery_type_all_tid', 0)){
      $vid = db_query("select vid FROM taxonomy_vocabulary WHERE machine_name = 'catalog'")->fetchField();
      $delivery_type_all_tid = db_query("SELECT tid FROM {taxonomy_term_data} WHERE name = :name and vid = :vid",array(':name' => '--All Delivery types--', ':vid' => $vid))->fetchField();
      $delivery_type_all_tid = ($delivery_type_all_tid) ? $delivery_type_all_tid : 0;
      variable_set('delivery_type_all_tid', $delivery_type_all_tid);
    }
    if(!variable_get('tp_all_tid', 0)){
                        $selectTPTip = db_select('taxonomy_term_data','termdata');
                        $selectTPTip->addField('termdata', 'tid');
                        $selectTPTip->condition('termdata.name', '--All Tp--');
                        $allTPTrainingTid   = $selectTPTip->execute()->fetchField();
                        variable_set('tp_all_tid', $allTPTrainingTid);
        }
  }
  }catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_commerce_discounts_init', $ex);
        expertusErrorThrow($ex);
  }
}

 /**
 * Implementation of hook_menu().
 */
function exp_sp_administration_commerce_discounts_menu() {
        try {
  $items = array();
  $items['administration/commerce/discounts'] = array(
    'title' => t('Discount'),
    'page callback' => 'empty_value',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'weight' => 2,
    'access arguments' => array('configure discounts'),
  );
  $items['administration/commerce/discounts/search/all'] = array(
    'title' => 'Fetch commerce list to display in JQGrid',
    'page callback' => 'sendCommerceDiscountsOrderListToJqGrid',
    'access callback' => 'user_access',
    'access arguments' => array('configure discounts'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_discounts.inc'
    );

  $items['administration/commerce/discounts/textfilter-autocomplete'] = array(
    'title' => 'Search By Text Filter Autocomplete',
    'page callback' => 'getDiscountTextFilterAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('configure discounts'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_discounts.inc',
  );

  $items['administration/commerce/discounts/%ctools_js/addedit'] = array(
    'title' => 'Add/Edit Discount',
    'page callback' => 'exp_sp_administration_discounts_setting_addedit_form',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('configure discounts'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_discounts.inc'
  );

  $items['administration/commerce/discounts/export'] = array(
    'title' => 'Discount Details Search Results CSV Export',
    'page callback' => 'fetchDiscountsAll',
    'page arguments' => array('CSV'),
    'access callback' => 'user_access',
    'access arguments' => array('configure discounts'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_discounts.inc',
   );

   $items['administration/commerce/discounts/print'] = array(
     'title' => 'Discount Details Results Print to PDF',
     'page callback' => 'fetchDiscountsAll',
     'page arguments' => array('PDF'),
     'access callback' => 'user_access',
     'access arguments' => array('configure discounts'),
     'type' => MENU_CALLBACK,
     'file' => 'exp_sp_administration_commerce_discounts.inc',
   );
   $items['ajax/administration/commerce/discounts/publish-and-unpublish/%'] = array (
     'title' => 'Publish Or Unpublish a Discount',
     'page callback' => 'publishOrUnpublishDiscounts',
     'page arguments' => array(5),
     'type' => MENU_CALLBACK,
     'access arguments' => array('configure discounts'),
     'file' => 'exp_sp_administration_commerce_discounts.inc'
         );

         $items['administration/commerce/discounts/getorglist/%/%/%'] = array(
    'title' => 'User Access Organization',
    'page callback' => 'getDiscountOrgList',
    'page arguments' => array(4,5,6),
    'access callback' => 'user_access',
    'access arguments' => array('configure discounts'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_discounts.inc'
  );

  $items['administration/commerce/discounts/getjobroles/%/%/%'] = array(
    'title' => 'User Access Job Roles',
    'page callback' => 'getDiscountJobRoles',
    'page arguments' => array(4,5,6),
    'access callback' => 'user_access',
    'access arguments' => array('configure discounts'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_discounts.inc'
  );

  $items['administration/commerce/discounts/getusertype/%/%/%'] = array(
    'title' => 'User Access User Type',
    'page callback' => 'getDiscountUserType',
    'page arguments' => array(4,5,6),
    'access callback' => 'user_access',
    'access arguments' => array('configure discounts'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_discounts.inc'
  );

  $items['administration/commerce/discounts/%/get-trainings-autocomplete'] = array(
    'title' => 'Discount Trainings Autocomplete',
    'page callback' => 'getTrainingsAutocomplete',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('configure discounts'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_commerce_discounts_trainings.inc',
  );

  return $items;
  }catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_commerce_discounts_menu', $ex);
        expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_permission().
 */
function exp_sp_administration_commerce_discounts_permission() {
        try{
  return array(
    'configure discounts' => array(
      'title' => t('configure discounts')
    ),
  );
  }catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_commerce_discounts_permission', $ex);
        expertusErrorThrow($ex);
  }
}

/*
 * exp_sp_administration_discounts_setting_addedit_form() -Form implementation for discount setting
 */
function exp_sp_administration_discounts_setting_addedit_form($js = NULL, $discountsId = ''){
  try{
  include_once(drupal_get_path('module', 'exp_sp_administration_commerce_discounts') .'/exp_sp_administration_commerce_discounts.inc');

  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.js', $js_module_optional);

  // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
  $sample_style = array(
   'ctools-admin-discounts-addedit-style' => array(
      'modalSize' => array(
        'width' => 860,
        'minHeight' => 380,
       ),
    )
  );

  drupal_add_js($sample_style, 'setting');

  if ($js) {
    // Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
    $argsList = array();
    if (!empty($discountsId)) {
      $argsList[] = $discountsId;
    }

   // Prepare list of forms to be displayed in the modal
    $formIdList = array(
                        array('id' => 'exp_sp_administration_discounts_addedit_form', 'title' => (t('Discount'))), //Discount
                       );

    exp_ctools_modal_multi_ajaxonly_forms_display_narrow_refresh_onclose($formIdList, $argsList);
  }
  else {
        throw new Exception('exp_sp_administration_commerce_discounts.module: exp_sp_administration_discounts_setting_addedit_form() : nojs');
  }
  }catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_discounts_setting_addedit_form', $ex);
        expertusErrorThrow($ex);
  }
}

/**
 * exp_sp_administration_discounts_addedit_form() - Build the addedit form for Discount settings.
 */
function exp_sp_administration_discounts_addedit_form($form, &$form_state, $renderMode, $discountId){
try {

        expDebug::dPrint('form statu value in disc edit 123456789:'  . print_r($form_state['values']['form_id'], 1), 5);
          include_once(drupal_get_path('module', 'exp_sp_administration_commerce_discounts') .'/exp_sp_administration_commerce_discounts_trainings.inc');

    $showCancelSave = 1;
    // To set the display mode as view
    $readOnlyForView = false;
    if(in_array('view', $form_state['build_info']['args'])){
      $form_state['storage']['step']         = 'view';
      $form_state['storage']['display_mode'] = 'view';
      $readOnlyForView = true;
    }

    if (empty($form_state['storage'])) {
      if(!empty($discountId) && empty($form_state['storage'])) {
        $form_state['storage']['step'] = 'view';
      } elseif(empty($discountId) && empty($form_state['storage'])) {
        $form_state['storage']['step'] = 'add';
      }
    }

    $discountDetails     = array();
    if (!empty($discountId)) {
      $discountDetails   = getDiscountsDetails($discountId ,'fetchall');
    }
    $form = array();
    $form                      = newAddEditFormWithCancelAndSave('discount-basic-addedit-form');
    if(empty($discountId)){
       $entityId       = $form_state['values']['id'];
    } else {
       $entityId       = $discountId;
    }
    $form['mapped_discount_id'] = array(
      '#type' => 'hidden',
      '#name' => 'mapped_discount_id',
      '#value' => $entityId
    );
    $entityType        = 'Discounts';
    $uniqueId          = $entityId.'-'.$entityType;

    $form['discount_detail_disp'] = array(
          '#type'       => 'markup',
      '#markup'     => '<div id="discount-basic-addedit-form-disp">',
    );
    $isApplicableAllTrainings = 0;
    $isApplicableAllUsers     = 0;
    if($entityId){
        $isApplicableAllTrainings = getDiscountApplicableAllTrainings($entityId);
        $isApplicableAllUsers     = getDiscountApplicableAllUsers($entityId);
    }
    list_discount_forms($form, $form_state, $isApplicableAllTrainings, $isApplicableAllUsers);
    $form['discount_detail_wrapper'] = array(
          '#type'       => 'markup',
      '#prefix'     => '<div class="addedit-form-main-container">
                                               <div class="round-corner-left"><div class="round-corner-right"><div class="round-corner-middle"></div></div></div>
                                               <div class="catalog-course-basic-addedit-form-container" id="discount-basic-addedit-form-container">',
    );

    if($form_state['storage']['substep'] == 'details' || empty($form_state['storage']['substep'])) {
      $form['addedit-remove-space-title-start'] = array(
        '#type'   => 'markup',
        '#markup' => '<div style="width:100%;">',
      );
      $defaultName = ($discountDetails[0]->name) ? $discountDetails[0]->name : '';
      addTextFieldToAddEditForm($form, 'dis_name', t('LBL107'), $defaultName, 1, true);
      $form['addedit-remove-space-title-end'] = array(
        '#type'   => 'markup',
        '#markup' => '</div>',
      );

      addHiddenFieldToAddEditForm($form, 'ckeditor_word_count', '1000');
      $form['addedit-long-description-container'] = array(
        '#type'   => 'markup',
        '#markup' => '<div class="addedit-long-description-container">',
      );
      $defaultDescription = ($discountDetails[0]->description) ? $discountDetails[0]->description : '';
      $defaultDescription = trim(str_replace("&nbsp;", '', $defaultDescription));
      addTextFormatFieldToAddEditForm($form, 'dis_description', t('LBL229'), $defaultDescription, 'full_html', 2, true, false, 1000);
      $form['addedit-long-description-container1'] = array(
        '#type'   => 'markup',
        '#markup' => '</div>',
      );

      addTwoColumnRowToAddEditForm($form, 'discount_type_row');
      $discountType = discount_type_options();
      if($form_state['values']['form_id'] == "")
        $discType = $discountDetails[0]->discount_type;
      $discType = ($discType) ? $discType : $form_state['values']['dis_type'];
      $defaultType = $discType;
      //$defaultType = ($form_state['values']['dis_type']) ? $form_state['values']['dis_type'] : $discType;
      //$applicableUserAttr['onchange'][] = 'changeDiscountType();';

      $ajaxAttr = array(
                'wrapper' => 'discount-basic-addedit-form',
                'callback' => 'changeDiscountRepaintForm',
                'method' => 'replace',
                'effect' => 'none', // 'fade',
                'event'=>'change',
                'keypress' => true,
                'progress' => array(
                                'type' => 'throbber',
                                'message' => ''
                ),
      );
            addDiscountDropDownToAddEditForm($form, 'dis_type', t('LBL036'), $discountType, $defaultType, 3, true,false,$applicableUserAttr, $ajaxAttr);

            if(empty($discType) || $discType == 2){
                    $defaultTypeVal = ($discountDetails[0]->discount_amount) ? $discountDetails[0]->discount_amount : '';
                    $discountAmount = ($defaultType == 2 && $defaultTypeVal) ? ($defaultTypeVal * 100) : $defaultTypeVal;
                    addTextFieldToAddEditForm($form, 'dis_typeval', t('LBL1102'), $discountAmount, 4, true);
            }else{
                $applicableUserAttr['class'] = 'fixed_dusccount_type_applied';
                $defaultTypeVal = ($discountDetails[0]->discount_amount) ? $discountDetails[0]->discount_amount : '';
                    $discountAmount = ($defaultType == 2 && $defaultTypeVal) ? ($defaultTypeVal * 100) : $defaultTypeVal;
                    addTextFieldToAddEditForm($form, 'dis_typeval', t('LBL1102'), $discountAmount, 4, true,false,2050,60,false,$applicableUserAttr);
            }

            if(!empty($discType) && $discType == 3)
                $applicableDiscountClass = 'discount_currency_list_visible';
        else
                $applicableDiscountClass = 'discount_currency_list_invisible';

            $form['frequency_data_disp_start'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="currency-list-discount" class='.$applicableDiscountClass.'>'
      );

            $currencyList = getProfileItemNamesKeyed('cre_sys_crn_');
            $nullOption[]                    = t('LBL674');
        $finalOptions                    = $nullOption + $currencyList;
            $selCurrency = ($entityId) ? getSelectedCurrency($discountDetails[0]->slt_discount_id) : '';

        $form['dis_applicable_currency'] = array(
                    '#type' => 'select',
                    '#prefix' => '<div id="admin-discount-currency" class="addedit-new-field-discount-currency"><div class="addedit-secondcol-field-value"><div class="expertus-dropdown-bg dropdown-width"><div class="expertus-dropdown-icon">',
        '#suffix' => '</div></div></div></div>',
                    '#title' => t('LBL101').' '.t('LBL036'),
                    '#title_display' => 'invisible',
                    '#options'=> $finalOptions,
                    '#default_value' => $selCurrency,
                    '#disabled' => false,
                    '#attributes' => array()
                  );

                  $form['frequency_data_disp_end'] = array(
        '#type' => 'markup',
        '#markup' => '</div>'
      );

            endAddEditTwoColumnRow($form);

      addTwoColumnRowToAddEditForm($form, 'max_uses_row');
            $defaultMaxUses = ($entityId) ? $discountDetails[0]->max_uses : '';
      addTextFieldToAddEditForm($form, 'dis_max_uses', t('LBL1103'), $defaultMaxUses, 5, true, false, 5);
      $defaultMinPrice = ($entityId) ? $discountDetails[0]->qualifying_amount : '';
      addTextFieldToAddEditForm($form, 'dis_min_price', t('LBL1104'), $defaultMinPrice, 6, true, false, 50);
      endAddEditTwoColumnRow($form);

      addTwoColumnRowToAddEditForm($form, 'max_uses_per_user_row');
            $defaultMaxPerUser = ($entityId) ? $discountDetails[0]->max_uses_per_user : '';
      addTextFieldToAddEditForm($form, 'dis_max_uses_per_user', t('LBL1105'), $defaultMaxPerUser, 7, true, false, 50);
      $defaultMaxPerCode = ($entityId) ? $discountDetails[0]->max_uses_per_code : '';
      addTextFieldToAddEditForm($form, 'dis_max_uses_per_code', t('LBL1106'), $defaultMaxPerCode, 8, true, false, 5);
      endAddEditTwoColumnRow($form);
      // for 41569: Multiple discussion codes not shown on edit discount popup
      $defaultCode = array();
      foreach ($discountDetails as $discount) {
        $defaultCode[] = $discount->code;
      }
      $defaultCode = ($entityId) ? implode("\n", $defaultCode) : t('MSG837');
      addTextAreaFieldToAddEditForm($form, 'dis_code', t('LBL096'), $defaultCode, 9, true);
      if($defaultCode == t('MSG837')){
          $form['dis_code']['#attributes']['style'] = 'color:#999999;';
      }
      //54909 
	  $path = base_path() . drupal_get_path('module', 'uc_credit');
	  $form['dis_code']['#attributes']['onblur'] = 'if(this.value == "") { this.value="'.t("MSG837").'";this.style.color="#999999";this.style.fontSize="12px";}';
	  $form['dis_code']['#attributes']['onfocus'] = 'if(this.value == "'.t('MSG837').'" ) { this.value=""; this.style.color="#333333"; this.style.fontSize="13px";}';
	  
      $disCodePrefix = str_replace('<div class="addedit-new-field" ><div class="addedit-new-field-title">'.t('LBL096').':<span class=\'addedit-mandatory\'>*</span></div><div class="addedit-new-field-value">', '<div class="addedit-new-field" ><div class="addedit-new-field-title">'.t('LBL096').':<span class="addedit-mandatory">*</span><span>&nbsp;<img src="'.$path.'/images/info.png" class="vtip info-enr-upload" title="'.t('MSG837').'" onload="vtip();"></span></div><div class="addedit-new-field-value">', $form['dis_code']['#prefix']);
      $form['dis_code']['#prefix'] = $disCodePrefix;


      $yesNoOption = array('1' => t('Yes'),'0' => t('No'));
      $applicableAttr['class'] = 'discount_dropdown_width';

      addTwoColumnRowToAddEditForm($form, 'discount_applicable_row');
            addDiscountDropDownToAddEditForm($form, 'dis_applicable_training', t('LBL1107'), $yesNoOption, $isApplicableAllTrainings, 10, false,false,$applicableAttr);
            $compineeAttr['class'] = 'discount_dropdown_width';
            $form['discount_combine_markup'] = array(
          '#type'       => 'markup',
      '#markup'     => '<div id="discount-combine-text-title">',
      );
      $defaultCombine = ($entityId) ? $discountDetails[0]->combine_discount : '';
            addDiscountDropDownToAddEditForm($form, 'dis_combine', t('MSG618'), $yesNoOption, $defaultCombine, 11, false,false,$applicableAttr);
            $form['discount_combine_markup_end'] = array(
          '#type'       => 'markup',
      '#markup'     => '</div>',
      );
            endAddEditTwoColumnRow($form);
            addTwoColumnRowToAddEditForm($form, 'discount_user_currency');
            $applicableUserAttr['class'] = 'discount_dropdown_width';
            addDiscountDropDownToAddEditForm($form, 'dis_applicable_user', t('LBL1108'), $yesNoOption, $isApplicableAllUsers, 12, false,false,$applicableUserAttr);
            endAddEditTwoColumnRow($form);
                }
    $form_state['esign_from_plugin']= false;
    // To display the Pre-requisite UI
    if($form_state['storage']['substep'] == 'trainings') {
      $form_state['esign_from_plugin']= true;
      $showCancelSave = 0;
      displayTrainingsDiscountDetails($form, $form_state, $entityId, $entityType, $uniqueId);
    }

    if($form_state['storage']['substep'] == 'users') {
      $form_state['esign_from_plugin']= true;
      $showCancelSave = 0;
      displayUserAccessDetails($form, $form_state, $entityId, $entityType, $uniqueId);
    }

    // Checking to show the cancel and save button
    if($showCancelSave && $form_state['storage']['display_mode'] != 'view') {
      $subStage = $form_state['storage']['substep'];
      addEditFormDiscountCancelAndSaveClose($form, 'discount-basic-addedit-form', 'discount-basic-save', 'discount-basic-cancel', $entityId, $subStage, $emptyId);
    }
          $form['discount_detail_disp_end'] = array(
          '#type'       => 'markup',
      '#suffix'     => '<div class="clearBoth"></div>
                                               <div class="round-corner-footer-left"><div class="round-corner-footer-right">
                                               <div class="round-corner-footer-middle"></div></div></div></div></div>',
    );

    if($showCancelSave && $form_state['storage']['display_mode'] != 'view'){
      $form['discount_detail_wrapper_end'] = array(
        '#type'       => 'markup',
        '#suffix'     => '<div class="clearBoth"></div></div>',
      );
    } else {
      $form['discount_detail_wrapper_end'] = array(
        '#type'       => 'markup',
        '#suffix'     => '<div class="clearBoth"></div><div class="admin-class-course-separater"></div></div>',
      );
    }

    return $form;

  } catch (Exception $ex) {
    watchdog_exception('catalogCourse', $ex);
    expertusErrorThrow($ex);
  }
}

function exp_sp_administration_discounts_addedit_form_validate($form, &$form_state, $fromApi = false){
        try {
                $form_state['hidden-save-submit'] = false;
                $form_state['esign_show_popup']= false;
    expDebug::dPrint(' exp_sp_administration_catalog_course_addedit_form_validate triggering_element:' . print_r($form_state['values']['dis_description']['value'],true), 5);
    expDebug::dPrint(' form_State:' . print_r($form_state, true) , 5);
    
    if ($form_state['values']['dis_code'] == t('MSG837')) {
        $form_state['values']['dis_code'] = '';
    }
    
	expDebug::dPrint(' form_State value Disc :::' . print_r($form_state['values']['dis_code'], true) , 5);
	//Added for #0069024
	$newline = $fromApi ? ',' : "\n";
	$disc_codes = explode( $newline, trim($form_state['values']['dis_code'] ));
        expDebug::dPrint('arrray---'.print_r($disc_codes,true),5);
        $disc_codes=array_filter($disc_codes, create_function('$a','return preg_match("#\S#", $a);'));
        expDebug::dPrint('arrray_filter---'.print_r($disc_codes,true),5);

         if(!empty($form_state['storage']['new_entity'])) {
      unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
    }
    if(!empty($form_state['storage']['edited_entity'])) {
      unset($form_state['storage']['edited_entity']); // Unset the variable to remove it from $form_state
    }

    if ($form_state['triggering_element']['#name'] == 'details') {
      $form_state['input']     = array(); // Clear user input - raw
      $form_state['values']    = array(); // Clear user input - security cleared
      $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
      $form_state['storage']['substep'] = 'details';
      return;
    }
    if ($form_state['triggering_element']['#name'] == 'trainings') {
      $form_state['input']     = array(); // Clear user input - raw
      $form_state['values']    = array(); // Clear user input - security cleared
      $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
      $form_state['storage']['substep'] = 'trainings';
      unset($form_state['delete_trainings_index']);
      unset($form_state['delete_trainings_fieldset']);
      $form_state['num_trainings'] = 0;
      return;
    }
    if ($form_state['triggering_element']['#name'] == 'users') {
      $form_state['rebuild']         = TRUE; // Rebuild the form. Submit handler will not be called.
      $form_state['storage']['substep'] = 'users';
      return;
    }
   if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
     $triggerValue  = 'save';
   }else{
     $triggerValue  = 'hidden-save';
   }
   $triggerElementByName  = $form_state['triggering_element']['#name'];

   if (($form_state['triggering_element']['#name'] == 'save' || $form_state['triggering_element']['#name'] == 'saveandpublish') || $fromApi) {
     $form_state['esign_show_popup']= true;//By default esign popup will open,
     // Check all mandatory fields exist
     addEditDiscountMandatoryFields($form, $form_state, array('dis_name', 'dis_description', 'dis_type', 'dis_typeval', 'dis_max_uses', 'dis_min_price', 'dis_max_uses_per_user', 'dis_max_uses_per_code', 'dis_code'), $fromApi);  //$fromApi argument added for #40582 by ayyappans
     if(!empty($disc_codes)){
        addEditDiscountCodeValidate($form_state,$form_state['values']["mapped_discount_id"]);
     }
     if($form_state['values']['dis_type'] == 2){
       if($form_state['values']['dis_typeval'] > 100){
         form_set_error('dis_typeval', t('MSG670'));
         $form_state["storage"]["form_validate"] = false;
         $form_state['esign_show_popup']= false;
       }
     }
     if($form_state['values']['dis_typeval'] <= 0){
        form_set_error('dis_typeval', t('LBL1102')." ".t('ERR216'));
        $form_state["storage"]["form_validate"] = false;
        $form_state['esign_show_popup']= false;
     }
     if($form_state['values']['dis_type'] == 3){
        if($form_state['values']['dis_typeval'] > $form_state['values']['dis_min_price']){
                form_set_error('dis_typeval', t('ERR241'));
                $form_state["storage"]["form_validate"] = false;
                $form_state['esign_show_popup']= false;
        }

     if(empty($form_state['values']['dis_applicable_currency'])){
         form_set_error('dis_applicable_currency',  $form['dis_applicable_currency']['#title']. t('ERR101'));
         $form_state["storage"]["form_validate"] = false;
         $form_state['esign_show_popup']= false;
       }
     }
     
     foreach($disc_codes as $dis_check)
        {
            if(!empty($form_state['values']['dis_code']) && !validateSpecialChars($dis_check) && !empty($dis_check)){
            form_set_error('dis_code',   t('ERR263'));
            $form_state["storage"]["form_validate"] = false;
            $form_state['esign_show_popup']= false;
                        
        }
        }
        
     if($form_state['values']['dis_applicable_training'] == 0 && $form_state['triggering_element']['#name'] == 'saveandpublish'){
        $isApplicableAllTrainings = getDiscountApplicabletotrainings($form_state['values']["mapped_discount_id"]);
        expDebug::dPrint('checkign the trainings got added orr not'.$isApplicableAllTrainings);
        if(!$isApplicableAllTrainings){
                form_set_error('dis_applicable_training', t('LBL674').' '.strtolower(t('LBL1249')).'.');
                $form_state["storage"]["form_validate"] = false;
                $form_state['esign_show_popup']= false;
        }
     }
     if($form_state['values']['dis_applicable_user'] == 0 && $form_state['triggering_element']['#name'] == 'saveandpublish'){
        $isApplicableAllUsers     = getDiscountApplicablegroups($form_state['values']["mapped_discount_id"]);
        if(!$isApplicableAllUsers){
                form_set_error('dis_applicable_user', t('LBL674').' '.strtolower(t('LBL850')).'.');
                $form_state["storage"]["form_validate"] = false;
                $form_state['esign_show_popup']= false;
        }
     }
   }
   else if($form_state['triggering_element']['#name'] == $triggerValue && $form_state['esign_from_plugin']==true){
     $form_state['esign_show_popup']= true;
   }else if($triggerElementByName == 'esign-users' || $triggerElementByName == 'set-users'){
     $form_state['esign_show_popup']= true;
   }
   if ($triggerElementByName == 'hidden-save' || $triggerElementByName == 'set-users') {
     $form_state['hidden-save-submit']=true;
     $form_state['esign_show_popup']= false;
   }
   if($form_state['triggering_element']['#name'] == 'unpublish'){
     $form_state['esign_show_popup']= true;
   }
   $form_state['esign_validation_status']= false;
   if(!($form_state['hidden-save-submit'])){
     unset($_SESSION['esign_validate']);
   }
  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_discounts_addedit_form', $ex);
    expertusErrorThrow($ex);
  }
}

/*
 * exp_sp_administration_discounts_addedit_form_submit() - Save the data entered by the user in the exp_sp_administration_catalog_course_addedit_form_submit form
 */
function exp_sp_administration_discounts_addedit_form_submit($form, &$form_state) {
  try {
    $entityType = 'discounts';
    expDebug::dPrint('form state' . print_r($form_state['values']['dis_description']['value'],true), 4);
    $form_state['values']['dis_description']['value'] = trim(str_replace("&nbsp;", ' ', $form_state['values']['dis_description']['value']));
    $chkValidation = 1;
    expDebug::dPrint('exp_sp_administration_discounts_addedit_form_submit esign validate trigger ' .$form_state['triggering_element']['#name'], 4);
    if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
      $chkValidation = 0;
      if($form_state['hidden-save-submit']==true && $_SESSION['esign_validate'] ==  1){
        $chkValidation = 1;
        $form_state['storage']['submit_triggering_element'] = $form_state['storage']['triggering_button_element'];
      }
      else{
        $form_state['storage']['triggering_button_element'] = $form_state['triggering_element']['#name'];
      }
    }
    else{
       $form_state['storage']['submit_triggering_element'] = $form_state['triggering_element']['#name'];
    }
    if($chkValidation){
      $form_state['esign_validation_status'] = true;
      expDebug::dPrint('exp_sp_administration_discounts_addedit_form_submit success validation ' . $form_state['storage']['submit_triggering_element'], 4);
        if(isset($form_state['values']['dis_name'])) {
                $loggedInUserId = getIdOfLoggedInUser();
        if(empty($form_state['values']["mapped_discount_id"])) {
          $returnArr = addNewDiscountDetails($form, $form_state,$loggedInUserId);
          expDebug::dPrint(' $returnArr = ' . print_r($returnArr, true), 5);
          expertus_set_message(t('LBL272').' '.t('MSG600').'.');
          $entityId  = $form_state['values']['id'];
          $form_state['storage']['new_entity'] = TRUE;
                        }else {
                                unset($form_state['storage']['new_entity']);
          updateDiscountDetails($form, $form_state,$loggedInUserId);
          expertus_set_message(t('MSG657'));
          $form_state['storage']['edited_entity'] = TRUE;
          $entityId = $form_state['values']['crs_id'];
         }
      }
      else{
        $entityId = $form_state['values']['mapped_discount_id'];
      }
      $form_state['build_info']['args'][]       = $entityId;
      $uniqueId = $entityId.'-'.$entityType;

      if(isset($form_state['values']['attr_action']) && isset($entityId)) {
        if($form_state['values']['attr_action'] == 'trainings') {
          //addNewPrerequisiteDetails($form, $form_state, $entityId, $entityType);
        }
        elseif($form_state['values']['attr_action'] == 'users') {
                        updateDiscountRoles($form, $form_state,$loggedInUserId);
                        expertus_set_message(t('LBL556').' '.t('MSG601').'.');
        }
      }
      $form_state['rebuild'] = TRUE;
      unset($_SESSION['esign_validate']);
    }
  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_discounts_addedit_form_submit', $ex);
    expertusErrorThrow($ex);
  }
}


/*
 * addEditDiscountMandatoryFields() - Flag an error message if value is missing in the mandatory fields.
 */
function addEditDiscountMandatoryFields($form, &$form_state, $mandatoryFields = array(), $fromApi) {    //$fromApi argument added for #40582 by ayyappans
  try{
  $form_state["storage"]["form_validate"] = true; /* to retain form if there is any error*/
  foreach ($mandatoryFields as $fieldName) {
        if($fieldName == 'dis_description'){
                $fieldValue = trim(str_replace("&nbsp;", '', $form_state['values']['dis_description']['value']));
        }else{
        $fieldValue = trim(str_replace("&nbsp;", '', $form_state['values'][$fieldName]));
        }
    $fieldValue = ($fieldValue == '0') ? 1 : $fieldValue;
    if (empty($fieldValue)) {
      expDebug::dPrint(' ' . $form[$fieldName]['#title'] . ' is missing.' , 5);
      form_set_error($fieldName, $form[$fieldName]['#title'] . t('ERR101'));
      $form_state["storage"]["form_validate"] = false;
      $form_state['esign_show_popup']= false;
    }
        if($fieldName == 'dis_typeval' || $fieldName == 'dis_max_uses' || $fieldName == 'dis_min_price' || $fieldName == 'dis_max_uses_per_user' || $fieldName == 'dis_max_uses_per_code'){
          if(!is_numeric($fieldValue) || $fieldValue < 0){
        if($fromApi) {
                form_set_error($fieldName,  t('ERR102'). $fieldName);
        }
        else {
                form_set_error($fieldName,  t('ERR102'). $form[$fieldName]['#title']);
        }
        $form_state["storage"]["form_validate"] = false;
        $form_state['esign_show_popup']= false;
      }
    }
  }
  }catch (Exception $ex) {
        watchdog_exception('addEditDiscountMandatoryFields', $ex);
        expertusErrorThrow($ex);
  }
}

function list_discount_forms(&$form, &$form_state, $isApplicableAllTrainings, $isApplicableAllUsers){
        try {
                $form['discount_actions_disp'] = array(
      '#type'       => 'markup',
      '#prefix'     => '<div class="catalog-course-basic-addedit-action-disp" id="discount-basic-addedit-action-disp">',

                );
                if(!isset($form_state['storage']['substep'])){
                        $form_state['storage']['substep'] = '';
                }
                $isSelected = ($form_state['storage']['substep'] == 'details' || empty($form_state['storage']['substep'])) ? 'selected' : '';
                $form['edit_btn_details'] = array(
      '#type'       => 'submit',
        '#value'      => t('LBL272'),
      '#name'       => 'details',
      '#prefix'     => '<ul><li>',
      '#suffix'     => '</li>',
      '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'discount-basic-addedit-form'),
      '#ajax' => array(
         'callback' => 'addEditRepaintForm',
         'wrapper'  => 'discount-basic-addedit-form',
         'event'          => 'click'
         ),
     );
     $entityId       = $form['mapped_discount_id']['#value'];
     if($entityId && !$isApplicableAllTrainings){
       $isSelected = ($form_state['storage']['substep'] == 'trainings') ? 'highlighted' : '';
       $form['edit_btn_prerequest'] = array(
         '#type'       => 'submit',
         '#value'      => t('LBL1109'),
         '#name'       => 'trainings',
         '#prefix'     => '<li>',
         '#suffix'     => '</li>',
         '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'discount-basic-addedit-form'),
         '#ajax' => array(
           'callback' => 'addEditRepaintForm',
           'wrapper'  => 'discount-basic-addedit-form',
           'event'         => 'click'
          ),
       );
     }
     else{
         $form['edit_btn_prerequest_disabled'] = array(
         '#type'       => 'item',
         '#title'      => t('LBL1109'),
         '#prefix'     => '<li><span class="deactive-links">',
         '#suffix'     => '</span></li>'
       );
     }
     if($entityId && !$isApplicableAllUsers){
        $isSelected = ($form_state['storage']['substep'] == 'users') ? 'highlighted' : '';
        $form['edit_btn_users'] = array(
          '#type'       => 'submit',
          '#value'      => t('Users'),
          '#name'       => 'users',
          '#prefix'     => '<li>',
          '#suffix'     => '</li>',
          '#attributes' => array('Class' => array('form-submit addedit-form-expertusone-throbber',$isSelected), 'data-wrapperid' => 'discount-basic-addedit-form'),
          '#ajax' => array(
                        'callback' => 'addEditRepaintForm',
            'wrapper'  => 'discount-basic-addedit-form',
            'event'        => 'click'
            ),
          );
     }
     else{
       $form['edit_btn_users_disabled'] = array(
         '#type'       => 'item',
         '#title'      => t('Users'),
         '#prefix'     => '<li><span class="deactive-links">',
         '#suffix'     => '</span></li>',
       );
     }

     $form['course_actions_ul_container_disp_end'] = array(
       '#type'       => 'markup',
       '#suffix'     => '</ul>',
     );
     $form['course_actions_disp_end'] = array(
       '#type'       => 'markup',
       '#suffix'     => '</div>',
     );
        } catch (Exception $ex) {
                watchdog_exception('list_discount_forms', $ex);
                expertusErrorThrow($ex);
        }
}

/*
 * addEditFormDiscountCancelAndSaveClose()
 */
function addEditFormDiscountCancelAndSaveClose(&$form, $wrapperId = 'addedit-form-wrapper', $saveButtonId = 'save-button', $cancelButtonId = 'cancel-button', $discountId) {
        try{
  expDebug::dPrint(' addEditFormDiscountCancelAndSaveClose() called.');
  global $theme_key;
  if($theme_key == 'expertusoneV2'){
        $prefixBgLeft   = '<div class="white-btn-bg-left"></div>';
        $suffixBgRight = '<div class="white-btn-bg-right"></div>';
        $cancelAttributes['class'][] = 'white-btn-bg-middle';
        $filtersearch = '<div class="filter-search-start-date-right-bg"></div>';
        $saveLeftBg   = '<div class="admin-save-button-left-bg"></div>';
        $saveMiddleBg = '';
  }
  $customHiddenButtonId = 'last-button-account';

  $esignHiddenButt = 'esign-'.$wrapperId;

  // Remove the temporary storage for API's to exchange information during form creation
  unset($form['addedit_tmp_storage']);

  // Add the Cancel button
  $ajaxCallbackCancel = 'addEditCancelRepaintForm';
  $cancelAttributes = array();
  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $cancelAttributes['class'] = array('addedit-edit-' . $cancelButtonId); // This class must be prefixed with 'addedit-edit-' followed by the form field id.

  // For common styling of all addedit cancel buttons
  //$cancelAttributes['class'][] = 'addedit-edit-cancel';

  // Using this class to applying bg color to the save button
  $cancelAttributes['class'][] = 'admin-action-button-middle-bg white-btn-bg-middle';

  // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
  $cancelAttributes['class'][] = 'addedit-form-expertusone-throbber';
  // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
  $cancelAttributes['data-wrapperid'] = array($wrapperId);

  // A common class for all addedit form cancel button, for styling to appear as a link.
  $cancelAttributes['class'][] = 'exp-addedit-form-cancel-button';

  $cancelAttributes['onclick'] = 'Drupal.CTools.Modal.dismiss(); return false;';
  $cancelLabel  = t('LBL123'); // Close
  $cancelAttributes['tabindex'][] = '10';

  $form[$cancelButtonId] = array(
    '#type' => 'submit',
    '#prefix' => '<div class="addedit-form-cancel-and-save-actions-row">' .
                 '<div class="addedit-form-cancel-container-actions">'.$prefixBgLeft,
    '#suffix' =>  $suffixBgRight,
    '#value' => $cancelLabel,
    '#name' => $cancelLabel,
    '#attributes' => $cancelAttributes
  );

  // Add the Save button
  $ajaxCallbackSave = 'addEditRepaintForm';
  $saveAttributes = array();

  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $saveAttributes['class'] = array('addedit-edit-' . $saveButtonId); // This class must be prefixed with 'addedit-edit-' followed by the form field id.

  // Using this class to applying bg color to the save button
  //$saveAttributes['class'][] = 'admin-save-button-middle-bg';
  $saveAttributes['class'][] = 'edit-catalog-course-save-publish';

  // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
  $saveAttributes['class'][] = 'addedit-form-expertusone-throbber';
  // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
  $saveAttributes['data-wrapperid'] = array($wrapperId);
  $saveAttributes['tabindex'][] = '9';

  $discountStatus     = '';
  if (!empty($discountId)) {
    $discountDetails  =  getDiscountsDetails($discountId ,'fetchall');
    $discountStatus   = $discountDetails[0]->is_active;
  }
   $isSaveParent = 0;
   $setButtonId =  'discount_save_btn';
   if(empty($discountId) || (!$discountStatus)){
      $isSaveParent = 1;
      $saveAttributes['onclick'] = array();
      $form[$saveButtonId] = array(
            '#type'   => 'submit',
      '#id'     => $setButtonId,
            '#prefix' => '<div class="admin-save-pub-unpub-button-container">'.$saveLeftBg,
            '#suffix' => '<span id="pub-unpub-action-btn" onclick="displayPubActionList()" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn ">&nbsp;</span></div>',
            '#value'  => t('LBL141'),
      '#name'   => 'save',
            '#attributes' => $saveAttributes,
        '#ajax' => array(
              'wrapper' => $wrapperId,
              'callback' => $ajaxCallbackSave,
          'customButtonId'=>$customHiddenButtonId,
              'method' => 'replace',
          'effect' => 'none', // 'fade',
              'event'=>'click',
              'keypress' => true,
              'progress' => array(
                'type' => 'throbber',
                'message' => ''
              ),
        )
          );
   }

    if($isSaveParent){
      $setButtonId =  'set_save_pub_btn';
      $form['addedit-button-group-ul-start'] = array(
        '#type' => 'markup',
        '#markup' => '<ul class="catalog-pub-add-list">',
      );
      $savePublishPrefix = '<li class="save-pub-unpub-sub-menu">';
      $savePublishSuffix = '</li>';
    }else{
      $savePublishPrefix = '<div class="admin-save-pub-unpub-button-container">'.$saveLeftBg;
      $savePublishSuffix = (($discountStatus) ? ('<span id="pub-unpub-action-btn" onclick="displayPubActionList()" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn ">&nbsp;</span>') : '<div class="admin-save-button-right-bg"></div>' ).'</div>';     
    }
          $saveButtonId = 'catalog-course-save-publish';
          $savePublishAttributes['data-wrapperid'] = array($wrapperId);
          $savePublishAttributes['onclick'] = array();
          $savePublishAttributes['tabindex'][] = '5';
    $buttonLabel = ($discountStatus) ? t('LBL141') : t('LBL641');
    $savePublishAttributes['class'] = array('addedit-edit-' . $saveButtonId);
    $savePublishAttributes['class'][] = 'addedit-form-expertusone-throbber';
    $savePublishAttributes['class'][] = (($resultCnt==0) && ($discountStatus)) ? 'edit-catalog-course-save-publish' : 'pub-unpub-only-save-btn';
    $form[$saveButtonId] = array(
      '#type'   => 'submit',
      '#id'     => $setButtonId,
        '#prefix' => $savePublishPrefix,
        '#suffix' => $savePublishSuffix,
      '#value'  => $buttonLabel,
        '#name'   => 'saveandpublish',
        '#attributes' => $savePublishAttributes,
      '#ajax' => array(
              'wrapper' => $wrapperId,
              'callback' => $ajaxCallbackSave,
        'customButtonId'=>$customHiddenButtonId,
          'method' => 'replace',
              'effect' => 'none', // 'fade',
              'event'=>'click',
              'keypress' => true,
              'progress' => array(
                'type' => 'throbber',
                'message' => ''
              ),
        )
  );

   if(!$isSaveParent){
      $form['addedit-button-group-ul-start'] = array(
        '#type' => 'markup',
        '#markup' => '<ul class="catalog-pub-add-list">',
      );
    }

        if(($discountId) && $discountStatus){
    $saveButtonId = 'tax-save-unpublish';
    $saveUnPublishAttributes['onclick'] = array();
    $saveUnPublishAttributes['class'] = array('addedit-edit-' . $saveButtonId);
    $saveUnPublishAttributes['class'][] = 'addedit-form-expertusone-throbber';
    $saveUnPublishAttributes['data-wrapperid'] = array($wrapperId);
    $form[$saveButtonId] = array(
      '#type' => 'submit',
      '#prefix' => '<li class="save-pub-unpub-sub-menu">',
      '#suffix' => '</li>',
      '#value' => t('LBL572'),
      '#name' => 'unpublish',
      '#attributes' => $saveUnPublishAttributes,
        '#ajax' => array(
          'wrapper' => $wrapperId,
          'callback' => $ajaxCallbackSave,
          'customButtonId'=>$customHiddenButtonId,
          'method' => 'replace',
          'effect' => 'none', // 'fade',
          'event'=>'click',
          'keypress' => true,
          'progress' => array(
            'type' => 'throbber',
            'message' => ''
          ),
        )
     );
        }

        $form['addedit-button-group-ul-end'] = array(
    '#type'   => 'markup',
    '#markup' => '</ul><div class="clearBoth"></div></div>' .
                       '<div class="clearBoth"></div></div>',
  );
  unset($saveAttributes['tabindex']);
  $saveAttributes['onclick'] = array();
  $saveAttributes['onclick'][] = 'Drupal.ajax.prototype.commands.addEditHideMessages();';
  $saveAttributes['onclick'][] = 'increasePopWidth();';
  $form[$customHiddenButtonId] = array(
          '#type' => 'submit',
          '#value' => t('hidden-save'),
          '#name'       => 'hidden-save',
    '#prefix' => '<span id = "esign-admin-div" style="display:none;">',
          '#suffix' => '</span>',
          '#id' =>$customHiddenButtonId,
        '#attributes' => $saveAttributes,
          '#ajax' => array(
                  'wrapper' => $wrapperId,
                  'callback' => 'addEditRepaintForm',
                  'method' => 'replace',
                  'effect' => 'none', // 'fade',
      'event'=>'click',
                  'keypress' => true,
                  'progress' => array(
                    'type' => 'throbber',
                    'message' => ''
                  ),
          )
        );

  $form['addedit-left-col-end'] = array(
    '#type' => 'markup',
    '#markup' => '</div><div class="clearBoth"></div>',
  );
  }catch (Exception $ex) {
        watchdog_exception('addEditFormDiscountCancelAndSaveClose', $ex);
        expertusErrorThrow($ex);
  }
}



function changeDiscountRepaintForm($form, &$form_state) {
        try {
                expDebug::dPrint('changeDiscountRepaintForm sssss' . print_r($tablebodyrow, true));

                $min_form_state       = array(
                                'ajax'         => TRUE, // As I have merged code from ctools_modal_form_render() in this function, this may no longer be needed. Retaining as in ctools_modal_form_wrapper(), and because form_state is passed around by reference.
                                're_render'    => TRUE, // Doesn't seem of being used by ctools or drupal forms API. Retaining as in ctools_modal_form_wrapper()
                                'no_redirect'  => TRUE, // Prevent any redirection, required forms are built in ajax callback
                                'build_info'   => array('args' => array('ajax')) // The the form builder function expects the first argument to be ajax or nojs.
                );
                $form_state                                = $min_form_state;
                $commands = array();
                $commands[] = exp_ctools_modal_adjust();
                $statusMsgHTML = theme('status_messages');
                expDebug::dPrint(' $statusMsgHTML = ' . print_r($statusMsgHTML, true) , 4);
                if (!empty($statusMsgHTML)) {
                        // Show the messages
                        $commands[] = ajax_command_html('#show_expertus_message', $statusMsgHTML);
                }
                $builtForm            = drupal_build_form('exp_sp_administration_discounts_addedit_form', $form_state);
                $commands[]           = ajax_command_replace(NULL, drupal_render($builtForm));
                return array('#type' => 'ajax', '#commands' => $commands);

        } catch (Exception $ex) {
                watchdog_exception('changeDiscountRepaintForm', $ex);
                expertusErrorThrow($ex);
        }

}

/*
 * addDropDownToAddEditForm - Use this function to add a dropdown (select) to the addedit form
 */
function addDiscountDropDownToAddEditForm(&$form, $id, $title = '', $options = array(), $defaultOption = '', $tabIndex = null, $mandatory = false, $readOnly = false,$attributes = array(), $ajax  = array()) {
        try{
  global $theme_key;
  //$attributes = array();
  $attributes['autocomplete'] = 'off'; // Prevent browser autocomplete

  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $isClassOverride = '';
  if($attributes['class']){
                $isClassOverride = $attributes['class'];
  }
  if(is_array($attributes['class'])){
    $attributes['class'][] = 'addedit-edit-' . $id;
  }
  else{
    $attributes['class'] = array('addedit-edit-' . $id); // This class must be prefixed with 'addedit-edit-' followed by the form field id.
  }
  $attributes['onchange'][] = 'textfieldTitleChange(this);';

  // Add class to apply common style to all drop-downs
  $attributes['class'][] = 'addedit-edit-dropdown';

  if ($readOnly) {
    $attributes['class'][] = 'addedit-readonly-dropdown';
  }

  if (isset($tabIndex) && $tabIndex > 0) {
    $attributes['tabindex'] = $tabIndex;
  }

  if ($mandatory) {
    $nullOption[] = t('LBL674');
  } else {
    $nullOption[] = t('LBL674');
  }
  //$finalOptions = array_merge($nullOption, $options);

  $finalOptions = $options; //$nullOption + $options;
  /*foreach($finalOptions as $key => $value){
        $finalOptions[$key] = t($value);
  }*/

  $prefix = '';
  $suffix = '';
  if($theme_key == 'expertusoneV2') {
    $fieldprefix = '<div class="expertus-dropdown-bg dropdown-width"><div class="expertus-dropdown-icon ">';
    $fieldsuffix = '</div></div>';
  }else {
    $fieldprefix = '';
    $fieldsuffix = '';
  }
  if (empty($form['addedit_tmp_storage']['two_column'])) {
        if($id=='dis_applicable_user' && $theme_key == 'expertusoneV2'){
                $prefix = '<div class="addedit-new-field" '.(!empty($prefixId) ? ('id="'.$prefixId.'"') : '').'>' .
               '<div class="addedit-new-field-title">' .
                 $title . ':' .
               '</div>' .
               '<div class="addedit-new-field-value dropdown-top-change">';
        }else{
                $prefix = addEditGetPrefix('FIELD', $title, $mandatory);
        }

        $suffix = addEditGetSuffix('FIELD');
  }
  else {
        if ($form['addedit_tmp_storage']['two_column']['current_column'] == 0) {
      if($id=='dis_type' && $theme_key == 'expertusoneV2'){
                $prefix = '<div class= "addedit-twocol-firstcol" ' . (!empty($prefixId) ? ('id="'.$prefixId.'"') : '').'>' .
                           '<div class="addedit-new-field-title">' .
                             $title . ':' . $mandatorySymbol .
                           '</div>' .
                           '<div class="addedit-firstcol-field-value dropdown-top-change2">';
                }else{
                                $prefix = addEditGetPrefix('TWOCOL_FIRSTCOL_FIELD', $title, $mandatory);
                }
        $suffix = addEditGetSuffix('TWOCOL_FIRSTCOL_FIELD');
        $form['addedit_tmp_storage']['two_column']['current_column'] = 1; // increment current column
        } else if ($form['addedit_tmp_storage']['two_column']['current_column'] == 1) {
        $prefix = addEditGetPrefix('TWOCOL_SECONDCOL_FIELD', $title, $mandatory);
        $suffix = addEditGetSuffix('TWOCOL_SECONDCOL_FIELD');
        $form['addedit_tmp_storage']['two_column']['current_column'] = 2; // increment current column
        } else {
                throw new Exception('exp_sp_administration.inc : addDropDownToAddEditForm() : Attempt to add a third field to a two column row.');
        }
  }

  if($isClassOverride){
    $attributes['class'][]= $isClassOverride;
  }

  $form[$id] = array(
    '#type' => 'select',
    '#prefix' => $prefix.$fieldprefix,
    '#suffix' => $fieldsuffix.$suffix,
    '#title' => $title,
    '#title_display' => 'invisible',
    '#options'=> $finalOptions,
    '#default_value' => $defaultOption,
    '#disabled' => $readOnly,
    '#attributes' => $attributes,
        '#ajax' => $ajax
  );
  }catch (Exception $ex) {
        watchdog_exception('addDiscountDropDownToAddEditForm', $ex);
        expertusErrorThrow($ex);
  }
}

function displayUserAccessDetails(&$form, &$form_state, $entityId, $entityType, $uniqueId){
 try{
  $customHiddenButtonId = 'esign-useraccess-button';

  $wrapperId = 'trainings-grid-wrapper-'.$uniqueId;
  $formName = 'useraccess_form_'.$uniqueId;
  $form_state['form_unique_name'] = $formName;
  $entityDisplayName = t('Discount');
  $form['attr_action'] = array(
    '#type' => 'hidden',
    '#name' => 'attr_action',
    '#value' => 'users',
  );
  $form['discount-mro-wrapper'] = array(
                '#type' => 'markup',
                '#markup' => '<div class="mro-wrapper">',
  );
  // An edit operation. Is not form rebuild after save, in which case we
  /* $userTypeDetailsArray = getDiscountsRoles($entityId, 'cre_usr_ptp_');
  $userTypeDetails = implode(',',$userTypeDetailsArray);
  $orgDetailsArray = getOrgDiscountsTerms($entityId);
  $orgDetails = implode(',',$orgDetailsArray);
  $jobRolesDetailsArray = getDiscountsRoles($entityId, 'cre_usr_jrl_');
  $jobRolesDetails = implode(',', $jobRolesDetailsArray);

  $uniqueId = $entityId.'_'.$entityType;

  // Create a new add/edit form
  //$form['user_access_frame'] = newAddEditFormMultiUserAccess();

  addHiddenFieldToAddEditForm($form, 'entity_id', $entity_id);
  addHiddenFieldToAddEditForm($form, 'entity_type', $entityType);
  addHiddenFieldToAddEditForm($form, 'org_selected_id', $orgDetails);
  addHiddenFieldToAddEditForm($form, 'jobroles_selected_id', $jobRolesDetails);
  addHiddenFieldToAddEditForm($form, 'usertype_selected_id', $userTypeDetails);

  $orgList = '';
  $orgListSelected = '';
  $orgcount = getDiscountOrganizationList('',array(),'Include','Count');
  addHiddenFieldToAddEditForm($form, 'org_pagenation', $orgcount."#1");
  $orgListArray = count($orgDetailsArray) ? getDiscountOrganizationList('',$orgDetailsArray,'Include','') : array();
  $NeworgListArray = getDiscountOrganizationList('',$orgDetailsArray,'Exclude','');
  $i=0;
  // Adding list for left side
  foreach($NeworgListArray as $key=>$value){
    $orgId = $value->org_id;
    $orgName = $value->org_name;
    $orgNameRestricted = titleController(' ', $orgName,30);
    $orgList .= '<li class="movable" tabindex="0" onkeydown="selectKeyDownAccess('.$orgId.', event, \'organization-available\')" id="'.$orgId.'"><span class="vtip" data="'.$orgName.'" title="'.$orgName.'">'.$orgNameRestricted.'</span></li>';
  }
  // Action 'more' implementation
  if($orgcount>15)
     $orgList .= '<li id="org_more"><span onclick="getOrganizationList($(\'#org_list_sel\').val(),\'more\',\'discounts\')">'.t('LBL543').'</span></li>';
     // Adding list for right side
        foreach($orgListArray as $key=>$value){
    $orgId = $value->org_id;
    $orgName = $value->org_name;
    $orgNameRestricted = titleController(' ', $orgName,30);
    $orgListSelected .= '<li class="movable" tabindex="0" onkeydown="selectKeyDownAccess('.$orgId.', event, \'organization-selected\')" id="'.$orgId.'"><span class="vtip" data="'.$orgName.'" title="'.$orgName.'">'.$orgNameRestricted.'</span></li>';
  }

  $jobRoles = '';
  $jobRolesSelected = '';
  $jobrolecount = getProfileItemNamesKeyedForDiscounts("cre_usr_jrl_",'cre_sys_lng_eng','',array(),'Include','Count');
  $jobRolesArray = count($jobRolesDetailsArray) ? getProfileItemNamesKeyedForDiscounts("cre_usr_jrl_",'cre_sys_lng_eng','',$jobRolesDetailsArray,'Include','') : array();
  $newjobRolesArray = getProfileItemNamesKeyedForDiscounts("cre_usr_jrl_",'cre_sys_lng_eng','',$jobRolesDetailsArray,'Exclude','');
  addHiddenFieldToAddEditForm($form, 'jobrole_pagenation', $jobrolecount."#1");

  // Add left side box
  foreach($newjobRolesArray as $roleId => $roleName){
    $jobRole = titleController(' ', t($roleName),30);
    $jobRoles .= '<li class="movable" id='.$roleId.' tabindex="0" onkeydown="selectKeyDownAccess(\''.$roleId.'\', event, \'jobroles-available\')" ><span class="vtip" data="'.$roleName.'" title="'.t($roleName).'">'.$jobRole.'</span></li>';
  }
        // Action 'more' implementation
  if($jobrolecount>15)
    $jobRoles .= '<li id="jobrole_more"><span onclick="getJobRoles($(\'#jobrole_list_sel\').val(),\'more\',\'discounts\')">'.t('LBL543').'</span></li>';
  // Add right side box
  foreach($jobRolesArray as $roleId => $roleName){
        $jobRoleRestricted = titleController(' ', t($roleName),30);
          $jobRolesSelected .= '<li class="movable" id='.$roleId.' tabindex="0" onkeydown="selectKeyDownAccess(\''.$roleId.'\', event, \'jobroles-selected\')" ><span class="vtip" data="'.$roleName.'" title="'.t($roleName).'">'.$jobRoleRestricted.'</span></li>';
  }

  $usertypecount = getProfileItemNamesKeyedForDiscounts("cre_usr_ptp_",'cre_sys_lng_eng','',array(),'Include','Count');
  $userTypeArray = count($userTypeDetailsArray) ? getProfileItemNamesKeyedForDiscounts("cre_usr_ptp_",'cre_sys_lng_eng','',$userTypeDetailsArray,'Include',''): array();
  $newuserTypeArray = getProfileItemNamesKeyedForDiscounts("cre_usr_ptp_",'cre_sys_lng_eng','',$userTypeDetailsArray,'Exclude','');
  addHiddenFieldToAddEditForm($form, 'usertype_pagenation', $usertypecount."#1");
  $userType = '';
  $userTypeSelected = '';
  // Add to left side box
  foreach($newuserTypeArray as $userTypeKey => $userTypeName){
    $userTypeRestricted = titleController(' ', t($userTypeName),30);
    $userType .= '<li class="movable" id="'.$userTypeKey.'" tabindex="0" onkeydown="selectKeyDownAccess(\''.$userTypeKey.'\', event, \'usertype-available\')" ><span class="vtip" data="'.$userTypeName.'" title="'.t($userTypeName).'">'.$userTypeRestricted.'</span></li>';
  }
  // Action 'more' implementation
  if($jobrolecount>15){
    $userType .= '<li id="usertype_more"><span onclick="getUserTypes($(\'#user_type_sel\').val(),\'more\',\'discounts\')">'.t('LBL543').'</span></li>';
  }

  // Add to right side box
  foreach($userTypeArray as $userTypeKey => $userTypeName){
    $userTypeRestricted = titleController(' ', t($userTypeName),30);
    expDebug::dPrint("check for usertyperesticted".print_r($userTypeRestricted,true),3);
    $userTypeSelected .= '<li class="movable" id="'.$userTypeKey.'" tabindex="0" onkeydown="selectKeyDownAccess(\''.$userTypeKey.'\', event, \'usertype-selected\')"><span class="vtip" data="'.$userTypeName.'" title="'.t($userTypeName).'">'.$userTypeRestricted.'</span></li>';
  } */

  include_once(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access.inc');
  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
  global $theme_key;
  if($theme_key == 'expertusoneV2') {
        //NEWUI THEME STYLE SHEET
        drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', $css_theme_optional);
  } else {
        drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
  }

        $entityType = 'cme_dis';
        $uniqueId = $entityId.'-'.$entityType;
        $mroOption = false;

        $mroOption = false;
        $type = 'Discount';

        $opList = getoptionsList();
        expDebug::dPrint('$opList:==> '.print_r($opList, true),5);
        addHiddenFieldToAddEditForm($form, 'hidden_oplist',$opList);


       /* $form['msgdiv'] = array(
                        '#type' => 'markup',
                        '#markup' => '<div id="show_vc_detail_message"></div>', 
        );   Comment by simbu: 0059185*/


        //("The selected groups have access to the training")
        $paintMultiAction  = "<div id='access-search-list-class-title-keyword' class='access-search-list-keyword' style='display:block;'>";
        $paintMultiAction .= "<span id='access-search-dropdwn-list-class'>";
        $paintMultiAction .= "<input type='hidden' id='access-search_all_classs_type-hidden' value='any' />";
        $paintMultiAction .= "</span></div>";
        $paintMultiAction  = "<div id='access-search-list-class-title-keyword' class='access-search-list-keyword' style='display:block;'>";
        $paintMultiAction .= "<span id='access-search-dropdwn-list-class'>";
        $paintMultiAction .= "<span id='access-select-list-class-dropdown' class='access-select-list-dropdown-class'>".t('Learner')."</span>";
        $paintMultiAction .= "</span></div>";

        $form['more_add_enrolluser_search'] = array(
                        '#type' => 'markup',
                        '#markup' => $paintMultiAction,
        );

        $form['start-div'] = array(
                        '#type' => 'markup',
                        '#markup' => '<div id="group-control" style="height:260px;overflow:hidden;">',
        );
        $form['left-side-group'] = array(
          '#type' => 'markup',
          //'#markup' => '<div id="sel-unsel-grplist"><img src="themes/seven/images/buttons.png" width="0" height="0" onload="$(\'#root-admin\').data(\'accessgroup\').callMultiSelect(\''.$uniqueId.'\',\''.$mroOption.'\',\''.$type.'\');"  width="100" height="132" /><span class="grp-label">'.t('Groups').'</span></div>',
                '#markup' => '<div id="sel-unsel-grplist" style=\'float:left;\' class="sel-unsel-grplist-alone" onClick="$(\'#root-admin\').data(\'accessgroup\').callMultiSelect(\'sel-unsel-grplist\', \''.$uniqueId.'\',\''.$mroOption.'\',\''.$type.'\');"><span class="list-group margin-left-3 grp-label">'.t('Groups').'</span><span class="right-tip-arrow " /></div><div id="avil_group" class="narrow-search-results-item-detail" style="display:none"></div>'
        );
        $form['separator'] = array(
                        '#type' => 'markup',
                        '#markup' => '<div id="line-separator-grp-alone"></div>',
        );
        $selOpt = getSelectedDiscountValues($entityId);
        $default=array();
        $var = '';
        expDebug::dPrint('sabeeee->'.print_r($selOpt,true),5);
        foreach($selOpt as $dt){
                expDebug::dPrint('$selOpt->'.print_r($selOpt,true),5);
                $mro = ($dt->admin == 1)?" ":'-'.$dt->code;
                $default['name'] = empty($default['name'])?"-"." ".$dt->name:"-"." ".$dt->name;
                $default['mro']  = ($dt->mro=="Optional" || $dt->admin== 1 || $dt->mro =='')?"": " "."(".$dt->mro.")";
                $default['id']   = empty($default['id']) ? $dt->id.$mro :$default['id'].",".$dt->id.$mro;
                $var .= '<div><span id="group-names-'.$dt->id.'" class="vtip" title="'.sanitize_data($default['name']).'">'.titleController('ADMIN-COMMERCE-DISCOUNT-NAME',$default['name'],43).'</span><span id="mro-names-'.$dt->id.'">'.$default['mro'].'</span></div>';
        }

        if(!empty($selOpt)){
                $form['right-side-txt'] = array(
                                '#type' => 'markup',
                                '#markup' => '<div id="help-msg-grp" style="display:block;">'.t('LBL1265', array('@name' => $entityDisplayName)).'</div>',
                );
        }else{
                $form['right-side-txt'] = array(
                                '#type' => 'markup',
                                '#markup' => '<div id="help-msg" style="display:none;">'.t('LBL1265', array('@name' => $entityDisplayName)).'</div>',
                );
        }

         $form['scroll-start'] = array(
                        '#type' => 'markup',
                        '#prefix' => '<div id="group-scroll-wrapper">',
        );

                                 $form['right-side-value'] = array(
                                                '#type' => 'markup',
                                                '#markup' => '<div id="sel-group-list">'.$var.'</div>',
                                 );
                                 $inlineStyle = (empty($selOpt)) ? 'display:block;' : 'display:none;';
                                 // changes made for the seperate the multilanguage one string into two rows
                                 $linetext = t('LBL1261');
                                 $exploded_string=explode(",", $linetext);
                                 expDebug::dPrint('$exploded_string : '.print_r($exploded_string,true), 4);
               $form['right-side-text'] = array(
                                '#type' => 'markup',
                                '#markup' => '<div id="sel-group-text" style="'.$inlineStyle.'">'.t('LBL1260', array('@name' => $entityDisplayName)).'</div><div id="sel-message" style="'.$inlineStyle.'">'.$exploded_string[0].','.'</div><div id="sel-msg" style="'.$inlineStyle.'">'.$exploded_string[1].'</div>',
              );
        $form['entity'] = array(
                        '#type' => 'markup',
                        '#markup' => '<input type="hidden" value="'.$uniqueId.'" id="entity-val" />',
        );
        $form['stop-div'] = array(
                        '#type' => 'markup',
                        '#markup' => '</div>',
        );
        $form['scroll-end'] = array(
                        '#type' => 'markup',
                        '#prefix' => '</div>',
        );

        $form['addedit-left-col-open-script'] = array(
                        '#type' => 'markup',
                        '#markup' => '<img src="themes/seven/images/buttons.png" width="0" height="0" onload="$(\'#sel-unsel-grplist\').click();"  width="100" height="132" />',
                );
        addHiddenFieldToAddEditForm($form, 'hidden_idlist',$default['id']);
        addHiddenFieldToAddEditForm($form, 'hidden_selection',$default['id']);

  addEditFormMultiCloseUserAccess($form, $uniqueId);
  }catch (Exception $ex) {
        watchdog_exception('displayUserAccessDetails', $ex);
        expertusErrorThrow($ex);
  }
}

/*
 * addEditRepaintFormMulti() -
 */
function addEditRepaintFormMultiUserAccess($form, &$form_state) {
 try{
  $commands = array();
  $commands[] = ajax_command_replace(NULL, drupal_render($form));
  $commands[] = ajax_command_prepend(NULL, theme('status_messages'));
  expDebug::dPrint(' $commands = ' . print_r($commands, true),4);

  return array('#type' => 'ajax', '#commands' => $commands);
  }catch (Exception $ex) {
        watchdog_exception('addEditRepaintFormMultiUserAccess', $ex);
        expertusErrorThrow($ex);
  }
}

function addEditFormMultiCloseUserAccess(&$form, $uniqueId) {
        try{
  global $theme_key;
  if($theme_key == 'expertusoneV2'){
        $prefixBgLeft   = '<div class="white-btn-bg-left"></div>';
        $suffixBgRight = '<div class="white-btn-bg-right"></div>';
        $cancelAttributes['class'][] = 'white-btn-bg-middle';
        $filtersearch = '<div class="filter-search-start-date-right-bg"></div>';
        $saveLeftBg   = '<div class="admin-save-button-left-bg"></div>';
        $saveMiddleBg = '';
  }
  $cancelButtonId                      = 'mroCancelbtn';
  $wrapper                             = 'discount-basic-addedit-form';
  $ajaxCallbackCancel                  = 'addEditCancelRepaintForm';
  $cancelAttributes['class']           = array('addedit-edit-' . $cancelButtonId);
  $cancelAttributes['class'][]         = 'admin-action-button-middle-bg white-btn-bg-middle';
  $cancelAttributes['class'][]         = 'addedit-form-expertusone-throbber';
  $cancelAttributes['data-wrapperid']  = array($wrapper);
  $cancelAttributes['class'][]         = 'exp-addedit-form-cancel-button';
  $cancelAttributes['class'][]         = 'admin-bubble-close';
  $destroyId = 'qtip_visible_disp_'.$uniqueId;
  $removeId = 'qtipAccessqtip_visible_disp_'.$uniqueId;
  //$("#'.$destroyId.'").qtip("destroy");
  $cancelAttributes['onclick'] = 'Drupal.CTools.Modal.dismiss(); return false;';
  $form[$cancelButtonId] = array(
    '#type' => 'submit',
    '#prefix' => '<div class="addedit-form-cancel-and-save-actions-row">' .
                   '<div class="addedit-form-cancel-container-actions">'.$prefixBgLeft,
    '#suffix' =>   $suffixBgRight,
    '#value' => t('LBL123'),
    '#attributes' => $cancelAttributes,
  );

  $ajaxCallback = 'addEditRepaintFormMulti';

  $id = 'mrosubmit';
  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $attributes['class'] = array('addedit-edit-' . $id);

  // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
  $attributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg';
  // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
  $attributes['data-wrapperid'] = array($wrapper);
  if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
    $buttonName  = 'esign-users';
  }else{
    $buttonName  = 'set-users';
  }
  $form[$id] = array(
    '#type' => 'submit',
    '#name' => $buttonName,
    '#prefix' => '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>',
    '#suffix' =>
               '<div class="admin-save-button-right-bg"></div></div>' .
               '<div class="clearBoth"></div></div>' .
             '<div class="clearBoth"></div></div></div>',
    '#value' => t('LBL141'),
    '#ajax' => array(
              'wrapper' => $wrapper,//$wrapperId,
              'callback' => 'addEditRepaintForm',
              'method' => 'replace',
              'effect' => 'none', // 'fade',
              'event'=>'click',
              'keypress' => true,
              'progress' => array(
                'type' => 'throbber',
                'message' => ''
              ),
        ),
    '#disabled' => false,
    '#attributes' => $attributes,
  );

  $form['addedit--useraccess-left-col-end'] = array(
    '#type' => 'markup',
    '#markup' => '</div><div class="clearBoth"></div>',
  );
  }catch (Exception $ex) {
        watchdog_exception('addEditFormMultiCloseUserAccess', $ex);
        expertusErrorThrow($ex);
  }
}

function getSelectedDiscountValues($entityId){
        try{
                $select = db_select('slt_groups', 'grps');
                $select->leftjoin('slt_discounts', 'disc', 'FIND_IN_SET(grps.id,disc.group_id)>0');
                //$select->leftjoin('slt_profile_list_items','pli','grpmap.mro=pli.code');
                $select->addField('grps', 'id','id');
                $select->addField('grps', 'name','name');
                $select->addField('grps', 'is_admin','admin');
        //      $select->addField('pli', 'name','mro');
                $select->condition('disc.uc_discount_id', $entityId, '=');
                //$select->condition('grpmap.entity_type', $entityType, '=');
                $select->groupBy('grps.id');
                $select->orderBy('grps.name');
                expDebug::dPrintDBAPI("selected value from query ",$select);
                $result = $select->execute()->fetchAll();
                return $result;

        }catch (Exception $ex) {
                watchdog_exception('getSelectedValues', $ex);
                expertusErrorThrow($ex);
        }
}




?>