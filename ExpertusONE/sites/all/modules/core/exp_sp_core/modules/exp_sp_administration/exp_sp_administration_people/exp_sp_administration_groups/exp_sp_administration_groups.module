<?php

/**
 * Implementation of hook_menu().
 */
function exp_sp_administration_groups_init() {
	try {
		if(stripos(request_uri(),'administration/people/group')!==false){
			includeFilesRole();
		}
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_groups_init', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_administration_groups_menu() {
 try {
	  $items = array();

	  $items['administration/people/group'] = array(
	    'title' => t('Group'),
	    'page callback' => 'empty_value',
	    'access callback' => 'user_access',
	    'type' => MENU_CALLBACK,
	    'weight' => 3,
	    'access arguments' => array('Security Admin Perm'),
	    );

	  $items['administration/people/group/%/%ctools_js/addedit'] = array(
	    'title' => 'Add / Edit Role',
	    'page callback' => 'exp_sp_role_display_addedit_form',
	    'page arguments' => array(3,4),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,

	  );

	  $items['administration/people/group/search/all'] = array(
	    'title' => 'Fetch Roles List to display in JQGrid',
	    'page callback' => 'sendRolesListToJqGrid',
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	    'file' => 'exp_sp_administration_groups.inc'
	    );

	  $items['administration/people/group/textfilter-autocomplete'] = array(
	    'title' => 'Search By Text Filter Autocomplete',
	    'page callback' => 'getRoleTextFilterAutoComplete',
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	    'file' => 'exp_sp_administration_groups.inc',
	   );

	  $items['administration/people/group/username-autocomplete'] = array(
	    'title' => 'username autocomplete',
	    'page callback' => 'getUsernameAutoComplete',
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	   );
	  $items['administration/people/group/%'] = array(
	    'title' => 'Search by User Organization Autocomplete',
	    'page callback' => 'getAtrributeForNarrowSearch',
	    'page arguments' => array(3),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	    'file' => 'exp_sp_administration_groups.inc',
	   );

	  $items['administration/people/group/%/addedit'] = array(
	    'title' => 'Add / Edit Role',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('exp_sp_administration_groups_addedit_form'),
	    'page arguments' => array(3),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK
	    );

	  $items['administration/people/group/export'] = array(
	    'title' => 'Role Search Results CSV Export',
	    'page callback' => 'fetchRolesAll',
	    'page arguments' => array('CSV'),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	    'file' => 'exp_sp_administration_groups.inc',
	    );

	  $items['administration/people/group/print'] = array(
	    'title' => 'Role Search Results Print to PDF',
	    'page callback' => 'fetchRolesAll',
	    'page arguments' => array('PDF'),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	    'file' => 'exp_sp_administration_groups.inc',
	    );

	 	$items['ajax/administration/people/group/activate-and-deactivate/%'] = array (
	    'title' => 'Activate Or Deactivate role',
	    'page callback' => 'activateOrDeactivateGrp',
	    'page arguments' => array(5),
	    'type' => MENU_CALLBACK,
	    'access arguments' => array('Security Admin Perm'),
	    'file' => 'exp_sp_administration_groups.inc'
	    );

	  $items['administration/people/group/role-autocomplete'] = array (
	    'title' => 'Parent role Autcomplete URL',
	    'page callback' => 'getRoleAutoComplete',
	    'page arguments' => array(),
	    'type' => MENU_CALLBACK,
	    'access arguments' => array('Security Admin Perm'),
	  );

	  $items['administration/people/group/user-addedit/%/%'] = array(
	    'title' => 'Add users',
	    'page callback' => 'addUsersDetails',
	  	'page arguments' => array(4, 5),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	   'file' => 'exp_sp_administration_groups.inc'
	    );

	  /* $items['administration/people/group/owner-addedit/%/%'] = array(
	  		'title' => 'Add owner',
	  		'page callback' => 'addOwnerDetails',
	  		'page arguments' => array(4, 5),
	  		'access callback' => 'user_access',
	  		'access arguments' => array('Security Admin Perm'),
	  		'type' => MENU_CALLBACK,
	  		'file' => 'exp_sp_administration_groups.inc'
	  ); */

	  $items['administration/people/group/user-pagination/%'] = array(
	    'title' => 'Fetch available Users',
	    'page callback' => 'getRoleUsersList',
	    'page arguments' => array(4),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	    'file' => 'exp_sp_administration_groups.inc'
	  	);
	  $items['administration/people/group/user-name-autocomplete/%/%'] = array(
	    'title' => 'Added Users',
	    'page callback' => 'getUsernameAutocompletesearch',
	  	'page arguments' => array(4,5),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	   	'file' => 'exp_sp_administration_groups.inc'
	    );
	  /* $items['administration/people/group/owner-name-autocomplete/%/%/%'] = array(
	  		'title' => 'Added Users',
	  		'page callback' => 'getOwnernameAutocompletesearch',
	  		'page arguments' => array(4,5,6),
	  		'access callback' => 'user_access',
	  		'access arguments' => array('Security Admin Perm'),
	  		'type' => MENU_CALLBACK,
	  		'file' => 'exp_sp_administration_groups.inc'
	  ); */
	  $items['people/roles/add-permissions/%/%/%/%'] = array(
	    'title' => 'Add Permissions',
	    'page callback' => 'addPermissionsDetails',
	  	'page arguments' => array(3,4,5,6),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	   'file' => 'exp_sp_administration_groups.inc'
	    );
	  $items['roles/users/%/%/%/%/%/%'] = array(
	    'title' => 'Data Grid List',
	    'page callback' => 'loadCtoolDataGridTypeForRole',
	    'page arguments' => array(2,3,4,5,6,7),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	    'file' => 'exp_sp_administration_groups.inc'
	  	);
	 /*  $items['roles/users/%/%/%/%/%/%'] = array(
	  		'title' => 'Data Grid List',
	  		'page callback' => 'loadCtoolDataGridTypeForRole',
	  		'page arguments' => array(2,3,4,5,6,7),
	  		'access callback' => 'user_access',
	  		'access arguments' => array('Security Admin Perm'),
	  		'type' => MENU_CALLBACK,
	  		'file' => 'exp_sp_administration_groups.inc'
	  );	 */
	  $items['administration/people/groups/add-users/%/%'] = array(
	    'title' => 'Add Users',
	    'page callback' => 'attachUserToRole',
	  	'page arguments' => array(4, 5),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	   'file' => 'exp_sp_administration_groups.inc'
	   );
	  $items['administration/people/groups/attributs/%/%'] = array(
	    'title' => 'Attributes',
	    'page callback' => 'getAttributeList',
	  	'page arguments' => array(4,5),
	    'access callback' => 'user_access',
	    'access arguments' => array('Security Admin Perm'),
	    'type' => MENU_CALLBACK,
	    'file' => 'exp_sp_administration_groups.inc'
	   );
	  $items['administration/people/groups/attributs/autocomplete/%/%'] = array(
	  		'title' => 'Atrribute Autocomplete',
	  		'page callback' => 'getAttributeListByText',
	  		'page arguments' => array(5,6),
	   		'access callback' => 'user_access',
	  		'access arguments' => array('Security Admin Perm'),
	  		'type' => MENU_CALLBACK,
	  		'file' => 'exp_sp_administration_groups.inc'
	  );
	  $items['administration/people/groups/removeusers/%/%/%'] = array(
	   		'title' => 'Delete GroupUsers',
	   		'page callback' => 'updateRemoveUser',
	   		'page arguments' => array(4,5,6),
	   		'access callback' => 'user_access',
	   		'access arguments' => array('Security Admin Perm'),
	   		'type' => MENU_CALLBACK,
	   		'file' => 'exp_sp_administration_groups.inc'
	  );
	  $items['administration/view-group/%ctools_js/addedit/%'] = array(
	   		'title' => 'View group',
	   		'page callback' => 'exp_sp_administration_viewgrp_addedit_form',
	   		'page arguments' => array(3,4),
	   		'access callback' => 'user_access',
	   		'access arguments' => array('Security Admin Perm'),
	   		'type' => MENU_CALLBACK,
	   		'file' => 'exp_sp_administration_groups.inc'
	  );
	  $items['administration/people/groups/view-users/%/%/%'] = array(
	   		'title' => 'view Users List',
	   		'page callback' => 'ViewUserListForGroup',
	   		'page arguments' => array(4,5,6),
	   		'access callback' => 'user_access',
	   		'access arguments' => array('Security Admin Perm'),
	   		'type' => MENU_CALLBACK,
	   		'file' => 'exp_sp_administration_groups.inc'
	   );

	  $items['administration/grpUserExportOption/%/%/%/%/%/CSV'] = array(
	  		'title' => 'Export Data Grid Group User List',
	  		'page callback' => 'fetchGroupUserList',
	  		// Using page argument 4 to pass the search type when this menu path is invoked from Group user roster export to Csv
	  		'page arguments' => array(2,3,4,5,6,7),
	  		'access callback' => 'user_access',
	  		'access arguments' => array('Security Admin Perm'),
	  		'type' => MENU_CALLBACK,
	  		'file' => 'exp_sp_administration_groups.inc'
	  );
	  /* $items['administration/grpOwnerExportOption/%/%/%/%/%/CSV'] = array(
	  		'title' => 'Export Data Grid Group User List',
	  		'page callback' => 'fetchGroupOwnerUserList',
	  		// Using page argument 4 to pass the search type when this menu path is invoked from Group user roster export to Csv
	  		'page arguments' => array(2,3,4,5,6,7),
	  		'access callback' => 'user_access',
	  		'access arguments' => array('Security Admin Perm'),
	  		'type' => MENU_CALLBACK,
	  		'file' => 'exp_sp_administration_groups.inc'
	  ); */
	  expDebug::dPrint(' $items = ' . print_r($items, true) , 4);
		return $items;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_groups_menu', $ex);
		expertusErrorThrow($ex);
	}
}

function exp_sp_role_display_addedit_form($type,$js = NULL, $defaultId) {
	try {
		includeFilesRole();

	  // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
	  $role_style = array(
	    'ctools-admin-role-addedit-style' => array(
	        'modalSize' => array(
	        'width' 		=> 602,
	        'minHeight' => 353,
	       ),
	    )
	  );

	  drupal_add_js($role_style, 'setting');
	  expDebug::dPrint('exp_sp_role_display_addedit_form js'.$js);
	  if ($js) {
	    // Prepare list of forms to be displayed in the modal
	    $formIdList = array(
					array('id' => 'exp_sp_administration_groups_addedit_form', 'title' => t('Group'),'type' => $type),
	                        array('id' => 'exp_sp_administration_groups_attaching_user_form', 'title' => t('Users'),'type' => $type),
	                        //array('id' =>'addusr_addedit_form_html','title' => t('Add Users'))
	                       );

	    // Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
	    $argsList = array();
	    if (!empty($defaultId)) {
	      $argsList[] = $defaultId;
	      $argsList['arg_value_type'] = $type;
	    }
	  	$commands = array();
	  	$commands[] = onAfterLoadForm($defaultId);
	    exp_ctools_modal_multi_ajaxonly_forms_display($formIdList, $argsList,array(),$commands);

	  }
	  else {
	    throw new Exception('exp_sp_administration_groups.module: exp_sp_role_display_addedit_form() : nojs');
	  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_role_display_addedit_form', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * returns the Drupal form for group add/edit dialog
 * @param unknown $form
 * @param unknown $form_state
 * @param unknown $renderMode
 * @param unknown $arg
 * @return string
 */
function exp_sp_administration_groups_addedit_form($form, &$form_state, $renderMode, $arg) {
	try {
	  expDebug::dPrint(' $form addedit form= ' . print_r($form, true) , 5);
	  expDebug::dPrint(' $form_state addedit form== ' . print_r($form_state['values'], true) , 5);
	  expDebug::dPrint(' $form_state = ' . print_r($form_state, true) , 5);
	  expDebug::dPrint(' $renderMode = ' . print_r($renderMode, true) , 4);
	  expDebug::dPrint(' $arg = ' . print_r($arg, true) , 4);
	  include_once('exp_sp_administration_groups.inc');

	  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME, 'weight' => 1300);
	  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);

	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);

	  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.js', $js_module_optional);
	  global $theme_key;
	  if($theme_key == 'expertusoneV2') {
	  //NEWUI THEME STYLE SHEET
	  	drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', $css_theme_optional);
	  }else {
			drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
	  }

	  // Alternate way to get the role id for the edit operation
	  expDebug::dPrint(' $defaultId = ' . print_r($defaultId, true) , 4);

	  $grpDetails = array();
	  if (!empty($arg)) { // An edit operation. Is not form rebuild after save, in which case we
	                                                        // can fetch values from $form_state.
	    // Fetch role details to be displayed in the form
	    $grpDetails = getGrpDetails($arg, array('id', 'code', 'name', 'status','duplicate','is_admin'));

	    expDebug::dPrint(' $grpDetails = ' . print_r($grpDetails, true) , 4);
	  }

	   // Create a new add/edit form
	  $form = newAddEditFormWithCancelAndSave('role-addedit-form');

	  // Define the form fields

	  $defaultId =  getDefaultAddEditFormFieldValue('id', $form_state, $grpDetails);
	  addHiddenValueToAddEditForm($form, 'id', $defaultId);

	  //$defaultName = getDefaultAddEditFormFieldValue('name', $form_state, $grpDetails);
		addTextFieldToAddEditForm($form, 'name', t('Group'), getDefaultAddEditFormFieldValue('name', $form_state, $grpDetails), 1, true, false, 100);

	  $defaultCode =  getDefaultAddEditFormFieldValue('code', $form_state, $grpDetails);
	  addHiddenFieldToAddEditForm($form, 'code', $defaultCode);

	  addHiddenFieldToAddEditForm($form, 'is_admin',  getDefaultAddEditFormFieldValue('is_admin', $form_state, $grpDetails));

	 $defaultduplicate = getDefaultAddEditFormFieldValue('duplicate', $form_state, $grpDetails);

	 if(!empty($defaultduplicate)){
	 		$defaultduplicate = 1;
	 }elseif(empty($defaultduplicate) && (!empty($defaultId))){
	 		$defaultduplicate = 2;
	 }else{
	 		$defaultduplicate = 0;
	 }
	  addHiddenFieldToAddEditForm($form, 'grp_war', $defaultduplicate);
	  addHiddenFieldToAddEditForm($form, 'grp_war_grpId', '');

	  $groupAttributes = getGroupAttributes();
	  $attrCnt = count($groupAttributes);
	  $height = $attrCnt * 28 + 230; // hight of each attribute is 28, height of multiselect countrol 230

	  expDebug::dPrint(" Group Attributes ".print_r($groupAttributes,true),5);
	  $hasItem=count($groupAttributes);
	  $leftpane='';
	  $rightpane='<div id= "attr-sel" class="narrow-search-results-item-detail right-header">'.t('LBL1259').'</div>';
	  $attrLst='';
	  $defaultOpen='';
	  $cnt=0;
	  $noneAttr = true;
	  foreach($groupAttributes as $attr){
			$class='';
			$gid = empty($defaultId)?0:$defaultId;
			// Get selected items for each attribute
			/*$selOptVal = getAttributeListByText($gid,$attr->code);
			$selOpt = $selOptVal['result'];
			$recCnt = $selOptVal['recCnt'];*/
			$selOpt = getAttributeListByText($gid,$attr->code,1);
			$default=array();
			// Prepare default values for each attribute
			if($selOpt[0]->allsel==0){
				foreach($selOpt as $dt){
					if($attr->name == 'Hire Date') {
						$default['name'] .= '<span class="item-short-desc">'.$dt->name.'</span>';
					}
					else {
						$default['name']=empty($default['name'])?$dt->name:$default['name'].", ".$dt->name;
					}
					$default['code']=empty($default['code'])?$dt->code:$default['code'].",".$dt->code;
					$noneAttr = false;
				}
			}else{
				$default['name'] = t('LBL1039');
				$default['code'] = 'All';
				$noneAttr = false;
			}
			$class=empty($default)?'empty-group':'list-group';
			if($defaultOpen == '' && $class=='list-group')
				$defaultOpen = $attr->code;
			// Hiddem field to store default values
			addHiddenFieldToAddEditForm($form, 'atr_'.$attr->code, $default['code']);
			if($attr->name == 'Country'){
				$attr->name = t('LBL039');
			}else if($attr->name == 'Department'){
				$attr->name = t('LBL179');
			}else if($attr->name == 'Employment Type'){
				$attr->name = t('LBL174');
			}else if($attr->name == 'Role'){
				$attr->name = t('Role');
			}else if($attr->name == 'Job Role'){
				$attr->name = t('LBL133');
			}else if($attr->name == 'Language'){
				$attr->name = t('LBL038');
			}else if($attr->name == 'State'){
				$attr->name = t('LBL152');
			}else if($attr->name == 'User Type'){
				$attr->name = t('LBL173');
			}else if($attr->name == 'Hire Date'){
				$attr->name = t('LBL175');
			}
	  	// building left and right side panes
	  	expDebug::dPrint('default code '.$defaultCode, 5);
	  	if($defaultCode != 'grp_adm' && $defaultCode != 'grp_sup' && $defaultCode != 'grp_ins' && $defaultCode != 'grp_mgr'){
	 			$leftpane .= '<div onClick="$(\'#root-admin\').data(\'peoplegroup\').callMultiSelect(\''.$attr->code.'\',\''.$defaultId.'\');"><span class="item-short-desc '.$class.'">'.t($attr->name).'</span><span class="right-tip-arrow " /></div><div id="avil_'.$attr->code.'" class="narrow-search-results-item-detail" style="display:none"></div>';
	 			//$rightpane .= '<div class="attr-content"><span class="'.$class.' attr-list-item" id="header_'.$attr->code.'">'.t($attr->name).':</span></span><span id="sel_'.$attr->code.'" class="narrow-search-results-item-detail">'.descController('GROUP VISIBILITY',$default['name'],'cre_sec').'</span></div>';
	 			if($attr->code == 'ste_con_hdt'){
	 				$rightpane .= '<div class="attr-content"><span class="'.$class.' attr-list-item" id="header_'.$attr->code.'">'.t($attr->name).':</span></span><span id="sel_'.$attr->code.'" class="narrow-search-results-item-detail" style="display:none">'.$default['name'].'</span><span id="show_sel_'.$attr->code.'">'.$default['name'].'</span></div>';
	 			}else{
	 				$rightpane .= '<div class="attr-content"><span class="'.$class.' attr-list-item" id="header_'.$attr->code.'">'.t($attr->name).':</span></span><span id="sel_'.$attr->code.'" class="narrow-search-results-item-detail" style="display:none">'.$default['name'].'</span><span id="show_sel_'.$attr->code.'">'.descController('GROUP VISIBILITY',$default['name'],'cre_sec').'</span></div>';
	 			}
		  	if($hasItem>1){
		  		$class = ($class=='list-group')? $class." and-class": $class;
		  		$rightpane .= '<div class="'.$class.' sel-attr-div" id="and_'.$attr->code.'"><span class="item-short-desc sel-attr-separator">'.t('LBL647').'</span></div>';
		  	}
	  	}else{
	 			$leftpane .= '<div><span class="item-short-desc '.$class.'">'.t($attr->name).'</span><span class="right-tip-arrow " /></div><div id="avil_'.$attr->code.'" class="narrow-search-results-item-detail"></div>';
	 			$msg = '';
	 			switch($defaultCode){
	 				case 'grp_adm':
 				    case 'grp_sup':
	 					$msg = t("All administors");
	 					break;
	 				case 'grp_ins':
	 					$msg = t("All Instructors");
	 					break;
	 				case 'grp_mgr':
	 					$msg = t("All Managers");
	 					break;
	 			}
	 			if($cnt==0){
	 				//$rightpane .= '<div class="attr-content-nonesel narrow-search-results-item-detail right-header"><table class="attr-content-nonesel"><tr><td>'.$msg.'</td></tr></table></div>';
	 				$rightpane .= '<div class="attr-content-nonesel-div narrow-search-results-item-detail right-header"><span class="attr-content-nonesel-span">'.$msg.'</span></div>';
	 				if($defaultCode == 'grp_adm' || $defaultCode == 'grp_sup')
	 					$height = $height - $recCnt>10?230:150;
	 				else
	 					$height = $height - 150;
	 			}
	 			$cnt = 1;
	  	}

			$attrLst .= ($hasItem==0)?$attr->code:','.$attr->code;
			$hasItem--;
	  }

	  $rightpane .='</div><div id="no-attr-sel" style="display:none;"><div class="No-attr-sel" style="height:'.$height.'px;"><span>'.t('LBL1037').'</span></div></div>';

	  if($noneAttr == true){
	  	$class = "display:none;"; // reseted for further use
	  }
	  $form['addedit-group_container_avail'] = array(
			    '#type'   => 'markup',
			    '#markup' => '<div class="attr-pane" style="height:'.$height.'px;"><div class="attr-select-pane">',
		  	);

	  // Adding left side pane in form
	  $form['addedit-group_left_pane'] = array(
			    '#type'   => 'markup',
			    '#markup' => $leftpane,
		  );
	  $form['addedit-group_container_sel'] = array(
	    '#type'   => 'markup',
	    '#markup' => '</div><div id="attr-separator" style="height:'.$height.'px"></div><div id="atr-sel-pane" class="attr-selected-pane" style="height:'.$height.'px;'.$class.'">',
	  );

	  // Adding right side pane in form
	  $form['addedit-group_right_pane'] = array(
		    '#type'   => 'markup',
		    '#markup' => $rightpane,
	  );
	  $defaultOpen = $defaultOpen!=''?$defaultOpen:$groupAttributes[0]->code;
		addHiddenFieldToAddEditForm($form, 'attr_open', $defaultOpen);
		// Hidden field to store available list of attributes
	  addHiddenFieldToAddEditForm($form, 'atr_list', $attrLst);
	  $hireDetails = getHireDetails($grpDetails['id']);
	 
	  // if(!empty($hireDetails[0]->on_or_after_start_date)){
		   $start_date = formatHireDate($hireDetails[0]->on_or_after_start_date,'hidden');
		   $start_date_gtn = empty($form_state['values']['hidden_hire_start_ste_con_hdt_gtn'])? (empty($start_date) ? '' : $start_date) :
	                                                        $form_state['values']['hidden_hire_start_ste_con_hdt_gtn'];
	 //  }
	 //  if(!empty($hireDetails[0]->on_or_before_start_date)){
		   $start_date = formatHireDate($hireDetails[0]->on_or_before_start_date,'hidden');
		   $start_date_ltn = empty($form_state['values']['hidden_hire_start_ste_con_hdt_ltn'])? (empty($start_date) ? '' : $start_date) :
	                                                        $form_state['values']['hidden_hire_start_ste_con_hdt_ltn'];
	 //  }
	//   if(!empty($hireDetails[0]->between_start_date) && !empty($hireDetails[0]->between_end_date)){
		   $start_date = formatHireDate($hireDetails[0]->between_start_date,'hidden');
		   $end = formatHireDate($hireDetails[0]->between_end_date,'hidden');
		   $start_date_btw = empty($form_state['values']['hidden_hire_start_ste_con_hdt_btw'])? (empty($start_date) ? '' : $start_date) :
		                                                        $form_state['values']['hidden_hire_start_ste_con_hdt_btw'];
		   $end_date = empty($form_state['values']['hire_end'])? (empty($end) ? '' : $end) :
	                                                        $form_state['values']['hire_end'];
	 //  }
	  if(count($grpDetails) > 0 ){	
	  	$grpId = $grpDetails['id'];
	  	$checkStatus = array ('new','inprogress');
	  	expDebug::dPrint(' priya testing >>> ' . print_r($back_gd_running, true) , 5);
	  	$back_gd_running = fetchBackgroundListForGroups($checkStatus,'inlist',$grpId);
	  }
	  addHiddenFieldToAddEditForm($form, 'hidden_hire_start_ste_con_hdt_btw', $start_date_btw);
	  addHiddenFieldToAddEditForm($form, 'hidden_hire_start_ste_con_hdt_gtn', $start_date_gtn);
	  addHiddenFieldToAddEditForm($form, 'hidden_hire_start_ste_con_hdt_ltn', $start_date_ltn);
	  addHiddenFieldToAddEditForm($form, 'hire_end', $end_date);
	  addHiddenFieldToAddEditForm($form, 'background_job', $back_gd_running);
	  $form['addedit-group_container_selend'.$attr->code] = array(
			    '#type'   => 'markup',
			    '#markup' => '</div></div>',
		  	);

		roleAddEditFormWithCancelAndSaveClose($form, 'role-addedit-form','save-button','cancel-button', $grpDetails);

	  expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
	  return $form;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_groups_addedit_form', $ex);
  	expertusErrorThrow($ex);
  }
}

function roleAddEditFormWithCancelAndSaveClose(&$form, $wrapperId = 'addedit-form-wrapper', $saveButtonId = 'save-button', $cancelButtonId = 'cancel-button', $roleDetails = array()) {
	try {
	  global $theme_key;
	  $loggedUserId = getSltpersonUserId();
		expDebug::dPrint(' userAddEditFormWithCancelAndSaveClose() called.'.print_r($roleDetails, 1));

	  $customHiddenButtonId = 'role-button-account';

	  $ajaxCallbackCancel = 'addEditCancelRepaintForm';

	  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
	  // each time the form is re-built.
	  $cancelAttributes['class'] = array('addedit-edit-' . $cancelButtonId);

	  // For common styling of all addedit cancel buttons
	 	//$cancelAttributes['class'][] = 'addedit-edit-cancel';
	  $cancelAttributes['class'][] = 'admin-action-button-middle-bg white-btn-bg-middle';

	  // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
	  $cancelAttributes['class'][] = 'addedit-form-expertusone-throbber';
	  $cancelAttributes['tabindex'][] ='8';
	  // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
	  $cancelAttributes['data-wrapperid'] = array($wrapperId);

	  // A common class for all addedit form cancel button, for styling to appear as a link.
	  $cancelAttributes['class'][] = 'exp-addedit-form-cancel-button';
	  $cancelAttributes['onclick'] = 'Drupal.CTools.Modal.dismiss(); return false;';
	  $setcls = ($theme_key=='expertusoneV2')?'':(empty($roleDetails['id']))?'resize-save_btn':'resize-save_btn4';
	  $form[$cancelButtonId] = array(
	    '#type' 			=> 'submit',
	    '#prefix' 		=> '<div class="addedit-form-cancel-and-save-actions-row">' .
	                   '<div class="addedit-form-cancel-container-actions '.$setcls.'"><div class="white-btn-bg-left"></div>',
	    '#suffix' 		=>   '<div class="white-btn-bg-right"></div>',
	    '#value' 			=> t('LBL123'), // Close
	    '#attributes' => $cancelAttributes,
	  );

	  // Add the Save button
	  $ajaxCallbackSave = 'addEditRepaintGroupForm';

	  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
	  // each time the form is re-built.
	  $saveAttributes['class'] = array('addedit-edit-' . $saveButtonId);
	  $onclick = 'displayPubActionList()';
	  if($roleDetails['code'] == 'grp_sup' || ($loggedUserId != 1 && ($roleDetails['code'] == 'grp_adm' || $roleDetails['code'] == 'grp_ins' || $roleDetails['code'] == 'grp_mgr'))){
	  	$saveAttributes['disabled'] = true;
	  	$admin_save_button_left_bg = 'admin-save-button-left-bg-disable';
	  	$edit_catalog_course_save_publish = 'edit-catalog-course-save-publish-disable';
	  	$admin_save_button_middle_bg = 'admin-save-button-middle-bg-disable';
	  	$pub_unbpub_more_btn = 'pub-unbpub-more-btn-disable';
	  	$onclick = "javascript:void(0)";
	  }

	  // For common styling of all addedit save buttons
	  //$saveAttributes['class'][] = 'addedit-edit-save';
	  $saveAttributes['class'][] = 'admin-save-button-middle-bg '.$admin_save_button_middle_bg;
	  $saveAttributes['tabindex'][] = '7';

	  // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
	  $saveAttributes['class'][] = 'addedit-form-expertusone-throbber';
	  // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
	  $saveAttributes['data-wrapperid'] = array($wrapperId);

	  $esignHiddenButt = 'esign-'.$wrapperId;
	  $esignHiddenButt1 = 'status-upd-esign-'.$wrapperId;
	  
	  //check whether job is in background or not
	  $checkStatus = array ('new','inprogress');
	  $back_gd_running = !empty(count($roleDetails)>0) ? fetchBackgroundListForGroups($checkStatus,'inlist',$roleDetails['id']) : 0;
	  //expDebug::dPrint("testing button value >>>".$back_gd_running);
	  if(!empty($roleDetails) && $back_gd_running == 0){//IF EDIT MODE
	    $saveAttributes['class'][] = 'edit-catalog-course-save-publish '.$edit_catalog_course_save_publish;
	    $setclass = ($theme_key=='expertusoneV2')?"admin-save-button-left-bg $admin_save_button_left_bg":"";
	    
	    if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){ //IF ESIGNATURE ENABLED PERFORM SAVE
	      $saveAttributes['onclick'] = array();
	      //$saveAttributes['onclick'][] = 'Drupal.ajax.prototype.commands.addEditHideMessages();';
	      $form[$saveButtonId] = array(
	            '#type'   		=> 'submit',
	            '#value'  		=> t('LBL141'),
	            '#name'  			=> 'save',
	            '#prefix' 		=> '<div class="admin-save-pub-unpub-button-container"><div class="'.$setclass.'"></div>',
	            '#suffix'		  => '<span id="pub-unpub-action-btn" onclick="'.$onclick.'" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn  '.$pub_unbpub_more_btn.'">&nbsp;</span></div>',
	      	  	'#id' 				=>$saveButtonId,
	      	  	'#attributes' => $saveAttributes,
	            '#ajax' => array(
	      	      'wrapper' => $wrapperId,
	      	      'callback' => $ajaxCallbackSave,
	      	      'method' => 'replace',
	      	      'effect' => 'none', // 'fade',
	      	      'event'=>'click',
	                'customButtonId'=>$esignHiddenButt,
	      	      'keypress' => true,
	      	      'progress' => array(
	      	        'type' => 'throbber',
	      	        'message' => ''
	      	      ),
	          	)
	            );
	    }else{//ESIGN NOT ENABLED PERFORM SAVE
	      $saveAttributes['onclick'] = array();
	      $saveAttributes['onclick'][] = '$("#'.$esignHiddenButt.'").click(); return false;';
	      $form[$saveButtonId] = array(
	  	    '#type' 				=> 'button',
	          '#prefix' 		=> '<div class="admin-save-pub-unpub-button-container"><div class="'.$setclass.'"></div>',
	          '#suffix' 		=> '<span id="pub-unpub-action-btn" onclick="'.$onclick.'" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn  '.$pub_unbpub_more_btn.'">&nbsp;</span></div>',
	          '#value'		  => t('LBL141'),
	        	'#name' 			=> 'grp-save',
	  	      '#attributes' => $saveAttributes,
	  	  );
	    }
	  //TO CALL THE HIDDED BUTTON RELATED TO ESIGN PROCESS
	  unset($saveAttributes['tabindex']);
	  $saveAttributes['onclick'] = array();
	  $form[$esignHiddenButt] = array(
		    '#type' => 'submit',
		    '#value' => t('hidden-save'),
		    '#name'	=> 'hidden-save',
	      	'#prefix' => '<span id = "esign-admin-div" style="display:none">',
		    '#suffix' => '</span>',
		    '#id' =>$esignHiddenButt,
	  		'#attributes' => $saveAttributes,
		    '#ajax' => array(
			      'wrapper' => $wrapperId,
			      'callback' => $ajaxCallbackSave,
			      'method' => 'replace',
			      'effect' => 'none', // 'fade',
			      'event'=>'click',
	  			  'roleActionStatus'=>'',
			      'keypress' => true,
			      'progress' => array(
			      'type' => 'throbber',
			      'message' => ''
			      ),
		    	)
		      );


	   $form['addedit-button-group-ul-start'] = array(
	    	'#type' => 'markup',
	      '#markup' => '<ul class="catalog-pub-add-list">',
	   );

	   if($roleDetails['status'] == 'cre_sec_sts_atv'){//GET ROLE STATUS
	  	   	$activateSuspendLabel  = t('LBL572');
	  	    $roleActionStatus  = 'Suspend';
	   }else{
	  	    $activateSuspendLabel  = t('LBL573');
	  	    $roleActionStatus  = 'Activate';
	   }
	   $activateSuspendButtonId = 'role-activate-suspend-button';
	   if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){//IF ESIGNATURE ENABLED PERFORM STATUS UPDATE
	        $activateSuspendAttributes['onclick'] = array();
	        //$activateSuspendAttributes['onclick'][] = 'increasePopWidth();';
	        $form[$activateSuspendButtonId] = array(
	  	    '#type' => 'submit',
	  	    '#value' => $activateSuspendLabel,
	  	    '#prefix' => '<li class="save-pub-unpub-sub-menu">',
	  	    '#suffix' => '</li>',
	        '#name' => 'role-activate-suspend',
	        '#id' =>$activateSuspendButtonId,
	  	    '#attributes' => $activateSuspendAttributes,
	        	'#ajax' => array(
	    	      'wrapper' => $wrapperId,
	    	      'callback' => $ajaxCallbackSave,
	    	      'method' => 'replace',
	    	      'effect' => 'none', // 'fade',
	    	      'event'=>'click',
	        	  'customButtonId'=>$esignHiddenButt1,
	    	      'keypress' => true,
	    	      'progress' => array(
	    	        'type' => 'throbber',
	    	        'message' => ''
	    	      ),
	        	)
	  	   );
	  	  }else{//IF ESIGNATURE NOT ENABLED PERFORM STATUS UPDATE
	    	  $activateSuspendAttributes['onclick'] = array();
	          $activateSuspendAttributes['onclick'][] = '$("#'.$esignHiddenButt1.'").click(); return false;';
	          $form[$activateSuspendButtonId] = array(
	  	    	'#type' => 'submit',
	  	    	'#prefix' => '<li class="save-pub-unpub-sub-menu">',
	  	    	'#suffix' => '</li>',
	            '#value' => $activateSuspendLabel,
	          	'#name' => 'role-activate-suspend',
	    	    '#attributes' => $activateSuspendAttributes,
	    	  );
	  	  }
	      $activateSuspendAttributes['onclick'] = array();
	      $form[$esignHiddenButt1] = array(
	    	      '#type' => 'submit',
	    	      '#value' => t('hidden-save'),
	    	      '#name'	=> 'role-status-upd-hidden-save',
	          	  '#prefix' => '<span id = "esign-admin-div" style="display:none">',
	    	      '#suffix' => '</span>',
	    	      '#id' =>$esignHiddenButt1,
	      		  '#attributes' => $activateSuspendAttributes,
	    	      '#ajax' => array(
	    		      'wrapper' => $wrapperId,
	    		      'callback' => $ajaxCallbackSave,
	    		      'method' => 'replace',
	    		      'effect' => 'none', // 'fade',
	    		      'event'=>'click',
	                  'roleActionStatus'=>$roleActionStatus,
	    		      'keypress' => true,
	    		      'progress' => array(
	    		      'type' => 'throbber',
	    		      'message' => ''
	    		      ),
	    	    	)
	    	      );
	      //$UserList=fetchUserListToGroup($roleDetails['id'],'');
	     // $Userquery = fetchUserListToGroup($roleDetails['id'],'','count');
	    //  $Usercount = $Userquery->execute()->fetchField();
	      //$Usercount=count($UserList->execute()->fetchAll());

	      $deleteAccess = delete_object_record($roleDetails['id'],'Grp');
	      if(!$deleteAccess && $roleDetails['code'] != 'grp_adm' && $roleDetails['code'] != 'grp_sup' && $roleDetails['code'] != 'grp_ins' && $roleDetails['code'] != 'grp_mgr'){
	      	$pgCode = ($roleDetails['is_admin']==0) ? 'cre_sec_learner' : 'cre_sec';
	      	$deleteCheck = adminVisibilityForAddEditDelete($roleDetails['id'],'cre_sec',$pgCode,'slt_groups');
    		  if($deleteCheck[0]->deletevisible > 0 || !empty($deleteCheck[0]->deletecount) || $GLOBALS["user"]->uid == 1){
		        $displayTitle = titleController('ADMIN-GROUPS-ROLE-NAME', $roleDetails['name'],34);
		  	    $deleteButtonId = 'role-delete-dropdown-button';
		  	    $deleteAttributes['onclick'] = array();
		        $deleteAttributes['onclick'][] = '$("#root-admin").data("narrowsearch").displayDeleteWizard("'.t('MSG357').' '.strtolower(t('Group')).' '.escape_string($roleDetails['name']) . '","'.$roleDetails['id'].'","Grp"); return false;';
		        $deleteAttributes['class'][] = 'admin-delete-button-bg';
		        $form[$deleteButtonId] = array(
		    	    '#type' => 'button',
		    	    '#prefix' => '<li class="save-pub-unpub-sub-menu">',
		    	    '#suffix' => '</li>',
		    	    '#value' => t('LBL286'),
		            '#name' => 'delete',
		    	    '#attributes' => $deleteAttributes,
		    	  );
	      	}
	      }
	      $form['addedit-button-group-ul-end'] = array(
	        '#type' => 'markup',
	        '#markup' => '<div class="clearBoth"></div></div>' .
	  	             '<div class="clearBoth"></div></div></ul>',
	      );
	  }elseif (!empty($roleDetails) && $back_gd_running > 0){
	  
	  	$saveAttributes['onclick'] = array();
	     $saveAttributes['onclick'][] = 'return false;';
	     // $saveAttributes['onclick'][] = '$("#'.$esignHiddenButt.'").click(); return false;';
	      $form[$saveButtonId] = array(
	      '#type' => 'button',
	      '#prefix' => '<div class="admin-save-button-container cls-save-disable"><div class="admin-save-button-left-bg"></div>',
	      '#suffix' =>
	                 '<div class="admin-save-button-right-bg"></div></div>' .
	                 '<div class="clearBoth"></div></div>' .
	               '<div class="clearBoth"></div></div>',
	        '#value' => t('LBL141'),
	      	'#name' => 'grp-save',
	      '#attributes' => $saveAttributes,
	    );
	      $form[$esignHiddenButt] = array(
	      		'#type' => 'submit',
	      		'#value' => t('hidden-save'),
	      		'#name'	=> 'hidden-save',
	      		'#prefix' => '<span id = "esign-admin-div" style="display:none">',
	      		'#suffix' => '</span>',
	      		'#id' =>$esignHiddenButt,
	      		'#attributes' => $saveAttributes,
	      		'#ajax' => array(
	      				'wrapper' => $wrapperId,
	      				'callback' => $ajaxCallbackSave,
	      				'method' => 'replace',
	      				'effect' => 'none', // 'fade',
	      				'event'=>'click',
	      				'roleActionStatus'=>'',
	      				'keypress' => true,
	      				'progress' => array(
	      						'type' => 'throbber',
	      						'message' => ''
	      				),
	      		)
	      );
	      
	  }else{
	      if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
	        $saveAttributes['onclick'] = array();
	        //$saveAttributes['onclick'][] = 'Drupal.ajax.prototype.commands.addEditHideMessages();';
	        $form[$saveButtonId] = array(
	      	      '#type' => 'submit',
	      	      '#value' => t('LBL141'),
	                '#name' => 'save',
	      	   	  '#prefix' => '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>',
	      	       '#suffix' =>
	      	               '<div class="admin-save-button-right-bg"></div></div>' .
	      	               '<div class="clearBoth"></div></div>' .
	      	             '<div class="clearBoth"></div></div>',
	        	      '#id' =>$saveButtonId,
	        		  '#attributes' => $saveAttributes,
	      	      '#ajax' => array(
	      		      'wrapper' => $wrapperId,
	      		      'callback' => $ajaxCallbackSave,
	      		      'method' => 'replace',
	      		      'effect' => 'none', // 'fade',
	      		      'event'=>'click',
	                'customButtonId'=>$esignHiddenButt,
	      		      'keypress' => true,
	      		      'progress' => array(
	      		      'type' => 'throbber',
	      		      'message' => ''
	      		      ),
	      	    	)
	      	      );
	    }else{
	  	  $saveAttributes['onclick'] = array();
	      $saveAttributes['onclick'][] = '$("#'.$esignHiddenButt.'").click(); return false;';
	      $form[$saveButtonId] = array(
	      '#type' => 'button',
	      '#prefix' => '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>',
	      '#suffix' =>
	                 '<div class="admin-save-button-right-bg"></div></div>' .
	                 '<div class="clearBoth"></div></div>' .
	               '<div class="clearBoth"></div></div>',
	        '#value' => t('LBL141'),
	      	'#name' => 'grp-save',
	      '#attributes' => $saveAttributes,
	    );
	  }
	  unset($saveAttributes['tabindex']);
	  $saveAttributes['onclick'] = array();
	  $saveAttributes['onclick'][] = '$("#'.$esignHiddenButt.'").click(); return false;';
	  $form[$esignHiddenButt] = array(
		      '#type' => 'submit',
		      '#value' => t('hidden-save'),
		      '#name'	=> 'hidden-save',
	      	  '#prefix' => '<span id = "esign-admin-div" style="display:none">',
		      '#suffix' => '</span>',
		      '#id' =>$esignHiddenButt,
	  		  '#attributes' => $saveAttributes,
		      '#ajax' => array(
			      'wrapper' => $wrapperId,
			      'callback' => $ajaxCallbackSave,
			      'method' => 'replace',
			      'effect' => 'none', // 'fade',
			      'event'=>'click',
	              //'userActionStatus'=>'',
			      'keypress' => true,
			      'progress' => array(
			      'type' => 'throbber',
			      'message' => ''
			      ),
		    	)
		      );

	  	}

	 	  if(!empty($roleDetails) && $roleDetails['is_admin'] == '1'){
    		  expDebug::dPrint('triggering value'.print_r($form,true));
    		  $defaultId = $roleDetails['id'];
    		  $entityId          	 = !empty($defaultId)?$defaultId:0;
    		  $entityType        	 = 'cre_sec';
    		  $qtipIdInit        	 = $entityId.'_'.$entityType;
    		  $privilegePopupMode    = $roleDetails['code'] == "grp_sup" ? "view" : "edit";
    		  $qtipOptAttachmentObj  = "{'entityId':".$entityId.",'entityType':'cre_sec','url':'people/roles/add-permissions/".$privilegePopupMode."/".$entityId."/".$entityType."/qtip_permissions_disp_".$qtipIdInit."','popupDispId':'qtip_permissions_disp_".$qtipIdInit."','catalogVisibleId':'qtipAttachIdqtip_addpermissions_visible_disp_".$qtipIdInit."','wid':550,'heg':'270','postype':'middle','poslwid':'','qdis':'','linkid':'visible-group-".$entityId."','scrollid':'admin-add-scroll'}";
    		  // $qtipOptAttachmentObj1 = "{'entityId':".$entityId.",'entityType':'cre_sec','url':'administration/people/group/owner-addedit/".$entityId."/".$entityType."','popupDispId':'qtip_owner_disp_".$qtipIdInit."','catalogVisibleId':'qtipAttachIdqtip_addpermissions_visible_disp_".$qtipIdInit."','wid':520,'heg':'270','postype':'bottomleft','poslwid':'','qdis':'','linkid':'owner-group-".$entityId."','scrollid':'admin-add-scroll'}";
            /* $form['addedit-left-col-extend-func'] = array(
              '#type' => 'markup',
              '#markup' => '<div id="permissions_disp_div" class="crs-tab-titles-container"><div class="permission-tab-icon"></div>'.
            				"<div id='qtip_permissions_disp_".$qtipIdInit."'><a id='visible-group-".$entityId."' class=\"tab-title\" onclick = \"callVisibility(".$qtipOptAttachmentObj.");\">".t('LBL1035')."</a><span id='visible-popup-".$entityId."' class='qtip-popup-visible' style='display:none; position:absolute; left:0px; top:0px;'></span></div>".//<div class=\"tab-seperator\"></div><div class=\"tags-tab-icon\"></div>".
                 			  '</div>',
            );
            $form['addedit-left-col-extend-func'] = array(
        	  		'#type' => 'markup',
        	  		'#markup' => '<div id="permissions_disp_div" class="crs-tab-titles-container"><div class="owner-tab-icon"></div><div id="qtip_owner_disp_'.$qtipIdInit.'"><div class="add_owner"><a id="owner-group-'.$entityId.'" class="tab-title" onclick = "callVisibility('.$qtipOptAttachmentObj1.');">'.t('Owner').'</a><span id="visible-popup-'.$entityId.'" class="qtip-popup-visible" style="display:none; position:absolute; left:0px; top:0px;"></span></div></div><div class="permission-tab-icon"></div>'.
        	  		"<div id='qtip_permissions_disp_".$qtipIdInit."'><a id='visible-group-".$entityId."' class=\"tab-title\" onclick = \"callVisibility(".$qtipOptAttachmentObj.");\">".t('LBL1035')."</a><span id='visible-popup-".$entityId."' class='qtip-popup-visible' style='display:none; position:absolute; left:0px; top:0px;'></span></div>".//<div class=\"tab-seperator\"></div><div class=\"tags-tab-icon\"></div>".
        	  		'</div>',
        	  ); */
            $form['addedit-left-col-extend-func'] = array(
                    '#type' => 'markup',
                    '#markup' => '<div id="permissions_disp_div" class="crs-tab-titles-container"><div class="permission-tab-icon"></div>'.
                    "<div id='qtip_permissions_disp_".$qtipIdInit."'><a id='visible-group-".$entityId."' class=\"tab-title\" onclick = \"callVisibility(".$qtipOptAttachmentObj.");\">".t('LBL1035')."</a><span id='visible-popup-".$entityId."' class='qtip-popup-visible' style='display:none; position:absolute; left:0px; top:0px;'></span></div>".//<div class=\"tab-seperator\"></div><div class=\"tags-tab-icon\"></div>".
                    '</div>',
            );
        }
	  	
	  	$form['addedit-left-col-end'] = array(
	       '#type' => 'markup',
	       '#markup' => '</div><div class="clearBoth"></div>',
	   	   '#prefix' => '',
	    );
  	}catch (Exception $ex) {
  		watchdog_exception('roleAddEditFormWithCancelAndSaveClose', $ex);
  		expertusErrorThrow($ex);
  	}
}

function exp_sp_administration_groups_addedit_form_submit($form, &$form_state) {
	try {
		expDebug::dPrint(' $form ' . print_r($form, true), 5);
		expDebug::dPrint(' $form_state ' . print_r($form_state, true), 5);
		expDebug::dPrint(' $form_state ' . $form_state['values']['grp_war'], 5);
		$config = getConfig("exp_sp");
		$instant_count = empty($config['instant_load_count']) ? 100 : $config['instant_load_count'];
		// $instant_count = 0;
		expDebug::dPrint("instant count >>> " . $instant_count, 5);
		$group_details = array();
		$hireDetails = array();
		$tmpGrpId = '';
		$flatTableFlag = TRUE;
		if($form_state['hidden-save-submit'] == true) {
			include_once ('exp_sp_administration_groups.inc');
			$loggedInUserId = getIdOfLoggedInUser();
			// Check whether add or edit
			if(empty($form_state['values']['id'])) { // Add
				if(!empty($form_state['values']['name'])) {
					$grpType = $form_state['storage']['form_info_list']['0']['type'];
					$returnArr = addNewGroup($form, $form_state, $loggedInUserId, 0, $grpType);
					expDebug::dPrint(' $returnArr = ' . print_r($returnArr, true), 4);
					$newRoleId = $returnArr[0]->id;
					$tmpGrpId = $newRoleId;
					// saveCustomFieldsInAddEditForm($form, $form_state, $newRoleId, 'role', $loggedInUserId);
					$stsMsg = t('LBL272') . ' ' . t('MSG600') . '.';
					// Henceforth this would be an edit operation. We need to set the new role id in form state build info, so
					// that cancel operation can fetch the new record's details from the database.
					$form_state['build_info']['args'][] = $newRoleId;
					$form_state['build_info']['args'][] = $grpType; // change by ayyappan for 42600: User not removed from Group when attributes do not match
					$form_state['storage']['new_entity'] = TRUE; // To indicate to Save ajax callback to build and render additional forms
					$form_state['rebuild'] = TRUE;
				}
			} else {
				$grpType = $form_state['build_info']['args'][2];
				unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
				// unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
				$tmpGrpId = $form_state['values']['id'];
				if($form_state['role_action_status'] == 'Suspend' || $form_state['role_action_status'] == 'Activate') {
					$flatTableFlag = FALSE;
					expDebug::dPrint('updated sts' . $form_state['role_action_status'], 4);
					activateOrDeactivateGrp($form_state['values']['id'], $form_state['role_action_status'], false);
					$stsMsg = t('MSG348');
				} else {
					$group_details = getGrpDetails($tmpGrpId, array('org_id', 'user_type', 'employment_type', 'country', 'state', 'department', 'job_role', 'language', 'is_manager', 'is_instructor'));
					$hireDetails = getHireDetails($tmpGrpId);
					if(!empty($form_state['values']['name'])) {
						updateRoleDetails($form, $form_state, $loggedInUserId, 0, $grpType);	// This call saves all group attribute
						// saveCustomFieldsInAddEditForm($form, $form_state, $form_state['values']['id'], 'role', $loggedInUserId);
						$stsMsg = t('LBL272') . ' ' . t('MSG601') . '.';
					}
				}
                                
/*				if($total_no_of_users <= $instant_count) Commented By Rajeshwar for Admin Group user fix
				grpUserDelete($tmpGrpId); */
			}
			$total_no_of_users = getUserDetailList($tmpGrpId, 0, 0, '', '', 1, '', 1);
			expDebug::dPrint("instant count$ total_no_of_users >>> " . $total_no_of_users, 5);
			$is_admin = adminGrporNot($tmpGrpId);
			
			$sortGroupAttributes = sortgrpAttributes($form_state);
			expDebug::dPrint("sortGroupAttributes >>> " . print_r($sortGroupAttributes, 1), 5);
			
			expDebug::dPrint("hire details  >>> " . print_r($hireDetails, 1), 5);
			if(count($hireDetails) == 0) {
				if(count($group_details) > 0) {
					$group_details['on_or_after_start_date'] = null;
					$group_details['on_or_before_start_date'] = null;
					$group_details['between_start_date'] = null;
					$group_details['between_end_date'] = null;
				}
			} else {
				$group_details['on_or_after_start_date'] = formatHireDate($hireDetails[0]->on_or_after_start_date);
				$group_details['on_or_before_start_date'] = formatHireDate($hireDetails[0]->on_or_before_start_date);
				$group_details['between_start_date'] = formatHireDate($hireDetails[0]->between_start_date);
				$group_details['between_end_date'] = formatHireDate($hireDetails[0]->between_end_date);
			}
			expDebug::dPrint("group_details >>> " . print_r($group_details, 1), 5);
			expDebug::dPrint("sortGroupAttributes >>> " . print_r($sortGroupAttributes, 1), 5);
			
			if(count($group_details) > 0) {
				expDebug::dPrint("flatTableFlag  inside >>> ");
				foreach($group_details as $grpKey => $grpVal) {
					if($group_details[$grpKey] != $sortGroupAttributes[$grpKey]) {
						expDebug::dPrint("inside iff " . $modFlag, 5);
						$modFlag = 1;
						break;
					}
				}
			} else
				$modFlag = 1;
			
			expDebug::dPrint("flatTableFlag  " . $flatTableFlag . " modFlag " . $modFlag, 5);
			expDebug::dPrint("total_no_of_users  " . $total_no_of_users . " instant_count " . $instant_count, 5);
			if($flatTableFlag === FALSE || $modFlag != 1) { // Status updated no need to update users
				expertus_set_message($stsMsg);
			} else if($total_no_of_users <= $instant_count) { // For instant Process
				if($is_admin == 1) {
					grpUserDelete($tmpGrpId);
					grpUserInsert($tmpGrpId);
				}
				populateGroupUsersInFlatTable($tmpGrpId, '', 'DeleteGroup');
				expertus_set_message($stsMsg);
			} else { // Background jobs
				
				if($is_admin == 1) {
					grpUserDelete($tmpGrpId);
					$grp_details = getGrpDetails($tmpGrpId, array('code', 'name', 'status', 'is_admin', 'created_by'));
					// Default entry in admin groups table
					$user_add_query = 'INSERT INTO slt_admin_group_users ( group_id,group_code,user_id,status, created_by, created_on, updated_by, updated_on) VALUES ';
					$status = $grp_details['status'];
					$val_str .= '(' . $tmpGrpId . ', "' . $grp_details['code'] . '", null, "' . $status . '", "' . $grp_details['created_by'] . '", now(), ' . $grp_details['created_by'] . ', now() )';
					
					// Insert query
					$insert_qry = $user_add_query . ' ' . $val_str;
					expDebug::dPrint("INSERT QUERY : " . $insert_qry, 4);
					$insert = db_query($insert_qry);
				}
				// mark the update action to be handled in backgroud cron job
				expDebug::dPrint('Inside else case where total count exceeds config limit:: ' . $total_no_of_users, 4);
				// Check certification monitor job status
				$jobname = 'group_bulk_user_upload';
				$checkStatus = check_monitor_jobs_status($jobname);
				if($checkStatus['custom0'] == 0) {
					// Update monitoring jobs table to pick the process in next run
					$update = db_update('slt_monitoring_jobs');
	    		$update->fields(array(
	    				'custom0'=>1,
	    				'updated_on' => now()
	    		));
					$update->condition('job_name', $jobname, '=');
					$update->execute();
				} else {
					// skip updating the monitor jobs table
				}
				$cTStatus = array('inprogress');
				$inProgressJobs = fetchBackgroundListForGroups($cTStatus, 'inlist', $tmpGrpId);
				expDebug::dPrint("inprogress job before insert >>> " . $inProgressJobs);
				if($inProgressJobs == 0) {
					$insertStmt = db_insert('slt_temp_background_jobs');
					$jobId = date('dmyHis');
					// order of params is content id, old version id ,lession id and new version id
					// $allIds = $contentId."--".$versionId."--".$currDefaultLesson."--".$currDefaultVersion;
					
					// $form_state_params = $form_state['input']['contentmoveusers-autocomplete']."--".$form_state['input']['search_all_moveuser_type-hidden'];
					// $allIds .= "--".$form_state_params;
					// $rangeBegins = 0;
					// $serializedData = serialize($result);
					// CT -- Content Transfer
	    		$insertStmt->fields(array(
	    				'program_id' => $tmpGrpId,
	    				'job_name' => 'GU-'.$jobId,
	    				'created_by' => $loggedInUserId,
	    				'created_on' => now(),
	    				'updated_by' => $loggedInUserId,
	    				'updated_on' => now(),
	    				'custom1' => $total_no_of_users,
	    				'custom2' => '',
	    				'custom3' => '',
	    				'custom4' => '',
	    				'status' => 'new'
	    		));
					expDebug::dPrintDBAPI("slt_temp_background_jobs check", $insertStmt, 5);
					$insertStmt->execute();
					
					// Entry for securitymanagementAdmin
					$delete = db_delete('slt_group_user_mapping');
					$delete->condition('group_id', $tmpGrpId);
					expDebug::dPrintDBAPI('delete userlist slt_admin_group_users', $delete);
					$delete->execute();
					expDebug::dPrint("complete the process");
				}
				
				// A message for bulk user upload in groups
				expertus_set_message(t('MSG921'));
			}
			
			$form_state['storage']['edited_entity'] = TRUE; // To trigger refresh of jqgrid on modal close.
			$form_state['display_class'] = TRUE;
			$form_state['rebuild'] = TRUE;
			
			// Added by Vincent on 20 Jan, 2017 for #0071187
			// if($flatTableFlag===TRUE)
			// populateGroupUsersInFlatTable($tmpGrpId,'','DeleteGroup');
			
			// $form_state['storage']['form_info_list'] = $formIdList;
		}
	} catch(Exception $ex) {
		watchdog_exception('exp_sp_administration_groups_addedit_form_submit', $ex);
		expertusErrorThrow($ex);
	}
}

function exp_sp_administration_groups_addedit_form_validate($form, &$form_state) {
	try {
		expDebug::dPrint(' grp war of form state '.print_r($form_state['values']['grp_war'],true),5);
		expDebug::dPrint(' $form_state '.print_r($form_state['values']['id'],true),5);
		expDebug::dPrint(' $form_state '.print_r($form_state,true),5);
		expDebug::dPrint(' $form_state values to validate the new and old values'.print_r($form_state['storage'],true),5);
		expDebug::dPrint(' $triggering_element '.print_r($form_state['triggering_element'],true),5);
		include_once('exp_sp_administration_groups.inc');
		$form_state['role_action_status']='';
	  $form_state['hidden-save-submit'] = false;
	  $form_state['esign_show_popup']= false;
	  if(!empty($form_state['storage']['new_entity'])) {
	    unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
	    //unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
	  }
	  if(!empty($form_state['storage']['edited_entity'])) {
	  	unset($form_state['storage']['edited_entity']); // Unset the variable to remove it from $form_state
	  }
	  if($form_state['values']['op'] == t('LBL123')) { // Close
	    $form_state['input'] = array(); // Clear user input - raw
	    $form_state['values'] = array(); // Clear user input - security cleared
	    $form_state['rebuild'] = TRUE; // Rebuild the form. Submit handler will not be called.
	    return;
	  }
	  if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
	    if($form_state['triggering_element']['#name']=='save')
	      $triggerValue  = 'save';
	    else
	      $triggerValue  = 'role-activate-suspend';
	  }else{
	    $triggerValue  = 'hidden-save';
	  }
	  
	  if ($form_state['triggering_element']['#name'] == $triggerValue) {
	    $form_state['esign_show_popup']= true;
	    // Check all mandatory fields exist
	    addEditCheckMandatoryFields($form, $form_state, array('name'));
	    // Validate name and description
	    $form_state['values']['id']=(!empty($form_state['values']['id']))? $form_state['values']['id'] : 0;
	    $dupcnt = roleNameDuplicatecheck($form_state['values']['name'],$form_state['values']['id']);
	    expDebug::dPrint('role name check : '.$dupcnt,5);
	  	if ($dupcnt != 0) {
	      expDebug::dPrint('duplicate value',4);
	      form_set_error('name', t('MSG644') .' '.$form_state['values']['name'] .t('LBL271').' '.t('MSG645'));
	      $form_state['esign_show_popup']= false;
	      $form_state["storage"]["form_validate"] = false;
	    }
	    //Validate added attribute criteria has duplicate
			if(!empty($form_state['values']['name']) && strlen($form_state['values']['name'])> 50){
				form_set_error('name', t("!name cannot be longer than %max characters but is currently %length characters long.",array("!name"=>$form['name']['#title'], "%max"=>"50", "%length"=>strlen($form_state['values']['name']))));
				$form_state['esign_show_popup']= false;
				$form_state["storage"]["form_validate"] = false;
			}
			
			$hireStart = $form_state['values']['hidden_hire_start_ste_con_hdt_btw'];
			$hireEnd = $form_state['values']['hire_end'];
			$hireMode = $form_state['values']['atr_ste_con_hdt'];
			$hireModeBetween = array_unique(explode(',',$form_state['values']['atr_ste_con_hdt']));
			expDebug::dPrint("end date hireMode -->> ".print_r($hireModeBetween,true) ,5 );
			/* Viswanathan added Hire date validation for #0073350*/
			if (in_array('ste_con_hdt_btw' , $hireModeBetween) && !empty($hireStart) && !empty($hireEnd)) { // start date less then end date
				$hireEndTemp = str_replace("-","/", $hireEnd);
				$hireStartTemp = str_replace("-","/", $hireStart);
				if (strtotime($hireEndTemp) < strtotime($hireStartTemp) ) {expDebug::dPrint("end date hireMode between -->> ".print_r($hireModeBetween,true) ,5 );
				form_set_error('hire_start', t('ERR059'));
				$form_state['esign_show_popup']= false;
				$form_state["storage"]["form_validate"] = false;
				}
			}
			if((!empty($hireStart) && (empty($hireEnd) || $hireEnd=="mm-dd-yyy" )) || (!empty($hireEnd) && (empty($hireStart) || $hireStart=="mm-dd-yyy" ))){
				form_set_error('hire_start',t('LBL175'). t('ERR101'));
			}
			/* Viswanathan added Hire date validation for #0073350*/
			if(empty($form_state['values']['id']) && $form_state['values']['grp_war'] == 0){
				if((!empty($hireStart) && (empty($hireEnd) || $hireEnd=="mm-dd-yyy" )) || (!empty($hireEnd) && (empty($hireStart) || $hireStart=="mm-dd-yyy" ))){
					form_set_error('hire_start',t('LBL175'). t('ERR101'));
					$form_state['esign_show_popup']= false;
					$form_state["storage"]["form_validate"] = false;
				}
				if (!empty($form_state['values']['name']) && ($dupcnt == 0)){
					$sortedattribute = sortgrpAttributes($form_state);
					expDebug::dPrint('Is_admin  Type : '.$form_state['storage']['form_info_list']['0']['type'], 4);
					// Fixed For this Ticket #0040094 -- Sending one more attribute in duplicateGrpAttributecheck Func For Admin or Leaner Group Check.
					$dupattrcnt = duplicateGrpAttributecheck($form_state['values']['id'],$sortedattribute,$form_state['storage']['form_info_list']['0']['type']);
					expDebug::dPrint('$dupattrcnt : '.print_r($dupattrcnt , true), 4);
					expDebug::dPrint('$dupattrcnt dupid : '.print_r($dupattrcnt[0]->dupid , true), 4);
					if ($dupattrcnt[0]->dupid != 0) {
						expDebug::dPrint('existing group check1 ',4);
						$commands = array();
						$commands[] = displayWarningWizard($dupattrcnt);
						/* Viswanathan added Hire date validation for #0073350*/
						$hireMode = $form_state['values']['atr_ste_con_hdt'];
                        $hireModeBetween = array_unique(explode(',',$form_state['values']['atr_ste_con_hdt']));
						$hireStart = $form_state['values']['hidden_hire_start_ste_con_hdt_btw'];
						$hireEnd = $form_state['values']['hire_end'];
						if ($hireMode != '') {
							if(in_array('ste_con_hdt_btw' , $hireModeBetween)){									
									$hireEndTemp = str_replace("-","/", $hireEnd);
									$hireStartTemp = str_replace("-","/", $hireStart);
									if (strtotime($hireEndTemp) < strtotime($hireStartTemp)&& (empty($hireStart) || $hireStart ==  '' )&& (empty($hireEnd) || $hireEnd == '')) {
										form_set_error('hire_start', t('ERR059'));
									}
										
									else{
										print ajax_render($commands);
										exit;
									}
								}
						}
						print ajax_render($commands);
						exit;/* Viswanathan added Hire date validation for #0073350*/
					}
				}
				
			}
			
				
		if(!empty($form_state['values']['id'])){
				$attrcntVal = duplicateGrpAttributecheck($form_state['values']['id'],$sortedattribute,$form_state['storage']['form_info_list']['0']['type'],1);
				expDebug::dPrint('VAlues of the group attribute: '.print_r($attrcntVal , true), 4);
				if ($attrcntVal == 1 && $form_state['values']['grp_war'] == 0) {
					expDebug::dPrint(' existing group check5 ',4);
					$commands = array();
					$commands[] = displayWarningWizard($form_state['values']['id'],1);
					
				      	$hireMode = $form_state['values']['atr_ste_con_hdt'];
				      	expDebug::dPrint('existing group check5 '.print_r($hireMode,true),5);
				      	$hireMode = explode(',',$hireMode);
						$hireStart = $form_state['values']['hidden_hire_start_ste_con_hdt_btw'];
						$hireEnd = $form_state['values']['hire_end'];
						if((!empty($hireStart) && (empty($hireEnd) || $hireEnd=="mm-dd-yyy" )) || (!empty($hireEnd) && (empty($hireStart) || $hireStart=="mm-dd-yyy" ))){
							form_set_error('hire_start',t('LBL175'). t('ERR101'));
						}
						 else if(in_array('ste_con_hdt_btw', $hireMode)){
								 $hireEndTemp = str_replace("-","/", $hireEnd);
								 $hireStartTemp = str_replace("-","/", $hireStart);
								 expDebug::dPrint('existing group check5 '.print_r($hireEndTemp,true),5);
								 expDebug::dPrint('existing group check5 '.print_r($hireStartTemp,true),5);
								  if (strtotime($hireEndTemp) < strtotime($hireStartTemp)) {
								  	expDebug::dPrint('existing group condtion ',4);
								  	form_set_error('hire_start', t('ERR059'));
								 }
								else{
								 	print ajax_render($commands);
								 	exit;
								 }
						  	 }
							 else{
							 	print ajax_render($commands);
							 	exit;
							 }
						 }
			}
			
	  }

	  if($form_state['triggering_element']['#name'] == 'hidden-save' || $form_state['triggering_element']['#name']=='role-status-upd-hidden-save') {
	    $form_state['role_action_status'] = $form_state['triggering_element']['#ajax']['roleActionStatus'];
	    $form_state['hidden-save-submit']=true;
	    $form_state['esign_show_popup']= false;
	    return;
	  }
		if($form_state['triggering_element']['#id'] == 'add_usr_pg_next') {
			expDebug::dPrint("add edit Validate herrrrr : 1", 4);
	    $form_state['display_class']   = TRUE;
	    $form_state['input']           = array();
	    $form_state['values']          = array();
	    $form_state['rebuild']         = TRUE;
	    $form_state['storage']['step'] = 'view';
	    $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
	    return;
	  }
	  if($form_state['triggering_element']['#id'] == 'add_usr_pg_first') {
	    expDebug::dPrint("add edit Validate herrrrr : 2", 4);
	    $form_state['display_class']   = TRUE;
	    $form_state['input']           = array();
	    $form_state['values']          = array();
	    $form_state['rebuild']         = TRUE;
	    $form_state['storage']['step'] = 'view';
	    $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
	    return;
	  }
	  if($form_state['triggering_element']['#id'] == 'add_usr_pg_last') {
	    expDebug::dPrint("add edit Validate herrrrr : 3", 4);
	    $form_state['display_class']   = TRUE;
	    $form_state['input']           = array();
	    $form_state['values']          = array();
	    $form_state['rebuild']         = TRUE;
	    $form_state['storage']['step'] = 'view';
	    $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
	    return;
	  }
  }catch (Exception $ex) {
    	watchdog_exception('exp_sp_administration_groups_addedit_form_validate', $ex);
    	expertusErrorThrow($ex);
  }
}

function exp_sp_administration_groups_attaching_user_form($form, &$form_state, $renderMode, $grpId) {
	try {
		expDebug::dPrint(' $form_state '.print_r($form_state,true),5);
		expDebug::dPrint(' $Build Info '.print_r($form_state['build_info']['files']['menu'],true),5);
		$classfor = "add-group-view";
		if(empty($form_state['build_info']['files']['menu'])){
			$classfor = "edit-group-view";
		}
		include_once(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.inc');
		$form = array();
		$form['#prefix'] = /* (stripos($_SERVER['HTTP_USER_AGENT'], 'chrome') !== false
		  				|| (stripos($_SERVER['HTTP_USER_AGENT'],'firefox') !== false)? '</form>' : '' )  */'</form>'.'<div id="role-detail-wrapper" class="'.$classfor.'">';
    	$form['#suffix'] = '</div>';
		addHiddenFieldToAddEditForm($form, 'hiddengptype','usrtit');

	    $form['edit-class-details-start'] = array(
	      '#prefix' => "<div id='catalog-class-addedit-form-details'>",
	    );
    if(!empty($grpId)) {
      $form_state['storage']['roleId'] = $grpId;
    }else{
      $grpId = $form_state['role_id'];
      $form_state['storage']['roleId'] = $grpId;
    }
    if(!empty($form_state['mode'])){
    	$displayMode = $form_state['mode'];
    	$form_state['storage']['$mode'] = $displayMode;
    }else{
     	$displayMode = 'add';
     	$form_state['storage']['$mode'] = $displayMode;
    }
    //unset($form_state['grpAddUsers_form_triggering_element']);
    if(isset($addAttributes))
     	unset($addAttributes['onclick']);
      // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
      // $addAttributes['class'][] = 'addedit-form-expertusone-throbber narrow-search-actionbar-orange-btnBG';
      $addAttributes['class'][] = 'narrow-search-actionbar-orange-btnBG';
      //$addAttributes['onclick'][] = '$(document).ready(function(){ addClassDetails('.$courseId.') }); remove_messages("class");';
      // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
      $addAttributes['data-wrapperid'] = array('role-detail-wrapper');
      $form['add-class-list'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="add-class-list-wrapper">'
      );
       // Users Search auto-complete start
      $user_search_type = ($form_state['values']['hiddengptype']=="fultit" || $form_state['values']['hiddengptype']=="fultitle")?t('LBL691') :t('LBL054') ;
     
     $paintMultiAction  = "<div id='search-list-class-title-keyword' class='search-list-keyword' style='display:block;'>";
     $paintMultiAction .= "<span id='search-dropdwn-list-class'>";
     $paintMultiAction .= "<input type='hidden' id='search_all_user_type-hidden' value='usrtit' />";
     $paintMultiAction .= "<input type='hidden' id='username-search-autocomplete_hidden' value='".sanitize_data(t('LBL181'))."' />";
     $paintMultiAction .= "<span id='select-list-class-dropdown' class='select-list-dropdown-class'>".$user_search_type."</span>";
     $paintMultiAction .= "<a id='admin-dropdown-arrow' class='select-list-class-dropdown-link dropdown-link-font ' onclick='$(\"#root-admin\").data(\"narrowsearch\").moreClassSearchHideShow();'> </a>";
     $paintMultiAction .= "<ul id='select-list-class-dropdown-list'>";
     $paintMultiAction .= "<li onclick=\"$('#root-admin').data('narrowsearch').moreAdduserSearchTypeText('".addslashes(t('LBL054'))."','usrtit');\">".t('LBL054')."</li>";
     $paintMultiAction .= "<li onclick=\"$('#root-admin').data('narrowsearch').moreAdduserSearchTypeText('".addslashes(t('LBL691'))."','fultit');\">".t('LBL691')."</li>";
     $paintMultiAction .= "</ul>";
     $paintMultiAction .= "</span></div>";

     $form['class_multi_search_container'] = array(
     		'#type' => 'markup',
     		'#markup' => '<div class="admin_class_multi_search_container">',
     );
     $form['more_add_enrolluser_search'] = array(
     		'#type' => 'markup',
     		'#markup' => $paintMultiAction,
     );
     $form['class_auto-search'] = array(
      	'#type' => 'markup',
      	'#markup' => '<div class="admin-class-auto-search-container">',
     );
     $userSearchType = '';
     $userSearchType = $form_state['storage']['search_usr_type'];
     $searchAjaxEvent = 'click';
     $acMenuPath = "administration/people/group/user-name-autocomplete/".$grpId.'/'.'listusers';
     $default_text_title = t('LBL181');
     $autoCompleteAttributes['class'][] = 'admin_class_ac_input_mainform';
     $autoCompleteAttributes['onkeypress'][]   = 'disableEnrterKey(event);'; // added by vincent for prevent the enter key submit in search box
     addACFieldForMultiSelect($form, 'username-search-autocomplete', $acMenuPath, '', '', '', array(),
                                  array('search_type' => "$('#search_all_user_type-hidden').val()"), false, false,
                                  $default_text_title, $autoCompleteAttributes);
     $form['class_auto-search-end'] = array(
      	'#type' => 'markup',
      	'#markup' => '</div>',
     );
     $searchAttributes['class'][] = 'admin-pagination-role-search-go';
     $searchAttributes['class'][] = 'addedit-form-expertusone-throbber';
     $searchAttributes['onclick'][] = "getUsersearchType();";
     //$searchAttributes['data-wrapperid'] = 'role-detail-wrapper';
     $wrapperId                     =	'role-detail-wrapper';
     $searchAttributes['data-wrapperid'][] = $wrapperId;
     $form['search_addusers'] = array(
        '#type' => 'button',
        '#id'   => 'search_addusers',
        '#title' => t('LBL304'),
        '#value' => ' ',
        '#name' => 'Search role users',
        '#attributes' => $searchAttributes,
        '#ajax' => array(
                  'wrapper' => $wrapperId,
                  'callback' => 'role_add_user_autocomplete_callback',
                  'method' => 'replace',
                  'effect' => 'none',
                  'event'=>'click',
			   				  'role_id' =>$grpId,
                  'getuserName'=> $form_state['values']['username-search-autocomplete_hide'],
                  'keypress' => true,
                  'progress' => array(
                    'type' => 'throbber',
                    'message' => ''
                  ),
                )
     );
     $form['class_multi_search_container-end'] = array(
      	'#type' => 'markup',
      	'#markup' => '<div class="filter-search-start-date-right-bg"></div></div>',
     );
     if($displayMode != 'view'){
        $entityId          	 =  $grpId;
        $entityType        	 = 'cre_sec';
        $qtipIdInit        	 = $entityId.'_'.$entityType;
        $qtipOptClassObj     = "{'entityId':'".$entityId."',
        												'url':'administration/people/group/user-addedit/".$grpId."/".$entityType."',
												        'popupDispId':'qtip_addusers_visible_disp_".$qtipIdInit."',
												        'catalogVisibleId':'qtipAttachIdqtip_addusers_visible_disp_".$qtipIdInit."',
												        'wid':520,'heg':'270','postype':'topright','poslwid':'','qdis':'ctool',
												        'linkid':'visible-group-users-".$entityId."'}";

        $checkStatus = array ('new','inprogress');
        $back_gd_running = fetchBackgroundListForGroups($checkStatus,'inlist',$grpId);
        $disableCls = ($back_gd_running) ? 'add-user-disable' : '';
        if($back_gd_running){
        	$form['add-users-button'] = array(
        			'#type' => 'markup',
        			'#prefix' => "<div id='qtip_addusers_visible_disp_".$qtipIdInit."' class='qtip-wrapper-addusers'><a id='visible-group-users-".$entityId."'  class='admin-save-button-container add-class-button add-user-disable '><div class='narrow-search-actionbar-orange-btnLeft'></div><div class='narrow-search-actionbar-orange-btnBG'>",
        			'#suffix' => t("LBL1038").'</div><div class="narrow-search-actionbar-orange-btnRight"></div></a><span id="visible-popup-'.$entityId.'" class="qtip-popup-visible" style="display:none; position:absolute; left:0px; top:0px;"></span></div>',
        			'#value' => t("LBL1038"),
        			'#name' => "Add Users",
        			'#limit_validation_errors' => array(),
        			'#attributes' => $addAttributes,
        	);
        	
        }else{
	        $form['add-users-button'] = array(
	          '#type' => 'markup',
	          '#prefix' => "<div id='qtip_addusers_visible_disp_".$qtipIdInit."' class='qtip-wrapper-addusers'><a id='visible-group-users-".$entityId."' onclick =\"callVisibility(".$qtipOptClassObj."); resetPopPosision('qtip_addusers_visible_disp_".$qtipIdInit."'); return false;\"  class='admin-save-button-container add-class-button '><div class='narrow-search-actionbar-orange-btnLeft'></div><div class='narrow-search-actionbar-orange-btnBG'>",
	          '#suffix' => t("LBL1038").'</div><div class="narrow-search-actionbar-orange-btnRight"></div></a><span id="visible-popup-'.$entityId.'" class="qtip-popup-visible" style="display:none; position:absolute; left:0px; top:0px;"></span></div>',
	          '#value' => t("LBL1038"),
	          '#name' => "Add Users",
	          '#limit_validation_errors' => array(),
	          '#attributes' => $addAttributes,
	       	);
        }

     }
     /* ------------------------------------Start Pagination----------------------------*/

	  $pg_page     = 1;
	  $start       = 0;
	  $limit       = 10;
	  $checkStatus = array ('new','inprogress');
	  $back_gd_running = fetchBackgroundListForGroups($checkStatus,'inlist',$grpId);
	  
	  if(!empty($form_state['storage']['search_add_users'])){
	    $userName = $form_state['storage']['search_add_users'];
	    $userSearchType = $form_state['storage']['search_usr_type'];

	  }else{
	    $userName='';
	    $userSearchType ='';
	  }
	  expDebug::dPrint('role id 111---'.$grpId. ' === '. $userName . '===' .$userSearchType, 4);
	  
	  if($back_gd_running)
	  	$addUsrListCount = getUserListForGroups($grpId, 0, 0,$userName,$userSearchType,1);
	  else
	  	$addUsrListCount = getUserDetailList($grpId, 0, 0,$userName,$userSearchType,1);
	  
	 // $addUsrListCount = count($addUsrListCount);
	  if( $addUsrListCount > 0 ){
	    $total_pages = ceil($addUsrListCount/$limit);
	  }else{
	    $total_pages = 0;
	  }

	  if($pg_page > $total_pages) {
	  	$pg_page = $total_pages;
	  }
	  if(!empty($form_state['storage']['page'])) {
	    $pg_pagenew  = $form_state['storage']['page'];
	      if($pg_pagenew > $total_pages){
	         $pg_page  = $form_state['storage']['page']- 1;
	         $form_state['storage']['page'] = $pg_page;
	         $start    = ($limit * $pg_page) - $limit ;
	      }else{
	         $pg_page  = $form_state['storage']['page'];//$form_state['question_pgn_page'];
	         $start    = ($limit * $pg_page) - $limit ;
	       }
	  }

	  if($start < 0) {
	  	$start = 0;
	  }

	  if($addUsrListCount > 10 ){
	    $displayPageStyle = "display:block;";
	  }else{
	    $displayPageStyle = "display:none;";
	  }
	 
	  if($back_gd_running)
	  	$userList = getUserListForGroups($grpId, $start, $limit,$userName,$userSearchType);
	  else 
	  	$userList = getUserDetailList($grpId, $start, $limit,$userName,$userSearchType);

	  expDebug::dPrint("usr list ".print_r($userList,true),5);
  /* ------------------------------------End Pagination----------------------------*/
		if($addUsrListCount == 0){
      if (empty($form_state['storage']['search_add_users'])) {
        $userListMsg = t('MSG627');
      }else {
        $userListMsg = t('MSG381').'.';
      }
      $form['no-users-list'] = array(
        '#type' => 'item',
        '#prefix' => '<div class="clearBoth"></div><div class="nonlist" id="no-users-list">' .  $userListMsg,
        '#suffix' => '</div>',
      );
	  }else{
       $deleteTxt = "<td width='5%' class='adduser-title-heading' style='border-left:0'>&nbsp;</td>";
       global $theme_key;
       if($theme_key == 'expertusoneV2') {
          $form['heading-add-user'] = array(
                '#type' => 'markup',
                '#prefix' => "<div class='edit-adduser-list'><div class='edit-adduser-list-grid'><table class='adduser-table-heading' cellpadding='0' cellspacing='0' border='0' width='100%'><tr height='26px'>",
                '#suffix' =>  "<td width='30%' style='padding-left: 15px;border-left:0' class='adduser-title-heading user-list-header user-title-head-pad'>".t('LBL054')."</td>
                			   <td width='45%' class='adduser-title-heading'>".t('LBL691')."</td>
                			   <td width='18%' class='adduser-title-heading user-title-head-status'>".t('LBL102')."</td>
                			   ".$deleteTxt."
                			   <td width='5%' class='adduser-title-heading' style='border-left:0'>&nbsp;</td>
                			   </tr></table><table class='adduser-table-heading'>",
       				   );
       }else{
           $form['heading-add-user'] = array(
                '#type' => 'markup',
                '#prefix' => "<div class='edit-adduser-list'><div class='edit-adduser-list-grid'><div style='border-bottom: solid 1px #CCCCCC;'><table class='adduser-table-heading' cellpadding='0' cellspacing='0' border='0' width='100%'><tr height='30px'>",
                '#suffix' =>  "<td width='30%' style='padding-left: 15px;' class='adduser-title-heading user-list-header user-title-head-pad'>".t('LBL054')."</td>
                   <td width='45%' class='adduser-title-heading'>".t('LBL691')."</td>
                   <td width='18%' class='adduser-title-heading user-title-head-status'>".t('LBL102')."</td>
                   ".$deleteTxt."
                   <td width='5%' class='adduser-title-heading'>&nbsp;</td>
                   </tr></table></div><table class='adduser-table-heading'>",
              );
        }
        for($i=0;$i<count($userList);$i++) {
           $uniqueId = $grpId.'-'.$userList[$i]->user_id;
           $dynamic_cos_id      =    $userList[$i]->user_id;
           $dynamic_div         =	"delete-".$uniqueId;

           $username = $userList[$i]->uname;
    		   $displayName  = titleController('ADMIN-GROUPS-UNAME', $username,13);
          /**	0037564: Code Re-Factoring - Browser Compatibility - Old Theme - Admin side - Chrome - People
           *	3. People > Group > Edit Group - Administer > The Users section should have alternate bg color rows. (Pagination is also missing?)
           *	Code added for alternate background colors of user list and table header bottom border
           *	Change of Code in Line #: 1131, 1152, 1155
           * */
    	   $rowStyle = ($i % 2 == 0 ? '' : 'background-color: #F7F7F7;');
           $form['edit-adduser-uname-list-'.$i] = array(
	         			'#type' => 'markup',
           			'#prefix' =>  "<tr style='$rowStyle'><td width='30%' style='padding-left:15px;line-height:25px;' class='user-list-detail user-title-head-pad-username'><span class='vtip' title='". $userList[$i]->uname."'>". $displayName."",
           			'#suffix' =>  "</span></td>",
           			);

           $fullname = $userList[$i]->fname;
    		   $displayName  = titleController('ADMIN-GROUPS-FULLNAME', $fullname,17);

           $form['edit-adduser-fname-list-'.$i] = array(
	         			 '#type' => 'markup',
           			 '#prefix' =>  "<td width='47%' class='user-list-detail user-list-full-name'><span class='vtip' title='". $userList[$i]->fname."'>". $displayName."",
           			 '#suffix' =>  "</span></td>",
           				);
           $userList[$i]->status = ($userList[$i]->status == 'Suspended' || $userList[$i]->status == 0) ? t('LBL572'): t('Active');
           if($theme_key == 'expertusoneV2') {
           	 $form['edit-adduser-status-list-'.$i] = array(
	         				 '#type' => 'markup',
           				 '#prefix' =>  "<td width='15%'  class='user-list-detail'><span class='vtip' title='". $userList[$i]->status."'>". $userList[$i]->status."",
           				 '#suffix' =>  "</span></td>",
           					);
           }else{
           	 $form['edit-adduser-status-list-'.$i] = array(
	         				 '#type' => 'markup',
            			 '#prefix' =>  "<td width='20%'  class='user-list-detail'><span class='vtip' title='". $userList[$i]->status."'>". $userList[$i]->status."",
            			 '#suffix' =>  "</span></td>",
              			);
        	 }
           $deleteAttributes = array();
           $deleteAttributes['class'][]   = 'addedit-form-expertusone-throbber';
           $deleteAttributes['class'][]   = 'admin-delete-img';
           $deleteAttributes['class'][]   = 'add-user-delete';
           $wrapperId                     =	'role-detail-wrapper';
           $deleteAttributes['data-wrapperid'] = array($wrapperId);

           $checkedStatus='';
           $checkedStatus = ($userList[$i]->enable == 1) ? 'checked' : '';
           $checkedClass = ($userList[$i]->enable == 1) ? 'checkbox-selected' : 'checkbox-unselected';
           if($theme_key == 'expertusoneV2') {
              $form['delete-group-list-button-start-'.$i] = array(
        		      	'#type' => 'markup',
                    '#prefix' => '<td width="10%"><div class="add-user-delete " onclick="$(\'#deleteAddedUser-'.$i.'\').click();" title='.t("LBL286").'>&nbsp;</div><span style="display:none;">',
                 		//'#prefix' => '<td width="10%"><div class='.$checkedClass.'> <input type="checkbox" id="deleteAddedUser-'.$dynamic_div.'" name="groupuser-'.$userList[$i]->user_id.'" '.$checkedStatus.' class="multiselect-singlecheck" onclick="checkboxSelectedUnselectedCommon(this);" /></div><span style="display:none;">',
                 		);
            }else{
             	$form['delete-group-list-button-start-'.$i] = array(
            	    	'#type' => 'markup',
                    '#prefix' => '<td width="5%"><div class="add-user-delete" onclick="$(\'#deleteAddedUser-'.$i.'\').click();" title='.t("LBL286").'>&nbsp;</div><span style="display:none;">',
                 			//'#prefix' => '<td width="10%"><div class='.$checkedClass.'> <input type="checkbox" id="deleteAddedUser-'.$dynamic_div.'" name="groupuser-'.$userList[$i]->user_id.'" '.$checkedStatus.' class="multiselect-singlecheck" onclick="checkboxSelectedUnselectedCommon(this);" /></div><span style="display:none;">',
              		   );
            }

            $form['delete-group-list-button-'.$i] = array(
                  '#type' => 'checkbox',
                  '#name' => 'deleteAddedUser-'.$i,
                  '#id' => 'deleteAddedUser-'.$i,
                  //'#prefix' => '',
                  '#suffix' => '</span></td></tr>',
                  '#attributes' => $deleteAttributes,
                  '#ajax' => array(
	            	    'callback'  => 'exp_sp_administration_user_delete_callback',
	                	'wrapper'   =>'role-detail-wrapper',
	                  'loop_id'   =>$i,
	             	    'user_id'   =>$userList[$i]->user_id,
	                  'role_id'   =>$grpId,
	                  'event'     => 'click',
	                  ),
            	    );
        }
        $form['heading-add-user-end'] = array(
              '#type' => 'markup',
              //'#prefix' => "<div class='edit-adduser-list'><table class='adduser-table-heading' cellpadding='0' cellspacing='0' border='0' width='100%'><tr height='30px'>",
              '#suffix' =>  "</table></div>",
             );
	  }

 		/* ------------------------------------Start Pagination----------------------------*/
    $attributesFirst = array();
    $attributesFirst['class'][] = 'addedit-form-expertusone-throbber';
    $attributesFirst['class'][] = 'add-user-first-btn';
    $attributesFirst['data-wrapperid'] = 'role-detail-wrapper';

		if($pg_page == 1) {
		 	$form['adduser-pagination-first'] = array(
		   			'#type' => 'markup',
		   			'#markup' => '<div class="add-user-pagination-container" style="'.$displayPageStyle.'"><span class="add-user-first-btn"></span>', //start
		      	);
		}else{
		 	$form['adduser-pagination-first'] = array(
		   			'#type' => 'button',
		   			'#id' => 'add_usr_pg_first',
		   			'#prefix' => '<div class="add-user-pagination-container" style="'.$displayPageStyle.'">',//(PR) Page :'.$pg_page." || start : ".$start
		   			'#suffix' => ' ',
		   			//'#value' => '<<', //attach_crs_pg_previous
		   			'#name' => 'add_user_pagination_first',
		   			'#attributes' => $attributesFirst,
		   			'#ajax' => array(
		   					'wrapper' => 'role-detail-wrapper',
		   					'callback' => 'add_user_pagination_callback',
		   					'method' => 'replace',
		   					'effect' => 'none',
		   					'event'=>'click',
		   					'question_pgn_page' => 1,
		   					'role_id' =>$grpId,
		   					'keypress' => true,
		   					'progress' => array(
		   							'type' => 'throbber',
		   							'message' => ''
		      					),
		      			)
		      	);
		 }

     $attributesPrev = array();
     $attributesPrev['class'][] = 'addedit-form-expertusone-throbber';
     $attributesPrev['class'][] = 'add-user-previous-btn';
     $attributesPrev['data-wrapperid'] = 'role-detail-wrapper';

     if($pg_page == 1) {
        $form['adduser-pagination-previous'] = array(
              '#type' => 'markup',
              //'#markup' => '<div class="add-user-pagination-container" style="'.$displayPageStyle.'"><span class="add-user-previous-btn"></span>', //start
              '#markup' => '<span class="add-user-previous-btn"></span>', //start
              );
      }else{
         $form['adduser-pagination-previous'] = array(
               '#type' => 'button',
               '#id' => 'add_usr_pg_previous',
               //'#prefix' => '<div class="add-user-pagination-container" style="'.$displayPageStyle.'">',//(PR) Page :'.$pg_page." || start : ".$start
           		 '#prefix' => '',
               '#suffix' => '',
               //'#value' => '<<', //attach_crs_pg_previous
               '#name' => 'add_user_pagination_previous',
               '#attributes' => $attributesPrev,
               '#ajax' => array(
                  'wrapper' => 'role-detail-wrapper',
                  'callback' => 'add_user_pagination_callback',
                  'method' => 'replace',
                  'effect' => 'none',
                  'event'=>'click',
   				        'question_pgn_page' => ($pg_page-1),
   				        'role_id' =>$grpId,
                  'keypress' => true,
                  'progress' => array(
                    'type' => 'throbber',
                    'message' => ''
                  ),
                )
             );
      }

      $attributesCenter = array();
      $attributesCenter['class'][] = 'addedit-form-expertusone-throbber';
      $attributesCenter['data-wrapperid'] = 'role-detail-wrapper';

      $form['adduser-pagination-total-txt-1'] = array(
            '#type' => 'textfield',
            '#id' => 'add_usr_pg_txtfld',
            '#name' => 'add_usr_pg_txtfld',
            '#prefix' => '<div class="tot-txt-cls">',
            '#suffix' =>  '<span style="float:right;padding-top:3px;">'.'&nbsp;'.t('LBL981').'&nbsp;&nbsp;'.$total_pages.'&nbsp;</span></div>',
            //'#default_value' => 1,
            '#value' => $pg_page,
            '#attributes' => $attributesCenter,
            '#size' => 1,
            '#ajax' => array(
                 'callback' => 'add_user_pagination_callback',
               	 'wrapper' =>'role-detail-wrapper',
                 'question_pgn_page' => $pg_page,
   		           'role_id' =>$grpId,
                 'event' => 'change',
                 ),
            );

      $attributesNxt = array();
      $attributesNxt['class'][] = 'addedit-form-expertusone-throbber';
      $attributesNxt['class'][] = 'add-user-next-btn';
      $attributesNxt['data-wrapperid'] = 'role-detail-wrapper';

      if($pg_page == $total_pages) {
         $form['adduser-pagination-next'] = array(
               '#type' => 'markup',
               '#markup' => '<span class="add-user-next-btn"></span>',
                );
       }else{
         $form['adduser-pagination-next'] = array(
               '#type' => 'button',
               '#id' => 'add_usr_pg_next',
               '#prefix' => '',//(NX) Page :'.$pg_page." || start : ".$start
               //'#suffix' => '</div>',
               '#suffix' => '',
               '#value' => ' ', //add_usr_pg_next
               '#name' => 'add_user_pagination_next',
               '#attributes' => $attributesNxt,
               '#ajax' => array(
                 'wrapper' => 'role-detail-wrapper',
                 'callback' => 'add_user_pagination_callback',
                 'method' => 'replace',
                 'effect' => 'none',
                 'event'=>'click',
                 'question_pgn_page' => ($pg_page+1),
   			         'role_id' =>$grpId,
                 'keypress' => true,
                 'progress' => array(
                    'type' => 'throbber',
                    'message' => ''
                  ),
                )
            );
       }

       $attributesLast = array();
       $attributesLast['class'][] = 'addedit-form-expertusone-throbber';
       $attributesLast['class'][] = 'add-user-last-btn';
       $attributesLast['data-wrapperid'] = 'role-detail-wrapper';

       if($pg_page == $total_pages) {
        	$form['adduser-pagination-last'] = array(
          			'#type' => 'markup',
           			'#markup' => '<span class="add-user-last-btn"></span></div>',
       		    	);
       }else{
         	$form['adduser-pagination-last'] = array(
          			'#type' => 'button',
           			'#id' => 'add_usr_pg_last',
           			'#prefix' => ' ',//(NX) Page :'.$pg_page." || start : ".$start
           			'#suffix' => '</div>',
           			'#value' => ' ', //add_usr_pg_next
           			'#name' => 'add_user_pagination_last',
           			'#attributes' => $attributesLast,
           			'#ajax' => array(
       					'wrapper' => 'role-detail-wrapper',
          					'callback' => 'add_user_pagination_callback',
           					'method' => 'replace',
           					'effect' => 'none',
           					'event'=>'click',
           					'question_pgn_page' => $total_pages,
           					'role_id' =>$grpId,
           					'keypress' => true,
           					'progress' => array(
           							'type' => 'throbber',
           							'message' => ''
           					),
           			)
     	    	);
      }
      /* ------------------------------------End Pagination----------------------------*/
      return $form;
   }catch (Exception $ex) {
     	watchdog_exception('exp_sp_administration_groups_attaching_user_form', $ex);
     	expDebug::dPrint("Error: ".print_r($ex,true),1);
     	expertusErrorThrow($ex);
   }
}

function exp_sp_administration_user_delete_callback($form, &$form_state){
  expDebug::dPrint( 'Delete Call back() $form_state[triggering_element] = ' . print_r($form_state['triggering_element'], true) , 5);
 	try {
 		 	$triggeringElement = $form_state['triggering_element'];

      //$actionCheck = explode("-", $triggeringElement['#name']);

      $userId = $triggeringElement['#ajax']['user_id'];
      $grpId = $triggeringElement['#ajax']['role_id'];
      $entityType = $triggeringElement['#ajax']['entity_type'];
      updateRemoveUser($grpId,$userId);
      $min_form_state = array(
	       'ajax' => TRUE,
	       're_render' => TRUE,
	       'no_redirect' => TRUE,
	       'role_id' => $grpId,
	       'user_id' =>  $userId,
	       'build_info' => array('args' => array('ajax'))
	      );

      $form_state = $min_form_state;

      expDebug::dPrint('exp_sp_administration_user_delete_callback formstateee : '.print_r($form_state,true) , 5);

      $formId = 'exp_sp_administration_groups_attaching_user_form';
      $builtForm = drupal_build_form($formId, $form_state);
     
      $commands = array();
      $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));
      $commands[] = ajax_command_refresh_narrow_search_results('onclose');
      return array(
            '#type' => 'ajax',
            '#commands' => $commands
      );
		
     syncSolrData('User');
 	} catch (Exception $ex) {
    	watchdog_exception('exp_sp_administration_user_delete_callback', $ex);
    	expertusErrorThrow($ex);
 	}
 	
}

function role_add_user_autocomplete_callback($form, &$form_state){
	try {
		expDebug::dPrint(' $triggering_element  '.print_r($form_state['triggering_element']['#ajax']['role_id'],true),5);
	 	//$userId = $triggeringElement['#ajax']['user_id'];
	 	$defaultId = $form_state['triggering_element']['#ajax']['role_id'];
	  $form_state = array();
	  $form_state['rebuild'] = TRUE;
	  $min_form_state = array(
	    'ajax' => TRUE,
	    're_render' => TRUE,
	    'no_redirect' => TRUE,
	    'role_id' => $defaultId,
	    'build_info' => array('args' => array('ajax'))
	  );
	  $form_state = $min_form_state;

	  $formId = 'exp_sp_administration_groups_attaching_user_form';
	  $builtForm = drupal_build_form($formId, $form_state);

	  $commands = array();
	  $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));

	  return array(
	    '#type' => 'ajax',
	    '#commands' => $commands
	  );
  }catch (Exception $ex) {
  	watchdog_exception('role_add_user_autocomplete_callback', $ex);
  	expertusErrorThrow($ex);
  }
}

function add_user_pagination_callback($form, &$form_state){
  try {
    $defaultId = $form_state['triggering_element']['#ajax']['role_id'];
    $question_pgn_page    = $form_state['triggering_element']['#ajax']['question_pgn_page'];

    $form_state = array();

    $form_state['rebuild'] = TRUE;

    $min_form_state = array(
       'ajax' => TRUE,
       're_render' => TRUE,
       'no_redirect' => TRUE,
       'program_id' => $defaultId,
      'question_pgn_page' => $question_pgn_page,
       'build_info' => array('args' => array('ajax'),'question_pgn_page' => $question_pgn_page)
     );

      $form_state = $min_form_state;

     //$form_state['storage']['page'] = $question_pgn_page;

      expDebug::dPrint('add_user_pagination_callback: '.print_r($form_state,true) , 5);

      $formId = 'exp_sp_administration_groups_attaching_user_form';
      $builtForm = drupal_build_form($formId, $form_state);

      $commands = array();
      $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));

      return array(
            '#type' => 'ajax',
            '#commands' => $commands
      );

   }catch (Exception $ex) {
      watchdog_exception('add_user_pagination_callback', $ex);
      expertusErrorThrow($ex);
   }
}

function exp_sp_administration_groups_attaching_user_form_validate($form, &$form_state){
	try {
	  if($form_state['triggering_element']['#id'] == 'add_usr_pg_txtfld') {
	  	expDebug::dPrint("Validate herrrrr : 3", 4);
	    $form_state['display_class']   = TRUE;
	    $form_state['rebuild']         = TRUE;
	    $form_state['storage']['step'] = 'view';
	    $form_state['storage']['page'] = $form_state['input']['add_usr_pg_txtfld'];//$form_state['triggering_element']['#ajax']['question_pgn_page'];//
	    return;
	  }

	  if($form_state['triggering_element']['#id'] == 'add_usr_pg_next') {
	  	expDebug::dPrint("Validate herrrrr : 1", 4);
	    $form_state['display_class']   = TRUE;
	    $form_state['input']           = array();
	    $form_state['values']          = array();
	    $form_state['rebuild']         = TRUE;
	    $form_state['storage']['step'] = 'view';
	    $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
	    return;
	  }

	  if($form_state['triggering_element']['#id'] == 'add_usr_pg_previous') {
	   	 expDebug::dPrint("Validate herrrrr : 2", 4);
	     $form_state['display_class']   = TRUE;
	     $form_state['input']           = array();
	     $form_state['values']          = array();
	     $form_state['rebuild']         = TRUE;
	     $form_state['storage']['step'] = 'view';
	     $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
	     return;
	  }
	  if($form_state['triggering_element']['#id'] == 'add_usr_pg_first') {
	    expDebug::dPrint("Validate herrrrr : 4", 4);
	    $form_state['display_class']   = TRUE;
	    $form_state['input']           = array();
	    $form_state['values']          = array();
	    $form_state['rebuild']         = TRUE;
	    $form_state['storage']['step'] = 'view';
	    $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
	    return;
	  }
	  if($form_state['triggering_element']['#id'] == 'add_usr_pg_last') {
	   	expDebug::dPrint("Validate herrrrr : 5", 4);
	   	$form_state['display_class']   = TRUE;
	   	$form_state['input']           = array();
	   	$form_state['values']          = array();
	   	$form_state['rebuild']         = TRUE;
	   	$form_state['storage']['step'] = 'view';
	   	$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
	   	return;
	  }

		if($form_state['triggering_element']['#id'] == 'search_addusers') {
			expDebug::dPrint("Validating ..", 4);
	    $form_state['storage']['search_add_users'] = $form_state['values']['username-search-autocomplete'];
	    $form_state['storage']['search_usr_type']     = $form_state['values']['hiddengptype'];//search_usr_type
	    $form_state['display_class']   = TRUE;
	    $form_state['input']           = array();
	    $form_state['values']          = array();
	    $form_state['rebuild']         = TRUE;
	    $form_state['storage']['step'] = 'view';
	    $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
      return;
    }
  }catch (Exception $ex) {
   	watchdog_exception('exp_sp_administration_groups_attaching_user_form_validate', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_administration_groups_permission() {
	try {
    return array(
    	'Security Admin Perm' => array(
      'title' => t('Security Admin Perm')
    	)
  	);
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_groups_permission', $ex);
    expertusErrorThrow($ex);
  }
}

function addUsersDetailsList($form, &$form_state, $callByAPI=false) {
	include_once(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.inc');
  try {
    if($callByAPI == true){
      $grpId = $form_state[values][group_id];
      $userId = $form_state[values][user_id];
      //$uniqueId  = "grpAddUsers-$grpId-$userId";
     // $is_admin = 1;
    }
    else {
      $grpId = $form_state['triggering_element']['#ajax']['role_id'];
      $userId = $form_state['user_id'];
      $uniqueId  = "grpAddUsers-$grpId-$userId";
    }

    // $grpcode = getGrpCode($grpId);
	$grpDetails = getGrpDetails($grpId, array('code', 'status','name','is_admin'));
	$grpcode = $grpDetails['code'];
	$grp_status = $grpDetails['status'];
	$grp_name = $grpDetails['name'];
    $associateIdListArray = '';

    if(!empty($form_state['input']['hidden_idlist_'.$uniqueId]) || !empty($form_state['hidden_idlist_'.$uniqueId])|| ($callByAPI == true)){
      if($callByAPI == true){
        $newUserList = explode(',', $userId);
        $associateIdListArray = $userId;
        $is_admin = adminGrporNot($grpId);
      }
      else{
        $loggedUserId = getSltpersonUserId();
        if (!empty($form_state['input']['hidden_idlist_'.$uniqueId])) {
          $associateIdListArray = $form_state['input']['hidden_idlist_'.$uniqueId];
        }
        else {
          $associateIdListArray = $form_state['hidden_idlist_'.$uniqueId];
        }
        $newUserList=$_POST['hidden_idlist_' . $uniqueId];
        $newUserList = explode(',', $newUserList);
        $is_admin = adminGrporNot($grpId);
      }
      if($callByAPI == true){ // Ram : This Code Belongs To API Call Only Refer This Ticket #0040010
	      if($is_admin !='1'){
	        $existingAddUsersList = getUserListField($grpId,'added_users');
	        $userId = implode(',', array_diff(explode(',',$userId), explode(',',$existingAddUsersList)));
	        $newUserList = explode(',', $userId);
	      }
	      else{
	        $availableUserlistId = getUserListField($grpId,'userslist');
	        $userId = implode(',', array_diff(explode(',',$userId), explode(',',$availableUserlistId)));
	        $newUserList = explode(',', $userId);
	      }
	      if($userId == ''){
	        return "Users already in the group";
	        exit;
	      }
      }


      foreach($newUserList as $userId){

	      $removecnt = removedUserorNot($userId,$grpId);//check whether the user is in removed_users list
	      /*
	      $enrollId = getMandatoryEnrollId($grpId,$userId);
	      $complianceenrollId = getComplianceEnrollId($grpId,$userId);
	      $masterEnrollId = getMandatoryMasterEnrollId($grpId,$userId);
	       */

	      try{
	      	$txn = db_transaction();
	      	// Commented for 87900: While saving a group "503 service unavailable error" is showing.
	      	/* 
	      	if(!empty($enrollId)){
	      		$Enrollupdate=db_query('UPDATE slt_enrollment SET mandatory=\'Y\',updated_on=now() where id IN('.$enrollId.')');
	      		expDebug::dPrintDBAPI('update mandatory fixxeld update ',$Enrollupdate);
	      	}
	      	if(!empty($complianceenrollId)){
	      		$ComplianceEnrollupdate=db_query('UPDATE slt_enrollment SET is_compliance=1,updated_on=now() where id IN('.$complianceenrollId.')');
	      		expDebug::dPrintDBAPI('update Compliance fixxeld update ',$ComplianceEnrollupdate);
	      	}
	      	if(!empty($masterEnrollId)){
	      		$MasterEnrollupdate=db_query('UPDATE slt_master_enrollment SET mandatory=1,updated_on=now() where id IN('.$masterEnrollId.')');
	      		expDebug::dPrintDBAPI('update mandatory field update for TP ',$MasterEnrollupdate);
	      	}
	      	 */
		      if($removecnt > 0){ // remove the user from removed_users list
		      	$userDelete=db_query('UPDATE slt_groups SET removed_users = if(REPLACE(CONCAT(\',\', removed_users, \',\'),CONCAT(\',\', :uid, \',\'), \',\') = \',\',
		      	NULL,TRIM(BOTH \',\' FROM REPLACE(CONCAT(\',\', removed_users, \',\'),CONCAT(\',\', :uid, \',\'), \',\'))) WHERE id = :grpid',array('uid'=>$userId,'grpid'=>$grpId));
		      	expDebug::dPrintDBAPI('User delete query',$userDelete);
						// $userDelete->execute();

		      	//Insert group_audit to track removed and added users
		      	$insertStmt = db_insert('slt_group_audit');
		      	$fields = array(
		      			'group_id'          => $grpId,
		      			'user_id'			=> $userId,
		      			'operation'         => 'added',
		      			'criteria_match'	=> 'Y',
		      			'updated_by'        => $loggedUserId,
		      			'updated_on'        => now()
		      	);
		      	$insertStmt->fields($fields);
		      	$insertStmt->execute();
		      	
		      	// 76222 - Report tables update 
		      	if($is_admin){
		      		$insertStmt = db_insert('slt_admin_group_users');
		      		$fields = array(
		      				'group_id'          => $grpId,
		      				'user_id'			=> $userId,
		      				'group_code'		=> $grpcode,
		      				'status'			=> $grp_status,
		      				'created_by'        => $loggedUserId,
		      				'created_on'        => now(),
		      				'updated_by'        => $loggedUserId,
		      				'updated_on'        => now()
		      		);
		      		$insertStmt->fields($fields);
		      		$insertStmt->execute();
		      	}
		      	
		      }else{ //added the user in added_users list
		      	 //else{
		     		$existingUsersList = getUserListField($grpId,'added_users');
		  		    $updateUser = db_update('slt_groups');
			        $updateUser->condition('id', $grpId, '=');
				    $updateUser->fields(array(
				                        'added_users'   =>  ((empty($existingUsersList)) ? '' : $existingUsersList . ',') .$userId,
				                        'updated_on'    => now(),
				                        'updated_by'    => $loggedUserId
				                        ));
				      expDebug::dPrintDBAPI('QUERY DEFAULT ', $updateUser);
				     	$updateUser->execute();
				     	if($is_admin){
					     	$insertStmt = db_insert('slt_admin_group_users');
					     	$fields = array(
					     			'group_id'          => $grpId,
					     			'user_id'			=> $userId,
					     			'group_code'		=> $grpcode,
					     			'status'			=> $grp_status,
					     			'created_by'        => $loggedUserId,
					     			'created_on'        => now(),		
					     			'updated_by'        => $loggedUserId,
					     			'updated_on'        => now()
					     	);
					     	$insertStmt->fields($fields);
					     	$insertStmt->execute();
				     	}
		      	//}
			     	//Insert group_audit to track removed and added users
			     	$insertStmt = db_insert('slt_group_audit');
			     	$fields = array(
			     			'group_id'          => $grpId,
			     			'user_id'			=> $userId,
			     			'operation'         => 'added',
			     			'criteria_match'	=> 'N',
			     			'updated_by'        => $loggedUserId,
			     			'updated_on'        => now()
			     	);
			     	$insertStmt->fields($fields);
			     	$insertStmt->execute();

		      }
		      
		      //Added by Vincent on 20 Jan, 2017 for #0071187
		      if($is_admin == 0){
		      	populateGroupUsersInFlatTable($grpId,$userId,'DeleteGroup',FALSE);
		      }
		      
		      //Instructor and Manager Update in person table
		      if($grpcode == 'grp_ins' || $grpcode == 'grp_mgr'){
		      	$colName = ($grpcode == 'grp_ins') ? array('is_instructor' =>'Y') : array('is_manager' =>'Y') ;
		      	$updatesmt = db_update('slt_person');
		      	$updatesmt->condition('id', $userId, '=');
		      	$updatesmt->fields($colName);
		      	expDebug::dPrintDBAPI('QUERY DEFAULT slt_person instructor ', $updatesmt);
		      	$updatesmt->execute();
		      }
		      if($insertStmt && ($callByAPI== true) && (is_admin != '1')){
		        $flag =  "Users are added to the group";
		      }
		      else{
		        $flag = "Users Values doesnot updated";
		      }
		      unset($txn);
	      }catch(Exception $e){
	      	$txn->rollback();
	      	unset($txn);
			    watchdog_exception('addUsersDetailsList', $e);
			    throw new Exception($e);
	      }
	    if($is_admin == 1){ //|| $grpcode == 'grp_ins' || $grpcode == 'grp_mgr'){
		      //add users in userslist in slt_groups
		      try{
				  if($grp_status == 'cre_sec_sts_atv') {
				  	$txn = db_transaction();
				  }
			      $exisgrpUsersList = getUserListField($grpId,'userslist');
			      expDebug::dPrint('QUERY DEFAULT $userId'.$userId);
    		      $updateUserlist = db_update('slt_groups');
			      $updateUserlist->condition('id', $grpId, '=');
			      $updateUserlist->fields(array(
			      		'userslist'     =>  ((empty($exisgrpUsersList)) ? '' : $exisgrpUsersList . ',') .$userId,
			      		'updated_on'    => now(),
			      		'updated_by'    => $loggedUserId,
			      ));

			      $updateUserlist->execute();
			      
			      //Added by Vincent on 20 Jan, 2017 for #0071187
			      populateGroupUsersInFlatTable($grpId,$userId,'DeleteGroup',FALSE);
			      
			      //  add users role to drupal table when group is in active state
				  // Change by Ayyappan S for 63018: While activate the groups in admin side system display the incorrect message
				  if($grp_status == 'cre_sec_sts_atv') {
				    $role_id = getDrupalRoleId($grpId);
				    $uId = getDrupalIdOfUser($userId);
				    $num_of_results = db_select('users_roles', 'roles');
				    $num_of_results->condition('roles.uid',$uId ,'=');
				    $num_of_results->condition('roles.rid',$role_id ,'=');
				    $num_of_results->addField('roles', 'rid','rid');
				    $result_count =  $num_of_results->execute()->rowCount();
                    
				    expDebug::dPrintDBAPI('select from users_roles ' , $num_of_results);
                    
				    if($result_count == '0') {
				      $select1 = db_insert('users_roles');
				      $select1->fields(array('uid' => $uId, 'rid' => $role_id));
				      expDebug::dPrintDBAPI('Insert userlist ' , $select1);
				      $select1->execute();
				    }
				  }
			      
			      if($callByAPI== true){
			          $flag =  "Users are added to the group.";
			      }

			      unset($txn);
		      }catch(Exception $e) {
				if(isset($txn)) {
				  $txn->rollback();
		      	  unset($txn);
				}
				watchdog_exception('addUsersDetailsList', $e);
				throw new Exception($e);
		      }
	      }
            $updateUser = db_update('slt_person');
            $updateUser->condition('id', $userId, '=');
            $updateUser->fields(array('updated_on'    => now()));
            expDebug::dPrintDBAPI('QUERY DEFAULT123 ', $updateUser);
            $updateUser->execute();
            
      }
      //Audit Trail Entry
   		expDebug::dPrint('existing list'.$existingUsersList, 4);
     	$entityType = 'cre_sec';
     	$updatedUsersList['user_list'] = getUserListField($grpId,'added_users');
		$existUsersList[0]= new stdClass();
     	$existUsersList[0]->user_list = $existingUsersList;
     	expDebug::dPrint('existing list'.print_r($existUsersList,true), 4);
        $checkReturn = make_audit_trail_entries($updatedUsersList, getIdOfLoggedInUser() , $existUsersList ,$grpId, 'Updated', $entityType, 'exp_sp_administration_groups',
            	                                 'UpdatedUserlist', array('user_list'));

        if (!empty($flag)&&($callByAPI==true)) {
          return $flag;
          exit;
        }
        syncSolrData('User','','Bulk');
        syncSolrData('Enrollment');
        syncSolrData('MasterEnrollment');
      //$form_state['storage']['mode']='view';
      $form_state['rebuild'] = TRUE;

      
      //return;
    }
  }
  catch (Exception $ex) {
    watchdog_exception('addUsersDetailsList', $ex);
    throw $ex;
  }
}
/* 
function addOwnersDetailsList($form, &$form_state, $callByAPI=false){
	try{
		include_once(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.inc');

		$loggedUserId = getSltpersonUserId();
		expDebug::dPrint("form_state ".print_r($form_state,true),5);
		$group_id = $form_state['input']['hidden_group_id'];
		$values = $form_state['input']['hidden_idlist_grpAddOwners-'.$group_id."-"];
		$array = explode(",", $values);
	foreach ($array as $uid){
		$insertStmt = db_insert('slt_owner_details');
		$fields = array(
				'group_id'          => $group_id,
				'owner_id'          => $uid,
				'created_by'        => $loggedUserId,
				'created_on'        => now(),
				'updated_by'        => $loggedUserId,
				'updated_on'        => now()
		);
		$insertStmt->fields($fields);
		expDebug::dPrintDBAPI("Insert owner details  ---->",$insertStmt);
		$insertStmt->execute();

		//Insert group_audit to track added owners
		$insertStmt = db_insert('slt_group_audit');
		$fields = array(
				'group_id'        => $group_id,
				'user_id'		  => $uid,
				'operation'       => 'owneradded',
				'criteria_match'  => NULL,
				'updated_by'      => $loggedUserId,
				'updated_on'      => now()
		);
		$insertStmt->fields($fields);
		$insertStmt->execute();

		//  add user in drupal table
		$role_id = getDrupalRoleId($group_id);
		$user_Id = getDrupalIdOfUser($uid);


		$num_of_results = db_select('users_roles', 'roles');
		$num_of_results->condition('roles.uid',$user_Id ,'=');
		$num_of_results->condition('roles.rid',$role_id ,'=');
		$num_of_results->addField('roles', 'rid','rid');
		$result_count =  $num_of_results->execute()->rowCount();

		expDebug::dPrintDBAPI('$num_of_results ' , $num_of_results);

		if($result_count == '0') {
			$select1 = db_insert('users_roles');
			$select1->fields(array('uid' => $user_Id, 'rid' => $role_id));
			expDebug::dPrintDBAPI('Insert userlist ' , $select1);
			$select1->execute();
		}

	}
	expDebug::dPrint("asdas ds".print_r($form_state,true),5);
	$form_state['rebuild'] = TRUE;


	}  catch (Exception $ex) {
    watchdog_exception('addOwnersDetailsList', $ex);
    throw $ex;
  }
} */

function display_assigned_users($form, &$form_state) {
	try {
		include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.inc');
		include_once(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.inc');
		global $theme_key;
		$role_id = $form_state['role_id'];
		$userId= $form_state['user_id'];
		$entityType = 'cre_sec';
		$excludedRoleId = '';
		$uniqueId = "RoleDisplayUsers-$role_id-$entityType";
		$wrapperId = 'security-role-detail-wrapper-list';
		$form = array();
		$form['#prefix'] = /* (stripos($_SERVER['HTTP_USER_AGENT'], 'chrome') !== false
			  								|| (stripos($_SERVER['HTTP_USER_AGENT'], 'firefox') !== false)? '</form>' : '' ) */'</form>' .'<div id="security-role-detail-wrapper-list">';
		$form['#suffix'] = '</div>';
		$setminHight =  'admin-add-users-tab-datagrid-wrapper';
		$form['edit-class-details-start'] = array(
		  '#prefix' => "<div id='add-user-role-page' class = 'assigned-users-grps'>",
		);

		if(isset($addAttributes))
	      	unset($addAttributes['onclick']);

	  $form['add-class-list'] = array(
	    '#type' => 'markup',
	    '#markup' => '<div id="catalog-class-addedit-form-details"><div id="add-class-list-wrapper">'
	  );
	   $paintMultiAction  = "<div id='search-list-class-title-keyword' class='search-list-keyword' style='display:block;'>";
     $paintMultiAction .= "<span id='search-dropdwn-list-class'>";
     $paintMultiAction .= "<input type='hidden' id='search_all_user_type-hidden' value='usrtit' />";
     $paintMultiAction .= "<input type='hidden' id='username-search-autocomplete_hidden' value='".sanitize_data(t('LBL181'))."' />";
     $paintMultiAction .= "<span id='select-list-class-dropdown' class='select-list-dropdown-class'>".t('LBL054')."</span>";
     $paintMultiAction .= "<a id='admin-dropdown-arrow' class='select-list-class-dropdown-link dropdown-link-font ' onclick='$(\"#root-admin\").data(\"narrowsearch\").moreClassSearchHideShow();'> </a>";
     $paintMultiAction .= "<ul id='select-list-class-dropdown-list'>";
     $paintMultiAction .= "<li onclick=\"$('#root-admin').data('narrowsearch').moreAdduserSearchTypeText('".addslashes(t('LBL054'))."','usrtit');\">".t('LBL054')."</li>";
     $paintMultiAction .= "<li onclick=\"$('#root-admin').data('narrowsearch').moreAdduserSearchTypeText('".addslashes(t('LBL691'))."','fultit');\">".t('LBL691')."</li>";
     $paintMultiAction .= "</ul>";
     $paintMultiAction .= "</span></div>";

     $form['class_multi_search_container'] = array(
     '#type' => 'markup',
     '#markup' => '<div class="role_multi_search_container">', //class="admin_class_multi_search_container"
     );
     //$UserList=fetchUserListToGroup($role_id,'');
     $checkStatus = array ('new','inprogress');
     $back_gd_running = fetchBackgroundListForGroups($checkStatus,'inlist',$role_id);
     if($back_gd_running == 0){
     	$Userquery = fetchUserListToGroup($role_id,'','count');
     	$Usercount = $Userquery->execute()->fetchField();
     }else{
     	$Usercount = getUserListForGroups($role_id, 0, 0,'','',1);
     }
     expDebug::dPrint('userscount'.count($Usercount), 4);
     
     if($Usercount !=0){
     		$form['more_add_enrolluser_search'] = array(
     		'#type' => 'markup',
     		'#markup' => $paintMultiAction,
     		);

     		$form['class_auto-search'] = array(
      	'#type' => 'markup',
      	'#markup' => '<div class="admin-class-auto-search-container">',
      	);
      	$userSearchType = '';
      	$userSearchType = $form_state['storage']['search_usr_type'];
      	// onload="$(\'#root-admin\').data(\'narrowsearch\').classDisplayPagination('.$courseId.','.$classId.');"
      	$searchAjaxEvent = 'click';
      	$excludedRoleId =0;
     		// $searchAttributes['onClick'][] = '$("body").data("mulitselectdatagrid").searchDataGrid("'.$displayMode.'", "enrolltpuser", $(\'#enrolltpuser-autocomplete\').val(), "'.$entityId.'", "'.$entityType.'", "0"); return false;';
      	$searchAttributes['onClick'][] = '$("body").data("mulitselectdatagrid").searchDataGrid("edit", "RoleDisplayUsers", $(\'#username-search-autocomplete\').val(), "'.$role_id.'", "'.$userId.'", "'.$excludedRoleId .'"); return false;';

      	$acMenuPath = "administration/people/group/user-name-autocomplete/".$role_id.'/'.'listusers';

      	$default_text_title = t('LBL181');
      	$autoCompleteAttributes['class'][] = 'admin_class_ac_input_mainform';
     		// $autoCompleteAttributes['class'][] = 'admin_ac_class_txtbox';
     		$autoCompleteAttributes['onkeydown'][]  = '$("body").data("mulitselectdatagrid").multiSelectSearchBoxKeyDown(event)';
      	addACFieldForMultiSelect($form, 'username-search-autocomplete', $acMenuPath, '', '', '', array(),
                                  array('search_type' => "$('#search_all_user_type-hidden').val()"), false, false,
                                  $default_text_title, $autoCompleteAttributes);

      	$form['class_auto-search-end'] = array(
      	'#type' => 'markup',
      	'#markup' => '</div>',
      	);
      	
      	//if($back_gd_running == 0){
		      	$searchAttributes['class'][] = 'admin-pagination-role-search-go';
		      	$searchAttributes['class'][] = 'addedit-form-expertusone-throbber';
		      	/*$wrapperId                     =	'role-detail-wrapper';
		      	$searchAttributes['data-wrapperid'][] = $wrapperId; */
		      	$searchAttributes['data-wrapperid'][] = 'security-role-detail-wrapper-list';
		      	//$searchAttributes['onClick'][] = "getUserDetailList($defaultId,); ";
		       	$form['search_add_urs'] = array(
		        	'#type' => 'submit',
		        	'#id'   => 'search_add_urs',
		        	'#title' => t('LBL304'),
		        	'#value' => ' ',
		        	'#name' => 'Search role users',
		        	//'#submit' => array('search_enrolltpuser'),
		        	'#attributes' => $searchAttributes,
		        	'#ajax' => array(
		                  'wrapper' => 'security-role-detail-wrapper-list',
		                  //'callback' => 'role_add_user_autocomplete_callback',
		                  'method' => 'replace',
		                  'effect' => 'none',
		                  'event'=>'click',
					   				  'question_pgn_page' => 1,
					   				  'program_id' =>$role_id,
		                  'get_attached_course_name'=> $form_state['values']['username-autocomplete_hidden'],
		                  'keypress' => true,
		                  'progress' => array(
		                    'type' => 'throbber',
		                    'message' => ''
		                  	),
		                )
		      	);
      	
      	$form['class_multi_search_container-end'] = array(
      	'#type' => 'markup',
      	'#markup' => '<div class="filter-search-start-date-right-bg"></div></div>',
      	);
     //}
		$form['edit-class-details-paginate'] = array(
	    '#type' => 'markup',
	    '#prefix' => '<div id="admin-add-course-training-plan" class="display_user_list"><div id="role-'.$wrapperId.'" class="admin-datagrid-pagination '.$setminHight.'">',
	    '#suffix' => '<div>',
	  );
		$style = ($theme_key == "expertusoneV2") ? 'right: 120px;  margin-top: -39px; margin-right:0px;' : 'margin-top: -39px;';

		$form['export_link'] = array(
				'#type' => 'markup',
				'#markup' => "<div id='exportcontainer' class='exportcontainer' style ='".$style."'><a onclick=\"$('body').data('mulitselectdatagrid').callEnrollExportProcess('','".$role_id."','".$entityType."','Group');\" class='enrollments-exports-icon' title=".t('LBL309')."></a></div>",
		);

	  $form['role_user_view_grid_markup'] = array(
	      '#type' => 'markup',
	      '#markup' => '<div id="datagrid-div-'.$uniqueId.'"><table id="datagrid-container-'.$uniqueId.'" class="datagrid-container-common"></table><div id="pager-datagrid-'.$uniqueId.'" class="pager-datagrid-common" style="display:none;"></div></div>',
	   );
		$form['role_user_grid_load'] = array(
		  '#type' => 'markup',
		  '#prefix' => '<div style="display:block"><img src="themes/seven/images/buttons.png" width="0" height="0" onload="$(\'body\').data(\'mulitselectdatagrid\').createLoader(\'datagrid-div-'.$uniqueId.'\'); $(\'body\').data(\'mulitselectdatagrid\').loadDataGrid(\'view\', \'RoleDisplayUsers\', \'\', \''.$role_id.'\', \''.$entityType.'\', \''.$excludedRoleId.'\');" width="100" height="132" /></div>',
		);
		$form['role_user_grid_load_end'] = array(
		  '#type' => 'markup',
		  '#prefix' => '</div></div>',
		);

		$cancelAttributes['class'][] = 'addedit-form-expertusone-throbber admin-action-button-middle-bg  white-btn-bg-middle';
	  $cancelAttributes['onclick'][]         =  "closeQtip('','$role_id'); return false;";
	  $cancelAttributes['data-wrapperid'] = array($wrapperId);

	  $form['cancel_assigneduser_edit_mode'] = array(
	     '#type' => 'submit',
	     '#value' => t('LBL123'),
	     '#title' => t('LBL123'),
	     '#prefix' => '<div id="assigned_user" ><div class="addedit-form-cancel-container-actions admin-save-button-container resize-save_btn2"><div class="white-btn-bg-left"></div>',
	    '#suffix' =>   '<div class="white-btn-bg-right"></div>',
	     '#name' => 'Cancel addusers',
	     '#attributes' => $cancelAttributes,
	   );
	  
	  if($back_gd_running == 0){
		$setAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg';
	  	$setAttributes['data-wrapperid'] = 'security-role-detail-wrapper-list';
		$form['add-users-button'] = array(
	          '#type' => 'button',
	          '#prefix' => '<div id="attach_user_list" class="admin-save-button-container add-class-button"><div class="admin-save-button-left-bg"></div>',
		        '#suffix' => '<div class="admin-save-button-right-bg"></div></div></div></div></div></div></div></div>',
	          '#value' => t("LBL1038"),
	          '#name' => "Add Users",
	          '#limit_validation_errors' => array(),
	          '#attributes' => $setAttributes,
		 				'#ajax' => array(
					      'wrapper'     => $wrapperId,
					      'callback'    => 'attachUsersDetails',
				        'role_id'     => $role_id,
				        'entity_type' => $entityType,
					      'method'      => 'replace',
					      'effect' 			=> 'none', // 'fade',
			          'event'				=>'click',
					      'keypress' 		=> true,
					      'progress' 		=> array(
					        'type' 		=> 'throbber',
					        'message' => ''
					      ),
						)
	        );
	  }else{
	  	$setAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg cls-add-user-disable';
	  	$setAttributes['data-wrapperid'] = 'security-role-detail-wrapper-list';
	  	$setAttributes['onclick'] = array();
	  	$setAttributes['onclick'][] = 'return false;';
	  	
		$form['add-users-button'] = array(
	          '#type' => 'button',
	          '#prefix' => '<div id="attach_user_list" class="admin-save-button-container add-class-button"><div class="admin-save-button-left-bg"></div>',
	     	  '#suffix' => '<div class="admin-save-button-right-bg"></div><div class="clearBoth"></div></div><div class="clearBoth"></div></div></div>',
	          '#value' => t("LBL1038"),
	          '#name' => "Add Users",
	          '#attributes' => $setAttributes,
	        );
	  }
	     }else{
	     	
	     	if($back_gd_running == 0){
	     			$msg= t('MSG643');
	     			$setAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg';
	  				$setAttributes['data-wrapperid'] = 'security-role-detail-wrapper-list';
	     			$form['add-users-button'] = array(
			          '#type' => 'button',
			          '#prefix' => '<div id="attach_user_list_div" class="admin-save-button-container add-class-button"><div class="admin-save-button-left-bg"></div>',
				        '#suffix' => '<div class="admin-save-button-right-bg"></div></div></div></div></div></div>',//</div></div>',
			          '#value' => t("LBL1038"),
			          '#name' => "Add Users",
			          '#limit_validation_errors' => array(),
			          '#attributes' => $setAttributes,
				 				'#ajax' => array(
							      'wrapper' 		=> $wrapperId,
							      'callback' 		=> 'attachUsersDetails',
						        'role_id' 		=> $role_id,
						        'entity_type' => $entityType,
							      'method' 			=> 'replace',
							      'effect' 			=> 'none', // 'fade',
					          'event'				=>'click',
							      'keypress' 		=> true,
							      'progress' 		=> array(
							        'type' 		=> 'throbber',
							        'message' => ''
							      ),
								)
			        );
		
			        $form['addroleuser_view_grid_no_msg'] = array(
			            '#type' => 'markup',
			            '#markup' => '<div class="admin-empty-text-msg"> '.$msg.'</div>',
			          );
	     	}else{
	     		$msg= t('MSG643');
	     		$saveAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg cls-add-user-disable';
	     		$saveAttributes['data-wrapperid'] = 'security-role-detail-wrapper-list';
	     		$saveAttributes['onclick'] = array();
	     		$saveAttributes['onclick'][] = 'return false;';
	     		$form['add-users-button'] = array(
	     				'#type' => 'button',
	     				'#prefix' => '<div id="attach_user_list_div" class="admin-save-button-container add-class-button"><div class="admin-save-button-left-bg"></div>',
	     				'#suffix' => '<div class="admin-save-button-right-bg"></div><div class="clearBoth"></div></div><div class="clearBoth"></div></div></div>',
	     				'#value' => t('LBL1038'),
	     				'#name' => 'grp-save',
	     				'#attributes' => $saveAttributes,
	     				);
	     		$form['disabledaddroleuser_view_grid_no_msg'] = array(
	     				'#type' => 'markup',
	     				'#markup' => '<div class="admin-empty-text-msg"> '.$msg.'</div>',
	     		);
	     	}
	     }

	  return $form;
  }catch (Exception $ex) {
  	watchdog_exception('display_assigned_users', $ex);
  	expertusErrorThrow($ex);
  }
}



/*function display_assigned_owners($form, &$form_state) {
	try {

		include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.inc');
		include_once(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.inc');
		global $theme_key;
		$role_id = $form_state['role_id'];
		$userId= $form_state['user_id'];
		$entityType = 'cre_sec';
		$excludedRoleId = '';
		$uniqueId = "RoleDisplayOwners-$role_id-$entityType";
		$wrapperId = 'security-role-detail-wrapper-list';
		$form = array();
		$form['#prefix'] = '</form>' .'<div id="security-role-detail-wrapper-list">';
		$form['#suffix'] = '</div>';
		$setminHight =  'admin-add-users-tab-datagrid-wrapper';
		$form['edit-class-details-start'] = array(
		  '#prefix' => "<div id='add-user-role-page'>",
		);

		if(isset($addAttributes))
			unset($addAttributes['onclick']);

		$form['add-class-list'] = array(
				'#type' => 'markup',
				'#markup' => '<div id="catalog-class-addedit-form-details"><div id="add-class-list-wrapper">'
		);
		$paintMultiAction  = "<div id='search-list-class-title-keyword' class='search-list-keyword' style='display:block;'>";
		$paintMultiAction .= "<span id='search-dropdwn-list-class'>";
		$paintMultiAction .= "<input type='hidden' id='search_all_user_type-hidden' value='usrtit' />";
		$paintMultiAction .= "<input type='hidden' id='addusername-search-autocomplete_hidden' value='".t('LBL181')."' />";
		$paintMultiAction .= "<span id='select-list-class-dropdown-adduser' class='select-list-dropdown-class'>".t('LBL054')."</span>";
		$paintMultiAction .= "<a id='admin-dropdown-arrow' class='select-list-class-dropdown-link dropdown-link-font ' onclick='$(\"#root-admin\").data(\"peoplegroup\").moreRoleHideShow();'> </a>";
		$paintMultiAction .= "<ul id='select-list-class-dropdown-list' class='more-drop-down'>";
		$paintMultiAction .= "<li onclick=\"$('#root-admin').data('narrowsearch').moreUserSearchTypeText('".t('LBL054')."','usrtitle','role');\">".t('LBL054')."</li>";
		$paintMultiAction .= "<li onclick=\"$('#root-admin').data('narrowsearch').moreUserSearchTypeText('".t('Groups')."','grptitle','role');\">".t('Groups')."</li>";
		$paintMultiAction .= "</ul>";
		$paintMultiAction .= "</span></div>";

		$form['class_multi_search_container'] = array(
				'#type' => 'markup',
				'#markup' => '<div class="role_multi_search_container">', //class="admin_class_multi_search_container"
		);
		$select = db_select('slt_owner_details','owner');
		$select->addExpression('count(DISTINCT(owner.id))', 'cnt');
		$select->condition('owner.group_id',$role_id,'=');
		$select->condition('owner.owner_id',array(1,2),'NOT IN');
		expDebug::dPrintDBAPI('select condition ', $select);
		$Usercount = $select->execute()->fetchField();
		expDebug::dPrint('owners user count '.$Usercount, 4);
		if($Usercount !=0){
			$form['more_add_enrolluser_search'] = array(
					'#type' => 'markup',
					'#markup' => $paintMultiAction,
			);

			$form['class_auto-search'] = array(
					'#type' => 'markup',
					'#markup' => '<div class="admin-class-auto-search-container">',
			);
			$userSearchType = '';
			$userSearchType = $form_state['storage']['search_usr_type'];
			// onload="$(\'#root-admin\').data(\'narrowsearch\').classDisplayPagination('.$courseId.','.$classId.');"
			$searchAjaxEvent = 'click';
			$excludedRoleId =0;
			// $searchAttributes['onClick'][] = '$("body").data("mulitselectdatagrid").searchDataGrid("'.$displayMode.'", "enrolltpuser", $(\'#enrolltpuser-autocomplete\').val(), "'.$entityId.'", "'.$entityType.'", "0"); return false;';
			$searchAttributes['onClick'][] = '$("body").data("mulitselectdatagrid").searchDataGrid("edit", "RoleDisplayOwners", $(\'#addusername-search-autocomplete\').val(), "'.$role_id.'", "'.$userId.'", "'.$excludedRoleId .'"); return false;';

			$acMenuPath = "administration/people/group/owner-name-autocomplete/".$role_id.'/'.'listusers/RoleDisplayOwners';

			$default_text_title = t('LBL181');
			$autoCompleteAttributes['class'][] = 'admin_class_ac_input_mainform';
			// $autoCompleteAttributes['class'][] = 'admin_ac_class_txtbox';
			$autoCompleteAttributes['onkeydown'][]  = '$("body").data("mulitselectdatagrid").multiSelectSearchBoxKeyDown(event)';
			addACFieldForMultiSelect($form, 'addusername-search-autocomplete', $acMenuPath, '', '', '', array(),
					array('search_type' => "$('#search_all_user_type-hidden').val()"), false, false,
					$default_text_title, $autoCompleteAttributes);

			$form['class_auto-search-end'] = array(
					'#type' => 'markup',
					'#markup' => '</div>',
			);

			$searchAttributes['class'][] = 'admin-pagination-role-search-go';
			$searchAttributes['class'][] = 'addedit-form-expertusone-throbber';
			//$wrapperId                     =	'role-detail-wrapper';
			 //$searchAttributes['data-wrapperid'][] = $wrapperId;
			$searchAttributes['data-wrapperid'][] = 'security-role-detail-wrapper-list';
			//$searchAttributes['onClick'][] = "getUserDetailList($defaultId,); ";
			$form['search_add_urs'] = array(
					'#type' => 'submit',
					'#id'   => 'search_add_urs',
					'#title' => t('LBL304'),
					'#value' => ' ',
					'#name' => 'Search role users',
					//'#submit' => array('search_enrolltpuser'),
					'#attributes' => $searchAttributes,
					'#ajax' => array(
							'wrapper' => 'security-role-detail-wrapper-list',
							//'callback' => 'role_add_user_autocomplete_callback',
							'method' => 'replace',
							'effect' => 'none',
							'event'=>'click',
							'question_pgn_page' => 1,
							'program_id' =>$role_id,
							'get_attached_course_name'=> $form_state['values']['username-autocomplete_hidden'],
							'keypress' => true,
							'progress' => array(
									'type' => 'throbber',
									'message' => ''
							),
					)
			);
			$form['class_multi_search_container-end'] = array(
					'#type' => 'markup',
					'#markup' => '<div class="filter-search-start-date-right-bg"></div></div>',
			);
			//}
			$form['edit-class-details-paginate'] = array(
	    '#type' => 'markup',
	    '#prefix' => '<div id="admin-add-course-training-plan" class="display_user_list"><div id="role-'.$wrapperId.'" class="admin-datagrid-pagination '.$setminHight.'">',
	    '#suffix' => '<div>',
	  );
			$style = ($theme_key == "expertusoneV2") ? 'right: 120px;  margin-top: -42px; margin-right:3px;' : 'margin-top: -39px;';

			$form['export_link'] = array(
					'#type' => 'markup',
					'#markup' => "<div id='exportcontainer' class='exportcontainer' style ='".$style."'><a onclick=\"$('body').data('mulitselectdatagrid').callEnrollExportProcess('','".$role_id."','".$entityType."','GroupOwners');\" class='enrollments-exports-icon' title=".t('LBL309')."></a></div>",
			);
	  $form['role_user_view_grid_markup'] = array(
	  		'#type' => 'markup',
	  		'#markup' => '<div id="datagrid-div-'.$uniqueId.'"><table id="datagrid-container-'.$uniqueId.'" class="datagrid-container-common"></table><div id="pager-datagrid-'.$uniqueId.'" class="pager-datagrid-common" style="display:none;"></div></div>',
	  );
	  $form['role_user_grid_load'] = array(
	  		'#type' => 'markup',
	  		'#prefix' => '<div style="display:block"><img src="themes/seven/images/buttons.png" width="0" height="0" onload="$(\'body\').data(\'mulitselectdatagrid\').createLoader(\'datagrid-div-'.$uniqueId.'\'); $(\'body\').data(\'mulitselectdatagrid\').loadDataGrid(\'view\', \'RoleDisplayOwners\', \'\', \''.$role_id.'\', \''.$entityType.'\', \''.$excludedRoleId.'\');" width="100" height="132" /></div>',
	  );
	  $form['role_user_grid_load_end'] = array(
	  		'#type' => 'markup',
	  		'#prefix' => '</div></div>',
	  );

	  $cancelAttributes['class'][] = 'addedit-form-expertusone-throbber admin-action-button-middle-bg  white-btn-bg-middle';
	  $cancelAttributes['onclick'][]         =  "closeQtip('','$role_id'); return false;";
	  $cancelAttributes['data-wrapperid'] = array($wrapperId);

	  $form['cancel_assigneduser_edit_mode'] = array(
	  		'#type' => 'submit',
	  		'#value' => t('LBL123'),
	  		'#title' => t('LBL123'),
	  		'#prefix' => '<div id="assigned_user" ><div class="addedit-form-cancel-container-actions admin-save-button-container resize-save_btn2"><div class="white-btn-bg-left"></div>',
	    '#suffix' =>   '<div class="white-btn-bg-right"></div>',
	  		'#name' => 'Cancel addusers',
	  		'#attributes' => $cancelAttributes,
	  );
	  $setAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg';
	  $setAttributes['data-wrapperid'] = 'security-role-detail-wrapper-list';
	  $form['add-users-button'] = array(
	  		'#type' => 'button',
	  		'#prefix' => '<div id="attach_user_list" class="admin-save-button-container add-class-button"><div class="admin-save-button-left-bg"></div>',
	  		'#suffix' => '<div class="admin-save-button-right-bg"></div></div></div></div></div></div></div></div>',
	  		'#value' => t("Add Owners"),
	  		'#name' => "Add Owners",
	  		'#limit_validation_errors' => array(),
	  		'#attributes' => $setAttributes,
	  		'#ajax' => array(
	  				'wrapper'     => $wrapperId,
	  				'callback'    => 'attachOwnersDetails',
	  				'role_id'     => $role_id,
	  				'entity_type' => $entityType,
	  				'method'      => 'replace',
	  				'effect' 			=> 'none', // 'fade',
	  				'event'				=>'click',
	  				'keypress' 		=> true,
	  				'progress' 		=> array(
	  						'type' 		=> 'throbber',
	  						'message' => ''
	  				),
	  		)
	  );
		}else{
			$msg= t('MSG643');
			$setAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg';
			$setAttributes['data-wrapperid'] = 'security-role-detail-wrapper-list';
			$form['add-owners-button'] = array(
					'#type' => 'button',
					'#prefix' => '<div id="attach_user_list_div" class="admin-save-button-container add-class-button"><div class="admin-save-button-left-bg"></div>',
					'#suffix' => '<div class="admin-save-button-right-bg"></div></div></div></div></div></div>',//</div></div>',
					'#value' => t("Add Owners"),
					'#name' => "Add Owners",
					'#limit_validation_errors' => array(),
					'#attributes' => $setAttributes,
					'#ajax' => array(
							'wrapper' 		=> $wrapperId,
							'callback' 		=> 'attachOwnersDetails',
							'role_id' 		=> $role_id,
							'entity_type' => $entityType,
							'method' 			=> 'replace',
							'effect' 			=> 'none', // 'fade',
							'event'				=>'click',
							'keypress' 		=> true,
							'progress' 		=> array(
									'type' 		=> 'throbber',
									'message' => ''
							),
					)
			);

			$form['addroleowner_view_grid_no_msg'] = array(
					'#type' => 'markup',
					'#markup' => '<div class="admin-empty-text-msg"> '.$msg.'</div>',
			);
		}

		return $form;
	}catch (Exception $ex) {
		watchdog_exception('display_assigned_users', $ex);
		expertusErrorThrow($ex);
	}
}*/

function search_addusers(){
	// donothing
	try {
		return false;
	}catch (Exception $ex) {
		watchdog_exception('search_addusers', $ex);
		expertusErrorThrow($ex);
	}
}

function displayWarningWizard($recConut,$attrDpt=''){
	try{
		if(empty($attrDpt)){
		expDebug::dPrint('Name : '.$recConut[0]->name, 4);
		$grpName  = array_filter(explode(",",$recConut[0]->name));
		$count =count($grpName);
		expDebug::dPrint('$count : '.$count.' $grpName : '.print_r($grpName , true), 4);

		if($count == 2){
			$recConut[0]->name = implode(" ".strtolower(t('LBL647'))."", $grpName) ;
		}else if ($count >= 3) {
			$lastString = array_pop($grpName);
			$recConut[0]->name = $count ? implode(", ", $grpName) . " ".strtolower(t('LBL647'))."" . $lastString : $lastString;
		}

		$messageLabel = ($count == 1) ? t("LBL1269") : t("LBL1262");
		$recConut[0]->name = $recConut[0]->name.' '.$messageLabel;
		return array(
				'command' => 'displayWarningWizard',
				'grpId'   => $recConut[0]->dupid,
				'name'    => $recConut[0]->name,
		);
		}else{
			return array('command' => 'displayWarningWizard',
					'grpId'   => $recConut,
					'name'    => t('Changes made here will have impact in User list.Do you still want to continue?'));
		}


	}catch (Exception $ex) {
		watchdog_exception('callCourseDetailWidget', $ex);
		expertusErrorThrow($ex);
	}
}

function onAfterLoadForm($id,$reload = ''){
	expDebug::dPrint("onAfterLoadForm ".$id, 4);
	try{
		return array(
				'command' => 'onAfterLoadForm',
				'grpId' => $id,
				'reload' => $reload
		);

	}catch (Exception $ex) {
		watchdog_exception('callCourseDetailWidget', $ex);
		expertusErrorThrow($ex);
	}
}

function includeFilesRole(){
	include_once(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.inc');
	$css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
	$js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);

	global $theme_key;
	if($theme_key == "expertusoneV2"){
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups_v2.css', array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1300));
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning_v2.css');
	}else{
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.css' , array('type' => 'file', 'group' => CSS_THEME, 'weight'=>999));
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.css');
	}
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.js', $js_module_optional);
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
}

/*
 * Duplicated (addEditRepaintForm) from administration.inc for add additional script command for group screen
 * addEditRepaintGroupForm() - After the form has been validated and saved, this function returns the form
 *                            to the client for re-rendering.
 */

function addEditRepaintGroupForm($form, &$form_state) {
	try{
	  expDebug::dPrint(' addEditRepaintForm() called.', 5);
	  expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
	  expDebug::dPrint('  $form_state = ' . print_r($form_state, true) , 5);
	  expDebug::dPrint(' $form_state[storage] = ' . print_r($form_state['storage'], true) , 5);
	  expDebug::dPrint(' $form_state[build_info] = ' . print_r($form_state['build_info'], true) , 5);
	  $commands = array();
	  // If a new entity was added, build additional forms
	  if (!empty($form_state['storage']['new_entity']) && $form_state['storage']['new_entity'] == TRUE) {
	    // Create the additional now editable forms if any present
	    $formInfoList = $form_state['storage']['form_info_list'];
	    $argsList = $form_state['build_info']['args'];
	    array_shift($argsList); // The first arg is 'ajax', which we need to drop from $argsList

	    $renderedAddlForms = exp_ctools_modal_multi_ajaxonly_forms_render($formInfoList, $argsList, 'ADD-TO-EDIT');
	  }else{
		 	$formInfoList = $form_state['storage']['form_info_list'];
	    $argsList = $form_state['build_info']['args'];
	    array_shift($argsList); // The first arg is 'ajax', which we need to drop from $argsList

	    $renderedReloadlForms = exp_ctools_modal_multi_ajaxonly_forms_render($formInfoList, $argsList, 'EDIT-RELOAD');
	  }

	 	if(!form_get_errors()){
	    	$commands[] = ajax_command_replace(NULL, drupal_render($form));
	  }

	  // Render additional forms, if moving from add to edit
	  if (!empty($renderedAddlForms)) {
	    $commands[] = ajax_command_after(NULL, $renderedAddlForms);
	  }

		// Reload secound forms while saving
	  if (!empty($renderedReloadlForms)) {
	    $commands[] = ajax_command_html('#role-detail-wrapper', $renderedReloadlForms);
	  }
	  // Show the status messages, if any.
	  // Ensure the status messages are auto removed after a brief while
	  $statusMsgHTML = theme('status_messages');
	  expDebug::dPrint(' $statusMsgHTML = ' . print_r($statusMsgHTML, true) , 4);
	  if (!empty($statusMsgHTML)) {
	  	// Show the messages
	    //$commands[] = ajax_command_prepend(NULL, $statusMsgHTML);
	    $commands[] = ajax_command_html('#show_expertus_message', $statusMsgHTML);
	  }

	  // Resize the modal backdrop, adjust the model top (and left) to optimal
	  $commands[] = exp_ctools_modal_adjust();

	  // If a new entity was added or an existing entity was edited, inform ctools to refresh narrow search results no modal close.
	  if ($form_state['storage']['new_entity'] == TRUE || $form_state['storage']['edited_entity'] == TRUE) {
	    $commands[] = ajax_command_refresh_narrow_search_results('onclose');
	  }

	  if($form_state['values']['attr_action'] == 'certificate' && $form_state['triggering_element']['#name']=='save'){
	     $defaulttCertificate=$form_state['default_certificate_id'];
	     $commands[] = ajax_command_invoke(NULL, "validateCertificate",array($defaulttCertificate));
	  }
	  if (isset($form_state['cutom_fields_wrapper_id'])){
	    $customWrapperId = $form_state['cutom_fields_wrapper_id'];
	    $customErrorFlag = $form_state['custom_fields_error'];
	    $commands[] = ajax_command_invoke(NULL, "validateCustomFields", array($customWrapperId, $customErrorFlag));
	  }

	  if ($form_state['triggering_element']['#ajax']['add_custom_gray_field'] == true){
	    expDebug::dPrint(' $form_state[triggering_element][#ajax][add_custom_gray_field] = ' . $form_state['triggering_element']['#ajax']['add_custom_gray_field'] , 5);
	    $commands[] = ajax_command_invoke(NULL, "addCustomGrayConversion", array($form_state['custom_fields']['count']));
	  }

	  /* For create Location in Class Page*/
	  if($form_state['triggering_element']['#ajax']['from_tooltip_location'] == 'Yes'){
	    $commands[] = ajax_command_invoke(NULL, "classCreateLocation", array($form_state['storage']['locationId'],$form_state['storage']['locationName'],$form_state['triggering_element']['#ajax']['from_tooltip_location_classId']));
	  }

	  //calling scroll function in security role
	  $var =$form_state['triggering_element']['#ajax']['wrapper'];
	  if(strpos($var,'permissions-addedit-form')!== false){
	  	$commands[] = ajax_command_invoke(NULL, "scrollPerm", array($var));
	  }

	  if (module_exists('exp_sp_esignature') && isActiveEsignRegion() && (!$form_state['esign_validation_status'])){
	    $custButtonId  = $form_state['triggering_element']['#ajax']['customButtonId'];
	    $drupalUserId  = $form_state['triggering_element']['#ajax']['drupalUserId'];
	    $drupalUserId  = $form_state['values'][$drupalUserId];
	    $esignObj  = '{"popupDiv":"modalContent","esignFor":"AddAdmin","drupalUserId":"'.$drupalUserId.'","esignButtId":"'.$custButtonId.'"}';
	    if($form_state['esign_show_popup'] == true){
	      $commands[] = ajax_command_invoke(NULL, 'getNewEsignPopup',array($esignObj));
	      $form_state['esign_show_popup']=false; // this is ignored, as form state is not saved after the ajax callback is executed
	    }
	  }
	  if(!form_get_errors())
	   	$commands[] = onAfterLoadForm($form_state['values']['id']);
	  else
	  	$commands[] = onAfterLoadForm($form_state['values']['id'],'reload');

	  expDebug::dPrint(' $commands  ' . $form_state["storage"]["form_validate"]  , 4);

	  return array('#type' => 'ajax', '#commands' => $commands);
  } catch (Exception $ex) {
  	watchdog_exception('addEditRepaintForm', $ex);
  	expertusErrorThrow($ex);
  }
}


?>