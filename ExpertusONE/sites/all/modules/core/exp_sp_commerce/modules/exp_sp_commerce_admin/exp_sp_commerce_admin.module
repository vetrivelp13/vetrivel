<?php
 /**
 * Implementation of hook_menu().
 */
function exp_sp_commerce_admin_menu() {
	try {
  $items = array(); 
  $items['portalpages/sp_administrator/store-admin'] = array(
    'title' => 'Commerce Administration',
    'description' => 'Commerce Administration',
    'page callback' => 'exp_commerce_admin_store',
    'access callback' => 'user_access',
    'access arguments' => array('Commerce Admin Perm'),
    'type' => 6,
    'weight' => 4,
  );

    $items['portalpages/sp_administrator/store-admin/ajax/cancel-policy'] = array(
    'title' => 'Cancellation Policy',
    'description' => 'Cancellation Policy.',
    'page callback' => 'display_drop_policy_form',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('Commerce Admin Cancellation Policy Perm'),
    'type' => 6,
    'weight' => 3,
    'file' => 'exp_sp_commerce_admin.inc',
  );
  
  $items['portalpages/sp_administrator/store-admin/settings'] = array(
    'title' => 'Configuration',
    'description' => 'Adjust configuration settings for ExpertusONE.',
    'page callback' => 'clone_uc_store_configuration_page',
    'access callback' => 'user_access',
    'access arguments' => array('Commerce Admin Configure Perm'),
    'type' => 6,
    //'weight' => 5,
  	/*'file path' => drupal_get_path('module','uc_store'),
    'file' => 'uc_store.admin.inc',*/
  );
  $items['portalpages/sp_administrator/store-admin/settings/checkout'] = array(
    'title' => 'Checkout settings',
    'description' => 'Configure the checkout settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_cart_checkout_settings_form'),
    'access arguments' => array('administer store checkout perm'),
    'type' => 6,
    'weight' => 11,
  	'file path' => drupal_get_path('module','uc_cart'),
    'file' => 'uc_cart.admin.inc',
  );
  $items['portalpages/sp_administrator/store-admin/settings/checkout/settings'] = array(
    'title' => 'Settings',
    'description' => 'Edit the basic checkout settings.',
    'access arguments' => array('administer store'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['portalpages/sp_administrator/store-admin/settings/checkout/fields'] = array(
    'title' => 'Address fields',
    'description' => 'Edit the address field settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_store_address_fields_form'), // missing?
    'access arguments' => array('administer store'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  	'file path' => drupal_get_path('module','uc_cart'),
    'file' => 'uc_cart.admin.inc',
  );
  $items['portalpages/sp_administrator/store-admin/settings/countries'] = array(
    'title' => 'Country settings',
    'description' => 'Configure countries and address formats.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clone_uc_country_import_form'),
    'access arguments' => array('administer store country perm'),
    'type' => 6,
    'weight' => 12,
  	/*'file path' => drupal_get_path('module','uc_store'),
    'file' => 'uc_store.admin.inc',*/
  );  
  $items['portalpages/sp_administrator/store-admin/settings/countries/import'] = array(
    'title' => 'Countries',
    'description' => 'Import and manage countries.',
    'access arguments' => array('administer store'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file path' => drupal_get_path('module','uc_store'),
    'file' => 'uc_store.admin.inc',
  );
  $items['portalpages/sp_administrator/store-admin/settings/countries/formats'] = array(
    'title' => 'Address formats',
    'description' => 'Edit country specific address format settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_country_formats_form'),
    'access arguments' => array('administer store'),
    'weight' => -5,
    'type' => MENU_LOCAL_TASK,
  	'file path' => drupal_get_path('module','uc_store'),
    'file' => 'uc_store.admin.inc',
  );
  $items['portalpages/sp_administrator/store-admin/settings/countries/%/disable'] = array(
    'title' => 'Disable a country',
    'description' => 'Disable a country from use.',
    'page callback' => 'clone_uc_country_disable',
    'page arguments' => array(5),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    /*'file path' => drupal_get_path('module','uc_store'),
    'file' => 'uc_store.admin.inc',*/
  );
  $items['portalpages/sp_administrator/store-admin/settings/countries/%/enable'] = array(
    'title' => 'Enable a country',
    'description' => 'Enable a disabled country.',
    'page callback' => 'clone_uc_country_enable',
    'page arguments' => array(5),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    /*'file path' => drupal_get_path('module','uc_store'),
    'file' => 'uc_store.admin.inc',*/
  );
  $items['portalpages/sp_administrator/store-admin/settings/countries/%/remove'] = array(
    'title' => 'Remove a country',
    'description' => 'Remove an installed country.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clone_uc_country_remove_form', 5),
    'access arguments' => array('administer store'),
    'type' => MENU_LOCAL_ACTION,
    /*'file path' => drupal_get_path('module','uc_store'),
    'file' => 'uc_store.admin.inc',*/
  );
  $items['portalpages/sp_administrator/store-admin/settings/countries/%/update/%'] = array(
    'title' => 'Update a country',
    'description' => 'Update an installed country.',
    'page callback' => 'clone_uc_country_update',
    'page arguments' => array(5, 7),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    /*'file path' => drupal_get_path('module','uc_store'),
    'file' => 'uc_store.admin.inc',*/
  );
  $items['portalpages/sp_administrator/store-admin/settings/orders'] = array(
    'title' => 'Order settings',
    'description' => 'Configure the order settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_order_settings_form'),
    'access arguments' => array('administer store order perm'),
    'type' => 6,
    'weight' => 13,
  	'file path' => drupal_get_path('module','uc_order'),
    'file' => 'uc_order.admin.inc',
  );
  $items['portalpages/sp_administrator/store-admin/settings/orders/settings'] = array(
    'title' => 'Settings',
    'description' => 'Edit the basic order settings.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['portalpages/sp_administrator/store-admin/settings/orders/workflow'] = array(
    'title' => 'Workflow',
    'description' => 'Modify and configure order states and statuses.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_order_workflow_form'),
    'access arguments' => array('administer order workflow'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
    'file path' => drupal_get_path('module','uc_order'),
    'file' => 'uc_order.admin.inc',
  );
  $items['portalpages/sp_administrator/store-admin/settings/orders/workflow/create'] = array(
    'title' => 'Create custom order status',
    'description' => 'Create a custom order status for your store.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clone_uc_order_status_create_form'),
    'access arguments' => array('administer order workflow'),
    'type' => MENU_LOCAL_ACTION,
    /*'file path' => drupal_get_path('module','uc_order'),
    'file' => 'uc_order.admin.inc',*/
  );
  $items['portalpages/sp_administrator/store-admin/settings/orders/panes'] = array(
    'title' => 'Panes',
    'description' => 'Edit the pane settings for order pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_order_panes_form'),
    'access arguments' => array('administer store'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'file path' => drupal_get_path('module','uc_order'),
    'file' => 'uc_order.admin.inc',
  );
  $items['portalpages/sp_administrator/store-admin/settings/payment'] = array(
    'title' => 'Payment settings',
    'description' => 'Configure payment methods.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clone_uc_payment_methods_form'),
    'access arguments' => array('administer store payment perm'),
    'type' => 6,
    'weight' => 14,
  	/*'file path' => drupal_get_path('module','uc_payment'),
    'file' => 'uc_payment.admin.inc',*/
  );
  $items['portalpages/sp_administrator/store-admin/settings/payment/method/%'] = array(
    'title callback' => 'uc_payment_method_title',
    'title arguments' => array(6),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_payment_method_settings_form', 6),
    'access arguments' => array('administer store'),
    'type' => MENU_LOCAL_ACTION,
  	'file path' => drupal_get_path('module','uc_payment'),
    'file' => 'uc_payment.admin.inc',
  );  
/*  $items['portalpages/sp_administrator/store-admin/orders/%uc_order'] = array(
    'title callback' => 'uc_order_page_title',
    'title arguments' => array(4),
    'description' => 'View order',
    'page callback' => 'uc_order_view',
    'page arguments' => array(4, 'view'),
    'access arguments' => array('view all orders'),
  	'file path' => drupal_get_path('module','uc_order'),
    'file' => 'uc_order.admin.inc',
  );*/
  
  return $items;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_commerce_admin_menu', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_init().
 */
function exp_sp_commerce_admin_init() {
	try {
 // drupal_add_css(drupal_get_path('module', 'exp_sp_commerce_admin')  . '/exp_sp_commerce_admin.css');
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_commerce_admin_init', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_commerce_admin_store() {
  //return '';
  try {
  if(module_exists('exp_sp_commerce')){
    $views_status = variable_get('views_defaults', array());
    $views_status['uc_orders'] = FALSE; // True is disabled
    variable_set('views_defaults', $views_status);
    views_invalidate_cache();
    // Update the menu router information.
    menu_rebuild();
  }
  
/*  if (user_access('view all orders')) {
    drupal_goto('portalpages/sp_administrator/store-admin/orders');
  }
  else */if (user_access('Commerce Admin Configure Perm')) {
  	drupal_goto('portalpages/sp_administrator/store-admin/settings');
  }
  else if (user_access('configure discounts')) {
    drupal_goto('portalpages/sp_administrator/store-admin/uc_discounts');
  }
  else{
  	drupal_goto('portalpages/sp_administrator/store-admin/settings');
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_commerce_admin_store', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_permission().
 */
function exp_sp_commerce_admin_permission() {
	try {
  return array(
    'Commerce Admin Perm' => array(
      'title' => t('Commerce Admin Perm')
    ),
    'Commerce Admin Configure Perm' => array(
      'title' => t('Commerce Admin Configure Perm')
    ),
    'administer store checkout perm' => array(
      'title' => t('administer store checkout perm')
    ),
    'administer store country perm' => array(
      'title' => t('administer store country perm')
    ),
    'administer store order perm' => array(
      'title' => t('administer store order perm')
    ),
    'administer store payment perm' => array(
      'title' => t('administer store payment perm')
    ),
    'Commerce Admin Cancellation Policy Perm' => array(
      'title' => t('Commerce Admin Cancellation Policy Perm')
    ),    
  );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_commerce_admin_permission', $ex);
  	expertusErrorThrow($ex);
  }
}
/**
 * Displays an overview of the available payment methods.
 */
function clone_uc_payment_methods_form($form, &$form_state) {
	try {
  $methods = _uc_payment_method_list();
  if (!empty($methods)) {
    $form['pmtable'] = array(
      '#theme' => 'uc_payment_method_table',
    );

    foreach ($methods as $id => $method) {
      $form['pmtable'][$id]['uc_payment_method_' . $id . '_checkout'] = array(
        '#type' => 'checkbox',
        '#title' => $method['name'],
        '#default_value' => variable_get('uc_payment_method_' . $id . '_checkout', $method['checkout']),
      );
      $form['pmtable'][$id]['uc_payment_method_' . $id . '_weight'] = array(
        '#type' => 'weight',
        '#default_value' => variable_get('uc_payment_method_' . $id . '_weight', $method['weight']),
        '#attributes' => array('class' => array('uc-payment-method-weight')),
      );

      if (!empty($method['no_gateway'])) {
        $form['pmtable'][$id]['uc_payment_' . $id . '_gateway'] = array(
          '#markup' => '-',
        );
      }
      else {
        $gateways = _uc_payment_gateway_list($id, TRUE);
        $options = array();
        foreach ($gateways as $gateway_id => $gateway) {
          $options[$gateway_id] = $gateway['title'];
        }
        if ($options) {
          $form['pmtable'][$id]['uc_payment_method_' . $id . '_checkout']['#title'] .= ' (' . t('includes %gateways', array('%gateways' => implode(', ', $options))) . ')';
        }
      }

      $null = NULL;
      $method_settings = $method['callback']('settings', $null, array(), $form_state);
      if (is_array($method_settings)) {
        $form['pmtable'][$id]['settings'] = array(
          '#markup' => l(t('settings'), 'portalpages/sp_administrator/store-admin/settings/payment/method/' . $id),
        );
      }
    }
  }
  else {
    $form['pmtable'] = array(
      '#markup' => t('No payment methods are available.'),
    );
  }

  return system_settings_form($form);
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_payment_methods_form', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Present the form to create a custom order status.
 *
 * @see uc_order_status_create_form_validate()
 * @see uc_order_status_create_form_submit()
 * @ingroup forms
 */
function clone_uc_order_status_create_form($form, &$form_state) {
 try {	
  $form['status_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Order status ID'),
    '#description' => t('Must be a unique ID with no spaces.'),
    '#size' => 32,
    '#maxlength' => 32,
    '#required' => TRUE,
  );

  $form['status_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('The order status title displayed to users.'),
    '#size' => 32,
    '#maxlength' => 48,
    '#required' => TRUE,
  );

  // Build the state option array for the order status table.
  $options = array();
  foreach (uc_order_state_list() as $state) {
    $options[$state['id']] = $state['title'];
  }
  $form['status_state'] = array(
    '#type' => 'select',
    '#title' => t('Order state'),
    '#description' => t('Set which order state this status is for.'),
    '#options' => $options,
    '#default_value' => 'post_checkout',
  );

  $form['status_weight'] = array(
    '#type' => 'weight',
    '#title' => t('List position'),
    '#delta' => 20,
    '#default_value' => 0,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['create'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
  );
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'portalpages/sp_administrator/store-admin/settings/orders/workflow'),
  );

  return $form;
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_order_status_create_form', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Ensure the new status id is unique and has no spaces.
 *
 * @see uc_order_status_create_form()
 * @see uc_order_status_create_form_submit()
 */
function clone_uc_order_status_create_form_validate($form, &$form_state) {
	try {
  $new_status = strtolower(trim($form_state['values']['status_id']));
  if (strpos($new_status, ' ') !== FALSE || $new_status == 'all') {
    form_set_error('status_id', t('You have entered an invalid status ID.'));
  }

  $statuses = uc_order_status_list();
  foreach ($statuses as $status) {
    if ($new_status == $status['id']) {
      form_set_error('status_id', t('This ID is already in use.  Please specify a unique ID.'));
    }
  }
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_order_status_create_form_validate', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Form submission handler for uc_order_status_create_form_submit().
 *
 * @see uc_order_status_create_form()
 * @see uc_order_status_create_form_validate()
 */
function clone_uc_order_status_create_form_submit($form, &$form_state) {
	try{
  db_insert('uc_order_statuses')
    ->fields(array(
      'order_status_id' => $form_state['values']['status_id'],
      'title' => $form_state['values']['status_title'],
      'state' => $form_state['values']['status_state'],
      'weight' => $form_state['values']['status_weight'],
      'locked' => 0,
    ))
    ->execute();

  drupal_set_message(t('Custom order status created.'));

  $form_state['redirect'] = 'portalpages/sp_administrator/store-admin/settings/orders/workflow';
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_order_status_create_form_submit', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Displays store configuration page.
 */
function clone_uc_store_configuration_page() {
	try{
  $menu = menu_get_item('portalpages/sp_administrator/store-admin/settings');
  $content = system_admin_menu_block($menu);

  $build['menu'] = array(
    '#theme' => 'admin_block_content',
    '#content' => $content,
  );

  return $build;
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_store_configuration_page', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Imports settings from a country file.
 *
 * @see uc_country_import_form_submit()
 * @ingroup forms
 */
function clone_uc_country_import_form($form, &$form_state) {
	try {
  $countries = array();
  $result = db_query("SELECT * FROM {uc_countries}");
  foreach ($result as $country) {
    $countries[t($country->country_name)] = $country;
  }
  uksort($countries, 'strnatcasecmp');
  $files = _uc_country_import_list();

  $header = array(t('Country'), t('Code'), t('Version'), t('Operations'));
  $rows = array();
  if (is_array($countries)) {
    foreach ($countries as $country) {
      $row = array(
        t($country->country_name),
        $country->country_iso_code_3,
        array('data' => abs($country->version), 'align' => 'center')
      );

      $ops = array();
      if ($country->version < 0) {
        $ops[] = l(t('enable'), 'portalpages/sp_administrator/store-admin/settings/countries/' . $country->country_id . '/enable');
      }
      else {
        $ops[] = l(t('disable'), 'portalpages/sp_administrator/store-admin/settings/countries/' . $country->country_id . '/disable');
      }
      if ($country->version < $files[$country->country_id]['version'] && $country->version > 0) {
        $ops[] = l(t('update'), 'portalpages/sp_administrator/store-admin/settings/countries/' . $country->country_id . '/update/' . $files[$country->country_id]['version']);
      }
      $ops[] = l(t('remove'), 'portalpages/sp_administrator/store-admin/settings/countries/' . $country->country_id . '/remove');
      $row[] = implode(' ', $ops);

      $rows[] = $row;
      unset($files[$country->country_id]);
    }
  }

  $import_list = array();
  foreach ($files as $file) {
    $import_list[$file['file']] = $file['file'];
  }
  if (is_array($import_list)) {
    ksort($import_list);
  }

  if (is_array($import_list)) {
    $options = $import_list;
  }
  else {
    $options = array(t('-None available-'));
  }

  $form['country_import'] = array(
    '#title' => t('Import countries'),
    '#type' => 'fieldset',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );

  $form['country_import']['text'] = array(
    '#markup' => '<p>' . t('To import new country data, select it in the list and click the import button.') . '</p>',
  );
  $form['country_import']['import_file'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => $options,
    '#disabled' => !is_array($import_list),
    '#multiple' => is_array($import_list),
    '#size' => min(10, count($options)),
  );
  $form['country_import']['actions'] = array('#type' => 'actions');
  $form['country_import']['actions']['import_button'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#disabled' => !is_array($import_list),
  );
  $form['country_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  return $form;
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_country_import_form', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Form submission handler for uc_country_import_form().
 *
 * @see uc_country_import_form()
 */
function clone_uc_country_import_form_submit($form, &$form_state) {
	try{
  $files = $form_state['values']['import_file'];

  foreach ($files as $file) {
    if (uc_country_import($file)) {
      drupal_set_message(t('Country file @file imported.', array('@file' => $file)));
    }
    else {
      drupal_set_message(t('Country file @file could not import or had no install function.', array('@file' => $file)), 'error');
    }
  }
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_country_import_form_submit', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Disables a country so it remains installed but is no longer selectable.
 *
 * @param $country_id
 *   The ISO 3166-1 numeric country code.
 */
function clone_uc_country_disable($country_id) {
	try{
  $result = db_query("SELECT * FROM {uc_countries} WHERE country_id = :id", array(':id' => $country_id));
  if ($country = $result->fetchObject()) {
    if ($country->version > 0) {
      db_update('uc_countries')
        ->fields(array(
          'version' => -$country->version,
        ))
        ->condition('country_id', $country_id)
        ->execute();
      drupal_set_message(t('!country disabled.', array('!country' => t($country->country_name))));
    }
    else {
      drupal_set_message(t('!country is already disabled.', array('!country' => t($country->country_name))), 'error');
    }
  }
  else {
    drupal_set_message(t('Attempted to disable an invalid country.'), 'error');
  }
  drupal_goto('portalpages/sp_administrator/store-admin/settings/countries');
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_country_disable', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Enables a disabled country.
 *
 * @param $country_id
 *   The ISO 3166-1 numeric country code.
 */
function clone_uc_country_enable($country_id) {
	try {
  $result = db_query("SELECT * FROM {uc_countries} WHERE country_id = :id", array(':id' => $country_id));
  if ($country = $result->fetchObject()) {
    if ($country->version < 0) {
      db_update('uc_countries')
        ->fields(array(
          'version' => abs($country->version),
        ))
        ->condition('country_id', $country_id)
        ->execute();
      drupal_set_message(t('@country enabled.', array('@country' => t($country->country_name))));
    }
    else {
      drupal_set_message(t('@country is already enabled.', array('@country' => t($country->country_name))), 'error');
    }
  }
  else {
    drupal_set_message(t('Attempted to enable an invalid country.'), 'error');
  }
  drupal_goto('portalpages/sp_administrator/store-admin/settings/countries');
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_country_enable', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Form to completely remove a country.
 *
 * @param $country_id
 *   The ISO 3166-1 numeric country code.
 *
 * @see uc_country_remove_form_submit()
 * @ingroup forms
 */
function clone_uc_country_remove_form($form, &$form_state, $country_id) {
	try {
  // Fetch the country name from the database.
  $country = t(db_query("SELECT country_name FROM {uc_countries} WHERE country_id = :id", array(':id' => $country_id))->fetchField());

  // If orders exist for this country, show a warning message prior to removal.
  if (isset($form_state['triggering_element']) && $form_state['triggering_element']['#value'] != t('Remove') && module_exists('uc_order')) {
    $count = db_query("SELECT COUNT(order_id) FROM {uc_orders} WHERE delivery_country = :delivery_country OR billing_country = :billing_country", array(':delivery_country' => $country_id, ':billing_country' => $country_id))->fetchField();
    if ($count > 0) {
      drupal_set_message(t('Warning: @count orders were found with addresses in this country. Removing this country now will cause errors to show on those order pages. You might consider simply disabling this country instead.', array('@count' => $count)), 'error');
    }
  }

  // Store the country ID in the form array for processing.
  $form['country_id'] = array(
    '#type' => 'value',
    '#value' => $country_id,
  );

  return confirm_form($form, t('Are you sure you want to remove @country from the system?', array('@country' => $country)), 'portalpages/sp_administrator/store-admin/settings/countries', NULL, t('Remove'));
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_country_remove_form', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Form submission handler for uc_country_remove_form().
 *
 * @see uc_country_remove_form()
 */
function clone_uc_country_remove_form_submit($form, &$form_state) {
 try {	
  $country_id = $form_state['values']['country_id'];

  $result = db_query("SELECT * FROM {uc_countries} WHERE country_id = :id", array(':id' => $country_id));
  if (!($country = $result->fetchObject())) {
    drupal_set_message(t('Attempted to remove an invalid country.'), 'error');
    drupal_goto('portalpages/sp_administrator/store-admin/settings/countries');
  }

  db_delete('uc_countries')
    ->condition('country_id', $country_id)
    ->execute();
  db_delete('uc_zones')
    ->condition('zone_country_id', $country_id)
    ->execute();
  variable_del('uc_address_format_' . $country_id);

  $func_base = _uc_country_import_include($country_id, $country->version);
  if ($func_base !== FALSE) {
    $func = $func_base . '_uninstall';
    if (function_exists($func)) {
      $func();
    }
  }

  drupal_set_message(t('!country removed.', array('!country' => t($country->country_name))));
  drupal_goto('portalpages/sp_administrator/store-admin/settings/countries');
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_country_remove_form_submit', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Updates a country definition to a specific CIF file version.
 *
 * @param $country_id
 *   The ISO 3166-1 numeric country code.
 * @param $version
 *   Version number of CIF file.
 */
function clone_uc_country_update($country_id, $version) {
	try {
  $result = db_query("SELECT * FROM {uc_countries} WHERE country_id = :id", array(':id' => $country_id));
  if (!($country = $result->fetchObject())) {
    drupal_set_message(t('Attempted to update an invalid country.'));
    drupal_goto('portalpages/sp_administrator/store-admin/settings/countries');
  }

  if ($version < $country->version) {
    drupal_set_message(t('You cannot update to a previous version.'));
    drupal_goto('portalpages/sp_administrator/store-admin/settings/countries');
  }

  $func_base = _uc_country_import_include($country_id, $version);
  if ($func_base !== FALSE) {
    $func = $func_base . '_update';
    if (function_exists($func)) {
      for ($i = $country->version; $i <= $version; $i++) {
        $func($i);
      }
    }

    db_update('uc_countries')
      ->fields(array(
        'version' => $version,
      ))
      ->condition('country_id', $country_id)
      ->execute();
    drupal_set_message(t('Country update complete.'));
  }
  else {
    drupal_set_message(t('Attempted to update an invalid country.'));
  }

  drupal_goto('portalpages/sp_administrator/store-admin/settings/countries');
  }catch (Exception $ex) {
  	watchdog_exception('clone_uc_country_update', $ex);
  	expertusErrorThrow($ex);
  }
}
