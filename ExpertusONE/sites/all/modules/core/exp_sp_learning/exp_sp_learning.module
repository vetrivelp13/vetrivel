<?php
/**
 * Implementation of hook_init().
 */
function exp_sp_learning_init() {
	try{
	 global $theme_key, $user_preference,$mylearning_right, $last_left_panel;
	 require_once "exp_sp_learning.inc";
	 $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
	 $css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
	 $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
	 $config=getConfig('exp_sp');
	 if(!isset($_SESSION['user_preferred_currency_code']) && empty($_SESSION['user_preferred_currency_code']))
	 {
	 	$userInfo = getDefaultCurrency();
	 	$_SESSION['user_preferred_currency_code'] = empty($userInfo['preferred_currency'])? '' : $userInfo['preferred_currency'];
		$_SESSION['user_preferred_currency_sym'] = empty($userInfo['attr2'])? '' : $userInfo['attr2'];
	 }
	 drupal_add_js(array('user_prefference' => array('currency_code' =>  $_SESSION['user_preferred_currency_code'], 'currency_sym' =>  $_SESSION['user_preferred_currency_sym'])), 'setting');

	 drupal_add_js(drupal_get_path('module', 'exp_sp_learning').'/exp_sp_learning.js',$js_module_optional);
	 drupal_add_js(drupal_get_path('module', 'exp_sp_administration').'/exp_sp_administration.js',$js_module_optional);
	 drupal_add_js(drupal_get_path('module', 'exp_sp_learning').'/showmore.js',$js_module_optional);
	 if($theme_key == 'expertusoneV2'){
	 	drupal_add_css(drupal_get_path('module', 'exp_sp_learning').'/exp_sp_learning_v2.css', $css_module_optional);
	 }else{
	 	drupal_add_css(drupal_get_path('module', 'exp_sp_learning').'/exp_sp_learning.css', $css_module_optional);
	 }
	 //add necessary video js files
	 $header_optional = array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY);
	 expDebug::dPrint('get user agent '.print_r($_SERVER['HTTP_USER_AGENT'], 1));
	 if(isset($_SERVER['HTTP_USER_AGENT']) && preg_match('/(?i)msie [5-9]/', $_SERVER['HTTP_USER_AGENT']) != 1) {
	 	// if IE<=9
	 	drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/videojs/video.js', $header_optional);
	 }
// 	 drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/videojs/video.js', $header_optional);
	 $content_youtube = 1;
	if ($config['content_restricted_domains']!='') {
			$array= explode(",",$config['content_restricted_domains']);
			foreach($array as $value){
				if(strpos($config['content_restricted_domains'],'youtube')!==FALSE){
					$content_youtube =0;
				}
			}
		    
      }
	  if($content_youtube == 1){
		 drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/videojs/Youtube.js', $header_optional);
	 }
	 drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/videojs/Vimeo.js', $header_optional);
	 drupal_add_css(drupal_get_path('module', 'exp_sp_core').'/js/videojs/video-js.min.css', $css_theme_optional);
	 
	 /*-- My learn page customization --*/
	 $user_preference = getUserPreference();
// 	 expDebug::dPrint('User Preperance---->'.print_r($user_preference,1),4);
	 $mylearning_right = true;
	 if(count($user_preference['mylearning_right'])<=0 && $theme_key == 'expertusoneV2'){ 
	 	$mylearning_right = false;
	 }
	 drupal_add_js(array('mylearning' => array('user_preference' =>  $user_preference)), 'setting');
	 drupal_add_js(array('mylearning_right' =>  $mylearning_right), 'setting');
	 $last_left_panel = (count($user_preference['mylearning_left'])==1) ? true : false; #51829: When the panels in the left side are deleted except 1
	 drupal_add_js(array('last_left_panel' =>  $last_left_panel), 'setting');
	 if (!module_exists('salesforce_integration')) { // set type default value when SF module not activated. 
	 	drupal_add_js(array('salesforce' => array('type' =>  'web')), 'setting');
	 }
	 $user_id = getSltpersonUserId();
	 if(isset($_SESSION['guest_user_preferences']['catalog_refine']) && $user_id==0){
	 	drupal_add_js(array('user_preferences' => array('catalog_refine' => $_SESSION['guest_user_preferences']['catalog_refine'])), 'setting');
	 	drupal_add_js(array('user_preferences' => array('catalog_criteria_class' => $_SESSION['guest_user_preferences']['catalog_criteria_class'])), 'setting');
		drupal_add_js(array('user_preferences' => array('catalog_content_class' => $_SESSION['guest_user_preferences']['catalog_content_class'])), 'setting');
	 }
	 if(strpos($_SERVER['REQUEST_URI'], 'learning/catalog-search') !== false || strpos($_SERVER['REQUEST_URI'], 'widget/catalog-search') !== false || strpos($_SERVER['REQUEST_URI'], 'canvas/catalog') !== false) {
	 	//expDebug::dPrint('catalog filters in session '.var_export($_SESSION['catalogcookies']['catalogAppliedFilters'], 1), 1);
	 	$filters = array_unique(json_decode($_SESSION['catalogcookies']['catalogAppliedFilters']));
	 	drupal_add_js(array('catalog_variables' => array('catalogAppliedFilters' => $filters)), 'setting');
	 }
	 
	 $setting['activeModulesList'] = array(
    'myactivity' => (module_exists('exp_sp_my_activity')) ? 'Y' : 'N',
    'myskill' => (module_exists('exp_sp_my_skill')) ? 'Y' : 'N' 
  	);
 		 drupal_add_js($setting, 'setting');
 		 $config=getConfig("exp_sp");
 		 $mylearn_version = $config['mylearn_version'];
 		 $content_conversion = $config['content_conversion'];
 		 drupal_add_js(array('convertion' => array('mylearn_version' =>  $mylearn_version,'content_conversion'=>$content_conversion)), 'setting');
 		 if(isset($_SESSION['surveylink'])) {
 		 	drupal_add_js(array('mylearning' => array('user' =>  $_SESSION['surveylink'], 'survey_data'=>$_SESSION['survey_data'])), 'setting');
 		 	unset($_SESSION['surveylink']);
			unset($_SESSION['survey_data']);
 		 }
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_learning_init', $ex);
		expertusErrorThrow($ex);
	}
	expDebug::dPrint('sync cal value: ' . var_export($_SESSION['syncUpdate'], 1),4);
	if(isset($_REQUEST[SAMLResponse]) || $_SESSION['saml_auth']==1){
		$_SESSION['saml_auth'] = 1;
		$_SESSION['force_password_change'] = 0;
	}

	if($_SESSION['syncUpdate'] == true && $_SESSION['force_password_change'] != 1 && arg(1) != 'login-process') {
		$_SESSION['syncUpdate'] = false;
		invokeUserUpdateBackgroundProcess($user_id);
	}
}

/*
 *  Implementaion of hook_cron().
 */
function exp_sp_learning_cron() {
	try{
		// Check certification monitor job status
		$jobname = 'cert_expiry';
		$checkStatus     = check_monitor_jobs_status($jobname);
		$last_run        = explode(" ",$checkStatus["last_run"]);
		$last_run_date   = $last_run[0];
		$curr_date       = date("Y-m-d");

		// Validate the monitor jobs needs to be happen one per day - Start
		if($last_run_date != $curr_date) {

			//send the crash report send by mobile App
			include_once($_SERVER["DOCUMENT_ROOT"]. '/mobile/sendReport.php');
			sendcrashReport();
			
			/*try{
				// Handled in Bulk notification
				expDebug::dPrint('Certification expire notification - batch monitor start',4);
				// Get list of users to send notification
				$notifyList = getCertCurrLPExpiryDetailsForNotifications(0);
				foreach($notifyList as $notifyList) {
					$personid       = $notifyList->personid;
					$programId       = $notifyList->id;
					$updateUserId   = 1;
					// insert certification expire remainder to notification
					insertNotification('certCurrLPExpireRemainder', $programId, null, $personid, $updateUserId);
				}
				expDebug::dPrint('Certification expire notification - batch monitor Completed ',4);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Certification expire notification -- ".print_r($ex,true),1);
			}*/
			/*
			 * Start # 0039858 -  Salesforce Chatter Feed
		  * Added By : Ganesh Babu V, Oct 16th 2014 3:15 PM
		  * Description: Send the notification parametre to post the feed to salesforce user according to notification type and notification code
		  * Notification Type : Certificate Expiry Reminder, certCurrLPExpireRemainder
		  * Ticket : #0039858: Implement the salesforce chatter feed in ExpertusONE
		  */

			if(module_exists('salesforce_integration')){
				try{
					module_load_include('inc','salesforce_integration','salesforce_integration_chatter');
					expDebug::dPrint('Salesforce Certification expire notification - batch monitor start',4);
					// Get list of users to send notification
					$notifyList = getSalesforceCertCurrLPExpiryDetailsForNotifications(0);
					foreach($notifyList as $notifyList) {
						$personid       = $notifyList->personid;
						$tp_id       = $notifyList->tp_id;
						postSalesforceFeed('certCurrLPExpireRemainder','cert_curr_lp_expire_reminder',$tp_id,'',$personid);
					}
					expDebug::dPrint('Salesforce Certification expire notification - batch monitor Completed ',4);
				}catch(Exception $ex){
					expDebug::dPrint("Error in CRON - Salesforce Certification expire notification -- ".print_r($ex,true),1);
				}
			}

			/* End # 0039858 -  Salesforce Chatter Feed */


			//Get list of programs which starts before x days
			/*try{
				// Handled in Bulk notification
				$programNotifyList = getCertCurrLPDetailsForReminderNotifications(0);
				expDebug::dPrint('Cert/curr/lp reminder notification result = ' . print_r($programNotifyList, true) , 4);
				foreach($programNotifyList as $programNotifyListRow) {
					$programId		 = $programNotifyListRow->programid;
					$personid       = $programNotifyListRow->personid;
					$updateUserId   = 1;
					// insert certification/curricula/LP remainder to notification
					insertNotification('certCurrLPReminder', $programId, null, $personid, $updateUserId);
				}
				expDebug::dPrint('Certification/Carriculla/LP reminder notification - batch monitor Completed ',4);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Salesforce Certification expire notification -- ".print_r($ex,true),1);
			}*/

			/*try{
				// Handled in Bulk notification
				expDebug::dPrint('Certification expire notification to manager- batch monitor start',4);
				// Get list of managers to send notification
				$managerNotifyList = getCertExpiryDetailsForManagerNotifications(0);
				foreach($managerNotifyList as $managerNotifyListRow) {
					$managerId		 = $managerNotifyListRow->manager_id;
					$personid       = $managerNotifyListRow->personid;
					$updateUserId   = 1;
					// insert certification expire remainder to notification
					insertNotification('certExpireReminderToManager', $personid, null, $managerId, $updateUserId);
				}
				expDebug::dPrint('Certification expire notification to manager- batch monitor Completed ',4);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Certification expire notification to manager -- ".print_r($ex,true),1);
			}*/

			/*try{
				// Handled in Bulk notification
				expDebug::dPrint('Learning Plan Termination notification learners- batch monitor start',4);
				// Get list of learners to send notification
				$terminationNotifyList = getLPTerminateDetailsForReminderNotifications(0);
				foreach($terminationNotifyList as $terminationNotifyListRow) {
					$personid       = $terminationNotifyListRow->personid;
					$programId       = $terminationNotifyListRow->id;
					$updateUserId   = 1;
					// insert certification expire remainder to notification
					insertNotification('LPTerminationReminder', $programId, null, $personid, $updateUserId);
				}
				expDebug::dPrint('Learning Plan Termination notification learners- batch monitor Completed ',4);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Certification expire notification to manager -- ".print_r($ex,true),1);
			}*/


			/*
			 * Start # 0039858 -  Salesforce Chatter Feed
		  * Added By : Ganesh Babu V, Oct 15th 2014 11:15 AM
		  * Description: Send the notification parametre to post the feed to salesforce user according to notification type and notification code
		  * Notification Type : Learning Plan Termination notification
		  * Ticket : #0039858: Implement the salesforce chatter feed in ExpertusONE
		  */

			if(module_exists('salesforce_integration')){
				try{
					module_load_include('inc','salesforce_integration','salesforce_integration_chatter');
					expDebug::dPrint('Salesforce Learning Plan Termination notification learners- batch monitor start',4);
					$terminationNotifyList = getSalesforceLPTerminateDetailsForReminderNotifications(0,'');
					expDebug::dPrint('$terminationNotifyList -  '.print_r($terminationNotifyList,true),4);
	
					foreach($terminationNotifyList as $terminationNotifyListRow) {
						$personid       = $terminationNotifyListRow->personid;
						$tp_id       	= $terminationNotifyListRow->tp_id;
						postSalesforceFeed('LPTerminationReminder','lp_termination_reminder',$tp_id,'',$personid);
					}
					expDebug::dPrint('Salesforce  Learning Plan Termination notification learners- batch monitor Completed',4);
				}catch(Exception $ex){
					expDebug::dPrint("Error in CRON - Salesforce  Learning Plan Termination notification learners -- ".print_r($ex,true),1);
				}
			}

			/* End # 0039858 -  Salesforce Chatter Feed */


			
			//getWaitlistExpiredForNotification
			/*try{
				// Handled in Bulk notification
				expDebug::dPrint('Waitlisted trainings expired and not confirmed before on start date - batch monitor start',4);
				$refund_flag = 0;//0034090: Feedback -- Cancellation of waitlisted seats for priced class
				// Get list of learners to send notification
				$expiryWaitlistTrainingNotifyList = getWaitlistExpiredForNotification();
				foreach($expiryWaitlistTrainingNotifyList as $expiryWaitlistTrainingNotifyRow) {
					$updateUserId   = 1;
					$courseId       = $expiryWaitlistTrainingNotifyRow->course_id;
					$classId        = $expiryWaitlistTrainingNotifyRow->class_id;
					$waitListUserId = $expiryWaitlistTrainingNotifyRow->user_id;
					$enrId          = $expiryWaitlistTrainingNotifyRow->enroll_id;
					//0034090: Feedback -- Cancellation of waitlisted seats for priced class
					$list=module_list(false,false,false);
					if(!empty($list['exp_sp_commerce']))
					$refund_flag = automaticRefundForWaitlistCancel($enrId);
					// insert certification expire remainder to notification
					insertNotification('WaitlistExpired', $courseId, $classId, $waitListUserId, $updateUserId);
					if($refund_flag == 0)
					automaticCancelWaitlistUpdate($enrId);
	
					//insertNotification('LPTerminationReminder', null, null, $personid, $updateUserId);
					expDebug::dPrint('Waitlisted trainings expired and not confirmed before on start date - $waitListUserId : '.$waitListUserId , 4);
				}
				expDebug::dPrint('Waitlisted trainings expired and not confirmed before on start date - batch monitor Completed ',4);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Waitlisted trainings expired and not confirmed before on start date -- ".print_r($ex,true),1);
			}*/

			/*try{
				expDebug::dPrint('Wbt enrollment status change- batch monitor start',4);
				$expiredWbtList = getExpiredWbtContent();
				expDebug::dPrint('Wbt enrollment status change- batch monitor Completed ',4);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Wbt enrollment status change -- ".print_r($ex,true),1);
			}*/
			
			/*try{
				updateClassAsCompleted();
				expDebug::dPrint('Compliance enrollment/inprogress status change- incomplete start',4);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Compliance enrollment/inprogress status change -- ".print_r($ex,true),1);
			}*/
			
			/*try{
				// Handled in Bulk notification
				autoComplianceIncompleteUpdate();
				expDebug::dPrint('Compliance enrollment/inprogress status change- incomplete end',4);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Compliance enrollment/inprogress status change -- ".print_r($ex,true),1);
			}*/

			// Remainder notification for Compliance completion
			/*try{
				// Handled in Bulk notification
				autoComplianceMandatoryCompletionDaysReminder('is_compliance');
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Remainder notification for Compliance completion -- ".print_r($ex,true),1);
			}*/

			// Remainder notification for Mandatory completion (Class)
			/*try{
				// Handled in Bulk notification
		  	autoComplianceMandatoryCompletionDaysReminder('mandatory');
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Remainder notification for Mandatory completion -- ".print_r($ex,true),1);
			}*/

			// Remainder notification for Mandatory completion (TP)
			/*try{
				// Handled in Bulk notification
				autoMandatoryCompletionDaysReminderForTP();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Remainder notification for Mandatory completion -- ".print_r($ex,true),1);
			}*/

			// Remainder notification for Compliance Expired
			/*try{
				// Handled in Bulk notification
				autoComplianceExpiredReminder();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Remainder notification for Compliance expiry -- ".print_r($ex,true),1);
			}*/

			// Remainder notification for Compliance Expiry
			/*try{
				// Handled in Bulk notification
				autoComplianceExpiryDaysReminder();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Remainder notification for Compliance expiry -- ".print_r($ex,true),1);
			}*/

			/*try{
				// Handled in Bulk notification
				expDebug::dPrint("complianceReregistration inside ",4);
				complianceReregistration();
				expDebug::dPrint("outside complianceReregistration ",4);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Remainder notification for Compliance expiry -- ".print_r($ex,true),1);
			}*/
			
			/*try{
				// Handled in Bulk notification
				RemindsessionbatchMonitor();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Remainder for session -- ".print_r($ex,true),1);
			}*/
			
			/*try{
				LPExpiredbatchMonitor();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - LP Expire -- ".print_r($ex,true),1);
			}*/
			
			/*try{
				// update announcements which was expired
				update_announcement_expired();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Update announcement -- ".print_r($ex,true),1);
			}*/
			
			/*try{
				//Update learning plan completed by date
				update_learningplan_completedbydate();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Update learning plan completed by -- ".print_r($ex,true),1);
			}*/
			
			// Commented by Vincent since this auto registration handled 
			// separatly in autoregister_cron
			//Mandatory class and program auto_registration start
			/*try{
				mandatoryComplianceAutoRegister();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Mandatory Compliance Auto Register-- ".print_r($ex,true),1);
			}*/

			//is_complaince update in enrollment table for Compliance classes
			/*try{
				isComplianceUpdate();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Mandatory Compliance Auto Register-- ".print_r($ex,true),1);
			}*/
			
			/*try{
				classSessionNotificationDetailsForInstructor($last_run_date);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Class Session details for instructor-- ".print_r($ex,true),1);
			}*/
			
			/* try{
				remove_expired_oAuth_access_tokens();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - remove_expired_oAuth_access_tokens -- ".print_r($ex,true),1);
			} */
			
			// This update should be a last action for the cron process
			// Please do not add any other jobs under this if you need add
			// any additonal cron process add it about this update
			try{
				// update monitor jobs was done
				update_monitor_job($jobname);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - update monitoring jobs for cert_expiry -- ".print_r($ex,true),1);
			}
		}  // Validate the monitor jobs needs to be happen one per day - End

		//Cancel class, handled bulk notification
		try{
			 $auto_class_cancel_check_arr = check_monitor_jobs_status('bulk_class_cancel_notification');
			 if($auto_class_cancel_check_arr['custom0']==1){
				expDebug::dPrint("Cancel class bulk notification -- ",1);
				//browser_session
				$selectStmt = db_select('slt_enrollment', 'enr');
				$selectStmt->addField('enr', 'course_id', 'course_id');
				$selectStmt->addField('enr', 'class_id', 'class_id');
				$selectStmt->addField('enr', 'updated_by', 'updated_by');
				$selectStmt->condition('enr.browser_session', 'bulk_cancel_notification_pending','=');
				$selectStmt->groupby('enr.class_id');
				$selectStmt->range(0,1);
				expDebug::dPrintDBAPI(' $selectStmt = ' ,$selectStmt);
				$result = $selectStmt->execute()->fetchAll();
				if($result[0]->class_id!='' && $result[0]->course_id!=''){
					bulk_class_cancel_notification_insert($result[0]->class_id,$result[0]->course_id,$result[0]->updated_by);
				}else{
					// Update monitoring jobs table to pick the process in next run
					$update = db_update('slt_monitoring_jobs');
					$update->fields(array(
							'custom0'=>0
					));
					$update->condition('job_name','bulk_class_cancel_notification','=');
					$update->execute();
				}
			 }
				
		}catch(Exception $ex){
			expDebug::dPrint("Error in CRON -  Cancel class bulk notification -- ".print_r($ex,true),1);
		}
		//Query for home page widgets
		$cron_run_cnt = checkCustomCronJob('home_page_widget',30);
		expDebug::dPrint('cron count'.$cron_run_cnt,3);
		if($cron_run_cnt>0){
			//update home page scripts
			$jobname = 'home_page_widget';
			try{
				mostActiveUsersUpdate();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Update most active users list -- ".print_r($ex,true),1);
			}
			
			try{
				mostPopularTrainingUpdate();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Update most popular trainings -- ".print_r($ex,true),1);
			}
			
			try{
				highlyRatedTrainingUpdate();
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Update highly rated trainings -- ".print_r($ex,true),1);
			}
			
			try{
				//End of home script update
				update_monitor_job($jobname);
			}catch(Exception $ex){
				expDebug::dPrint("Error in CRON - Update monitoring job for Home Page widgets -- ".print_r($ex,true),1);
			}
		}
		
		try{
		//Group bulk user upload
		//include_once DRUPAL_ROOT.'sites/all/modules/core/exp_sp_learning/exp_sp_learning.inc';
		$jobname = 'group_bulk_user_upload';
		$checkStatus     = check_monitor_jobs_status($jobname);
		expDebug::dPrint("job status for group_bulk_user_upload cron".print_r($checkStatus,true),4);
		if($checkStatus['custom0']==1){
		    include_once(drupal_get_path('module', 'exp_sp_administration_groups') .'/exp_sp_administration_groups.inc');
		     
		    $jobDetails = fetchBackgroundListForGroups('running');		
		     
		    if(count($jobDetails) != 0) {
		        
		        $run_time_arr = explode('__',$jobDetails[0]->custom3);		        
		        $run_time = $run_time_arr[0];
		        $run_exc_remarks='';
		        if(count($run_time_arr) > 1){
		        	array_shift($run_time_arr);
		        	$remarks = implode(" ",$run_time_arr);
			        $run_exc_remarks = $remarks;
		        }
		        $now = microtime(true);
 		        if((($now - $run_time)/60) > '30') { // checks $run_time greater than 30mins
		        // Update the status to inprogress if job is in still running
		        $update = db_update ( 'slt_temp_background_jobs' );
		        $update->fields ( array (
		            'status' => "inprogress",
		            'custom3' => $run_exc_remarks //capture the running execution time.
		        ) );
		        $update->condition ( 'id', $jobDetails[0]->job_id, '=' );
		        //expDebug::dPrintDBAPI ( "batchCTProcess::slt_temp_background_jobs status update running state :: ", $update );
		        $update->execute();
		        }
		    }  
		    batchGUProcess();
		    expDebug::dPrint("after invoking batchGUProcess for group_bulk_user_upload_cron",4);
		}
		}catch(Exception $ex){
		    expDebug::dPrint("Error in CRON -  group_bulk_user_upload -- ".print_r($ex,true),1);
		}
		

	}catch(Exception $ex) {
		watchdog_exception('exp_sp_learning_cron', $ex);
		expertusErrorThrow($ex);
	}


}

/**
 * Implementation of hook_menu().
 */
function exp_sp_learning_menu() {
	try{
		$items = array();
				
		$items['ajax/learningcore/register-to-launch/%/%/%/%/%/%'] = array (
				'title' => 'Register to Launch',
				'page callback' => 'registeredToLaunch',
				'page arguments' => array(3, 4, 5, 6, 7, 8),
				'type' => MENU_CALLBACK,
				'access arguments' => array('expertus learner'),
				'file' => 'exp_sp_learning.inc'
		);
		$items['ajax/learningcore/register/%/%/%/%/%'] = array (
		'title' => 'Register User For Course-Class',
		'page callback' => 'register_user_to_course_class',
	    'page arguments' => array(3, 4, 5, 6, 7),
		'type' => MENU_CALLBACK,
	    'access arguments' => array('expertus learner'),
		'file' => 'exp_sp_learning.inc'
		);
		
		$items['access_denied'] = array(
				'title' => 'Access Denied',
				'page callback' => 'access_denied',
				'access callback' => array('user_is_anonymous'),
				'access callback' => TRUE,
		);
		$items['ajax/learningcore/check-equivalence/%/%/%'] = array (
		'title' => 'Check if there is an equivalent course',
		'page callback' => 'checkEquivalence',
	    'page arguments' => array(3, 4, 5),
		'type' => MENU_CALLBACK,
	    'access arguments' => array('expertus learner'),
		'file' => 'exp_sp_learning.inc'
		);
		/**
		 * 0024925: Enforce equivalence in training plans
		 * for this ticket we created equivalence option for training plan
		 * don't delete it. Its may need for feature enhancement
		 *
		 */
		/**

		$items['ajax/learningcore/check-equivalence-tp/%/%'] = array (
		'title' => 'Check if there is an equivalent course',
		'page callback' => 'checkEquivalenceTP',
		'page arguments' => array(3, 4, 5),
		'type' => MENU_CALLBACK,
		'access arguments' => array('expertus learner'),
		'file' => 'exp_sp_learning.inc'
		);
		*/
		//ajax/trainingplan/class-cnt-for-course/22/0/0/N/0/catalogpopup/N
		$items['ajax/trainingplan/class-cnt-for-course/%/%/%/%/%/%'] = array (
		'title' => 'Register directly if courses has only one class',
		'page callback' => 'lp_singleclass_or_multiclass_cnt_for_course',
	    'page arguments' => array(3,4,5,6,7,8),
		'type' => MENU_CALLBACK,
	    'access arguments' => array('expertus learner'),
		'file' => 'exp_sp_learning.inc'
		);

		/*	$items['ajax/trainingplan/direct/%/%'] = array (
		 'title' => 'Register directly if courses has only one class and Course already registered',
		 'page callback' => 'getCourseClassCountTESTForLP',
		 'page arguments' => array(3,4),
		 'type' => MENU_CALLBACK,
		 'access arguments' => array('expertus learner'),
		 'file' => 'exp_sp_learning.inc'
		 );*/


		$items['ajax/trainingplan/module-list/%/%/%/%'] = array (
		'title' => 'List of Courses for Training Plan',
		'page callback' => 'lp_fetch_module_list',
	    'page arguments' => array(3,4,5,6),
		'type' => MENU_CALLBACK,
	    'access arguments' => array('expertus learner'),
		'file' => 'exp_sp_learning.inc'
		);

		$items['ajax/trainingplan/class-list/%/%'] = array (
		'title' => 'List of Classes for Course',
		'page callback' => 'lp_fetch_class_list',
	    'page arguments' => array(3,4),
		'type' => MENU_CALLBACK,
	    'access arguments' => array('expertus learner'),
		'file' => 'exp_sp_learning.inc'
		);

		$items['ajax/trainingplan/class-list-register/%/%/%/%'] = array (
		'title' => 'Register list of classes for trainging plan',
		'page callback' => 'lp_class_list_register',
	    'page arguments' => array(3,4,5,6),
		'type' => MENU_CALLBACK,
	    'access arguments' => array('expertus learner'),
		'file' => 'exp_sp_learning.inc'
		);

		$items['ajax/learningcore/availableseats/%/%/%'] = array (
		'title' => 'Available Seats for Course-Class',
		'page callback' => 'callbackGetAvailableSeats',
	    'page arguments' => array(3,4,5),
		'type' => MENU_CALLBACK,
	    'access arguments' => array('expertus learner'),
		'file' => 'exp_sp_learning.inc',		
    	'file path' => drupal_get_path('module', 'exp_sp_learning')
		);

		$items['ajax/learningcore/objectavailableseats/%'] = array (
		'title' => 'Available Seats for Learning Plan',
		'page callback' => 'callbackGetObjectAvailableSeats',
	    'page arguments' => array(3),
		'type' => MENU_CALLBACK,
	    'access arguments' => array('expertus learner'),
		'file' => 'exp_sp_learning.inc',		
    	'file path' => drupal_get_path('module', 'exp_sp_learning')
		);

		$items['ajax/cart/product/%/%/%/%/%'] = array(
        'page callback' => 'callAddToCart',
    	'page arguments' => array(3, 4, 5, 6, 7),
    	'type' => MENU_CALLBACK,
    	'access arguments' => array('expertus learner'),
    	'file' => 'exp_sp_learning.inc'
    	);

    	$items['ajax/cart/tpproduct/%/%/%/%/%'] = array(
        'page callback' => 'callAddToCartTP',
    	'page arguments' => array(3, 4, 5, 6,7),
    	'type' => MENU_CALLBACK,
    	'access arguments' => array('expertus learner'),
    	'file' => 'exp_sp_learning.inc'
    	);
     $items['learning/five-star-submit'] = array(
    'title' => 'Fivestar Submit',
    'page callback' => 'setFiveStarRating',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_learning.inc'
    );

    $items['ajax/learningcore/evaluate-login'] = array(
    'title' => 'Authenticate Login',
    'page callback' => 'checkUserNameEsignature',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    //'file' => 'exp_sp_learning.inc'
    );

    $items['learning/%ctools_js/play_video'] = array (
    'title' => 'Play Video',
    'page callback' => 'render_videoHTML_in_ctools_modal',
    'page arguments' => array(1),
    'access arguments' => array('expertus learner'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_learning.inc'
    );

    $items['ajax/learningcore/getConcatenatedUserDets'] = array(
    'title' => 'Get User Details',
    'page callback' => 'getConcatenatedUserDets',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_learning.inc'
    );

    $items['aicc/launch/%/%'] = array(
    'title' => 'Get User Details',
    'page callback' => 'setSessionAicc',
    'page arguments' => array(2,3),
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_learning.inc'
    );
	
    $items['user-preference/update'] = array(
    		'title' => 'update user preferences',
    		'page callback' => 'updateUserPreference',
    		'access arguments' => array('expertus learner'),
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_learning.inc'
    );
    
    $items['ajax/getcdnurl/%'] = array(
    		'title' => 'Get CDN URL',
    		'page callback' => 'getcdnurlpath',
    		'page arguments' => array(2),
    		'access arguments' => array('expertus learner'),    
    		'type' => MENU_CALLBACK,
    );
    
    $items['user-preference/list'] = array(
    		'title' => 'retrive user deleted widget list',
    		'page callback' => 'getUserPreferenceDeletedList',
    		'access arguments' => array('expertus learner'),
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_learning.inc'
    );
    
    $items['learning/enroll/location/autocomplete'] = array(
    		'title' => 'Get learning menu and filter list',
    		'page callback' => 'getEnrollClassLocation',
    		'access arguments' => array('expertus learner'),
    		'type' => MENU_CALLBACK,
    		//'file' => 'exp_sp_learning.inc'
    ); 
    
    $items['learning/enrollment/text-search'] = array(
    		'title' => 'Search based on text',
    		'page callback' => 'getAutoCompleteForText',
    		'access arguments' => array('expertus learner'),
    		'type' => MENU_CALLBACK
    		//'file' => 'exp_sp_learning.module'
    );
    $items['filters/update'] = array(
    		'title' => 'update my learning filter',
    		'page callback' => 'updateFilters',
    		'access arguments' => array('expertus learner'),
    		'type' => MENU_CALLBACK
    );  
	$items['share/surveylink/%/%/%'] = array(
	    'title' => 'Survey sharelink',
	    'page callback' => 'surveySharelinkInit',
	    'page arguments' => array(2,3,4),
	    'access arguments' => array('access content'),
	    'type' => MENU_CALLBACK
  	);
    $items['ajax/get-progress/%'] = array (
    		'title' => 'Get Progress',
    		'page callback' => 'getProgressFromEnrollmentId',
    		'page arguments' => array(2),
    		'type' => MENU_CALLBACK,
    		'access arguments' => array('expertus learner'),
    		'file' => 'exp_sp_learning.inc'
    );
    return $items;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_learning_menu', $ex);
		expertusErrorThrow($ex);
	}
}

function exp_sp_learning_theme() {
	try{
		global $base_url;

		$themes = array();

		$themes['exp_sp_learning-common-register-html'] = array(
    'variables' => array('result' => array()),
    'template' => 'exp_sp_learning-common-register-html' 
    );

    $themes['exp_sp_learning-common-lp-register-html'] = array(
    'variables' => array('results' => array()),
    'template' => 'exp_sp_learning-common-lp-register-html' 
    );

    $themes['videojs-player'] = array (
    'variables' => array(
                      'html_id' => '',
                      'base_url' => $base_url,
                      'upload_dir' => '',
                      'video_basename' => '',
    ),
    'template' => 'exp_sp_learning-videojs-player',
    );

    $themes['rtmp_jwplayer'] = array (
    		'variables' => array(
    				'html_id' => '',
    				'base_url' => $base_url,
    				'upload_dir' => '',
    				'video_basename' => '',
    		),
    		'template' => 'exp_sp_learning-rtmp_jwplayer',
    				);
                      // expDebug::dPrint(' $themes = ' . print_r($themes, true) , 4); Commented by Vincent on Jan 04, 2013 for ticket #0020487
                      return $themes;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_learning_theme', $ex);
		expertusErrorThrow($ex);
	}
}

function getcdnurlpath($lesson_id){
try {
	expDebug::dPrint('$lesson_id -->' .print_r($lesson_id, true), 5);
	include_once(drupal_get_path('module', 'exp_sp_administration_module_info') .'/exp_sp_administration_module_info.inc');
	include_once(drupal_get_path('module', 'exp_sp_learning') .'/exp_sp_learning.inc');
	$cdn_status  = getDrupalModuleStatus(array('cloud_files'));

	$select = db_select('slt_content_lesson','lesn');
	$select->innerJoin('slt_content_version','vern','vern.id = lesn.content_version_id');
	$select->addField('lesn','launchurl','url');
	$select->addField('vern','content_sub_type','type');
	$select->addField('vern','hosted_type','hosttype');
	$select->condition('lesn.id',$lesson_id,'=');
	$result = $select->execute()->fetchAll();
	$url = (string)$result[0]->url;
	$type = (string)$result[0]->type;
	$hosttype = (string)$result[0]->hosttype;
	if($cdn_status == 1){
		if(($type == 'lrn_cnt_typ_knc' || $type == 'lrn_cnt_typ_vod') && $hosttype!='2'){
			$cdn_launch_PATH = str_replace('/sites/default/files', '', $url);
			$cdnlaunchurl=getCDNURL($cdn_launch_PATH);
			if($cdnlaunchurl == ''){
				$cdnurl = $url;
			}else {
				$cdnurl = $cdnlaunchurl;
			}
		}else {
			$cdnurl = $url;
		}
	}else {
		$cdnurl = $url;
	}
	$result = $cdnurl.'~~'.$cdn_status;
	print $result;
	}catch(Exception $ex){
		watchdog_exception('getcdnurlpath', $ex);
		expertusErrorThrow($ex);
	}
}

function checkUserNameEsignature(){
	try{
		return drupal_json_output(checkUserNameEsign($_POST['uname'],$_POST['pass']));
	}catch(Exception $ex) {
		watchdog_exception('checkUserNameEsignature', $ex);
		expertusErrorThrow($ex);
	}
}

/*function RemindsessionbatchMonitor()
{
	try{
		//Virtual class remind session
		classRemindSessionCronJob('lrn_cls_dty_vcl');
		//ILT class remind session
		classRemindSessionCronJob('lrn_cls_dty_ilt');
	}catch (Exception $ex) {
		watchdog_exception('RemindsessionbatchMonitor', $ex);
		expertusErrorThrow($ex);
	}
}*/

/*
 * slp_lnr_remind_session_sel() procedure converted
 */
/*function classRemindSessionCronJob($deliveryType){
	try
	{
		// Added by Vincent on Nov 01, 2013 for #0028593
		$timeZone = date_default_timezone(false);
		$defaultTimezone = ($timeZone == 'Asia/Kolkata') ? 'Asia/Calcutta' : $timeZone;
			
		$reminderType = ($deliveryType == 'lrn_cls_dty_vcl') ? 'virtual_class_reminder' : 'class_remind_session';
		$selectStmt = db_select('slt_enrollment', 'a');
		$selectStmt->leftJoin('slt_course_class_session', 'b', 'b.course_id=a.course_id AND b.class_id=a.class_id');
		$selectStmt->leftJoin('slt_course_class', 'c', 'b.class_id=c.id');
		$selectStmt->leftJoin('slt_notification_info', 'e', 'e.lang_code = \'cre_sys_lng_eng\' AND e.notification_code=\''.$reminderType.'\'');
		$selectStmt->addField('a', 'user_id');
		$selectStmt->addField('a', 'order_id');
		$selectStmt->addField('a', 'class_id');
		$selectStmt->condition('a.reg_status', 'lrn_crs_reg_cnf');
		$selectStmt->condition('a.comp_status', 'lrn_crs_cmp_enr');
		$selectStmt->condition('c.status', 'lrn_cls_sts_atv');
		$selectStmt->condition('c.delivery_type', $deliveryType);
		$selectStmt->where('e.frequency_data_value = DATEDIFF(DATE_FORMAT(b.start_date,\'%Y-%m-%d\'),
    		IFNULL(CONVERT_TZ(now(), \'".$defaultTimezone."\' ,(select pro1.attr2 from slt_profile_list_items pro1 where pro1.code= b.timezone)),NOW()))');
		$selectStmt->groupBy('a.id');
		expDebug::dPrintDBAPI('classRemindSessionCronJob ' , $selectStmt);
		$result =  $selectStmt->execute()->fetchAll();
		expDebug::dPrint('classRemindSessionCronJob ' . print_r($result,true),3);
		foreach ($result as $record) {
			if($record->class_id){
				$query="CALL slp_lnr_notification_ins ('".$reminderType."', $record->user_id, $record->order_id, $record->class_id, '',$record->user_id)";
				expDebug::dPrint('classRemindSessionCronJob notification call' . print_r($query,true), 4);
				db_query($query);

				/*
				 * Start # 0039858 -  Salesforce Chatter Feed
				 * Added By : Ganesh Babu V, Oct 14th 2014 12:30 PM
				 * Description: Send the notification parametre to post the feed to salesforce user according to notification type and notification code
				 * Notification Type : Class Reminder for ILT / VC
				 * Ticket : #0039858: Implement the salesforce chatter feed in ExpertusONE
				 */

	/*			if(module_exists('salesforce_integration')){
					module_load_include('inc','salesforce_integration','salesforce_integration_chatter');
					postSalesforceFeed($reminderType,$reminderType,$record->order_id, $record->class_id, $record->user_id);
				}
					
				/* End # 0039858 -  Salesforce Chatter Feed */

	/*		}
		}
	}catch(Exception $ex) {
		watchdog_exception('classRemindSessionCronJob', $ex);
		expertusErrorThrow($ex);
	}
}*/
/**
 * update_announcement_expired funtion to update the announcement status as
 * deleted in slt_site_notice table if the announcement display date has expired
 */
function update_announcement_expired(){
	try{
		expDebug::dPrint('checking the expired status');
		expDebug::dPrint('checking the expired statu111111s');
		$updateStmt = db_update('slt_site_notice');
		$updateStmt->fields(array(
                                  'status' => 'cre_sys_obt_not_del', //Update status to deleted
                                  'updated_on' => now(),
                                  'updated_by' => 1
		));

		$updateStmt->where("CONCAT( DATE_FORMAT(to_date, _utf8'%Y-%m-%d'),' ',if(to_time = 'hh:mm','23:59',to_time),':00') < NOW()");
		$updateStmt->condition('status', 'cre_sys_obt_not_atv','=');
		expDebug::dPrintDBAPI('update_announcement_expired query ' , $updateStmt);
		$result =  $updateStmt->execute();
		//expDebug::dPrint('update_announcement_expired result ' . print_r($result,true),3);
	}catch(Exception $ex){
		watchdog_exception('update_announcement_expired',$ex);
		expertusLogError($ex);
	}
}

/* function LPExpiredbatchMonitor()
{
	try
	{
		//$query="call slp_change_lp_expired_status()";
		//db_query($query);
	  	change_lp_expired_status();
	  	expDebug::dPrint('LPExpiredbatchMonitor Executed ');
	}catch(Exception $ex) {
		watchdog_exception('LPExpiredbatchMonitor', $ex);
		expertusLogError($ex);
	}
} */

/**
 * Implementation of hook_block_info().
 */
function exp_sp_learning_block_info() {
	try {
		$blocks = array();
		$blocks['tab_user_customization'] = array(
				'info' => t('User customization'),
				'cache' => DRUPAL_CACHE_PER_ROLE,
				'visibility' => BLOCK_VISIBILITY_LISTED,
				'pages' => 'learning/enrollment-search'
		);
		return $blocks;
	} catch(Exception $ex) {
		
	}watchdog_exception('exp_sp_learning_block_info', $ex);
		expertusErrorThrow($ex);
}

/**
 * Implementation of hook_block_view().
 */
function exp_sp_learning_block_view($delta = ''){
	try{
		$block = array();
		switch ($delta) {
			case 'tab_user_customization':
				$css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
				drupal_add_css(drupal_get_path('module', 'exp_sp_learning') .'/exp_sp_learning_v2.css', $css_theme_optional);
				$block['subject'] = '';
				$content = '<div id="user-preference-settings">
					<div class="vtip" title="'.t("LBL563").'"><div class="settingicon" onclick="showUserPreferenceSettings()"><span class="my-account-arrow-new" id="my-account-arrow-new"></span></div>
					</div></div>';
				expDebug::dPrint('addlist conetnt value:' . print_r($content, 1));
				$block['content'] = $content;
				break;
		}		
		return $block;
	} catch(Exception $ex) {
		watchdog_exception('exp_sp_learning_block_info', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * Implementation of hook_block_list_alter()
 */
function  exp_sp_learning_block_list_alter(&$blocks) {
	if (arg(0) == 'learning' && arg(1) == 'enrollment-search') { // invoke the loop only on my learning page
		if(!isset($_SESSION['MyLearn_Pref']) && empty($_SESSION['MyLearn_Pref'])){
			$user_preference = getUserPreference();
			$_SESSION['MyLearn_Pref'] = $user_preference;
		}else{
			$user_preference = $_SESSION['MyLearn_Pref'];
		}
		$widgetList = mergeChildArrays($user_preference);
//		expDebug::dPrint('user prefin the block alter: '. print_r($user_preference, 1));
		foreach ($blocks as $key => $block) {
			$key_widget = array_key_exists($block->delta, $widgetList);
			/*--- Change widget order based on user preference --*/
			if ($key_widget && $block->theme == 'expertusoneV2') {
				$blocks[$key]->weight = $widgetList[$block->delta];
			}
			if ($block->delta == 'tab_search' && $block->theme == 'expertusoneV2') {
				unset($blocks[$key]);
			}
		}
//		expDebug::dPrint('user prefin the block alter: '. print_r($blocks, 1));
		uasort($blocks, "drupal_sort_weight_object");
	}
}

/**
 * Function to retrive user preference from database or default.
 */
function getUserPreference($default = '', $salesForce = false) {
	$sltPersonId 		= getSltpersonUserId();
	$isInstructor		= getPersonDetails($sltPersonId, array('is_instructor'));
	$default_preference = array(
			"mylearning_left" => array(
					"tab_my_enrollment_customized" => 0,
					"tab_my_learningplan_customized" => 1,
			),
			/*"mylearning_right" => array(
					"announcement" => 0,
					"tab_my_calendar" => 1,
					"mytranscript" => 2,
					"online_users" =>3
			)*/
	);
	
	if (isset($isInstructor['is_instructor']) && $isInstructor['is_instructor'] == 'Y') {
		$default_preference["mylearning_left"]["tab_instructor_desk_customized"] = 2;
	}
	if ($default) { // To retrive default list for compare in deleted list
		if (module_exists('salesforce_integration') && $salesForce == true) {  // remove announcement block to salesforce
			unset($default_preference['mylearning_right']['announcement']); 
			unset($default_preference['mylearning_right']['online_users']);
			unset($default_preference['mylearning_left']['tab_instructor_desk_customized']); // issue fix - 52276
		}
		return moduleBlockCheck($default_preference);
	}	
	// Retrive info from table
	$query = db_query("select pref.widget_preference from slt_person_preference pref inner join slt_person per on per.id = pref.user_id
			where pref.user_id=:user_id", array(':user_id' => $sltPersonId));
	$result = $query->fetchField();
	
	//Added for #0064380 if the value get from db is null then default_preference will show.
	$value = (unserialize($result)!= '') ? true : false;
	
	if($value) {
		$db_preference = unserialize($result);
		if (module_exists('exp_sp_instructor_desk') &&  $isInstructor['is_instructor'] == 'Y' && !getWidgetsDeleted('tab_instructor_desk_customized') && !isset($db_preference["mylearning_left"]["tab_instructor_desk_customized"])) { //  && !empty($db_preference["mylearning_left"]["tab_instructor_desk"])
			$db_preference["mylearning_left"]["tab_instructor_desk_customized"] = 2;
		}
		if (module_exists('salesforce_integration') && $salesForce == true) {  // remove announcement block to salesforce
			unset($db_preference['mylearning_right']['announcement']);
			unset($db_preference['mylearning_right']['online_users']);
			unset($db_preference['mylearning_left']['tab_instructor_desk_customized']); // issue fix - 52276
		}
		if ($isInstructor['is_instructor'] != 'Y') { // remove instructor tab, when instructor role removed to the user.
			unset($db_preference['mylearning_left']['tab_instructor_desk_customized']);
		}
		return moduleBlockCheck($db_preference);
	} else {
		if (module_exists('salesforce_integration') && $salesForce == true) { // remove announcement block to salesforce
			unset($default_preference['mylearning_right']['announcement']);
			unset($default_preference['mylearning_right']['online_users']);
			unset($default_preference['mylearning_left']['tab_instructor_desk_customized']); // issue fix - 52276
		}
		return moduleBlockCheck($default_preference);
	}
}

/**
 * Function used to check the module and block exist in the region
 */
function moduleBlockCheck($user_preference = array()) {
	// left side blocks array
		$loggedUserId = getSltpersonUserId();
		$masterEnrollCheck = masterEnrollmentRecordCountCheck();
		$personPrefCheck = personPreferenceCheck();
		$insSessionCheck = instructorSessionRecordCountCheck();
		$select = db_query("select widget_preference from slt_person_preference where user_id = :userid",array(':userid'=>$loggedUserId));
		$res = $select->fetchField();
		$found = 0;
		if (strpos($res, 'tab_my_learningplan_customized') !== false) {
			$found = 1;
		}
		$insfound = 0;
		if (strpos($res, 'tab_instructor_desk_customized') !== false) {
			$insfound = 1;
		}
		if($masterEnrollCheck == 0 && $found == 0) {
			unset($user_preference['mylearning_left']['tab_my_learningplan_customized']);
		}
		if($insSessionCheck == 0 && $insfound == 0 ) {
			unset($user_preference['mylearning_left']['tab_instructor_desk_customized']);
		}
		$_SESSION['MyLearn_Pref'] = $user_preference;
 	if (isset($user_preference['mylearning_left']['tab_my_enrollment']) && !module_exists('exp_sp_lnrenrollment')) 		
 		unset($user_preference['mylearning_left']['tab_my_enrollment']);
	if (isset($user_preference['mylearning_left']['tab_my_enrollment_customized']) && !module_exists('exp_sp_lnrenrollment'))
		unset($user_preference['mylearning_left']['tab_my_enrollment_customized']);
	
 	if (isset($user_preference['mylearning_left']['tab_my_learningplan']) && !module_exists('exp_sp_lnrlearningplan')) 	
 		unset($user_preference['mylearning_left']['tab_my_learningplan']);
	
	if (isset($user_preference['mylearning_left']['tab_my_learningplan_customized']) && !module_exists('exp_sp_lnrlearningplan'))
		unset($user_preference['mylearning_left']['tab_my_learningplan_customized']);
	
	if (isset($user_preference['mylearning_left']['tab_instructor_desk']) && !module_exists(' exp_sp_instructor_desk')) 
		unset($default_preference['mylearning_left']['tab_instructor_desk']);
	
	if (isset($user_preference['mylearning_left']['tab_instructor_desk_customized']) && !module_exists(' exp_sp_instructor_desk'))
		unset($default_preference['mylearning_left']['tab_instructor_desk_customized']);
	
	// right side blocks array
	if (isset($user_preference['mylearning_right']['announcement']) && (!module_exists('exp_sp_administration_announcement')  || !checkBlockRegion('announcement','exp_sp_administration_announcement','sidebar_second'))) 	
		unset($user_preference['mylearning_right']['announcement']);
	if (isset($user_preference['mylearning_right']['tab_my_calendar']) && (!module_exists('exp_sp_lnrcalendar') || !checkBlockRegion('tab_my_calendar','exp_sp_lnrcalendar','sidebar_second'))) 					
		unset($user_preference['mylearning_right']['tab_my_calendar']);
	if (isset($user_preference['mylearning_right']['mytranscript']) && (!module_exists('exp_sp_mytranscript') || !checkBlockRegion('mytranscript','exp_sp_mytranscript','sidebar_second'))) 					
		unset($user_preference['mylearning_right']['mytranscript']);
	if (isset($user_preference['mylearning_right']['online_users']) && (!module_exists('exp_sp_whoisonline') || !checkBlockRegion('online_users','exp_sp_whoisonline','sidebar_second'))) {
// 		expDebug::dPrint('module/block disabled in online users');
		unset($user_preference['mylearning_right']['online_users']);
	}	
						
		
	return $user_preference;
}
/**
 * Function used to check the block exist in the region
 */

function checkBlockRegion($delta = '', $module = '',  $region = '') {
	$query = db_query("select bid from block where delta = :delta and module = :module and theme = :theme and region = :region",
			array(':delta' => $delta, ':module' => $module, ':theme' => 'expertusoneV2', ':region' => $region ));
	//expDebug::dPrintDBAPI('checkBlockActive:', $query, array(':delta' => $delta, ':module' => $module, ':theme' => 'expertusoneV2', ':region' => $region ));
	$result = $query->fetchField();
	if ($result) {
		return 1; 
	} else {
		return 0;
	}
}

/**
 *  Function used to sort objects based on the weight
 */
function drupal_sort_weight_object($a, $b) {
	$a_weight = (is_object($a) && isset($a->weight)) ? $a->weight : 0;
	$b_weight = (is_object($b) && isset($b->weight)) ? $b->weight : 0;
	if ($a_weight == $b_weight) {
		return 0;
	}
	return ($a_weight < $b_weight) ? -1 : 1;
}

function getMyLearnBlockNamebyId($blockId = '') {
	try {
		if (empty($blockId)) {
			return '';
		}
		switch($blockId) {
			case 'tab_my_enrollment':
			case 'tab_my_enrollment_customized':
				$title = t('LBL3090');
				break;	
			case 'tab_my_learningplan':
			case 'tab_my_learningplan_customized':
				$title = t('LBL023');
				break;
			case 'tab_instructor_desk':
			case 'tab_instructor_desk_customized':	
				$title = t('LBL103');
				break;
			case 'tab_my_calendar':
				$title = t('LBL008');
				break;
			case 'announcement':
				$title = t('LBL196');
				break;
			case 'mytranscript':
				$title = t('LBL009');
				break;
			case 'online_users':
				$title = t('LBL197');
				break;
		}
		return $title;
	} catch(Exception $ex ) {
		watchdog_exception('getMyLearnBlockNamebyId', $ex);
		expertusErrorThrow($ex);
	}
	
}
function access_denied() {
	drupal_set_title('Access Denied');
	$cust_err = 'Access Denied: You do not have access to this page.';
	return $cust_err;
}
function checkBlockStatus($delta = '', $module = '') {	
	try {
	$query = db_query("select bid from block where delta = :delta and module = :module and theme = :theme and status = :status",
			array(':delta' => $delta, ':module' => $module, ':theme' => 'expertusoneV2', ':status' => 1 ));
	//expDebug::dPrintDBAPI('checkBlockActive:', $query, array(':delta' => $delta, ':module' => $module, ':theme' => 'expertusoneV2', ':region' => $region ));
	$result = $query->fetchField();
	if ($result) {
		return 1;
	} else {
		return 0;
	}
	}catch(Exception $ex ) {
		watchdog_exception('checkBlockStatus', $ex);
		expertusErrorThrow($ex);
	}
}
function updateFilters() {
	$data = stripslashes($_POST['data']);
	$searchStr = stripslashes($_POST['str']);
	$tab = $_POST['tab'];
	if($tab == 'myenrollment') {
		/*
		 * $enrStr = array("[", "]");
		 * $filterEnr = str_replace($enrStr, "", $data);
		 * expDebug::dPrint("update filter enr str check sdfsdfs".$data,5);
		 * expDebug::dPrint("update filter enr str check".$filterEnr,5);
		 * $json= "[".($filterEnr)."]";
		 */
		
		$_SESSION['enrselectedFilters'] = $data;
		$_SESSION['myenrolmentSearchStr'] = $searchStr;
		drupal_add_js(array('myenrolmentSearchStr' => $_SESSION['myenrolmentSearchStr']), 'setting');
	}
	if($tab == 'myprograms') {
		$_SESSION['prgselectedFilters'] = $data;
		$_SESSION['myprogramsSearchStr'] = $searchStr;
		drupal_add_js(array('myprogramsSearchStr' => $_SESSION['myprogramsSearchStr']), 'setting');
		drupal_add_js(array('prgselectedFilters' => $_SESSION['prgselectedFilters']), 'setting');
	}
	if($tab == 'myclasses') {
		$_SESSION['clsselectedFilters'] = $data;
		$_SESSION['myclassesSearchStr'] = $searchStr;
		drupal_add_js(array('myclassesSearchStr' => $_SESSION['myclassesSearchStr']), 'setting');
		drupal_add_js(array('clsselectedFilters' => $_SESSION['clsselectedFilters']), 'setting');
	}
}
/*function updateSearchStr() {
	$searchStr = stripslashes($_POST['str']);
	$tab = $_POST['tab'];
	if($tab == 'myenrollment') {
		$_SESSION['myenrolmentSearchStr'] = $searchStr;
		drupal_add_js(array('myenrolmentSearchStr' => $_SESSION['myenrolmentSearchStr']), 'setting');
	}
	if($tab == 'myprograms') {
		$_SESSION['myprogramsSearchStr'] = $searchStr;
		drupal_add_js(array('myprogramsSearchStr' => $_SESSION['myprogramsSearchStr']), 'setting');
	}
	if($tab == 'myclasses') {
		$_SESSION['myclassesSearchStr'] = $searchStr;
		drupal_add_js(array('myclassesSearchStr' => $_SESSION['myclassesSearchStr']), 'setting');
	}
}*/
function constructMyenrollmentCustomizedTab($page, $tabName){
	try{
		expDebug::dPrint("Input page name to the function".$page.'-tab name-'.$tabName,4);
		$listMenuFilter = array();
		$enrFilter = [];
		$prgFilter = [];
		$clsFilter = [];		
		$itemObject = new stdClass();
		$itemObject->attrVal = "Enrolled";
		$itemObject->filterVal = 'lrn_crs_cmp_enr|lrn_crs_cmp_inp|lrn_crs_cmp_att';
		$itemObject->type = 'Enrollmentpart';
		$itemObject->name = 'status_filter_myenrollment';
		$json = "[" . drupal_json_encode($itemObject) . "]";
		$itemObjectPrg = new stdClass();
		$itemObjectPrg->attrVal = "Enrolled";
		$itemObjectPrg->filterVal = 'lrn_tpm_ovr_enr|lrn_tpm_ovr_inp';
		$itemObjectPrg->type = 'EnrollmentLP';
		$itemObjectPrg->name = 'status_filter_myprograms';
		$prgJson = "[" . drupal_json_encode($itemObjectPrg) . "]";
		$itemObjectCls = new stdClass();
		$itemObjectCls->attrVal = "Scheduled";
		$itemObjectCls->filterVal = 'scheduled';
		$itemObjectCls->type = 'Scheduled';
		$itemObjectCls->name = 'status_filter_myclasses';
		$clsJson = "[" . drupal_json_encode($itemObjectCls) . "]";
		if($tabName == 'myenrollment') {
			if(! isset($_SESSION['enrselectedFilters'])) {
				expDebug::dPrint("session is not set");
				$_SESSION['enrselectedFilters'] = $json;
			}
		}
		drupal_add_js(array('enrselectedFilters' => $_SESSION['enrselectedFilters']), 'setting');
		drupal_add_js(array('myenrolmentSearchStr' => $_SESSION['myenrolmentSearchStr']), 'setting');
		if($tabName == 'myprograms') {
			if(! isset($_SESSION['prgselectedFilters'])) {
				$_SESSION['prgselectedFilters'] = $prgJson;
			}
	  }
		expDebug::dPrint("MY enrollment session after >>>>>>>>>>" . $_SESSION['prgselectedFilters'], 5);
		drupal_add_js(array('prgselectedFilters' => $_SESSION['prgselectedFilters']), 'setting');
		drupal_add_js(array('myprogramsSearchStr' => $_SESSION['myprogramsSearchStr']), 'setting');
		if($tabName == 'myclasses') {			
			if(! isset($_SESSION['clsselectedFilters'])) {
				expDebug::dPrint("MY enrollment session before dsgdfgdfgdfg");
				$_SESSION['clsselectedFilters'] = $clsJson;
	  }	
	  }
		drupal_add_js(array('clsselectedFilters' => $_SESSION['clsselectedFilters']), 'setting');
		drupal_add_js(array('myclassesSearchStr' => $_SESSION['myclassesSearchStr']), 'setting');
$mylearning_searchStr = retriveCookieValue($tabName);
$searchStrArr = explode('&',$mylearning_searchStr);
$cookievalues = array();
 foreach($searchStrArr as $searchStrValue){
      list($searchStrName, $searchStrValue) = explode('=', $searchStrValue);
        $explodedSearchStrName = explode('|',$searchStrValue);
		$cookievalues[$searchStrName] = $explodedSearchStrName;
    } 

		// Menu List values
		$menuListHtml = '';
		$menuList = getMenuListFilters($page, $tabName);
		expDebug::dPrint("menu count".count($menuList),5);
		$menuListHtml = (count($menuList) > 0)? '<ul>' : '';
		$selectedMenuStr = getStatusFilters($tabName);
		foreach($menuList as $key => $value){
			$args = explode(',',$value->args);
			//$myLearningstr = explode('=',$myLearningSearchStrArr[1]);
			$selectedMenu = explode ("|",$selectedMenuStr);
			if(in_array($args[1],$selectedMenu)) {
				$chkclass = 'checkbox-selected';
				$check = "checked='checked'";
			}else{
				$chkclass = 'checkbox-unselected';
				$check = " ";
			}
			$filterValu = ucfirst($value->name);
			$menuListHtml .= "<li><label class=$chkclass>";
			$menuListHtml .= "<input id='learning_filter_".$tabName."_".$args[1]."' class='lnr_cls_filters' value=\"$args[0]\" $check
								  type='checkbox' data='".($value->name)."' data1='" . $args[1]."' name='status_filter_".$tabName."'  onclick=\"getSelectedValues('$tabName','$args[1]','ck');selectedMenuFilter('$tabName','$args[1]','$args[0]');\">";
			$menuListHtml .= "</label><label class='menu-label' for='learning_filter_".$tabName."_".$args[1]."'>".t($filterValu)."</label></li>";
			//<a class='' onclick=\"$('#learner-enrollment-tab-inner').data('enrollment').callEnrollment($args);\" href='javascript:void(0);'>".strtoupper($value->name)."</a>
		}
		$menuListHtml .= ($menuListHtml != '' && !empty($menuListHtml))? '</ul>' : '';
		$listMenuFilter['menu'] = $menuListHtml;
		
		// Filter List values
		$filterListHtml = '';
		$filterList = getMenuListFilters($page, $tabName,'filter');
		$filterListHtml = "<div class='enroll-filter-list'>";
		$i= 1;
		foreach($filterList as $key => $value){
			$filterVal = '';
			switch($value->ftype){
				
				case 'checkbox':
					if($value->flabel == 'training type') {
							$filterType = 'tra_type';
						}
					if($value->flabel == 'delivery type') {
							$filterType = 'del_type';
						}
					$filterVal .= "<div class='checkbox-set-wrapper $filterType'><div id='" . $filterType . "-" . $tabName . "-labelid' class='filter_labelclass'>" . t(ucfirst($value->flabel)) . '<span class="cls-lblsperator"> : ' . '</span></div>';
					
					$selOptName = explode(',',$value->name);

					$filterVal .= "<div id='".$value->flabel."_".$tabName."checkbox_id' class='".$value->flabel."_checkbox'>";
					expDebug::dPrint("soun filter test selOptName" .print_r($value,1),5);
					//expDebug::dPrint("soun filter test selOptName----->" .print_r($selOptName,1),5);
					$optVal = explode('~',$selOptName[0]);
					$optCode = explode('~',$value->custom4);
					$optionValues = array_combine($optVal, $optCode);
					foreach($optionValues as $key => $val){
						if(in_array($val,($cookievalues["$filterType"]))) {
							$chkclass = 'checkbox-selected';
							$check = "checked='checked'";
						} else {
							$chkclass = 'checkbox-unselected';
							$check = " ";
						}
				        if($key == "learning plan" || $key == "virtual class" ){
				        	$fkey = ucwords($key);
				        }
				        else if($key == "web based"){
				        	$fkey = 'LBL1129';
				        }
				        else{
				        	$fkey = ucfirst($key);
				        }
						$filterVal .= "<label id='checkbox-id-".$tabName."_".$val."' class=$chkclass ><input id='learning_filter_".$tabName."_".$val."' class='lnr_cls_filters_".$filterType."' value='".$val."'
											type='checkbox'  name=" . $tabName . "-" . $filterType . " data='" . $key . "' data1='" . $val . "' data-filter='" . $key . "' $check onclick=\"getSelectedValues('$tabName','$val','ck');selectedMenuFilter('$tabName','$val','$val');\"></label>
								<label class=\"cls-learnerfilter-lbl ".$key."\" for='learning_filter_".$tabName."_".$val."' >
								" . t($fkey) . "</label>";
					}
					$filterVal .= '</div></div>';
				break;
					
				case 'dropdown':
					if($value->flabel == 'date registered') {
							$label = 'reg';
						}
						if($value->flabel == 'due date') {
							$label = 'due';
						}
						if($value->flabel == 'assigned by') {
							$label = 'assignedby';
						}
						if($value->flabel == 'price') {
							$label = 'price';
							$value->flabel = 'LBL040';
						}
						if($value->flabel == 'scheduled') {
							$label = 'scheduled';
						}
					
					$filterVal .= "<div class='".$label." dropdown-set-wrapper'>";
					$filterVal .= "<div id='" . $label . "-labelid' class='filter_labelclass'>" . t(ucfirst($value->flabel)) . '<span class="cls-lblsperator"> : ' . '</span></div>';
					
					$selOptName = explode('~',$value->name);
					$selOptval = explode('~',$value->custom4);
					$selOptvalues = array_combine($selOptName, $selOptval);
					expDebug::dPrint("Testing the dropdown" . print_r($cookievalues["$label"], 1), 4);
					$filterVal .= "<div class='" . $label . " expertus-dropdown-bg'><div class='expertus-dropdown-icon'><div class='form-item form-type-select'>
							<select autocomplete='off' class='select-greyed-out-text'
												tabindex=" . $i . " id='" . $tabName . "-" . $label . "' name='" . $label . "' onchange=\"getSelectedValues('$tabName','$label','dp');\">
												<option value='0' >" . t("LBL428") . "</option>";
												
					foreach($selOptvalues as $key=>$val){
						if(in_array($val,($cookievalues["$label"]))) {
							$check = "selected='selected'";
						} else {
							expDebug::dPrint("inside not found");
							$check = " ";
						}
						if($key == 'system'){
							$key = 'LBL432';
						}
					    $filterVal .= "<option value='" . $val . "' data='" . ucfirst($key) . "' title='" . ucfirst($key) . "' $check>" . t(ucfirst($key)) . "</option>";
					}
					$filterVal .= '</select></div></div></div>';
					$filterVal .= "</div>";

				break;
				
				case 'textfilter':
					$filterVal .= "<div class='textfilter-set-wrapper'>";
					$filterVal .= "<div id='" . $tabName . "-" . $value->flabel . "-labelid' class='filter_labelclass'>" . t(ucfirst($value->flabel)) . '<span class="cls-lblsperator"> : ' . '</span></div>';
					
					if(!empty($cookievalues['location'][0]) || $cookievalues['location'][0]!= '') {
					$args = $cookievalues['location'][0];
					} else {
						$args = t('LBL1321');
					}
				 //	$args = 't("'.implode('")." ".t("',$args[1]).'")';
					$attrOnfocus = '(function ($) {' . '$("#' . $tabName . '-location").autocomplete("/?q=learning/enroll/location/autocomplete", ' . '{' . "minChars: 3, " . "autoFill: true, " . "mustMatch: false, " . "matchContains: false, " . 'inputClass: "ac_input", ' . 'loadingClass: "ac_loading", ' . 'parse:function(data)' . '{' . 'if(!data)' . '{' . '$("#' . $tabName . '-selectedLocid").val("0");' . '}' . '},' . 'formatItem:function(pmRec)' . '{' . 'var fnameDet = "";' . 'locStr = pmRec.toString().split("|");' . 'fnameDet += locStr[1];' . 'return fnameDet;' . '},' . 'formatResult: function(row)' . '{' . 'locStr = row.toString().split("|");' . 'return locStr[1];' . '},' . '})' . '.result(function(event, data, formatted)' . '{' . 'locStr = data.toString().split("|");' . 'if(locStr)' . '{' . '$("#' . $tabName . '-selectedLocid").val(locStr[0]);' . '}' . '});' . '})(jQuery);';
				 	//$attrOnblur = 'textFilterOnBlur(this,"'.$args.'");';				 	
					$attrOnblur = 'if(this.value=="") {this.value="' . t("LBL1321") . '";this.style.color="#999999";this.style.fontSize="12px";} if(this.value !="' . t("LBL1321") . '") {this.style.color="#333333";this.style.fontSize="12px";};getSelectedValues("' . $tabName . '","location","other")';
					$attrOnfocus .= 'if(this.value=="' . t("LBL1321") . '" ){this.value=""; this.style.color="#474747";this.style.fontSize="12px";}';
					// $attrOnfocus .="if(this.value == "'.t("LBL1321").'" ) this.value=\"\"; this.style.color='#474747';this.style.fontSize='12px";';
				 	$filterVal .= "<div  class='OverAllSearchList'>";
				 	$filterVal .= "<ul class='eol-search'>
				 	<li class='eol-search-go'></li>
				 	<li class='eol-search-input'><span><input value='" . $args . "' name='searchword' onblur='$attrOnblur' onfocus='$attrOnfocus'
				 	class='ac_input searchtext' size='25' id='".$tabName."-".$value->name."' data='".$value->flabel."'
				 	autocomplete='off' ondrop='return false' type='text'></span></li></ul></div>
				 	<input type='hidden' name='" . $tabName . '-selectedLocid' . "' id='" . $tabName . '-selectedLocid' . "' class='selectedLocid' value=''>";
				 	$filterVal .= "</div>";
				 	break;
				 	}
			$filterListHtml .= $filterVal;
			$i++;
		}
		$filterListHtml .= '</div>'; 
		$listMenuFilter['filter'] = $filterListHtml;
		// Text Search filter values
		$textSearchListHtml = '';
		$textsearchfilter = getMenuListFilters($page, $tabName,'textsearch');
		$textSearchListHtml = "<div class='text-based-search'>";
		$i= 1;
		foreach($textsearchfilter as $key => $value){
				$acMenuPath = $value->acurl;
				$textSearchListHtml .= "<div id='".$tabName."-".$value->flabel."-labelid' class='".$value->flabel."-labelclass'>";
				$textSearchListHtml .= "</div>";
				expDebug::dPrint("text box arg check".print_r($value,1),5);
				//$args = explode(',',$value->args);
				//	$args = 't("'.implode('")." ".t("',$args).'")';
				if(!empty($cookievalues['searchText'][0]) || $cookievalues['searchText'][0]!= '') {
					$args = $cookievalues['searchText'][0];
			} else {
				$args = t('Type to search');
					}
				expDebug::dPrint('$acMenuPath$acMenuPath'.print_r($args,true),5);	
			$attrOnfocus = '(function ($) {' . '$("#' . $tabName . '-textsearch").autocomplete("/?q=' . $value->acurl . '", ' . '{' . "minChars: 3, " . "max: 50, " . "autoFill: true, " . "mustMatch: false, " . "matchContains: false, " . 'inputClass: "ac_input", ' . 'loadingClass: "ac_loading", ' . '}' . ');' . '}' . ')(jQuery);';
				//$attrOnblur = 'textFilterOnBlur(this,"'.$args.'");';
			$attrOnblur = 'if(this.value == "") { this.value="' . t("Type to search") . '";this.style.color="#999999";this.style.fontSize="12px";} if(this.value !="' . t("Type to search") . '") { this.style.color="#333333";this.style.fontSize="12px";};getSelectedValues("' . $tabName . '","textparam","textparamsearch")';
			$attrOnfocus .= 'if(this.value=="' . t("Type to search") . '" ) { this.value=""; this.style.color="#474747"; this.style.fontSize="12px";}';
				$textSearchListHtml .= "<div id='".$tabName."-".$value->name."-OverAllSearchList' class='OverAllSearchList'>";
				$textSearchListHtml .= "<ul class='eol-search' id='".$value->name."-filterSearch'>
												<li class='eol-search-go'><a id='".$tabName."-".$value->name."-searchTxtFrm' class='text-searchbox-filter' href='javascript:void(0);' 
												onclick= \"statusFilterSubmit('".$tabName."');\">&nbsp;</a></li>
															<li class='eol-textsearch-input'><span><input value='$args' tabindex='$i' name='searchword' data='textsearch' onblur='$attrOnblur' onfocus='$attrOnfocus'
															class='ac_input searchtext' size='25' maxlength='70' id='".$tabName."-textsearch'
															alt='search...' autocomplete='off' ondrop='return false;' type='text' onkeypress = \"searchKeyPress(event,'".$tabName."');\"></span></li></ul></div>";

			$textSearchListHtml .= '</div>';
			}
		/*$textSearchListHtml .= '<input type="hidden" id="enrFilters1" name="enrFilters1" value="">';*/
		$textSearchListHtml .= '<input type="hidden" id="surveylink_data" name="surveylink_data" value="' . $_SESSION['survey_data'] . '">';
		unset($_SESSION['survey_data']);
		$listMenuFilter['textsearch'] = $textSearchListHtml;
		return $listMenuFilter;
		}
		
	catch(Exception $e){
		watchdog_exception('constructMyenrollmentCustomizedTab', $ex);
		expertusErrorThrow($ex);
	}
}

function getMenuListFilters($page, $tabName, $type = 'menu', $subType = ''){
	try{
		$selectStmt = db_select('slt_learning_filter', 'slf');
		$selectStmt->condition('slf.page', $page,'=');
		$selectStmt->condition('slf.block_type', $tabName,'=');
		$selectStmt->condition('slf.type', $type,'=');
		$selectStmt->condition('slf.status', 1,'=');
		
		$selectStmt->addField('slf', 'sequence');
		$selectStmt->addField('slf', 'type');
		$selectStmt->addField('slf', 'callback_arguments','args');
		$selectStmt->orderBy('slf.sequence');
		if($type != 'menu'){
			$selectStmt->addExpression('GROUP_CONCAT(CONCAT(slf.name) SEPARATOR "~")','name');
			$selectStmt->addField('slf', 'sub_type', 'flabel');
			$selectStmt->addField('slf', 'field_type', 'ftype');
			$selectStmt->addField('slf', 'fsequence');
			$selectStmt->addField('slf', 'is_autocomplete','ac');
			$selectStmt->addField('slf', 'autocomplete_url','acurl');
			$selectStmt->addExpression('GROUP_CONCAT(CONCAT(slf.custom4) SEPARATOR "~")','custom4');
			$selectStmt->groupBy('slf.sub_type');
			$selectStmt->orderBy('slf.fsequence');
			if(!empty($subType))
				$selectStmt->condition('slf.sub_type', $subType,'=');
		}else{
			$selectStmt->addField('slf', 'name');
		}
		
		expDebug::dPrintDBAPI('$selectStmt -----> ', $selectStmt);
		$result = $selectStmt->execute()->fetchAll();
		expDebug::dPrint("Menu and Filter List".print_r($result,1),4);
		return $result;
	}catch(Exception $ex){
		watchdog_exception('getMenuListFilters', $ex);
		expertusErrorThrow($ex);
	}
	
}


/*
 * getLearningClassLocation() - Fetch location list.
 */
function getEnrollClassLocation(){
	try {
	 $loggedInUserId = getSltpersonUserId();
	 $searchCurText =  $_GET['z'];
      $select = db_select('slt_location', 'location');
      $select->leftjoin('slt_state','state','state.state_code=location.state and state.country_code=location.country');
      $select->leftJoin('slt_country','country','location.country=country.country_code');
      $select->addField('location','name');
      $select->addField('location','id');
      $select->addField('location','city');/*Viswanathan added for #0074313*/
      $select->addField('location','addr1');
      $select->addField('location','addr2');
      $select->addField('country','country_name');
	  $select->addField('state','state_name');
	  $select->addField('location','zipcode');
      $select->condition(db_or()
      ->condition('location.name', '%' . db_like($searchCurText) . '%', 'LIKE')
	      ->condition('location.city', '%' . db_like($searchCurText) . '%', 'LIKE')
	      ->condition('location.addr1', '%' . db_like($searchCurText) . '%', 'LIKE')
	      ->condition('location.addr2', '%' . db_like($searchCurText) . '%', 'LIKE')
	      ->condition('location.zipcode', '%' . db_like($searchCurText) . '%', 'LIKE')
      	  ->condition('state.state_name', '%' . db_like($searchCurText) . '%', 'LIKE')
          ->condition('country.country_name', '%' . db_like($searchCurText) . '%', 'LIKE')
     );
		expDebug::dPrintDBAPI("Class Autocomplete --->> " , $select);
		$result = $select->execute()->fetchAll();
		foreach ($result as $loc) {
			$result = $loc->name;
			if(!empty($loc->addr1))
				$result .= ', '.$loc->addr1;
			if(!empty($loc->addr2))	
				$result .= ', '.$loc->addr2;
			if(!empty($loc->city))/*Viswanathan added for #0074313*/
				$result .= ', '.$loc->city;
			if(!empty($loc->country_name))	
				$result .= ', '.$loc->country_name;
			if(!empty($loc->state_name))	
				$result .= ', '.$loc->state_name;
			if(!empty($loc->zipcode))	
				$result .= ', '.$loc->zipcode;
			$result = $result."\n";
			print $loc->id."|". $result."\n";
		} 
	} catch (Exception $ex) {
		watchdog_exception('getEnrollClassLocation', $ex);
		expertusErrorThrow($ex);
	}
}

// Auto-complete for text search 

function getAutoCompleteForText(){
	try {
		expDebug::dPrint("HHIII");
		
		$srcSource = getConfigValue('solr_search');
		$solrResult = FALSE;
		
		if($srcSource == 1){
			require_once $_SERVER['DOCUMENT_ROOT'].'/sites/all/modules/core/exp_sp_solr/exp_sp_solr_mylearning_enrollment.php';
		try{
			expDebug::dPrint("Solr Search Testing",1);
			$solrObj = new MyLearningEnrollmentSolrSearch();
			$getlpQryRes = $solrObj->EnrollmentSolrSearchAutoComplete();
			expDebug::dPrint('Result set from solr12333'.print_r($getlpQryRes,true),5);
			$names = $getlpQryRes['result'];
			expDebug::dPrint('Result set from solr'.print_r($names,true),5);
			$solrResult = TRUE;
    }catch(Exception $e){
			expDebug::dPrint("Error in Solr Search -- ".print_r($e->getMessage(),true),1);
		}
		expDebug::dPrint("Solr search result - Final ".print_r($qry_search_results,1),4);
	
		}
		
		else {
		
		$searchText =  $_GET['z'];
		$loggedUserId = getSltpersonUserId();
			
		$select = db_select('slt_enrollment', 'enr');
		$select->innerJoin('slt_course_template','crs','crs.id=enr.course_id');
		$select->innerJoin('slt_course_class','cls','cls.id=enr.class_id');
		
		$select->leftJoin('slt_tag_entity','tagentity','tagentity.entity_id=enr.class_id AND tagentity.entity_type =\'Class\'');
		$select->leftJoin('slt_tag_entity','tagentity2','tagentity2.entity_id=enr.course_id AND tagentity2.entity_type =\'Course\'');
		$select->leftJoin('slt_tagdefn', 'tagdef', 'tagentity.tagid=tagdef.id and tagdef.activity_count > 0');
		$select->leftJoin('slt_tagdefn', 'tagdef2', 'tagentity2.tagid=tagdef2.id and tagdef2.activity_count > 0');
		$select->distinct();
		$select->addField('cls', 'id','clsid');
		$select->addField('crs','title','coursetitle');
		$select->addField('crs','code','coursecode');
		$select->addField('cls','title','classtitle');
		$select->addField('cls', 'code','classcode');
		$select->condition(db_or()
				->condition('crs.title', '%' . db_like($searchText) . '%', 'LIKE')
				->condition('crs.code', '%' . db_like($searchText) . '%', 'LIKE')
				->condition('crs.description', '%' . db_like($searchText) . '%', 'LIKE')
				->condition('cls.title', '%' . db_like($searchText) . '%', 'LIKE')
				->condition('cls.code', '%' . db_like($searchText) . '%', 'LIKE')
				->condition('cls.description', '%' . db_like($searchText) . '%', 'LIKE')
				->condition('tagdef.tagname', '%' . db_like($searchText) . '%', 'LIKE')
				->condition('tagdef2.tagname', '%' . db_like($searchText) . '%', 'LIKE')
		);
		$select->condition('enr.user_id',$loggedUserId,'=');
		$select->condition('enr.master_enrollment_id','','IS NULL');
	//	$select->groupBy ( 'cls.id');
		//filterByUserAccessPrivileges($select,'','',1,'','Search');
		expDebug::dPrintDBAPI(' $select query getAutoCompleteForText = ' , $select);
		$names = $select->execute()->fetchAll();
		expDebug::dPrint(' Names = '. print_r($names, true) , 3);
		}
	  
	    foreach($names as $result){
	    	print $result->classtitle ."\n";
	    }

		//return $names;

	} catch (Exception $ex) {
		watchdog_exception('getAutoCompleteForText', $ex);
		expertusErrorThrow($ex);
	}
	
}

function retriveCookieValue($tabName = '') {
switch ($tabName) {
	case 'myenrollment':
			return $_SESSION['myenrolmentSearchStr'];
		break;
		
	case 'myprograms':
			return $_SESSION['myprogramsSearchStr'];
		break;
	case 'myclasses':
			return $_SESSION['myclassesSearchStr'];
		break;
		
	default:
}
}
function getStatusFilters($tabName = '') {
	$sessionFilters = retriveMenuValue($tabName);
	$stsFilter = '';
	foreach($sessionFilters as $filters) {
		if($filters->name == 'status_filter_' . $tabName) {
			$stsFilter .= $filters->type . "|";
		}
	}
	$stsFilter = substr($stsFilter, 0, strlen($stsFilter) - 1);
	return $stsFilter;
}
function retriveMenuValue($tabName = '') {
switch ($tabName) {
	case 'myenrollment':
			$selectedMenuStr = json_decode($_SESSION['enrselectedFilters']);
			return $selectedMenuStr;
		break;
		
	case 'myprograms':
			$selectedMenuStr = json_decode($_SESSION['prgselectedFilters']);
			return $selectedMenuStr;
		break;
		
	case 'myclasses':
			$selectedMenuStr = json_decode($_SESSION['clsselectedFilters']);
			return $selectedMenuStr;
			break;
	default:
}
}
function surveySharelinkInit(){
   	include_once($_SERVER["DOCUMENT_ROOT"]. '/sites/all/modules/core/exp_sp_survey/exp_sp_survey_learner/exp_sp_surveylearner.inc');
   	global $user;
	
	$decrypted1 = new Encrypt();
	$decrypted2 = new Encrypt();
	$decrypted3 = new Encrypt();
	
	$current_url = request_uri(); 
	$url_params = strstr($current_url, 'share');
	$alter_url = explode('/', strstr($current_url, 'surveylink'));
	$surlink_names = array("SurUrlName","SurLinkType","SurObjectId","SurObjectType","SurSurveyId");
	$survey_attr = array_combine($surlink_names, $alter_url);	
		
	$surObjectId = ($survey_attr['SurObjectId'] != '') ? $decrypted1->decrypt($survey_attr['SurObjectId']) : $survey_attr['SurObjectId'];
	$surSurveyId = ($survey_attr['SurSurveyId'] != '') ? $decrypted2->decrypt($survey_attr['SurSurveyId']) : $survey_attr['SurSurveyId'];
	$surObjectType = ($survey_attr['SurObjectType'] != '') ? $decrypted3->decrypt($survey_attr['SurObjectType']) : $survey_attr['SurObjectType'];
		
	if(isset($surObjectType)) {
		switch($surObjectType) {
			case 'Class':
				$surObjectType = 'cre_sys_obt_cls';
				break;
			case 'Curricula':
				$surObjectType = 'cre_sys_obt_cur';
				break;
			case 'Certification':
				$surObjectType = 'cre_sys_obt_crt';
				break;
			case 'Trainingplan':
			case 'LearningPlan':	
				$surObjectType = 'cre_sys_obt_trn';
				break;
		}
	}	
	
	if((arg(1) == 'surveylink') && ($user->uid == 0)) {
		$query = array('destination' => $url_params);
		setcookie("SurUrlName", $survey_attr['SurUrlName'], time()+120, '/');
		setcookie("SurInvalidUser", 1, time()+120, '/');
		setcookie("Surpath", $url_params, time()+120, '/');
		drupal_goto($GLOBALS['base_url'],array('query' => $query));
	} else {
		$userId = getSltpersonUserId();
		
		//Check MyEnrollment/Myprograms Tab Enabled
		$widget = ($surObjectType == 'cre_sys_obt_cls') ? 'tab_my_enrollment_customized' : 'tab_my_learningplan_customized';
		$selectWidget = db_select('slt_person_preference','wid');
		$selectWidget->addExpression('count(wid.id)','widgetcount');
		$selectWidget->condition('wid.user_id',$userId,'=');
		$selectWidget->condition('wid.widget_deleted','%'.db_like($widget).'%','LIKE');
		$resultWidget = $selectWidget->execute()->fetchAssoc();
		$widgetcount = $resultWidget['widgetcount'];
		
		if($widgetcount == 0) {
		
		//Check the Class/Trainingplan has Surveys
		$selectSurvey = db_select('slt_survey_mapping','smap');
		$selectSurvey->addField('sur','type','surveytype');
		$selectSurvey->addExpression('count(smap.survey_id)','surveymapcount');
		$selectSurvey->innerJoin('slt_survey','sur','sur.id = smap.survey_id');
		$selectSurvey->condition('smap.object_id',$surObjectId,'=');
		$selectSurvey->condition('smap.object_type',$surObjectType,'=');
		$selectSurvey->groupBy('sur.type');
		$resultSurvey = $selectSurvey->execute()->fetchAllKeyed();
		$surveymapcount = $resultSurvey['sry_det_typ_sry'];
		$attrMapCount = $resultSurvey['sry_det_typ_ass'];
		
		if($surveymapcount > 0) {
			
		//Get the Class Title and Course Id
		if($surObjectType=='cre_sys_obt_cls') {
			$table_name = 'slt_course_class';
			$status = array('lrn_cls_sts_atv','lrn_cls_sts_itv','lrn_cls_sts_dld');
		} else {
			$table_name = 'slt_program';
			$status = array('lrn_lpn_sts_atv');
		}
		
		// collect course/program information from received values
		$select_title = db_select($table_name,'obj');
		$select_title->addField('obj','title','objecttitle');
		if($surObjectType=='cre_sys_obt_cls')
			$select_title->addField('obj','course_id','courseid');
		$select_title->condition('obj.id',$surObjectId,'=');
		$select_title->condition('obj.status',$status,'IN');
		$result_title = $select_title->execute()->fetchAssoc();
			
			$surveyObjectName = rawurlencode($result_title['objecttitle']);
			$surveyCourseId = $result_title['courseid'];
		
		//Check Logged User has any Enrollemnts
		if($surObjectType=='cre_sys_obt_cls') {
			$table_name2 = 'slt_enrollment';
			$field_name2 = 'comp_status';
			$status2 =  array('lrn_crs_cmp_cmp','lrn_crs_cmp_enr','lrn_crs_cmp_inp');
		} else {
			$table_name2 = 'slt_master_enrollment';
			$field_name2 = 'overall_status';
			$status2 = array('lrn_tpm_ovr_cmp','lrn_tpm_ovr_enr','lrn_tpm_ovr_inp');
		}
		$selectEnroll = db_select($table_name2,'enr');
		$selectEnroll->addExpression('count(enr.id)','enrollcount');
		if($surObjectType=='cre_sys_obt_cls') {
			$selectEnroll->condition('enr.class_id',$surObjectId,'=');
			$selectEnroll->condition('enr.course_id',$surveyCourseId,'=');
		}
		else
			$selectEnroll->condition('enr.program_id',$surObjectId,'=');
		$selectEnroll->condition('enr.user_id',$userId,'=');
		$selectEnroll->condition('enr.'.$field_name2,$status2,'IN');
		$resultEnroll = $selectEnroll->execute()->fetchAssoc();
		
		$user_enrollcount = $resultEnroll['enrollcount'];
		
		if($user_enrollcount > 0){
		
		// survey deeplink with class mode
		if($surObjectType=='cre_sys_obt_cls') {
			
			//Check the Class has Recurring Registration Option
			$recurring_count = surveyBusinessRuleMapping($surObjectId, $surObjectType, 'cre_sys_brl_rra');
			//Check the Class has Dedicated TP Option
			$dedicatetp_count = surveyBusinessRuleMapping($surObjectId, $surObjectType, 'cre_sys_brl_dtc');
		
			//Check the Class is associated with Multiple TP's
			$select_assoc = db_select('slt_course_class','clss');
			$select_assoc->addExpression('count(clss.id)','acount');
			$select_assoc->innerJoin('slt_module_crs_mapping','crsmap','crsmap.course_id = clss.course_id');
			$select_assoc->condition('clss.id',$surObjectId,'=');
			$select_assoc->condition('clss.course_id',$result_title['courseid'],'=');
			$select_assoc->condition('clss.status',array('lrn_cls_sts_atv','lrn_cls_sts_dld'),'IN');
			$result_assoc = $select_assoc->execute()->fetchAssoc();
			
			if($result_assoc['acount']>0) {
				//Check User Enrollment
				$select_user = db_select('slt_enrollment','e');
				$select_user->addExpression('count(e.id)','ucount');
				$select_user->condition('e.user_id',$userId,'=');
				$select_user->condition('e.course_id',$result_title['courseid'],'=');	
				$select_user->condition('e.comp_status',array('lrn_crs_cmp_cmp','lrn_crs_cmp_enr','lrn_crs_cmp_inp'),'IN');
				$select_user->isNotNull('e.master_enrollment_id');
				$result_user = $select_user->execute()->fetchAssoc();
			}
		}
		
		// confirm this survey still attached to a class or program
		if($survey_attr['SurLinkType']=="single") { 
			$selectStmt = db_select('slt_survey_mapping','map');
			$selectStmt->addField('map','survey_id','surveyid');
			$selectStmt->addField('map','module_id','moduleid');
			$selectStmt->condition('map.object_id',$surObjectId,'=');
			$selectStmt->condition('map.object_type',$surObjectType,'=');
			$selectStmt->condition('map.id',$surSurveyId,'=');
			$result = $selectStmt->execute()->fetchAssoc();
		}
		
		
		//Check the Re-certification
		if($surObjectType=='cre_sys_obt_crt') {
			$selectModule = db_select('slt_module','mo');
			$selectModule->addExpression('count(mo.id)','mcount');
			$selectModule->condition('mo.program_id',$surObjectId,'=');
			$selectModule->condition('mo.status','spp_tpm_mdl_atv','=');
			$resultModule = $selectModule->execute()->fetchAssoc();
			$mcount = $resultModule['mcount'];
		}
		
		if($surObjectType=='cre_sys_obt_cls') {
			//Get Content Mapping count for make Default Content to Conetent Player
			$sel_cont = db_select('slt_course_content_mapper','cnt');
			$sel_cont->addExpression('count(cnt.id)','contentcount');
			$sel_cont->condition('cnt.class_id',$surObjectId,'=');
			$sel_cont->condition('cnt.course_id',$result_title['courseid'],'=');
			$result_cont = $sel_cont->execute()->fetchAssoc();
			
			$attrMapCount = $result_cont['contentcount'] + $resultSurvey['sry_det_typ_ass'];
			if($result_assoc['acount'] > 1 && $result_user['ucount'] >= 1) {
				// user has both program and class
				$surmultipleTP = $result_assoc['acount']; 
				
					$select_assenroll = db_select('slt_enrollment','enr');
					$select_assenroll->addField('enr','id','enrollid');
					$select_assenroll->addField('enr','comp_status','enrollstatus');
					$select_assenroll->addField('enr','reg_date','enrolldate');
					$select_assenroll->addField('clss','title','objecttitle');
					$select_assenroll->addField('clss','entity_type','objecttype');
					$select_assenroll->addExpression('""','programid');
					$select_assenroll->addExpression('""','masterenrollid');
					$select_assenroll->addExpression('""','sequence');
					$select_assenroll->addExpression('""','enforcesequence');
					$select_assenroll->innerJoin('slt_course_class','clss','clss.id = enr.class_id and clss.course_id = enr.course_id');
					$select_assenroll->isNull('enr.master_enrollment_id');
					$select_assenroll->condition('enr.class_id',$surObjectId,'=');
					$select_assenroll->condition('enr.user_id',$userId,'=');
					$select_assenroll->condition('enr.comp_status', array('lrn_crs_cmp_cmp','lrn_crs_cmp_enr','lrn_crs_cmp_inp'),'IN');
										
					$select_assenroll2 = db_select('slt_enrollment','enr2');
					$select_assenroll2->addField('enr2','id','enrollid');
					$select_assenroll2->addField('enr2','comp_status','enrollstatus');
					$select_assenroll2->addField('enr2','reg_date','enrolldate');
					$select_assenroll2->addField('prg','title','objecttitle');
					$select_assenroll2->addField('prg','object_type','objecttype');
					$select_assenroll2->addField('prg','id','programid');
					$select_assenroll2->addField('enr2','master_enrollment_id','masterenrollid');
					$select_assenroll2->addField('mapp','sequence','sequence');
					$select_assenroll2->addField('prg','enforce_sequence','enforcesequence');
					$select_assenroll2->innerJoin('slt_course_class','clss2','clss2.id = enr2.class_id and clss2.course_id = enr2.course_id');
					$select_assenroll2->innerJoin('slt_master_enrollment','mass','mass.id = enr2.master_enrollment_id and mass.overall_status in ("lrn_tpm_ovr_cmp","lrn_tpm_ovr_enr")');
					$select_assenroll2->innerJoin('slt_program','prg','prg.id = mass.program_id');
					$select_assenroll2->innerJoin('slt_module_crs_mapping','mapp','mapp.program_id = prg.id and mapp.course_id = clss2.course_id');
					$select_assenroll2->isNotNull('enr2.master_enrollment_id');
					$select_assenroll2->condition('enr2.class_id',$surObjectId,'=');
					$select_assenroll2->condition('enr2.user_id',$userId,'=');
					$select_assenroll2->condition('enr2.comp_status', array('lrn_crs_cmp_cmp','lrn_crs_cmp_enr','lrn_crs_cmp_inp'),'IN');
					$select_assenroll2->orderBy('enrollid','desc');
				$select_assenroll->union($select_assenroll2);
				$enroll_res = $select_assenroll->execute();
			} else if($dedicatetp_count > 0) {
				//Get the Dedicated TP Class Enrollemnts only
				$selectDedicateTP = db_select('slt_enrollment','enr');
				$selectDedicateTP->addField('enr','id','enrollid');
				$selectDedicateTP->addField('enr','reg_date','enrolldate');
				$selectDedicateTP->addField('enr','reg_status','enrollregstatus');
				$selectDedicateTP->addField('enr','comp_status','enrollstatus');
				$selectDedicateTP->addField('mas','id','masenrollid');
				$selectDedicateTP->addField('mas','program_id','programid');
				$selectDedicateTP->addField('mas','overall_status','overallstatus');
				$selectDedicateTP->innerJoin('slt_master_enrollment','mas','mas.id = enr.master_enrollment_id');
				$selectDedicateTP->condition('enr.class_id',$surObjectId,'=');
				$selectDedicateTP->condition('enr.course_id',$result_title['courseid'],'=');
				$selectDedicateTP->condition('enr.user_id',$userId,'=');
				$selectDedicateTP->condition('mas.overall_status', array('lrn_tpm_ovr_cmp','lrn_tpm_ovr_enr'),'IN');
				$selectDedicateTP->orderBy('enr.id','desc');
				$enroll_res = $selectDedicateTP->execute();
			} else {
				//Get the Class Enrollemnts only
				$select_enroll = db_select('slt_enrollment','enr');
				$select_enroll->addField('enr','id','enrollid');
				$select_enroll->addField('enr','reg_date','enrolldate');
				$select_enroll->addField('enr','reg_status','enrollregstatus');
				$select_enroll->addField('enr','comp_status','enrollstatus');
				$select_enroll->addField('enr','master_enrollment_id','masenrollid');
				$select_enroll->condition('enr.class_id',$surObjectId,'=');
				$select_enroll->condition('enr.course_id',$result_title['courseid'],'=');
				$select_enroll->condition('enr.user_id',$userId,'=');
				if($result_assoc['acount']<1)
				$select_enroll->isNull('enr.master_enrollment_id');
				$select_enroll->orderBy('enr.id','desc');
				$enroll_res = $select_enroll->execute();
			}
		} else if ($mcount > 1 && $survey_attr['SurLinkType']=="single") {
			$select_master = db_select('slt_master_enrollment','mas');
			$select_master->addField('mas','id','enrollid');
			$select_master->addField('mas','overall_status','enrollstatus');
			$select_master->leftJoin('slt_module','slm','slm.program_id = mas.program_id and slm.sequence = mas.recertify_path');
			$select_master->condition('mas.program_id',$surObjectId,'=');
			$select_master->condition('mas.user_id',$userId,'=');
			$select_master->condition('slm.id',$result['moduleid'],'=');
			$select_master->condition('slm.status','spp_tpm_mdl_atv','=');
			$select_master->orderBy('mas.id','desc');
			$enroll_res = $select_master->execute();
			$recertify = 1;
		} else if($mcount > 1 && $survey_attr['SurLinkType']=="multiple"){
			//get Re-certify Enrollment Details
			$select_master = db_select('slt_master_enrollment','mas');
			$select_master->addField('mas','id','enrollid');
			$select_master->addField('spp','survey_id','surveyid');
			$select_master->addField('mas','reg_date','enrolldate');
			$select_master->addField('mas','overall_status','enrollstatus');
			$select_master->leftJoin('slt_module','slm','slm.program_id = mas.program_id and slm.sequence = mas.recertify_path');
			$select_master->innerJoin('slt_survey_mapping','spp','spp.object_id = mas.program_id and spp.module_id = slm.id');
			$select_master->condition('mas.program_id',$surObjectId,'=');
			$select_master->condition('mas.user_id',$userId,'=');
			$select_master->condition('slm.status','spp_tpm_mdl_atv','=');
			$select_master->groupBy('mas.id');
			$select_master->orderBy('mas.id','desc');
			$select_master->orderBy('spp.survey_id');
			$enroll_res = $select_master->execute();
			$recertify = 1;
		} else {
			$select_mas = db_select('slt_master_enrollment','mas');
			$select_mas->addField('mas','id','enrollid');
			$select_mas->addField('mas','overall_status','enrollstatus');
			$select_mas->condition('mas.program_id',$surObjectId,'=');
			$select_mas->condition('mas.user_id',$userId,'=');
			$select_mas->condition('mas.overall_status','lrn_tpm_ovr_cln','!=');
			$select_mas->groupBy('mas.id');
			$select_mas->orderBy('mas.id','desc');
			$enroll_res = $select_mas->execute();
		}
		if(($recurring_count > 0) || ($result_assoc['acount'] > 1 && $result_user['ucount'] >= 1) || ($mcount > 1 && $survey_attr['SurLinkType']=="multiple")) {
			$enroll_count = $enroll_res->rowCount();
			$result_enroll = $enroll_res->fetchAll();
		} else {
			$result_enroll = $enroll_res->fetchAssoc();
		}

		$enrollid = ($result_enroll['enrollid'] !='') ? $result_enroll['enrollid'] : '';
		$enrollstatus = ($result_enroll['enrollregstatus']=='lrn_crs_reg_can') ? $result_enroll['enrollregstatus'] : $result_enroll['enrollstatus'];
		$masenrollid = ($result_enroll['masenrollid'] !='') ? $result_enroll['masenrollid'] : '';
		$programid = ($result_enroll['programid'] !='') ? $result_enroll['programid'] : '';
		$overallstatus = ($result_enroll['overallstatus'] !='') ? $result_enroll['overallstatus'] : '';
			
		if($recurring_count > 0 && ($result_assoc['acount'] != '' && $result_assoc['acount'] <= 1)) {
			foreach($result_enroll as $enr_val) {
				if ($enroll_count > 1) {
					if($enr_val->enrollstatus != '' && ($enr_val->enrollstatus == 'lrn_crs_cmp_cmp' || $enr_val->enrollstatus == 'lrn_crs_cmp_enr' || $enr_val->enrollstatus == 'lrn_crs_cmp_inp')) {
						$surstatus = getAssignedSurveys($userId, $surObjectId, $surObjectType, 'survey', '0', $enr_val->enrollid, 'yes');
					} else {
						$survey_id = 0;
						$enrollid = $result_enroll[0]->enrollid;
						$enrollstatus = ($result_enroll[0]->enrollregstatus=='lrn_crs_reg_can') ? $result_enroll[0]->enrollregstatus : $result_enroll[0]->enrollstatus;
					}
				} else {
					$surstatus = getAssignedSurveys($userId, $surObjectId, $surObjectType, 'survey', '0', $enr_val->enrollid, 'yes');
				}
				
				if($enr_val->enrollstatus != '' && ($enr_val->enrollstatus == 'lrn_crs_cmp_cmp' || $enr_val->enrollstatus == 'lrn_crs_cmp_enr' || $enr_val->enrollstatus == 'lrn_crs_cmp_inp')) {
					$i=0;
					foreach($surstatus as $key=>$value) {
						if($survey_attr['SurLinkType']=="single") {
							if($result['surveyid']==$surstatus[$i]->surveyid) {
								$survey_details = array('object_id'=>$surObjectId, 'object_title'=>rawurlencode($result_title['objecttitle']), 'object_type'=>$surObjectType, 'course_id'=>$result_title['courseid'],
													'survey_id'=>$surstatus[$i]->surveyid, 'survey_title'=>rawurlencode($surstatus[$i]->surveytitle), 'survey_count'=>$surstatus[$i]->surveycount,
													'enroll_id'=>$enr_val->enrollid, 'enroll_date'=>rawurlencode(date('d M, Y',strtotime($enr_val->enrolldate))), 'enroll_status'=>$enr_val->enrollstatus, 'user_id'=>$userId, 'default_content'=>(($attrMapCount-1)+($i+1)));
								$survey_data[] = array($survey_details);
							}
						} else if($survey_attr['SurLinkType']=="multiple"){
							$survey_details = array('object_id'=>$surObjectId, 'object_title'=>rawurlencode($result_title['objecttitle']), 'object_type'=>$surObjectType, 'course_id'=>$result_title['courseid'],
												'survey_id'=>$surstatus[$i]->surveyid, 'survey_title'=>rawurlencode($surstatus[$i]->surveytitle), 'survey_count'=>$surstatus[$i]->surveycount,
												'enroll_id'=>$enr_val->enrollid, 'enroll_date'=>rawurlencode(date('d M, Y',strtotime($enr_val->enrolldate))), 'enroll_status'=>$enr_val->enrollstatus, 'user_id'=>$userId, 'default_content'=>(($attrMapCount-1)+($i+1)));
							$survey_data[] = array($survey_details);
						}
						$i++;
					}
			  	} else {
			  		if ($enroll_count == 1) {
			  			$survey_id = $result['surveyid'];
			  			$enrollid = $result_enroll['enrollid'];
			  			$enrollstatus = ($enr_val->enrollregstatus=='lrn_crs_reg_can') ? $enr_val->enrollregstatus : $enr_val->enrollstatus;
			  		} 
			  	}
			  	if($enr_val->enrollstatus=='lrn_crs_cmp_cmp')
			  		$myenrollment_tab = 'Yes';
			}
			$_SESSION['survey_data'] = str_replace('"','\'',drupal_json_encode($survey_data));
		} else if($result_assoc['acount'] > 1 && $result_user['ucount'] >= 1) {
			foreach($result_enroll as $enr_val) {
				if ($enroll_count >= 1) {
					if($enr_val->enrollstatus != '' && ($enr_val->enrollstatus == 'lrn_crs_cmp_cmp' || $enr_val->enrollstatus == 'lrn_crs_cmp_enr' || $enr_val->enrollstatus == 'lrn_crs_cmp_inp')) {
						$surstatus = getAssignedSurveys($userId, $surObjectId, $surObjectType, 'survey', '0', $enr_val->enrollid, 'yes');
					} else {
						$survey_id = 0;
						$enrollid = $result_enroll[0]->enrollid;
						$enrollstatus = ($result_enroll[0]->enrollregstatus=='lrn_crs_reg_can') ? $result_enroll[0]->enrollregstatus : $result_enroll[0]->enrollstatus;
					}
				} 
				if($enr_val->enrollstatus != '' && ($enr_val->enrollstatus == 'lrn_crs_cmp_cmp' || $enr_val->enrollstatus == 'lrn_crs_cmp_enr' || $enr_val->enrollstatus == 'lrn_crs_cmp_inp')) {
					$i=0;
					foreach($surstatus as $key=>$value) {
						if($survey_attr['SurLinkType']=="single") {
							if($result['surveyid']==$surstatus[$i]->surveyid) {
								if($enr_val->masterenrollid != '' && $enr_val->programid != '' && $enr_val->enforcesequence == 'Y') {
									$sequence = ($enr_val->sequence)-1;
								$select_enforce = db_select('slt_enrollment','ros');
								$select_enforce->addExpression('count(ros.id)','ecount');
								$select_enforce->addField('temp','title','prevcoursetitle');
								$select_enforce->innerJoin('slt_course_template','temp','temp.id = ros.course_id');
								$subquery = db_select('slt_module_crs_mapping','crs');
								$subquery->addField('crs','course_id','crsid');
								$subquery->condition('crs.program_id',$enr_val->programid,'=');
								$subquery->condition('crs.sequence',$sequence,'=');
								$subquery->condition('crs.is_required','Y','=');
								$select_enforce->condition('ros.master_enrollment_id',$enr_val->masterenrollid,'=');
								$select_enforce->condition('ros.user_id',$userId,'=');
								$select_enforce->condition('ros.course_id',$result_title['courseid'],'!=');
								$select_enforce->condition('ros.comp_status',array('lrn_crs_cmp_enr' , 'lrn_crs_cmp_inp'),'IN');
								$select_enforce->condition('ros.course_id',$subquery,'IN');
									$result_enforce = $select_enforce->execute()->fetchAssoc();
									$enforce = $result_enforce['ecount'];
									$prev_coursetitle = rawurlencode($result_enforce['prevcoursetitle']);
									$default_content = $i;
								} else {
									$enforce = '0';
									$prev_coursetitle = '';
									$default_content = ($attrMapCount-1)+($i+1);
								}
								if ($enroll_count == 1) {
									if($surstatus[$i]->surveycount == 0) {
										$surObjectType = $enr_val->objecttype;
										$enrollid = ($enr_val->masterenrollid !='') ? $enr_val->masterenrollid : $enr_val->enrollid;
										$enrollstatus = $enr_val->enrollstatus;
										$survey_id = $value->surveyid;
										$survey_status = $surstatus[$i]->surveycount;
										break;
									}
								} else{
									$survey_details = array('object_id'=>$surObjectId, 'program_id'=>$enr_val->programid, 'object_title'=>rawurlencode($enr_val->objecttitle), 'object_type'=>$enr_val->objecttype, 'course_id'=>$result_title['courseid'],
											'survey_id'=>$surstatus[$i]->surveyid, 'survey_title'=>rawurlencode($surstatus[$i]->surveytitle), 'survey_count'=>$surstatus[$i]->surveycount, 'enroll_id'=>$enr_val->enrollid, 'master_enrollid'=>$enr_val->masterenrollid, 'prev_coursetitle'=>$prev_coursetitle, 
											'enroll_date'=>rawurlencode(date('d M, Y',strtotime($enr_val->enrolldate))), 'enroll_status'=>$enr_val->enrollstatus, 'user_id'=>$userId, 'default_content'=>$default_content, 'launch_elligible'=>$enforce);
									$survey_data[] = array($survey_details);
								}
							}
						} else if($survey_attr['SurLinkType']=="multiple"){
							if($enr_val->masterenrollid != '' && $enr_val->programid != '' && $enr_val->enforcesequence == 'Y') {
								$sequence = ($enr_val->sequence)-1;
								$select_enforce = db_select('slt_enrollment','ros');
								$select_enforce->addExpression('count(ros.id)','ecount');
								$select_enforce->addField('temp','title','prevcoursetitle');
								$select_enforce->innerJoin('slt_course_template','temp','temp.id = ros.course_id');
								$subquery = db_select('slt_module_crs_mapping','crs');
								$subquery->addField('crs','course_id','crsid');
								$subquery->condition('crs.program_id',$enr_val->programid,'=');
								$subquery->condition('crs.sequence',$sequence,'=');
								$subquery->condition('crs.is_required','Y','=');
								$select_enforce->condition('ros.master_enrollment_id',$enr_val->masterenrollid,'=');
								$select_enforce->condition('ros.user_id',$userId,'=');
								$select_enforce->condition('ros.course_id',$result_title['courseid'],'!=');
								$select_enforce->condition('ros.comp_status',array('lrn_crs_cmp_enr' , 'lrn_crs_cmp_inp'),'IN');
								$select_enforce->condition('ros.course_id',$subquery,'IN');
								$result_enforce = $select_enforce->execute()->fetchAssoc();
								$enforce = $result_enforce['ecount'];
								$prev_coursetitle = rawurlencode($result_enforce['prevcoursetitle']);
								$default_content = $i;
							} else {
								$enforce = '0';
								$prev_coursetitle = '';
								$default_content = ($attrMapCount-1)+($i+1);
							}
							if ($enroll_count == 1) {
								if($surstatus[$i]->surveycount == 0) {
									$surObjectType = $enr_val->objecttype;
									$enrollid = ($enr_val->masterenrollid !='') ? $enr_val->masterenrollid : $enr_val->enrollid;
									$enrollstatus = $enr_val->enrollstatus;
									$survey_id = $value->surveyid;
									$survey_status = $surstatus[$i]->surveycount;
									break;
								}
							} else{
								$survey_details = array('object_id'=>$surObjectId, 'program_id'=>$enr_val->programid, 'object_title'=>rawurlencode($enr_val->objecttitle), 'object_type'=>$enr_val->objecttype, 'course_id'=>$result_title['courseid'], 
										'survey_id'=>$value->surveyid, 'survey_title'=>rawurlencode($value->surveytitle), 'survey_count'=>$surstatus[$i]->surveycount, 'enroll_id'=>$enr_val->enrollid, 'master_enrollid'=>$enr_val->masterenrollid, 
										'prev_coursetitle'=>$prev_coursetitle, 'enroll_date'=>rawurlencode(date('d M, Y',strtotime($enr_val->enrolldate))), 'enroll_status'=>$enr_val->enrollstatus, 'user_id'=>$userId, 'default_content'=>$default_content, 'launch_elligible'=>$enforce);
								expDebug::dPrint('multiple TPs survey details Elseee outside loop '.$i.' ==> '.print_r($survey_details,true),5);
								$survey_data[] = array($survey_details);
							}
						}
						$i++;
					}
				} 
				}			
				$_SESSION['survey_data'] = str_replace('"','\'',drupal_json_encode($survey_data));
		} else if ($mcount > 1 && $survey_attr['SurLinkType']=="multiple") {
			foreach($result_enroll as $enr_val) {
				if($enr_val->enrollstatus != '' && ($enr_val->enrollstatus == 'lrn_tpm_ovr_cmp' || $enr_val->enrollstatus == 'lrn_tpm_ovr_enr' || $enr_val->enrollstatus == 'lrn_tpm_ovr_inp')) {
					$surstatus = getAssignedSurveys($userId, $surObjectId, $surObjectType, 'survey', '0', $enr_val->enrollid, 'yes');
					$i=0;
					foreach($surstatus as $key=>$value) {
						$survey_details = array('object_id'=>$surObjectId, 'object_title'=>rawurlencode($result_title['objecttitle']), 'object_type'=>$surObjectType,
							'course_id'=>$result_title['courseid'], 'survey_id'=>$value->surveyid, 'survey_title'=>rawurlencode($value->surveytitle), 
							'survey_count'=>$value->surveycount, 'enroll_id'=>$enr_val->enrollid, 'enroll_date'=>rawurlencode(date('d M, Y',strtotime($enr_val->enrolldate))), 
							'enroll_status'=>$enr_val->enrollstatus, 'user_id'=>$userId, 'default_content'=>(($attrMapCount !='') ? $attrMapCount-1 : $attrMapCount) + $i);
						$survey_data[] = array($survey_details);
						$i++;
					}
				}
				if($enr_val->enrollstatus=='lrn_tpm_ovr_cmp')
					$myprogramTab = 'Yes';
			}
			$_SESSION['survey_data'] = str_replace('"','\'',drupal_json_encode($survey_data));
			
	 } else {
		$surstatus2 = getAssignedSurveys($userId, $surObjectId, $surObjectType, 'survey', '0', $enrollid, 'yes');

		$surveyCount = count($surstatus2);

		$j=0;
		$r=1;
		foreach($surstatus2 as $key=>$value) {
			if($surSurveyId!='null' || $surSurveyId!='') {
				if($survey_attr['SurLinkType']=="single") {
					if($result['surveyid'] == $value->surveyid) {
						$survey_id = $value->surveyid;
						$survey_status = $value->surveycount;
						if($surObjectType=='cre_sys_obt_cls') {
							$default_content = ($attrMapCount-1)+($j+1);
						} else {
							$default_content = $attrMapCount + $j;
						}
						break;
					} else {
						$survey_id = '';
					}
				} else {
					if($value->surveyid !='' && ($surveyCount == 1 || $value->surveycount == 0)) {
						$survey_id = $value->surveyid;
						$survey_status = $value->surveycount;
						$default_content = ($attrMapCount-1)+($j+1);
						break;
					} else if($value->surveycount > 0){
						$completecount = in_array(0,$value->surveycount);
						if($surveyCount == $r){
							$survey_id = $value->surveyid;
							$survey_status = $value->surveycount;
							$survey_complete = 'ALL';
						}
						$r++;
					} else {
						$survey_id = '';
					}
				}
			}
			$j++;
		}
		if($surstatus2 == null) $survey_id = 0; 
	 }
	}
	}
	}
	$_SESSION['surveylink'] = array(
			'survey_urlname' => $survey_attr['SurUrlName'],
			'survey_sharetype' => $survey_attr['SurLinkType'],
			'survey_objectid' => $surObjectId,
			'survey_objecttype' => $surObjectType,
			'survey_userid' => $userId,
			'survey_courseid' => $surveyCourseId,
			'survey_count' => $surveymapcount,
			'survey_objectname' => $surveyObjectName,
			'survey_courseid' => $surveyCourseId,
			'survey_enrollcount' => $user_enrollcount,
			'survey_recurringcount' => $recurring_count,
			'survey_dedicatetpcount' => $dedicatetp_count,
			'survey_multipleTP' => $surmultipleTP,
			'survey_recertify' => $recertify,
			'survey_myenrolltab' => $myenrollment_tab,
			'survey_myprogramstab' => $myprogramTab,
			'survey_islaunchable' => $enforce,
			'survey_enrollid' => $enrollid,
			'survey_enrollstatus' => $enrollstatus,
			'survey_masenrollid' => $masenrollid,
			'survey_programid' => $programid,
			'survey_overallstatus' => $overallstatus,
			'survey_id' => $survey_id,
			'survey_defaultcontent' => $default_content,
			'survey_status' => $survey_status,
			'survey_userwidget' => $widgetcount,
			'survey_completion' => $survey_complete,
	);
	drupal_goto('?q=learning/enrollment-search',array('external' => TRUE));
	} 
}
function masterEnrollmentRecordCountCheck() {
	$loggedUserId = getSltpersonUserId();
	 	
	if( !empty($_REQUEST['signed_request']) && ($loggedUserId==0 || empty($loggedUserId)) && module_exists(salesforce_integration) ){
	  
		$signedRequest = $_REQUEST['signed_request'];
		$sep = strpos($signedRequest, '.');
		$encodedSig = substr($signedRequest, 0, $sep);
		$encodedEnv = substr($signedRequest, $sep + 1);
		$sr = base64_decode($encodedEnv);
		$recevied_response=json_decode($sr);
		$loggedUserId=getUserIdFromEmail(trim($recevied_response->context->user->email));
	}
	$query = db_query("select count(1) as cnt from slt_master_enrollment where user_id = :userid",
			array(':userid' => $loggedUserId));
	$result = $query->fetchField();
	return $result;
}
function personPreferenceCheck() {
	$loggedUserId = getSltpersonUserId();
	$prefQuery = db_query("select count(1) as pref_count from slt_person_preference where user_id = :userid",
			array(':userid' => $loggedUserId));
	$prefResult = $prefQuery->fetchField();
	return $prefResult;
}
function instructorSessionRecordCountCheck() {
	$loggedUserId = getSltpersonUserId();
	$insQuery = db_query("select  count(1) as cnt from slt_course_class cls
		inner join slt_session_instructor_details ses_ins on ses_ins.class_id = cls.id and ses_ins.instructor_id= :userid
		where cls.status not in ('lrn_cls_sts_del','lrn_cls_sts_can')",
			array(':userid' => $loggedUserId));
	$insResult = $insQuery->fetchField();
	return $insResult;
}

function surveyBusinessRuleMapping($objectId, $objectType, $ruleCode) {
	$selectRuleMap = db_select('slt_business_rule_mapping','brm');
	$selectRuleMap->addExpression('count(brm.id)','rulecount');
	$selectRuleMap->condition('brm.entity_id',$objectId,'=');
	$selectRuleMap->condition('brm.entity_type',$objectType,'=');
	$selectRuleMap->condition('brm.business_rule_code',$ruleCode,'=');
	expDebug::dPrintDBAPI(' selectRuleMap SQL = ' , $selectRuleMap);
	$resulttRuleMap = $selectRuleMap->execute()->fetchAssoc();
	expDebug::dPrint('Survey Link Check Business Rule Mapping ==> ' . print_r($resulttRuleMap, 1), 4);
	
	return $resulttRuleMap['rulecount'];
}
?>