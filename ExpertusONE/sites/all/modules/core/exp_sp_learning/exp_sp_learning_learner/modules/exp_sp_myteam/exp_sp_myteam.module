<?php
/**
 * Implementation of hook_init().
 */
function exp_sp_myteam_init() {
	try{
  global $user;
  if((arg(1) == 'myteam-search') && ($user->uid==0)) {
    $query = array('destination' => "learning/myteam-search");
    //drupal_goto('learning/login', array('query' => $query));
    drupal_goto('/', array('query' => $query));
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_myteam_init', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_block_info().
 */
function exp_sp_myteam_block_info() {
	try{
  $blocks = array();
  $blocks['tab_manager_view'] = array(
    'info' => t('Manager View'),
  	'cache' => DRUPAL_CACHE_PER_ROLE,  
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'learning/myteam-search
				learning/myteam-search/*'
  );
  $blocks['tab_manager_view_myapproval'] = array(
  		'info' => t('Manager Approval View'),
  		'cache' => DRUPAL_CACHE_PER_ROLE,
  		'visibility' => BLOCK_VISIBILITY_LISTED,
    //    'region' => 'highlight',
  		'pages' => 'myapproval/myteam/Certificate',
        'region' => 'highlight',
  );
  $blocks['header_search'] = array(
    'info' => t('Myteam Header Search'),
  	'cache' => DRUPAL_CACHE_PER_ROLE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'learning/myteam-search
  		        myapproval/myteam/Certificate'
    );
 
  return $blocks;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_myteam_block_info', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_menu().
 */
function exp_sp_myteam_menu() {
	try{
  $items = array();
  
  $items['learning/myteam-search/search/all'] = array(
    'title' => 'Search Myteam',
    'page callback' => 'getMyteamSearchResults',
    'access arguments' => array('access content'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_myteam.inc'
    );
  
  
  $items['learning/myteam-myapproval/search/all'] = array(
  		'title' => 'Manager Approval View',
  		'page callback' => 'getMyteamCertApproval',
  		'access arguments' => array('access content'),
  		'type' => MENU_CALLBACK,
  		'file' => 'exp_sp_myteam.inc'
  );
  $items['learning/myteam-search'] = array(
    'title' => 'Manager View',
    'page callback' => 'empty_value',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $config=getConfig("exp_sp");
  $MyApproval_visibility = $config['profile_certificate'];
  if($MyApproval_visibility == 1) {  
  $items['myapproval/myteam/Certificate'] = array(
  		'title' => 'Manager Approval View',
  		'page callback' => 'empty_value',
  		'access arguments' => array('access content'),
  		'type' => MENU_CALLBACK
  );
  }
  
  $items['learning/myteam-search/class-details/%'] = array(
    'title' => 'List Enrolled Classes',
    'page callback' => 'getMyteamMyClassResults',
  	'page arguments' => array(3),
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_myteam-myclass-search.inc'
    );
  $items['learning/myteam-search/location-autocomplete'] = array(
    'title' => 'Location Autocomplete',
    'page callback' => 'getMyteamLocationAutoComplete',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_myteam.inc'
    );
  $items['learning/myteam-search/username-autocomplete'] = array(
    'title' => 'Username Autocomplete',
    'page callback' => 'getMyteamUsernameAutoComplete',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_myteam.inc'
    );
    $items['learning/myteam-myapproval/username-autocomplete'] = array(
    		'title' => 'Username Autocomplete',
    		'page callback' => 'getMyteamApprovalUsernameAutoComplete',
    		'access arguments' => array('expertus learner'),
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_myteam.inc'
    );
    $items['learning/myteam-myapproval/certificate-autocomplete'] = array(
    		'title' => 'Certification Autocomplete',
    		'page callback' => 'getMyApprovalCertificateAutoComplete',
    		'access arguments' => array('expertus learner'),
    		'type' => MENU_CALLBACK,
    );
    $items['learning/myteam-search/username-autocomplete'] = array(
    		'title' => 'Username Autocomplete',
    		'page callback' => 'getMyteamUsernameAutoComplete',
    		'access arguments' => array('expertus learner'),
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_myteam.inc'
    );
  $items['learning/myteam-search/catalog/%'] = array(
    'title' => 'List All Classes',
    'page callback' => 'getMyteamCatalogResults',
  	'page arguments' => array(3),
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_myteam-catalog-search.inc'
    );
  $items['ajax/learning/myteam-search/assign-class/%/%/%/%/%'] = array (
    'title' => 'Assign Course-Class for a user',
    'page callback' => 'assignUserToCourseClass',
    'page arguments' => array(4, 5, 6, 7, 8),
    'type' => MENU_CALLBACK,
    'access arguments' => array('expertus learner'),
    'file' => 'exp_sp_myteam-catalog-search.inc'
	);
/*  $items['ajax/learning/myteam-search/assign-object-class/%/%/%/%'] = array (
    'title' => 'Assign Learning Program for a user',
    'page callback' => 'assingUserToObjectClass',
    'page arguments' => array(4, 5, 6,7),
    'type' => MENU_CALLBACK,
    'access arguments' => array('expertus learner'),
    'file' => 'exp_sp_myteam-catalog-search.inc'
	);*/
  $items['ajax/learning/myteam-search/available-seats/%/%/%'] = array (
    'title' => 'Available Seats',
    'page callback' => 'callbackGetAvailableSeats',
    'page arguments' => array(4,5,6),
    'type' => MENU_CALLBACK,
    'access arguments' => array('expertus learner'),
    'file' => 'exp_sp_learning.inc',		
    'file path' => drupal_get_path('module', 'exp_sp_learning')
  );
  $items['learning/myteam-search/catalog-autocomplete/%/%'] = array(
    'title' => 'Course-Class Title Autocomplete',
    'page callback' => 'getMyteamCatalogAutoComplete',
  	'page arguments' => array(3,4),
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_myteam-catalog-search.inc'
    );
  $items['ajax/learning/myteam-search/cancel/%/%/%/%'] = array (
    'title' => 'Cancel Course-Class for a user',
    'page callback' => 'cancelUserFromCourseClass',
    'page arguments' => array(4,5,6,7),
    'type' => MENU_CALLBACK,
    'access arguments' => array('expertus learner'),
    'file' => 'exp_sp_myteam-myclass-search.inc'
	);
	$items['ajax/myteam/markcomplete/%/%/%/%/%/%'] = array (
    'title' => 'Mark Complete Course-Class for a user',
    'page callback' => 'markCompleteUserFromCourseClass',
    'page arguments' => array(3,4,5,6,7,8),
    'type' => MENU_CALLBACK,
    'access arguments' => array('expertus learner'),
    'file' => 'exp_sp_myteam-myclass-search.inc'
	);
    $items['learning/myteam-profile-view/%'] = array(
      'title' => 'My Profile',
      'page callback' => 'getUserProfileResult',
      'page arguments' => array(2),
      'access arguments' => array('expertus learner'),
      'access callback' => array('user_is_logged_in'),
      'type' => MENU_CALLBACK
    );
    
    $items['learning/profile/certificate/verify/%/%'] = array(
    		'title' => 'My Profile',
    		'page callback' => 'ManagerVerifyCetificate',
    		'page arguments' => array(4,5),
    		//'access arguments' => array('expertus learner'),
    		'access callback' => TRUE,
    		'type' => MENU_CALLBACK,
    		'file' => 'exp_sp_myteam.inc'
    );
    
    
    $items['ajax/Prequiste/%/%/%/%'] = array (
    		'title' => 'Check Prequiste to MyTeam',
    		'page callback' => 'CheckMyteamPrequiste',
    		'page arguments' => array(2,3,4,5),
    		'type' => MENU_CALLBACK,
    		'access arguments' => array('expertus learner'),
    		'file' => 'exp_sp_myteam.inc'
    );
	
    $items['ajax/PrerequisiteFetchlist/%/%/%/%/%/%'] = array (
    		'title' => 'Check Prequiste to MyTeam',
    		'page callback' => 'fetchPrequisteList',
    		'page arguments' => array(2,3,4,5,6,7),
    		'type' => MENU_CALLBACK,
    		'access arguments' => array('expertus learner'),
    		'file' => 'exp_sp_myteam.inc'
    );
    
    
  return $items;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_myteam_menu', $ex);
  	expertusErrorThrow($ex);
  }
}

/*
 * Implementation of hook_theme
 */
function exp_sp_myteam_theme() {
	try{
  return array(
  	'exp_sp_myteam-view-image' => array('
  		variables' => array('results' => array()),
        'template' => 'exp_sp_myteam-view-image' 
        ),
  		
  		
  		'exp_sp_myteam-myapproval-image' => array('
  		variables' => array('results' => array()),
  				'template' => 'exp_sp_myteam-myapproval-image'
  		),
  		'exp_sp_myteam-myapproval-detail' => array('
  			 variables' => array('results' => array()),
  			'template' => 'exp_sp_myteam-myapproval-detail'
  		),
  		
  		'exp_sp_myteam-myapproval-action' => array('
  			 variables' => array('results' => array()),
  				'template' => 'exp_sp_myteam-myapproval-action'
  		),
  		
  		'exp_sp_myteam-links-block' => array('
  		variables' => array('results' => array()),
  				'template' => 'exp_sp_myteam-links-block'
  		),
    'exp_sp_myteam-view-detail' => array('
  		variables' => array('results' => array()),
        'template' => 'exp_sp_myteam-view-detail' 
        ),
    'exp_sp_myteam-view-action' => array('
  		variables' => array('results' => array()),
        'template' => 'exp_sp_myteam-view-action' 
        ),
  		'exp_sp_myteam-links' => array('
  		variables' => array('results' => array()),
  				'template' => 'exp_sp_myteam-links'
  		),
    'exp_sp_myteam-view-filter' => array('
  		variables' => array('searchObj' => new stdClass(), 'fullSearchObj' => new stdClass()),
        'template' => 'exp_sp_myteam-view-filter' 
        ),
  		'exp_sp_myteam-myapproval-filters' => array('
  		variables' => array('searchObj' => new stdClass(), 'location' => ''),
  				'template' => 'exp_sp_myteam-myapproval-filters'
  		),
    'exp_sp_myteam-class-detail' => array('
  		variables' => array('searchObj' => new stdClass(), 'fullSearchObj' => new stdClass()),
        'template' => 'exp_sp_myteam-class-detail' 
        ),
  	'exp_sp_myteam-catalog-search-view-image' => array('
  		variables' => array('results' => array()),
        'template' => 'exp_sp_myteam-catalog-search-view-image' 
        ),
    'exp_sp_myteam-catalog-search-view-detail' => array('
  		variables' => array('results' => array()),
        'template' => 'exp_sp_myteam-catalog-search-view-detail' 
        ),
    'exp_sp_myteam-catalog-search-view-action' => array('
  		variables' => array('results' => array(),'userId'=>''),
        'template' => 'exp_sp_myteam-catalog-search-view-action' 
        ),
    'exp_sp_myteam-catalog-search-view-header' => array('
  		variables' => array('results' => array()),
        'template' => 'exp_sp_myteam-catalog-search-view-header' 
        ),
    'exp_sp_myteam-myclass-view-detail' => array('
  		variables' => array('results' => array()),
        'template' => 'exp_sp_myteam-myclass-view-detail' 
        )
    );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_myteam_theme', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Callback for class search for particular user
 */
/*
function getUserProfileResult($userId){
  $profile_path = drupal_get_path('module', 'exp_sp_my_profile');
  require_once($profile_path.'/exp_sp_my_profile.inc');
  $profileInfo = getMyProfile($userId);
  $srch_result_response = theme('my_profile', array('results' => $profileInfo));
  echo drupal_json_output($srch_result_response);
}
*/

/**
 * Implementation of hook_block_view().
 */
function exp_sp_myteam_block_view($delta = ''){
	try{
  require_once('exp_sp_myteam.inc');
  $header_optional = array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY);
  $css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  drupal_add_js(drupal_get_path('module', 'exp_sp_myteam') .'/exp_sp_myteam.js', $js_module_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_myteam') .'/exp_sp_myteam_myapproval.js', $js_module_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
  include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/exp_sp_my_skill/exp_sp_my_skill.inc";
  
 // drupal_add_js(drupal_get_path('module', 'exp_sp_my_skill') .'/exp_sp_my_skill.js',$js_module_optional);
  drupal_add_js(drupal_get_path('module', 'exp_sp_my_profile').'/exp_sp_my_profile.js', array('type' => 'file', 'group' => JS_DEFAULT));
  drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.mousewheel.js', $js_module_optional);
  global $theme_key;
  if($theme_key == 'expertusoneV2') {
  drupal_add_css(drupal_get_path('module', 'exp_sp_myteam') .'/exp_sp_myteam_v2.css', array('type' => 'file', 'group' => CSS_THEME, 'weight'=>1300));
  //drupal_add_css(drupal_get_path('module', 'exp_sp_my_profile') .'/exp_sp_my_profile_v2.css', $css_theme_optional);
  }else{
  drupal_add_css(drupal_get_path('module', 'exp_sp_myteam') .'/exp_sp_myteam.css', $css_theme_optional);
  //drupal_add_css(drupal_get_path('module', 'exp_sp_my_profile') .'/exp_sp_my_profile.css', $css_theme_optional);
  }
  if(module_exists('exp_sp_esignature')){   
  if($theme_key == 'expertusoneV2') {	   
  	drupal_add_css(drupal_get_path('module', 'exp_sp_esignature') .'/exp_sp_esignature_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  }else{
  	drupal_add_css(drupal_get_path('module', 'exp_sp_esignature') .'/exp_sp_esignature.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  }
  }
  $config=getConfig("exp_sp");
  $MyApproval_visibility = $config['profile_certificate'];
  
  $block = array();
  switch ($delta) {
    case 'tab_manager_view':
      /* drupal_add_js(drupal_get_path('module', 'exp_sp_my_activity') .'/exp_sp_my_activity.js',$js_module_optional);
      global $theme_key;
      if($theme_key == 'expertusoneV2') {
      	 drupal_add_css(drupal_get_path('module','exp_sp_my_skill') .'/exp_sp_my_skill_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
      	 drupal_add_css(drupal_get_path('module', 'exp_sp_my_activity') .'/exp_sp_my_activity_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT)); 
      }else
      {
      	 drupal_add_css(drupal_get_path('module','exp_sp_my_skill') .'/exp_sp_my_skill.css', array('type' => 'file', 'group' => CSS_DEFAULT));
      	 drupal_add_css(drupal_get_path('module', 'exp_sp_my_activity') .'/exp_sp_my_activity.css', array('type' => 'file', 'group' => CSS_DEFAULT));
      } */
      includeJqGridJsCss();
      $block['subject'] = t('Manager View');
      $block['content'] = ' ';
      break;
    case 'header_search':
        $block['subject'] = 'Myteam Header Search';
        $block['content'] = ' ';
        break;
        case 'tab_manager_view_myapproval':
            if($MyApproval_visibility == 1) {
        	includeJqGridJsCss();
        	drupal_add_js('misc/ui/jquery.ui.datepicker.min.js');
        	drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.expertus.calendar.js',$header_optional);
        	drupal_add_js(drupal_get_path('module', 'exp_sp_lnrcalendar') .'/exp_sp_lnrcalendar.js', $js_module_optional);
        	drupal_add_css('misc/ui/jquery.ui.datepicker.css');
        	$block['subject'] = 'Manager Approval View';
        	$block['content'] = ' ';
            }
        	break;
  }
  return $block;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_myteam_block_view', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_myteam_block_view_alter(&$data, $block) {
try{
 if($data['subject'] == 'catalogheadersearch' && arg(1) == 'myteam-search'){
    $data['content'] = '';
 }
 }catch (Exception $ex) {
 	watchdog_exception('exp_sp_myteam_block_view_alter', $ex);
 	expertusErrorThrow($ex);
 }
}





/**
 * Callback of the Search Details.
 */
function getMyteamSearchResults(){
	try{
  $lnrSrch = new LnrSearchMyteam();
  $lnrSrch -> setFullSearchResults();
  $config=getConfig("exp_sp");
  $MyApproval_visibility = $config['profile_certificate'];
  $srch_result_response= new stdClass();
  $srch_result_response->filter = theme('exp_sp_myteam-view-filter', array('fullSearchObj' => $lnrSrch));
  $srch_result_response->links = theme('exp_sp_myteam-links', array('Type' => "MyTeam",'MyApproval_visibility' => $MyApproval_visibility));
  
  $qry_search_results = $lnrSrch -> getSearchResults();
  $srch_result_response->total   = $lnrSrch->total_pages;
  $srch_result_response->records = $lnrSrch->qry_search_count;
  $srch_result_response->page    = $lnrSrch->page;
  $_SESSION['jq_count'] = array();
  $i=0;

  expDebug::dPrint(' $lnrSrch = ' . print_r($lnrSrch, true) , 4);
  expDebug::dPrint(' $qry_search_results = ' . print_r($qry_search_results, true) , 4);
  // Mark last rec in $qry_search_results
  $numRec = count($qry_search_results);
  if ($numRec > 0) {
    $qry_search_results[$numRec - 1]->is_last_rec = 'last';
  }
  
  foreach ($qry_search_results as $rec_search_results) {
    $rec_search_results->row =  $i;
    $srch_result_response->rows[$i]['id']   = $rec_search_results->user_id;
    $srch_result_response->rows[$i]['cell'] = array(
           	'image'               => theme('exp_sp_myteam-view-image', array('results' => $rec_search_results)),
           	'details'             => theme('exp_sp_myteam-view-detail', array('results' => $rec_search_results)),
           	'action'              => theme('exp_sp_myteam-view-action', array('results' => $rec_search_results))
    );
    $_SESSION['jq_modal'][$i] = $rec_search_results->user_id;
    $i++;    
  }
  echo drupal_json_output($srch_result_response);
  }catch (Exception $ex) {
  	watchdog_exception('getMyteamSearchResults', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Callback of the Search Details.
 */
function getMyteamCatalogResults($userId){
	try{
  require_once('exp_sp_myteam-catalog-search.inc');
  
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
  include_once($_SERVER["DOCUMENT_ROOT"]. '/sites/all/modules/core/exp_sp_learning/exp_sp_learning.inc');
  include_once($_SERVER["DOCUMENT_ROOT"]. '/sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/modules/exp_sp_prerequisite/exp_sp_prerequisite.inc');
  include_once($_SERVER["DOCUMENT_ROOT"]. '/sites/all/modules/core/exp_sp_learning/exp_sp_learning_learner/modules/exp_sp_lnrenrollment/exp_sp_launch.inc');
  
  $srcSource = getConfigValue('solr_search');
  if($srcSource == 0){
			$lnrSrch = new MyteamCatalogSearch ();
			$lnrSrch->userId = $userId;
			$lnrSrch->myteamCatalogSetFullSearchResults ();
			$qry_search_results = $lnrSrch->myteamCatalogGetSearchResults ();
			expDebug::dPrint('Query Search results'.print_r($lnrSrch,true),5);
			expDebug::dPrint('Query Search results'.print_r($qry_search_results,true),5);
		}
else {
	require_once $_SERVER['DOCUMENT_ROOT'].'/sites/all/modules/core/exp_sp_solr/exp_sp_solr_catalog.php';
	try{
		expDebug::dPrint("Solr Search Testing",1);
		$solrObj = new CatalogSolrSearch();
		$search_results = $solrObj->getSolrSearchResultMyteam($userId);
		expDebug::dPrint('Result set from solr main result'.print_r($search_results,true),5);
		$qry_search_results = $search_results['records'];
		expDebug::dPrint('Result set from solr'.print_r($qry_search_results,true),5);
		$count = $search_results['recCount'];
		expDebug::dPrint('Result set count'.print_r($count,true),5);
		$lnrSrch->qry_search_count = $search_results['recCount'];
		$lnrSrch->page    = $_GET['page'];
		$lnrSrch->total_pages   = ceil($lnrSrch->qry_search_count/$_GET['rows']);
	}catch(Exception $e){
		expDebug::dPrint("Error in Solr Search -- ".print_r($e->getMessage(),true),1);
	}
	expDebug::dPrint("Solr search result - Final ".print_r($search_results,1),4);
}
  $srch_result_response->header = theme('exp_sp_myteam-catalog-search-view-header', array('userId' => $userId));
  $srch_result_response->total   = $lnrSrch->total_pages;
  $srch_result_response->records = $lnrSrch->qry_search_count;
  $srch_result_response->page    = $lnrSrch->page;
  $srch_result_response->userId  = $userId; 
  $_SESSION['jq_count'] = array();
  $i=0;


  
  foreach ($qry_search_results as $rec_search_results) {
  
  
   if(isset($_REQUEST['mobile_request'])){
  		
    $createDate = new DateTime($rec_search_results->registration_end_on);
    $registration_end_on = $createDate->format('Y-m-d');
    $presentDate=date('Y-m-d');

    if(strtotime($registration_end_on) >= strtotime($presentDate) || empty($createDate)){
      $rec_search_results->registration_ended= "false";
    }
    else{
      $rec_search_results->registration_ended="true";
    }
  
   }
  
  
  
  
    if($rec_search_results->currency_type==null || $rec_search_results->currency_type=='') {		    	
      $rec_search_results->currency_type='';	// 0056924 - default $ removal	    
    }
      		    
    if($rec_search_results->export_compliance == null)
      $rec_search_results->export_compliance = 'N';
      
    if($rec_search_results->price == null || $rec_search_results->price == '')
      $rec_search_results->price = '0.00';

    $rec_search_results->row =  $i;
    $srch_result_response->rows[$i]['id']   = $rec_search_results->cls_id;
    
    if($rec_search_results->object_type == 'Class') {
    if(($rec_search_results->delivery_type_code == "lrn_cls_dty_ilt" || $rec_search_results->delivery_type_code == "lrn_cls_dty_vcl")) {
    	expDebug::dPrint('Query Search results1233333'.print_r($rec_search_results->delivery_type_code,true),5);
    		$rec_search_results->sessioninfo = getSessionDetails($rec_search_results->crs_id,$rec_search_results->cls_id,$rec_search_results->delivery_type_code);
    		expDebug::dPrint('Query Search results12333'.print_r($rec_search_results->sessioninfo,true),5);
    }
      $rec_search_results->available_seats = getAvailableSeats($rec_search_results->cls_id);      
      $rec_search_results->waitlist_status  = getWaitlistCatalogInfo($rec_search_results->cls_id);
      $rec_search_results->waitlist_seats  = $rec_search_results->waitlist_status;
    }else{
    	$rec_search_results->sessioninfo = array();
      $rec_search_results->available_seats = getObjectAvailableSeats($rec_search_results->cls_id,$userId);
      $rec_search_results->waitlist_seats  = '';
    }
    $rec_search_results->session_details = getSessionDetails($rec_search_results->crs_id,$rec_search_results->cls_id,$rec_search_results->delivery_type_code,'',$userId);
    $rec_search_results->multi_register = is_multiregistration_allowed($rec_search_results->cls_id);

    
    //New code
    $catalog_reg = $rec_search_results->object_type;
    $object_type = $rec_search_results->object_type;
    
    expDebug::dPrint('ererewrdcdcdseded = ' .print_r(($rec_search_results->cls_id),true),4);
    
    if(isset($_REQUEST['mobile_request'])){
    
     if($object_type !='Course' && $object_type !='Class' ){
     $tp_prerequisites = getCatalogTpPrerequisite($rec_search_results->cls_id,$userId);
     
     expDebug::dPrint('ashubabluuuu12212 = ' .print_r($resClsDetials1111,true),4);
     $rec_search_results->prerequisites = $tp_prerequisites;
     
     }else{
     //$class_prerequisites = getCatalogPrerequisite($rec_search_results->cls_id,$userId);
     //$rec_search_results->prerequisites = class_prerequisites;
    }
    }
    
    $rec_search_results->rating = getEntityRatingInfo($rec_search_results->node_id,$rec_search_results->object_type);
    
    
    $widgetId 			= (($catalog_reg =='Course')) ? 'catalog-search' : '';
    
    /* for getting TP registered status*/
    if($object_type !='Course' && $object_type !='Class' ){
    
    
    	$rec_search_results->enrolled_id = getObjectRegisteredOrNot($rec_search_results->cls_id,$userId);
    	
    	$enrollId = $rec_search_results->enrolled_id->master_enrolled_id;
    	/*
    	 * lp_fetch_module_list final argument false is added for bypass get default_currency type function.
    	 * if its e this query take lengthy timing.
    	 */
    	
    	if($catalog_reg =='Course'){
    		$tp_courses = lp_fetch_module_list($rec_search_results->crs_id,$userId,'N','',1,false);
    		$classIdArr = attachedCourseClassDetailsAPI($rec_search_results->crs_id);
    	}
    	else{
    		$tp_courses = lp_fetch_module_list($rec_search_results->cls_id,$userId,'N','',1,false);
    		$classIdArr = attachedCourseClassDetailsAPI($rec_search_results->cls_id);
    
    	}
    	$rec_search_results->tp_courses = $tp_courses;
    	$rec_search_results->class_list = $classIdArr;
    	 
    }
    else{
    	
    	$rec_search_results->enrolled_id = getRegisteredOrNot($rec_search_results->crs_id,$rec_search_results->cls_id,$userId,$widgetId);
    	
    	$enrollId = $rec_search_results->enrolled_id->enrolled_id;
    	
    	$rec_search_results->launchdetails = getLaunchDetail( $enrollId);
    	
    }
    
    
    if(!$_REQUEST['apiname'])
    {
    	 
    	$srch_result_response->rows[$i]['cell'] = array(
           	'image'               => theme('exp_sp_myteam-catalog-search-view-image', array('results' => $rec_search_results)),
           	'details'             => theme('exp_sp_myteam-catalog-search-view-detail', array('results' => $rec_search_results,'userId' => $userId)),
           	'action'              => theme('exp_sp_myteam-catalog-search-view-action', array('results' => $rec_search_results,'userId' => $userId))
    );
    $_SESSION['jq_modal'][$i] = $rec_search_results->cls_id;
    
    }
    
    $i++;    
  }
  
  
  
  if($_REQUEST['apiname'])
  {
  	if($qry_search_results && count($qry_search_results)){
  		$qry_search_results['totalrow'] = $lnrSrch->qry_search_count;
  	}
  
  return $qry_search_results;
  }
  else 
  {
  echo drupal_json_output($srch_result_response);
  }
  }catch (Exception $ex) {
  	watchdog_exception('getMyteamCatalogResults', $ex);
  	expertusErrorThrow($ex);
  }
    
}

function getuserclassesunderManagerAPI($paramsobj)
{
drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);	

$paramsobj=array_to_object($paramsobj);
$result = getMyteamMyClassResults($paramsobj->user_id,'api',$paramsobj);
//return array((object)array('status' => $result));
expDebug::dPrint('checking the enrollment results '.print_r($result,true));
return $result;	
}


/**
 * Callback for class search for particular user
 */
function getMyteamMyClassResults($userId,$isAPI='',$paramsobj){
	try{
  require_once('exp_sp_myteam-myclass-search.inc');
  $lnrSrch = new MyteamMyclassSearch();
  $lnrSrch->userId    = $userId;  
  $startDate = ''; //2014/11/25;
  $endDate = '';
  
  
//   $_GET['page']=$paramsobj->page;
//   $_GET['rows']=$paramsobj->limit;
//   $_GET["dl_type"]=str_replace(",","|",$_GET["dl_type"]);
  
  if($isAPI == 'api')
  {
  	
  	if($paramsobj->action == 'chart' )
  	{
  		$select = db_select('slt_enrollment', 'mas');
  		$select->addExpression( 'COUNT(mas.id)','mas');
  		$select->condition('mas.user_id',$userId);
  		$limit_range = $select->execute()->fetchField();
  		
  		expDebug::dPrint('check d limit_range--->'.$limit_range,4);
  		
  		$lnrSrch->sidx    = '';
  		$lnrSrch->sord    = '';
  		$lnrSrch->limit    = $limit_range;
  		$lnrSrch->page    = '1';
  		
  		$startDate = str_replace('-', '/', $paramsobj->startDate); //2014/11/25;
  		$endDate = str_replace('-', '/', $paramsobj->endDate); //2014/11/25;
  		
  		$startDate = $startDate.' 00:00:00';
  		$endDate = $endDate.' 23:59:59';
  		
  	}
  	else
  	{
  $lnrSrch->sidx    = 'enrolled_on';
  $lnrSrch->sord    = 'desc';
  $lnrSrch->limit    = $paramsobj->limit;
  $lnrSrch->page    = $paramsobj->page;
  	}
  }
  
  $qry_search_results = $lnrSrch -> getSearchResults($isAPI,$startDate,$endDate);
  $srch_result_response->total   = $lnrSrch->total_pages;
  $srch_result_response->records = $lnrSrch->qry_search_count;
  $srch_result_response->page    = $lnrSrch->page;
  $srch_result_response->userId  = $userId;
  $_SESSION['jq_count'] = array();
  $i=0;

  foreach ($qry_search_results as $rec_search_results) {
  	if($rec_search_results->base_type == 'tp') {
  		$exmpId = getRegisteredEnrollmentExmeptedorNot('tp',$rec_search_results->user_id,$rec_search_results->class_id,'',$rec_search_results->enrolled_id);
  	}else {
  		$exmpId = getRegisteredEnrollmentExmeptedorNot('class',$rec_search_results->user_id,$rec_search_results->course_id,$rec_search_results->class_id,$rec_search_results->enrolled_id);
  	}
  
    if($rec_search_results->type=='Virtual Class' || $rec_search_results->type=='Classroom' ){
	    // Mark Complete show only future sesssion
	    $strtotimeNow     			= strtotime("now");
	    expDebug::dPrint('check d result23--->'.$strtotimeNow,4);
	    $getClassSessionStartDate 	= getMyteamClassStartDate($rec_search_results->class_id);
	    list($sHr,$sMin)   = explode(':',$getClassSessionStartDate[0]->session_end_time);
	    list($sDate,$sMonth,$sYear)   = explode('/',$getClassSessionStartDate[0]->ses_start_date);
	   	 
	    $sessionDate1 					= mktime($sHr,$sMin,0,$sMonth,$sDate,$sYear);
	    $sessionDate 					= mktime(0,0,0,$sMonth,$sDate,$sYear); //strtotime($getClassSessionStartDate);
	    
	    $sss= $sYear."-".$sMonth."-".$sDate." ".$sHr.":".$sMin.":0";
	    $currentDate  =  date("Y-m-d h:i:s");
	   	$sessionnedate =  date("Y-m-d h:i:s",strtotime($sss));
	   	$tmp= strtotime(date("Y-m-d H:i", strtotime($getClassSessionStartDate[0]->ses_start_date." ".$getClassSessionStartDate[0]->session_end_time)));
	    
	    $sessionComplete  			= (($strtotimeNow >= $tmp) ? TRUE : FALSE);
	    $rec_search_results->SessionCompleted = $sessionComplete;
    }else if($rec_search_results->type=='Curricula' || $rec_search_results->type=='Learning Plan' || $rec_search_results->type=='Certification') {
    	$rec_search_results->SessionCompleted = isSessionStartForTP($rec_search_results->course_id);
    	expDebug::dPrint('$rec_search_results->SessionCompleted : '.$rec_search_results->SessionCompleted, 4);
    }else{
      $rec_search_results->SessionCompleted = TRUE;   
    }   
       
    if($isAPI == 'api')
    {
    
    	$select_weived = "SELECT CONCAT(exmp.exempted_status) as exempted_sts FROM slt_enrollment_exempted exmp WHERE exmp.enrollment_id = $rec_search_results->enrolled_id  AND exmp.enroll_type = 'class' ORDER BY id DESC LIMIT 1";
    	 
    	$qry_res  = db_query($select_weived);
    
    	$sessionsList = $qry_res->fetchAll();
    
    	$rec_search_results->waived_status = $sessionsList[0]->exempted_sts;
    
    }
    
    
    $rec_search_results->row =  'tr_'.$i;
    $srch_result_response->rows[$i]['id']   = 'tr_'.$i;
    $srch_result_response->rows[$i]['cell'] = array(
           	'class_title'        => theme('exp_sp_myteam-myclass-view-detail', array('class_title' => $rec_search_results)),
            'enrolled_on'        => theme('exp_sp_myteam-myclass-view-detail', array('enrolled_on' => $rec_search_results)),
            'completed_on'       => theme('exp_sp_myteam-myclass-view-detail', array('completed_on' => $rec_search_results)),
            'type'               => theme('exp_sp_myteam-myclass-view-detail', array('type' => $rec_search_results)),
           	'status'             => theme('exp_sp_myteam-myclass-view-detail', array('status' => $rec_search_results)),
            'action'             => theme('exp_sp_myteam-myclass-view-detail', array('action' => $rec_search_results)),
    		'mro_status'         => $rec_search_results->mro_status,
    		'reg_status'         => $rec_search_results->reg_status,
    		'comp_status'         => $rec_search_results->comp_status,
    		/* Changes for mandatory to be displayed for classes assigned by the manager after checking "mandatory" checkbox in assign learning ticket 16261 */
    		'mand_status'         => $rec_search_results->mand_status,
            'is_compliance'      => $rec_search_results->is_compliance,
    		'exempted_sts'       => $exmpId,
    );
    $_SESSION['jq_modal'][$i] = $rec_search_results->class_id;
    $i++;    
   
    
  }
  
  if($isAPI == 'api')
  {
  	$qry_search_results['totalrow'] = $lnrSrch->qry_search_count;
  	return $qry_search_results;
  }
  
 		 	echo drupal_json_output($srch_result_response);
  		

  }catch (Exception $ex) {
  	watchdog_exception('getMyteamMyClassResults', $ex);
  	expertusErrorThrow($ex);
  }
}

function getManagerMarkComplete(){
	try{
	$result = getProfileListItemByCode('cre_sys_brl_mmc');
	return $result[0]->status;
	}catch (Exception $ex) {
		watchdog_exception('getManagerMarkComplete', $ex);
		expertusErrorThrow($ex);
	}
}

function getMyteamClassStartDate($classId){
  try {
      $select = db_select('slt_course_class_session', 'ses');
      $select->addExpression("DATE_FORMAT(MAX(ses.start_date),'%d-%m-%Y')", 'ses_start_date');
      $select->addField('ses','end_time', 'session_end_time');
      $select->condition('ses.class_id',$classId);
      $sesStartDate = $select->execute()->fetchAll();
      expDebug::dPrint(' $$sesStartDate = ' .print_r($sesStartDate,true) , 4);
      return $sesStartDate;
        
  } catch (Exception $ex) {
    watchdog_exception('catalog', $ex);
    expertusErrorThrow($ex);
  }               
}
function getMyteamCertApproval(){
	try{
		$page         = $_GET['page'];
		$limit        = $_GET['rows'];
		$config=getConfig("exp_sp");
		$MyApproval_visibility = $config['profile_certificate'];
		expDebug::dPrint(' $lnrSrch = ' . print_r($_REQUEST, true) , 4);
		$lnrSrch = new LnrSearchMyteam();
		$certCount = getMyApprovalResults(1);
		$start = $limit * $page - $limit;
		$srch_result_response= new stdClass();
		$srch_result_response->filter = theme('exp_sp_myteam-myapproval-filters', array('location' => $_REQUEST['location'],'reporttype'=> $_REQUEST['reporttype'],'startdate' => $_REQUEST['startdate'],'enddate'=> $_REQUEST['enddate']) );
		$srch_result_response->links = theme('exp_sp_myteam-links', array('Type' => "MyApproval",'MyApproval_visibility' => $MyApproval_visibility));

		$qry_search_results = getMyApprovalResults();
		$qry_search_results->range($start, $limit);
		$qry_search_results = $qry_search_results->execute()->fetchAll();
		if( $certCount >0 ){
			$total_pages = ceil($certCount/$limit);
		}else{
			$total_pages = 0;
		}
		if($page > $total_pages)
			$page = $total_pages;
		if($start < 0) {
			$start = 0;
		}
		$srch_result_response->total   = $total_pages;
		$srch_result_response->records = $certCount;
		$srch_result_response->page    = $page;
		$_SESSION['jq_count'] = array();
		$i=0;

			expDebug::dPrint(' $lnrSrch = ' . print_r($lnrSrch, true) , 4);
		expDebug::dPrint(' $qry_search_resultssanhyaaaa = ' . print_r($qry_search_results, true) , 4);
		// Mark last rec in $qry_search_results
		$numRec = count($qry_search_results);
		if ($numRec > 0) {
			$qry_search_results[$numRec - 1]->is_last_rec = 'last';
		}

		foreach ($qry_search_results as $rec_search_results) {
			$rec_search_results->row =  $i;
			$srch_result_response->rows[$i]['id']   = $rec_search_results->user_id;
			$srch_result_response->rows[$i]['cell'] = array(
					'image'               => theme('exp_sp_myteam-myapproval-image', array('results' => $rec_search_results)),
					'details'             => theme('exp_sp_myteam-myapproval-detail', array('results' => $rec_search_results)),
					'action'              => theme('exp_sp_myteam-myapproval-action', array('results' => $rec_search_results))
			);
			$_SESSION['jq_modal'][$i] = $rec_search_results->user_id;
			$i++;
		}
		echo drupal_json_output($srch_result_response);
	}catch (Exception $ex) {
		watchdog_exception('getMyteamSearchResults', $ex);
		expertusErrorThrow($ex);
	}
}
function getSkillCertificates($pageFrom){
	$uid = getIdOfLoggedInUser();
	$select = db_select('slt_skill_set', 'skill');
		
	if($pageFrom == 'export') //fix for #0088435
	    $select->leftJoin('slt_person', 'per', 'per.user_name = skill.user_name');
	else
	    $select->innerJoin('slt_person', 'per', 'per.user_name = skill.user_name');
	$select->leftJoin('slt_person', 'persn', 'persn.id = skill.user_id');
	$select->addExpression("DATE_FORMAT(MAX(skill.valid_from),'%d-%m-%Y')", 'start_date');
	$select->addExpression("DATE_FORMAT(MAX(skill.valid_to),'%d-%m-%Y')", 'end_date');
	$select->addField('skill','id','skill_id');
	$select->addField('persn','full_name','full_name');
	$select->addField('skill','skill_name','skill_name');
	$select->addField('skill','proficiency','proficiency');
	$select->addField('skill','type','type');
	$select->addField('skill','user_id','user_id');
	$select->addField('skill','created_on','created_on');
	$select->addField('skill','valid_from','valid_from');
	$select->addField('skill','valid_to','valid_to');
	$select->addField('skill','company','company');
	$select->addField('skill','certificate_number','certificate_number');
	$select->addField('skill','certificate_img','certificate_img');
	$select->addField('skill','verification_status','verification_status');
	$select->addField('skill','user_name','user_name');
	$select->addField('skill','email','email');
	$select->addField('skill','mobile_no','mobile_no');
	$select->addField('skill','display_to_others','display_to_others');
	if($pageFrom == 'export')
	  $select->addField('per','full_name','verifier');
	if($pageFrom != 'export') {
		$select->condition('per.id',$uid,'=');
	}else {
		$select->condition('persn.id',$uid,'=');
	}
	$select->isNull('skill.is_deleted');
	expDebug::dPrintDBAPI("getSkillCertificates details",$select);
	return $select;
}
function getMyApprovalResults($count=''){
	try {
		expDebug::dPrint(' $$sesStartDate entetrree= ');
     $Certificate_status = $_GET['reporttype'];
     $user_name = $_GET['location'];
     $startdate = $_GET['startdate'];
     $enddate = $_GET['enddate'];
     $certnamesearch = $_GET['searchusername'];
     $rows = $_GET['rows'];
     $page = $_GET['page'];
     $sortBy = $_REQUEST['sortby'];
     if (!empty($startdate)){
     	list($m,$d,$y) = explode("-",$startdate);
     	$startdate = $y.'-'.$m.'-'.$d;
     	/*commented for ticket #0033124*/
     	//$startdate  = timeZoneConvert($startdate , $vUserPHPTimezonename,  $timeZone);
     	//$startdate = $startdate->format('Y-m-d');
     }
     if (!empty($enddate)){
     	list($m,$d,$y) = explode("-",$enddate);
     	$enddate = $y.'-'.$m.'-'.$d;
     	/*commented for ticket #0033124*/
     	//$enddate  = timeZoneConvert($enddate , $vUserPHPTimezonename,  $timeZone);
     	//$enddate = $enddate->format('Y-m-d');
     }
     expDebug::dPrint(' $$sesStartDatenuuu = ' .print_r($Certificate_status,true) , 4);
		
     	$select = getSkillCertificates();
		if(!empty($user_name)){
			$select->condition('persn.full_name', '%' . db_like($user_name) . '%', 'LIKE');
		}
		
		if(!empty($certnamesearch) && $certnamesearch!= "Search" ){
			$select->condition('skill.skill_name', '%' . db_like($certnamesearch) . '%', 'LIKE');
		}
		if($Certificate_status == "verified"){
			$select->condition('skill.verification_status',"Verified",'=');
		}
		if($Certificate_status == "rejected"){
			$select->condition('skill.verification_status',"Rejected",'=');
		}
		if($Certificate_status == "verified|rejected"){
		    
		    $select->condition(db_or()
		            ->condition('skill.verification_status',"Rejected",'=')
		            ->condition('skill.verification_status',"Verified",'='));
		   // $select->condition('skill.verification_status',"Rejected",'=');
		}
		if (!empty($startdate) && !empty($enddate) ){
			$select->where("'$startdate' <= DATE_FORMAT(skill.valid_from, _utf8'%Y-%m-%d')");
			$select->where("'$enddate' >= DATE_FORMAT(skill.valid_to, _utf8'%Y-%m-%d')");
				
		}
		else if (!empty($startdate) && $enddate=='' ){
			$select->where("'$startdate' <= DATE_FORMAT(skill.valid_from, _utf8'%Y-%m-%d')");
		}
		else if ($startdate=='' && !empty($enddate)){
			$select->where("'$enddate' <= DATE_FORMAT(skill.valid_to, _utf8'%Y-%m-%d')");
		}
		$select->addField('skill','program_id','programid');     //change for the ticket 0020909 = For updating tp in skills//
		$select->addField('skill','master_enrollment_id','masterEnrollId');
		$select->groupBy('skill.id');
		if ($sortBy == "AZ") {
			$select->orderBy('skill.skill_name','asc');
		}else if ($sortBy == "ZA") {
			$select->orderBy('skill.skill_name','desc');
		}else if ($sortBy == "Time") {
			$select->orderBy('skill.updated_on','desc');
		}else {
			$select->orderBy('skill.skill_name','asc');
		}
		//$select->range(0, $limit);
		//$result = $select->execute()->fetchAll();
		expDebug::dPrintDBAPI("My Team getMyteamClassResults Query :-ssss", $select);
		expDebug::dPrint(' $$sesStartDate = ' .print_r($result,true) , 4);
		
		$select->orderBy('skill.id','desc');
		if($count){
			$reCount = $select->execute()->rowCount();
			return $reCount;
		}else{
			return $select;
		}

	} catch (Exception $ex) {
		watchdog_exception('getMyApprovalResults', $ex);
		expertusErrorThrow($ex);
	}
}
function getMyApprovalCertificateAutoComplete()
{
	try {
		$userId = getSltpersonUserId();
		$certName = $_GET['z'];
		$select = db_select('slt_skill_set', 'skill');
		$select->innerJoin('slt_person', 'per', 'per.user_name = skill.user_name');
		$select->leftJoin('slt_person', 'persn', 'persn.id = skill.user_id');
		$select->addField('skill', 'skill_name');
		$select->condition('per.id',$userId,'=');
		$select->condition('skill.skill_name', '%' . db_like($certName) . '%', 'LIKE');
		$select->groupBy('skill.id');
		expDebug::dPrintDBAPI("getMyApprovalCertificateAutoComplete",$select);
		$qry_user_autocomplete = $select->execute()->fetchAll();
		foreach ($qry_user_autocomplete as $rec_user_autocomplete) {
			print $rec_user_autocomplete->skill_name."\n";
		}
	} catch (Exception $ex) {
			watchdog_exception('getMyApprovalCertificateAutoComplete', $ex);
			expertusErrorThrow($ex);
		}
}

?>
