<?php
require_once('exp_sp_cybersource_tax.inc');

/**
 * Implementation of hook_uc_order().
 */
 
function exp_sp_cybersource_tax_uc_order($op, $order, $arg2) {
	try {
  global $user;
  if ((variable_get('uc_payment_credit_gateway' , '') == 'exp_cybersource' && variable_get('exp_cybersource_soap_tax_calculate', FALSE)) || ( variable_get('uc_payment_credit_gateway' , '') == 'exp_paypal'  && variable_get('exp_cybersource_soap_tax_calculate', FALSE))) {
    switch ($op) {
      case 'save':
        expdebug::dPrint('$_SERVER = ' . print_r($_SERVER, true), 5);
        expdebug::dPrint('$_SESSION = ' . print_r($_SESSION, true), 5);
        expdebug::dPrint('$_POST = ' . print_r($_POST, true), 5);
        expdebug::dPrint('$_GET = ' . print_r($_GET, true), 5);
        expDebug::dPrint('$order = '. print_r($order, true), 5);  
        if($order->order_total > 0)    {
        	if($order->data['order_create_from'] == 'admin_checkout'){
        		/* $isTaxCalculate = 0;
        		 $triggerElement = $_POST['_triggering_element_name'];
        		expDebug::dPrint(' triggerElement = '. print_r($triggerElement, true), 5);
        		expDebug::dPrint(' billing_postal_code = '. print_r($order->billing_postal_code, true), 5);
        		if($order->billing_country == 840 || $order->billing_country == 124){
        		if($order->billing_city && $order->billing_zone && $order->billing_postal_code){
        		$isTaxCalculate = 1;
        		}
        		if($isTaxCalculate){
        		if($triggerElement == 'panes[billing][billing_zone]' || $triggerElement == 'panes[billing][billing_city]' || $triggerElement == 'panes[billing][billing_postal_code]' || $triggerElement == 'panes[billing][select_address]'){
        	
        		}
        		else{
        		$isTaxCalculate = 0;
        		}
        		}
        		}
        		else{
        		if(($triggerElement == 'panes[billing][billing_zone]' || $triggerElement == 'panes[billing][select_address]') && $order->billing_country){
        		$isTaxCalculate = 1;
        		}
        		} */
        		if (/* ($isTaxCalculate) && */
        				(substr($_SERVER['HTTP_REFERER'], -strlen('administration/order/create')) == 'administration/order/create') &&
        				(isset($_SESSION['admin_checkout_validation_failed']) == FALSE)) {
        			expDebug::dPrint('calculating tax', 5);
        			foreach($order->line_items as $key => $line_item) {
        				if($line_item['type'] == 'cybersource_tax') { // 'cybersource-tax' is the tax line item id in order
        					unset($order->line_items[$key]);
        					db_query('DELETE FROM {uc_order_line_items} WHERE order_id = :oid AND type = :typ',
        							array(':oid' => $order->order_id, ':typ' => $line_item['type']));
        					break;
        				}
        			} // end foreach
        			 
        			// Reset item level tax in slt_order_items table to 0 for all order items
        			clearItemLevelTaxes(false, $order->data);
        			 
        			unset($_SESSION['admin_cybersourceTaxError']); // cleanup
        			$orderTaxAmount = calculateTaxForOrder($order);
        			if ($orderTaxAmount === false) {
        				// When there is a tax calc error, $_SESSION[admin_cybersourceTaxError] is set in calculateTaxForOrder()
        				return;
        			}
        			 
        			expDebug::dPrint('total  tax amount ' . print_r($orderTaxAmount,true) , 5);
        			// Add the tax line item to the order
        			if (module_exists('exp_sp_callout') && calloutIsActive() &&  calloutEntityIsActive('cme_tax')) {
        	
        			}
        			else {
        				uc_order_line_item_add (
        						$order->order_id, // uc order ID.
        						'cybersource_tax', // line item ID
        						'Tax', // line item name (or line item text)
        						$orderTaxAmount, // line item value
        						2, // line item weight
        						array()
        				);
        			}
        		}
        	}
        	else{
        		if (((substr($_SERVER['REQUEST_URI'], -strlen('cart/checkout')) == 'cart/checkout') &&
        				(substr($_SERVER['HTTP_REFERER'], -strlen('cart/checkout')) == 'cart/checkout') &&
        				(isset($_SESSION['checkout_validation_failed']) == FALSE)) || (strpos($_SERVER['REQUEST_URI'],"apiname=calculateTaxAPI") >0) || ($_REQUEST['apiname'] == 'ApplyTaxAPI')) {
        			        			expDebug::dPrint('calculating tax', 5);
        			foreach($order->line_items as $key => $line_item) {
        				if($line_item['type'] == 'cybersource_tax') { // 'cybersource-tax' is the tax line item id in order
        					unset($order->line_items[$key]);
        					db_query('DELETE FROM {uc_order_line_items} WHERE order_id = :oid AND type = :typ',
        							array(':oid' => $order->order_id, ':typ' => $line_item['type']));
        					break;
        				}
        			} // end foreach
        			 
        			// Reset item level tax in slt_order_items table to 0 for all order items
        			clearItemLevelTaxes();
        			 
        			unset($_SESSION['cybersourceTaxError']); // cleanup
        			if ($order->uid == $user->uid) {
        				$orderTaxAmount = calculateTaxForOrder($order);
        				if ($orderTaxAmount === false) {
        					// When there is a tax calc error, $_SESSION[cybersourceTaxError] is set in calculateTaxForOrder()
        					return;
        				}
        			}
        			else {
        				$config = getConfig("exp_sp");
        				$_SESSION['cybersourceTaxError'] = t('MSG593') . '. ' . //Unable to calculate tax
        						t('MSG595') . ' ' . //Please contact your local training office or the
        						variable_get('site_name', 'ExpertusONE') . ' ' . t('MSG596') . ' ' . $config["reply_to"] . '.'; //team at
        				return;
        			}
        			 
        			// Add the tax line item to the order
        			if (module_exists('exp_sp_callout') && calloutIsActive() &&  calloutEntityIsActive('cme_tax')) {
        	
        			}
        			else {
        				uc_order_line_item_add (
        						$order->order_id, // uc order ID.
        						'cybersource_tax', // line item ID
        						'Tax', // line item name (or line item text)
        						$orderTaxAmount, // line item value
        						2, // line item weight
        						array()
        				);
        			}
        		}
        	}
        }  
        
        break;
      
      case 'total':    
        // Here we return a value that will be added to the order total.
        // For discounts we would return a negative value, for surcharges we return a positive value.
        // We do NOT return the new total, only the change in the total.
        // We loop through each of the line items to see if ours has been added. If it has, we adjust the order total accordingly.
        foreach($order->line_items as $line_item) {
          if ($line_item['type'] == 'cybersource_tax') {
            return $line_item['amount'];
          }
        }
        break;
    }
  }
	}catch (Exception $ex) {
  	watchdog_exception('exp_sp_cybersource_tax_uc_order', $ex);
  	expertusErrorThrow($ex);
  }
}

/*
 * Implements hook_module_implements_alter(). hook_uc_order()'s modules list is altered to invoke this module's hook_uc_order() implementation
 * after all other module's hook_uc_order() is invoked.
 * The order is altered only when moving from checkout page to paymethod page, which is when the tax is calculated and tax line item added to order.
 */
function exp_sp_cybersource_tax_module_implements_alter(&$module_list, $hook) {
	try{
  if ($hook === "uc_order") {
    if (substr($_SERVER['REQUEST_URI'], -strlen('cart/checkout')) == 'cart/checkout' &&
                     substr($_SERVER['HTTP_REFERER'], -strlen('cart/checkout')) == 'cart/checkout') {
      $temp = $module_list['exp_sp_cybersource_tax'];
      unset($module_list['exp_sp_cybersource_tax']);
      $module_list['exp_sp_cybersource_tax'] = $temp;
    }
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_cybersource_tax_module_implements_alter', $ex);
  	expertusErrorThrow($ex);
  }
}
?>
