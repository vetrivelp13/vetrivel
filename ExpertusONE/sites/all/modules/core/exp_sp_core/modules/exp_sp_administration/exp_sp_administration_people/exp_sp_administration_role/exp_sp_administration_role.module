<?php

/**
 * Implementation of hook_menu().
 */
function exp_sp_administration_role_init() {
	try {
		if(stripos(request_uri(),'administration/people/role')!==false){
			includeFilesRole();
		}
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_role_init', $ex);
  	expertusErrorThrow($ex);
  }
}
function exp_sp_administration_role_menu() {
 try {
  $items = array();

  $items['administration/people/role'] = array(
    'title' => t('LBL1037'),
    'page callback' => 'empty_value',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'weight' => 3,
    'access arguments' => array('Security Admin Perm'),
    );

  $items['administration/people/role/%ctools_js/addedit'] = array(
    'title' => 'Add / Edit Role',
    'page callback' => 'exp_sp_role_display_addedit_form',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,

  );

  $items['administration/people/role/search/all'] = array(
    'title' => 'Fetch Roles List to display in JQGrid',
    'page callback' => 'sendRolesListToJqGrid',
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_role.inc'
    );

   $items['administration/people/role/textfilter-autocomplete'] = array(
    'title' => 'Search By Text Filter Autocomplete',
    'page callback' => 'getRoleTextFilterAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_role.inc',
    );

    $items['administration/people/role/username-autocomplete'] = array(
    'title' => 'username autocomplete',
    'page callback' => 'getUsernameAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
    );

    $items['administration/people/role/addedit'] = array(
    'title' => 'Add / Edit Role',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exp_sp_administration_role_addedit_form'),
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK
    );

  $items['administration/people/role/export'] = array(
    'title' => 'Role Search Results CSV Export',
    'page callback' => 'fetchRolesAll',
    'page arguments' => array('CSV'),
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_role.inc',
    );

  $items['administration/people/role/print'] = array(
    'title' => 'Role Search Results Print to PDF',
    'page callback' => 'fetchRolesAll',
    'page arguments' => array('PDF'),
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_role.inc',
    );

 $items['ajax/administration/people/role/activate-and-deactivate/%'] = array (
    'title' => 'Activate Or Deactivate role',
    'page callback' => 'activateOrDeactivateRole',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
    'access arguments' => array('Security Admin Perm'),
    'file' => 'exp_sp_administration_role.inc'
    );

  $items['administration/people/role/role-autocomplete'] = array (
    'title' => 'Parent role Autcomplete URL',
    'page callback' => 'getRoleAutoComplete',
    'page arguments' => array(),
    'type' => MENU_CALLBACK,
    'access arguments' => array('Security Admin Perm'),
  );

  $items['administration/people/role/user-addedit/%/%'] = array(
    'title' => 'Add users',
    'page callback' => 'addUsersDetails',
  	'page arguments' => array(4, 5),
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
   'file' => 'exp_sp_administration_role.inc'
    );

    $items['administration/people/role/user-pagination/%'] = array(
    'title' => 'Fetch available Users',
    'page callback' => 'getRoleUsersList',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_role.inc'
  );
  	$items['administration/people/role/user-name-autocomplete/%/%'] = array(
    'title' => 'Added Users',
    'page callback' => 'getUsernameAutocompletesearch',
  	'page arguments' => array(4,5),
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
   	'file' => 'exp_sp_administration_role.inc'
    );

    /* $items['administration/people/role/allusers-autocomplete/%'] = array(
    'title' => 'All users autocomplete',
    'page callback' => 'addUsersDetails',
  	'page arguments' => array(4, 5),
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
   'file' => 'exp_sp_administration_role.inc'
    );*/
  $items['people/roles/add-permissions/%/%/%'] = array(
    'title' => 'Add Permissions',
    'page callback' => 'addPermissionsDetails',
  	'page arguments' => array(3,4, 5),
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
   'file' => 'exp_sp_administration_role.inc'
    );
    $items['roles/users/%/%/%/%/%/%'] = array(
    'title' => 'Data Grid List',
    'page callback' => 'loadCtoolDataGridTypeForRole',
    'page arguments' => array(2,3,4,5,6,7),
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_role.inc'
  );
   $items['administration/people/roles/add-users/%/%'] = array(
    'title' => 'Add Users',
    'page callback' => 'attachUserToRole',
  	'page arguments' => array(4, 5),
    'access callback' => 'user_access',
    'access arguments' => array('Security Admin Perm'),
    'type' => MENU_CALLBACK,
   'file' => 'exp_sp_administration_role.inc'
    );


  expDebug::dPrint(' $items = ' . print_r($items, true) , 4);
	return $items;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_role_menu', $ex);
		expertusErrorThrow($ex);
	}
}


function exp_sp_role_display_addedit_form($js = NULL, $roleId) {
	try {

	includeFilesRole();
  expDebug::dPrint('exp_sp_role_display_addedit_form');

  // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
  $role_style = array(
    'ctools-admin-role-addedit-style' => array(
        'modalSize' => array(
        'width' => 602,
        'minHeight' => 313,
       ),
    )
  );

  drupal_add_js($role_style, 'setting');
  expDebug::dPrint('exp_sp_role_display_addedit_form js'.$js);
  if ($js) {
    // Prepare list of forms to be displayed in the modal
    $formIdList = array(
                        array('id' => 'exp_sp_administration_role_addedit_form', 'title' => t('LBL1037')),
                        array('id' => 'exp_sp_administration_role_attaching_user_form', 'title' => (t('Users'))),
                        //array('id' =>'addusr_addedit_form_html','title' => t('Add Users'))
                       );

    // Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
    $argsList = array();
    if (!empty($roleId)) {
      $argsList[] = $roleId;
    }

    exp_ctools_modal_multi_ajaxonly_forms_display($formIdList, $argsList);
  }
  else {
    throw new Exception('exp_sp_administration_role.module: exp_sp_role_display_addedit_form() : nojs');
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_role_display_addedit_form', $ex);
  	expertusErrorThrow($ex);
  }
}
function exp_sp_administration_role_addedit_form($form, &$form_state, $renderMode, $arg) {
	try {
  expDebug::dPrint('role $form = ' . print_r($form, true) , 5);
  expDebug::dPrint('role $form_state = ' . print_r($form_state, true) , 5);
  expDebug::dPrint('role $renderMode = ' . print_r($renderMode, true) , 4);
  expDebug::dPrint('role $arg = ' . print_r($arg, true) , 4);

  include_once('exp_sp_administration_role.inc');

  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);

  drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);

  drupal_add_js(drupal_get_path('module', 'exp_sp_administration_role') .'/exp_sp_administration_role.js', $js_module_optional);
    global $theme_key;
  	if($theme_key == 'expertusoneV2') {
  		//NEWUI THEME STYLE SHEET
  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', $css_theme_optional);
  	} else {
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
  	}
  //drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);

  // Alternate way to get the role id for the edit operation
  ///$roleId = $form_state['build_info']['args'][0];
  expDebug::dPrint(' $roleId = ' . print_r($roleId, true) , 4);

  $roleDetails = array();
  if (!empty($arg)) { // An edit operation. Is not form rebuild after save, in which case we
                                                        // can fetch values from $form_state.
    // Fetch role details to be displayed in the form
    $roleDetails = getRoleDetails($arg, array('id', 'name', 'description','status'));

    expDebug::dPrint(' $roleDetails = ' . print_r($roleDetails, true) , 4);
  }

   // Create a new add/edit form
  $form = newAddEditFormWithCancelAndSave('role-addedit-form');

  // Define the form fields

  $roleId =  getDefaultAddEditFormFieldValue('id', $form_state, $roleDetails);
  addHiddenValueToAddEditForm($form, 'id', $roleId);

  $defaultValue = getDefaultAddEditFormFieldValue('name', $form_state, $roleDetails);
  addTextFieldToAddEditForm($form, 'name', t('LBL1037'), $defaultValue, 1, true);

  $defaultValue = getDefaultAddEditFormFieldValue('description', $form_state, $roleDetails);
  $form['addedit-long-description-container'] = array(
    '#type'   => 'markup',
    '#markup' => '<div class="addedit-long-description-container">',
  );
  addTextFormatFieldToAddEditForm($form, 'description', t('LBL229'), $defaultValue, 'full_html', 4,true,false,5000);
  $form['addedit-long-description-container1'] = array(
    '#type'   => 'markup',
    '#markup' => '</div>',
  );
roleAddEditFormWithCancelAndSaveClose($form, 'role-addedit-form','save-button','cancel-button', $roleDetails);

  expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
  return $form;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_role_addedit_form', $ex);
  	expertusErrorThrow($ex);
  }
}


function roleAddEditFormWithCancelAndSaveClose(&$form, $wrapperId = 'addedit-form-wrapper', $saveButtonId = 'save-button', $cancelButtonId = 'cancel-button', $roleDetails = array()) {
	try {
  global $theme_key;
	expDebug::dPrint(' userAddEditFormWithCancelAndSaveClose() called.');

  $customHiddenButtonId = 'role-button-account';

  $ajaxCallbackCancel = 'addEditCancelRepaintForm';

  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $cancelAttributes['class'] = array('addedit-edit-' . $cancelButtonId);

  // For common styling of all addedit cancel buttons
 	//$cancelAttributes['class'][] = 'addedit-edit-cancel';
  $cancelAttributes['class'][] = 'admin-action-button-middle-bg white-btn-bg-middle';

  // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
  $cancelAttributes['class'][] = 'addedit-form-expertusone-throbber';
  $cancelAttributes['tabindex'][] ='8';
  // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
  $cancelAttributes['data-wrapperid'] = array($wrapperId);

  // A common class for all addedit form cancel button, for styling to appear as a link.
  $cancelAttributes['class'][] = 'exp-addedit-form-cancel-button';
  $cancelAttributes['onclick'] = 'Drupal.CTools.Modal.dismiss(); return false;';
  $setcls = ($theme_key=='expertusoneV2')?'':(empty($roleDetails['id']))?'resize-save_btn':'resize-save_btn4';
  $form[$cancelButtonId] = array(
    '#type' => 'submit',
     '#prefix' => '<div class="addedit-form-cancel-and-save-actions-row">' .
                   '<div class="addedit-form-cancel-container-actions '.$setcls.'"><div class="white-btn-bg-left"></div>',
        '#suffix' =>   '<div class="white-btn-bg-right"></div>',
    '#value' => t('LBL123'), // Close
    '#attributes' => $cancelAttributes,
  );

  // Add the Save button
  $ajaxCallbackSave = 'addEditRepaintForm';

  // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
  // each time the form is re-built.
  $saveAttributes['class'] = array('addedit-edit-' . $saveButtonId);

  // For common styling of all addedit save buttons
  //$saveAttributes['class'][] = 'addedit-edit-save';
  $saveAttributes['class'][] = 'admin-save-button-middle-bg';
  $saveAttributes['tabindex'][] = '7';

  // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
  $saveAttributes['class'][] = 'addedit-form-expertusone-throbber';
  // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
  $saveAttributes['data-wrapperid'] = array($wrapperId);

  $esignHiddenButt = 'esign-'.$wrapperId;
  $esignHiddenButt1 = 'status-upd-esign-'.$wrapperId;
  expDebug::dPrint('status for roledetails'.print_r($roleDetails,true));
  if(!empty($roleDetails)){//IF EDIT MODE
    $saveAttributes['class'][] = 'edit-catalog-course-save-publish';
    $setclass = ($theme_key=='expertusoneV2')?"admin-save-button-left-bg":"";
    if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){ //IF ESIGNATURE ENABLED PERFORM SAVE
      $saveAttributes['onclick'] = array();
      //$saveAttributes['onclick'][] = 'Drupal.ajax.prototype.commands.addEditHideMessages();';
      $form[$saveButtonId] = array(
            '#type' => 'submit',
            '#value' => t('LBL141'),
            '#name' => 'save',
            '#prefix' => '<div class="admin-save-pub-unpub-button-container"><div class='.$setclass.'></div>',
            '#suffix' => '<span id="pub-unpub-action-btn" onclick="displayPubActionList()" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn ">&nbsp;</span></div>',
      	  '#id' =>$saveButtonId,
      	  '#attributes' => $saveAttributes,
            '#ajax' => array(
      	      'wrapper' => $wrapperId,
      	      'callback' => $ajaxCallbackSave,
      	      'method' => 'replace',
      	      'effect' => 'none', // 'fade',
      	      'event'=>'click',
                'customButtonId'=>$esignHiddenButt,
      	      'keypress' => true,
      	      'progress' => array(
      	        'type' => 'throbber',
      	        'message' => ''
      	      ),
          	)
            );
    }else{//ESIGN NOT ENABLED PERFORM SAVE
      $saveAttributes['onclick'] = array();
      $saveAttributes['onclick'][] = '$("#'.$esignHiddenButt.'").click(); return false;';
      $form[$saveButtonId] = array(
  	    '#type' => 'button',
          '#prefix' => '<div class="admin-save-pub-unpub-button-container"><div class="'.$setclass.'"></div>',
          '#suffix' => '<span id="pub-unpub-action-btn" onclick="displayPubActionList()" class="pub-unpub-add-action-wrapper pub-unbpub-more-btn ">&nbsp;</span></div>',
          '#value' => t('LBL141'),
        	'#name' => 'save',
  	      '#attributes' => $saveAttributes,
  	  );
    }
  //TO CALL THE HIDDED BUTTON RELATED TO ESIGN PROCESS
  unset($saveAttributes['tabindex']);
  $saveAttributes['onclick'] = array();
  $form[$esignHiddenButt] = array(
	    '#type' => 'submit',
	    '#value' => t('hidden-save'),
	    '#name'	=> 'hidden-save',
      	'#prefix' => '<span id = "esign-admin-div" style="display:none">',
	    '#suffix' => '</span>',
	    '#id' =>$esignHiddenButt,
  		'#attributes' => $saveAttributes,
	    '#ajax' => array(
		      'wrapper' => $wrapperId,
		      'callback' => $ajaxCallbackSave,
		      'method' => 'replace',
		      'effect' => 'none', // 'fade',
		      'event'=>'click',
  			  'roleActionStatus'=>'',
		      'keypress' => true,
		      'progress' => array(
		      'type' => 'throbber',
		      'message' => ''
		      ),
	    	)
	      );


      $form['addedit-button-group-ul-start'] = array(
          '#type' => 'markup',
          '#markup' => '<ul class="catalog-pub-add-list">',
        );
  	  expDebug::dPrint('status for sec'.$roleDetails['status']);
  	  if($roleDetails['status'] == 'cre_sec_sts_atv'){//GET ROLE STATUS
  	    $activateSuspendLabel  = t('LBL572');
  	    $roleActionStatus  = 'Suspend';
  	  }
  	  else{
  	    $activateSuspendLabel  = t('LBL573');
  	    $roleActionStatus  = 'Activate';
  	  }
  	  $activateSuspendButtonId = 'role-activate-suspend-button';
  	  if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){//IF ESIGNATURE ENABLED PERFORM STATUS UPDATE
        $activateSuspendAttributes['onclick'] = array();
        //$activateSuspendAttributes['onclick'][] = 'increasePopWidth();';
        $form[$activateSuspendButtonId] = array(
  	    '#type' => 'submit',
  	    '#value' => $activateSuspendLabel,
  	    '#prefix' => '<li class="save-pub-unpub-sub-menu">',
  	    '#suffix' => '</li>',
        '#name' => 'role-activate-suspend',
        '#id' =>$activateSuspendButtonId,
  	    '#attributes' => $activateSuspendAttributes,
        	'#ajax' => array(
    	      'wrapper' => $wrapperId,
    	      'callback' => $ajaxCallbackSave,
    	      'method' => 'replace',
    	      'effect' => 'none', // 'fade',
    	      'event'=>'click',
        	  'customButtonId'=>$esignHiddenButt1,
    	      'keypress' => true,
    	      'progress' => array(
    	        'type' => 'throbber',
    	        'message' => ''
    	      ),
        	)
  	   );
  	  }else{//IF ESIGNATURE NOT ENABLED PERFORM STATUS UPDATE
    	  $activateSuspendAttributes['onclick'] = array();
          $activateSuspendAttributes['onclick'][] = '$("#'.$esignHiddenButt1.'").click(); return false;';
          $form[$activateSuspendButtonId] = array(
  	    	'#type' => 'submit',
  	    	'#prefix' => '<li class="save-pub-unpub-sub-menu">',
  	    	'#suffix' => '</li>',
            '#value' => $activateSuspendLabel,
          	'#name' => 'role-activate-suspend',
    	    '#attributes' => $activateSuspendAttributes,
    	  );
  	  }
      $activateSuspendAttributes['onclick'] = array();
      $form[$esignHiddenButt1] = array(
    	      '#type' => 'submit',
    	      '#value' => t('hidden-save'),
    	      '#name'	=> 'role-status-upd-hidden-save',
          	  '#prefix' => '<span id = "esign-admin-div" style="display:none">',
    	      '#suffix' => '</span>',
    	      '#id' =>$esignHiddenButt1,
      		  '#attributes' => $activateSuspendAttributes,
    	      '#ajax' => array(
    		      'wrapper' => $wrapperId,
    		      'callback' => $ajaxCallbackSave,
    		      'method' => 'replace',
    		      'effect' => 'none', // 'fade',
    		      'event'=>'click',
                  'roleActionStatus'=>$roleActionStatus,
    		      'keypress' => true,
    		      'progress' => array(
    		      'type' => 'throbber',
    		      'message' => ''
    		      ),
    	    	)
    	      );

      $deleteAccess = delete_object_record($roleDetails['id'],'Role');
      if(!$deleteAccess){
        $displayTitle = titleController('ADMIN-ROLE-ROLENAME', $roleDetails['name'],34);
  	    $deleteButtonId = 'role-delete-dropdown-button';
  	    $deleteAttributes['onclick'] = array();
        $deleteAttributes['onclick'][] = '$("#root-admin").data("narrowsearch").displayDeleteWizard("'.t('MSG357').' '.strtolower(t('Role')).' '.escape_string($roleDetails['name']) . '","'.$roleDetails['id'].'","Role"); return false;';
        $deleteAttributes['class'][] = 'admin-delete-button-bg';
        $form[$deleteButtonId] = array(
    	    '#type' => 'button',
    	    '#prefix' => '<li class="save-pub-unpub-sub-menu">',
    	    '#suffix' => '</li>',
    	    '#value' => t('LBL286'),
            '#name' => 'delete',
    	    '#attributes' => $deleteAttributes,
    	  );
      }
      $form['addedit-button-group-ul-end'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="clearBoth"></div></div>' .
  	             '<div class="clearBoth"></div></div></ul>',
      );
  }else{
      if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
        $saveAttributes['onclick'] = array();
        //$saveAttributes['onclick'][] = 'Drupal.ajax.prototype.commands.addEditHideMessages();';
        $form[$saveButtonId] = array(
      	      '#type' => 'submit',
      	      '#value' => t('LBL141'),
                '#name' => 'save',
      	   	  '#prefix' => '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>',
      	       '#suffix' =>
      	               '<div class="admin-save-button-right-bg"></div></div>' .
      	               '<div class="clearBoth"></div></div>' .
      	             '<div class="clearBoth"></div></div>',
        	      '#id' =>$saveButtonId,
        		  '#attributes' => $saveAttributes,
      	      '#ajax' => array(
      		      'wrapper' => $wrapperId,
      		      'callback' => $ajaxCallbackSave,
      		      'method' => 'replace',
      		      'effect' => 'none', // 'fade',
      		      'event'=>'click',
                'customButtonId'=>$esignHiddenButt,
      		      'keypress' => true,
      		      'progress' => array(
      		      'type' => 'throbber',
      		      'message' => ''
      		      ),
      	    	)
      	      );
    }else{
  	  $saveAttributes['onclick'] = array();
      $saveAttributes['onclick'][] = '$("#'.$esignHiddenButt.'").click(); return false;';
      $form[$saveButtonId] = array(
      '#type' => 'button',
      '#prefix' => '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>',
      '#suffix' =>
                 '<div class="admin-save-button-right-bg"></div></div>' .
                 '<div class="clearBoth"></div></div>' .
               '<div class="clearBoth"></div></div>',
        '#value' => t('LBL141'),
      	'#name' => 'save',
      '#attributes' => $saveAttributes,
    );
  }
  unset($saveAttributes['tabindex']);
  $saveAttributes['onclick'] = array();
  $form[$esignHiddenButt] = array(
	      '#type' => 'submit',
	      '#value' => t('hidden-save'),
	      '#name'	=> 'hidden-save',
      	  '#prefix' => '<span id = "esign-admin-div" style="display:none">',
	      '#suffix' => '</span>',
	      '#id' =>$esignHiddenButt,
  		  '#attributes' => $saveAttributes,
	      '#ajax' => array(
		      'wrapper' => $wrapperId,
		      'callback' => $ajaxCallbackSave,
		      'method' => 'replace',
		      'effect' => 'none', // 'fade',
		      'event'=>'click',
              //'userActionStatus'=>'',
		      'keypress' => true,
		      'progress' => array(
		      'type' => 'throbber',
		      'message' => ''
		      ),
	    	)
	      );

  	}

/*
  $form['addedit-left-col-end'] = array(
    '#type' => 'markup',
    '#markup' => '</div><div class="clearBoth"></div>',
  );*/
  if(!empty($roleDetails)){
	  expDebug::dPrint('triggering value'.print_r($form,true));
	  $roleId = $roleDetails['id'];
	  $entityId          	 = !empty($roleId)?$roleId:0;
	  $entityType        	 = 'cre_sec';
	  $qtipIdInit        	 = $entityId.'_'.$entityType;
	  $qtipOptAttachmentObj  = "{'entityId':".$entityId.",'entityType':'cre_sec','url':'people/roles/add-permissions/edit/".$entityId."/".$entityType."','popupDispId':'qtip_permissions_disp_".$qtipIdInit."','catalogVisibleId':'qtipAttachIdqtip_addpermissions_visible_disp_".$qtipIdInit."','wBubble':400,'hBubble':'auto','qtipClass':'admin-qtip-access-parent'}";
	  expDebug::dPrint('qtip object'.print_r($qtipOptAttachmentObj,true));
	  $form['addedit-left-col-extend-func'] = array(
	      '#type' => 'markup',
	      '#markup' => '<div id="permissions_disp_div" class="crs-tab-titles-container"><div class="permission-tab-icon"></div>'.
	    				"<div id='qtip_permissions_disp_".$qtipIdInit."'><a class=\"tab-title\" onclick = \" $('#root-admin').data('narrowsearch').getQtipDiv(".$qtipOptAttachmentObj.");\">".t('LBL1035')."</a></div>".//<div class=\"tab-seperator\"></div><div class=\"tags-tab-icon\"></div>".
	         			  '</div>',
	    );
	    $pngPath = base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/spacer.gif';
	    $form['addedit-left-col-end'] = array(
	       '#type' => 'markup',
	       '#markup' => '</div><div class="clearBoth"></div>',
	   	   '#prefix' => '',//'<div style="display:none;"><img id= "edit-course-class-img" src="'.$pngPath.'" onload = "$(\'#root-admin\').data(\'narrowsearch\').getBubblePopup('.$qtipOptAttachmentObj.');
	        									//"></div>',
	    );
  	}
  	}catch (Exception $ex) {
  		watchdog_exception('roleAddEditFormWithCancelAndSaveClose', $ex);
  		expertusErrorThrow($ex);
  	}
}


function exp_sp_administration_role_addedit_form_submit($form, &$form_state) {
	try {
   expDebug::dPrint(' $form = addmodule' . print_r($form, true) , 5);
   expDebug::dPrint(' $form_state = addrolemodule' . print_r($form_state['values'], true) , 5);
	if ($form_state['hidden-save-submit']==true) {
    include_once('exp_sp_administration_role.inc');
    $loggedInUserId = getIdOfLoggedInUser();
    // Check whether add or edit
    if (empty($form_state['values']['id'])) { // Add
      if (!empty($form_state['values']['name'])) {
      	expDebug::dPrint('ADD PART');
        $returnArr = addNewRole($form, $form_state, $loggedInUserId);
        expDebug::dPrint(' $returnArr = ' . print_r($returnArr, true) , 4);
        $newRoleId = $returnArr[0]->id;
        //saveCustomFieldsInAddEditForm($form, $form_state, $newRoleId, 'role', $loggedInUserId);
        expertus_set_message(t('LBL272').' '.t('MSG600').'.');

        // Henceforth this would be an edit operation. We need to set the new role id in form state build info, so
        // that cancel operation can fetch the new record's details from the database.
        $form_state['build_info']['args'][] = $newRoleId;
        $form_state['storage']['new_entity'] = TRUE; // To indicate to Save ajax callback to build and render additional forms
                                                     // Also to trigger refresh of jqgrid on modal close.
        $form_state['rebuild'] = TRUE;
      }
    }
    else {
      unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
      unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
      if($form_state['role_action_status']=='Suspend' || $form_state['role_action_status'] == 'Activate') {
      		expDebug::dPrint('updated sts'.$form_state['role_action_status']);
          activateOrDeactivateRole($form_state['values']['id'], $form_state['role_action_status'], false);
          expertus_set_message(t('MSG348'));
      }else{
        if(!empty($form_state['values']['name'])){
          updateRoleDetails($form, $form_state, $loggedInUserId);
          //saveCustomFieldsInAddEditForm($form, $form_state, $form_state['values']['id'], 'role', $loggedInUserId);
          expertus_set_message(t('LBL272').' '.t('MSG601').'.');
        }
      }
      $form_state['storage']['edited_entity'] = TRUE; // To trigger refresh of jqgrid on modal close.
      $form_state['display_class'] = TRUE;
      $form_state['rebuild'] = TRUE;
    }
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_administration_role_addedit_form_submit', $ex);
  	expertusErrorThrow($ex);
  }
}
function exp_sp_administration_role_addedit_form_validate($form, &$form_state) {
	try {
	expDebug::dPrint('role name check'.print_r($form_state['values']['name'],true),5);
	expDebug::dPrint('role name check'.print_r($form_state['values']['id'],true),5);
  $form_state['role_action_status']='';
  $form_state['hidden-save-submit'] = false;
  $form_state['esign_show_popup']= false;
  if (!empty($form_state['storage']['new_entity'])) {
    unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
    unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
  }
  if (!empty($form_state['storage']['edited_entity'])) {
  	unset($form_state['storage']['edited_entity']); // Unset the variable to remove it from $form_state
  }
  if ($form_state['values']['op'] == t('LBL123')) { // Close
    $form_state['input'] = array(); // Clear user input - raw
    $form_state['values'] = array(); // Clear user input - security cleared
    $form_state['rebuild'] = TRUE; // Rebuild the form. Submit handler will not be called.
    return;
  }
  include_once('exp_sp_administration_role.inc');
  if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
    if($form_state['triggering_element']['#name']=='save')
      $triggerValue  = 'save';
    else
      $triggerValue  = 'role-activate-suspend';
  }else{
    $triggerValue  = 'hidden-save';
  }

  if ($form_state['triggering_element']['#name'] == $triggerValue) {
    $form_state['esign_show_popup']= true;

    // Check all mandatory fields exist
    addEditCheckMandatoryFields($form, $form_state, array('name'));

    // Validate name and description
    $form_state['values']['id']=(!empty($form_state['values']['id']))? $form_state['values']['id'] : 0;
    $recConut = roleNameDuplicatecheck($form_state['values']['name'],$form_state['values']['id']);
    expDebug::dPrint('role name check'.$recConut,5);
  	if ($recConut != 0) {
  		    expDebug::dPrint('duplicate value',4);
        	form_set_error('name', t('MSG644') .' '.$form_state['values']['name'] .t('LBL271').' '.t('MSG645'));
        	$form_state['esign_show_popup']= false;
          $form_state["storage"]["form_validate"] = false;
      	}
    if (empty($form_state['values']['description']['value']) && $form_state['values']['description']['value']=='') {
    	expDebug::dPrint('duplicate value--------->');
    	form_set_error('description', $form['description']['#title'] . t('ERR101'));
    	$form_state['esign_show_popup']= false;
    }

  }
  if ($form_state['triggering_element']['#name'] == 'hidden-save' || $form_state['triggering_element']['#name']=='role-status-upd-hidden-save') {
    $form_state['role_action_status'] = $form_state['triggering_element']['#ajax']['roleActionStatus'];
    $form_state['hidden-save-submit']=true;
    $form_state['esign_show_popup']= false;
    return;
  }
	if ($form_state['triggering_element']['#id'] == 'add_usr_pg_next') { expDebug::dPrint("add edit Validate herrrrr : 1");
      $form_state['display_class']   = TRUE;
      $form_state['input']           = array();
      $form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['step'] = 'view';
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
      return;
    }
    if ($form_state['triggering_element']['#id'] == 'add_usr_pg_first') {
    	expDebug::dPrint("add edit Validate herrrrr : 2");
    	$form_state['display_class']   = TRUE;
    	$form_state['input']           = array();
    	$form_state['values']          = array();
    	$form_state['rebuild']         = TRUE;
    	$form_state['storage']['step'] = 'view';
    	$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
    	return;
    }
    if ($form_state['triggering_element']['#id'] == 'add_usr_pg_last') {
    	expDebug::dPrint("add edit Validate herrrrr : 3");
    	$form_state['display_class']   = TRUE;
    	$form_state['input']           = array();
    	$form_state['values']          = array();
    	$form_state['rebuild']         = TRUE;
    	$form_state['storage']['step'] = 'view';
    	$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
    	return;
    }
    }catch (Exception $ex) {
    	watchdog_exception('exp_sp_administration_role_addedit_form_validate', $ex);
    	expertusErrorThrow($ex);
    }
}
function exp_sp_administration_role_attaching_user_form($form, &$form_state, $renderMode, $roleId) {
 try {
	include_once(drupal_get_path('module', 'exp_sp_administration_role') .'/exp_sp_administration_role.inc');
		  $form = array();
		  $form['#prefix'] = (( stripos($_SERVER['HTTP_USER_AGENT'], 'Chrome') || stripos($_SERVER['HTTP_USER_AGENT'], 'Firefox') ) ? '</form>' : '' ) .'<div id="role-detail-wrapper">';
      $form['#suffix'] = '</div>';
		  addHiddenFieldToAddEditForm($form, 'hiddengptype','usrtit');

      $form['edit-class-details-start'] = array(
          '#prefix' => "<div id='catalog-class-addedit-form-details'>",
        );
      expDebug::dPrint('RoleID--'.$form_state['role_id'],5);
      if(!empty($roleId)) {
        $form_state['storage']['roleId'] = $roleId;
      }
      else{
         $roleId = $form_state['role_id'];
         $form_state['storage']['roleId'] = $roleId;
      }
      if(!empty($form_state['mode'])){
      	$displayMode = $form_state['mode'];
      	$form_state['storage']['$mode'] = $displayMode;
      }else{
      	$displayMode = 'add';
      	$form_state['storage']['$mode'] = $displayMode;
      }
      //unset($form_state['RoleAddUsers_form_triggering_element']);
      if(isset($addAttributes))
      	unset($addAttributes['onclick']);
      // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
      // $addAttributes['class'][] = 'addedit-form-expertusone-throbber narrow-search-actionbar-orange-btnBG';
       $addAttributes['class'][] = 'narrow-search-actionbar-orange-btnBG';
      //$addAttributes['onclick'][] = '$(document).ready(function(){ addClassDetails('.$courseId.') }); remove_messages("class");';
      // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
      $addAttributes['data-wrapperid'] = array('role-detail-wrapper');
      $form['add-class-list'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="add-class-list-wrapper">'
      );
       // Users Search auto-complete start
     $paintMultiAction  = "<div id='search-list-class-title-keyword' class='search-list-keyword' style='display:block;'>";
     $paintMultiAction .= "<span id='search-dropdwn-list-class'>";
     $paintMultiAction .= "<input type='hidden' id='search_all_user_type-hidden' value='usrtit' />";
     $paintMultiAction .= "<input type='hidden' id='username-search-autocomplete_hidden' value='".t('LBL181')."' />";
     $paintMultiAction .= "<span id='select-list-class-dropdown' class='select-list-dropdown-class'>".t('LBL054')."</span>";
     $paintMultiAction .= "<a id='admin-dropdown-arrow' class='select-list-class-dropdown-link dropdown-link-font ' onclick='$(\"#root-admin\").data(\"narrowsearch\").moreClassSearchHideShow();'> </a>";
     $paintMultiAction .= "<ul id='select-list-class-dropdown-list'>";
     $paintMultiAction .= "<li onclick=\"$('#root-admin').data('narrowsearch').moreClassSearchTypeText('".t('LBL054')."','usrtit');\">".t('LBL054')."</li>";
     $paintMultiAction .= "<li onclick=\"$('#root-admin').data('narrowsearch').moreClassSearchTypeText('".t('LBL691')."','fultit');\">".t('LBL691')."</li>";
     $paintMultiAction .= "</ul>";
     $paintMultiAction .= "</span></div>";

     $form['class_multi_search_container'] = array(
     '#type' => 'markup',
     '#markup' => '<div class="admin_class_multi_search_container">',
     );
     $form['more_add_enrolluser_search'] = array(
     '#type' => 'markup',
     '#markup' => $paintMultiAction,
     );
     $form['class_auto-search'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="admin-class-auto-search-container">',
      );
      $userSearchType = '';
      $userSearchType = $form_state['storage']['search_usr_type'];
      // onload="$(\'#root-admin\').data(\'narrowsearch\').classDisplayPagination('.$courseId.','.$classId.');"
      $searchAjaxEvent = 'click';
     // $searchAttributes['onClick'][] = '$("body").data("mulitselectdatagrid").searchDataGrid("'.$displayMode.'", "enrolltpuser", $(\'#enrolltpuser-autocomplete\').val(), "'.$entityId.'", "'.$entityType.'", "0"); return false;';
      //$searchAttributes['onClick'][] = "getUserDetailList($roleId, 0, 0,$userSearchType);";

      $acMenuPath = "administration/people/role/user-name-autocomplete/".$roleId.'/'.'listusers';

      /*$form['add_enrolltpuser_search'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="admin_add_multi_auto_search">',
      );*/
      $default_text_title = t('LBL181');
      $autoCompleteAttributes['class'][] = 'admin_class_ac_input_mainform';
     // $autoCompleteAttributes['class'][] = 'admin_ac_class_txtbox';
      //$autoCompleteAttributes['onkeydown'][]  = '$("body").data("mulitselectdatagrid").multiSelectSearchBoxKeyDown(event)';
      $autoCompleteAttributes['onkeypress'][]   = 'disableEnrterKey(event);'; // added by vincent for prevent the enter key submit in search box
      addACFieldForMultiSelect($form, 'username-search-autocomplete', $acMenuPath, '', '', '', array(),
                                  array('search_type' => "$('#search_all_user_type-hidden').val()"), false, false,
                                  $default_text_title, $autoCompleteAttributes);

      $form['class_auto-search-end'] = array(
      '#type' => 'markup',
      '#markup' => '</div>',
      );


   /*
     // $searchAttributes['Class'][] = 'admin-pagination-new-search-go';
       $searchAttributes['Class'][] = 'admin-pagination-search-go';

       $form['search_classuser'] = array(
        '#type' => 'submit',
        '#id'   => 'search_add_role_usr',
        '#title' => t('LBL304'),
        '#name' => 'Search autosearch',
        '#value' => ' ',//0018602: issue in training plan
        //'#submit' => array('search_enrolltpuser'),
        '#attributes' => $searchAttributes,
        /*'#ajax' => array(
          'event' => $searchAjaxEvent,
        ),
      );*/

      $searchAttributes['class'][] = 'admin-pagination-role-search-go';
      $searchAttributes['class'][] = 'addedit-form-expertusone-throbber';
      //$searchAttributes['data-wrapperid'] = 'role-detail-wrapper';
      $wrapperId                     =	'role-detail-wrapper';
      $searchAttributes['data-wrapperid'][] = $wrapperId;
      //$searchAttributes['onclick'][] = "getUsersearch();";   //
       $form['search_addusers'] = array(
        '#type' => 'button',
        '#id'   => 'search_addusers',
        '#title' => t('LBL304'),
        '#value' => ' ',
        '#name' => 'Search role users',
        //'#submit' => array('search_enrolltpuser'),
        '#attributes' => $searchAttributes,
        '#ajax' => array(
                  'wrapper' => $wrapperId,
                  'callback' => 'role_add_user_autocomplete_callback',
                  'method' => 'replace',
                  'effect' => 'none',
                  'event'=>'click',
			   				  //'question_pgn_page' => 1,*/
			   				  'role_id' =>$roleId,
                  'getuserName'=> $form_state['values']['username-search-autocomplete_hide'],
                  'keypress' => true,
                  'progress' => array(
                    'type' => 'throbber',
                    'message' => ''
                  ),
                )
      );
      $form['class_multi_search_container-end'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="filter-search-start-date-right-bg"></div></div>',
      );
      //expDebug::dPrint(' unset($form_state[storfdgtywe--->'.print_r($displayMode,true),5);
       if($displayMode != 'view'){
        $entityId          	 =  $roleId;
        $entityType        	 = 'cre_sec';
        $qtipIdInit        	 = $entityId.'_'.$entityType;
        $qtipOptClassObj     = "{'url':'administration/people/role/user-addedit/".$roleId."/".$entityType."','popupDispId':'qtip_addusers_visible_disp_".$qtipIdInit."','catalogVisibleId':'qtipAttachIdqtip_addusers_visible_disp_".$qtipIdInit."','wBubble':544,'hBubble':'auto','tipPosition':'bottomRight','qtipClass':'qtip-parent-adduser','courseId':'".$roleId."'}";

        $form['add-users-button'] = array(
          '#type' => 'markup',
          '#prefix' => "<div id='qtip_addusers_visible_disp_".$qtipIdInit."' onmousedown =\"$('#root-admin').data('narrowsearch').getBubblePopup(".$qtipOptClassObj."); return false;\"  class='admin-save-button-container add-class-button'><div class='narrow-search-actionbar-orange-btnLeft'></div><div class='narrow-search-actionbar-orange-btnBG'>",
          '#suffix' => t("LBL1038").'</div><div class="narrow-search-actionbar-orange-btnRight"></div></div>',
          '#value' => t("LBL1038"),
          '#name' => "Add Users",
          '#limit_validation_errors' => array(),
          '#attributes' => $addAttributes,
        );

      }
          /* ------------------------------------Start Pagination----------------------------*/

  $pg_page     = 1;
  $start       = 0;
  $limit       = 10;
  if(!empty($form_state['storage']['search_add_users'])){
    $userName = $form_state['storage']['search_add_users'];
    $userSearchType = $form_state['storage']['search_usr_type'];

  }else{
    $userName='';
    $userSearchType ='';
  }
  expDebug::dPrint('role id 111---'.$roleId. ' === '. $userName . '===' .$userSearchType);
  $addUsrListCount = getUserDetailList($roleId, 0, 0,$userName,$userSearchType);
  $addUsrListCount = count($addUsrListCount);
  if( $addUsrListCount > 0 ){
    $total_pages = ceil($addUsrListCount/$limit);
  }else{
    $total_pages = 0;
  }

  if($pg_page > $total_pages) {
  	$pg_page = $total_pages;
  }
  if(!empty($form_state['storage']['page'])) {
    $pg_pagenew  = $form_state['storage']['page'];
      if($pg_pagenew > $total_pages){
         $pg_page  = $form_state['storage']['page']- 1;
          $form_state['storage']['page'] = $pg_page;
         $start    = ($limit * $pg_page) - $limit ;
      }else{
         $pg_page  = $form_state['storage']['page'];//$form_state['question_pgn_page'];
         $start    = ($limit * $pg_page) - $limit ;
       }
  }

  if($start < 0) {
  	$start = 0;
  }

  if($addUsrListCount > 10 ){
    $displayPageStyle = "display:block;";
  }else{
    $displayPageStyle = "display:none;";
  }
  expDebug::dPrint('role id 222---'.$addUsrListCount);
  $userList = getUserDetailList($roleId, $start, $limit,$userName,$userSearchType);
  expDebug::dPrint( 'sabee display user list------> '.print_r($userList,true),4);

  /* ------------------------------------End Pagination----------------------------*/
	if($addUsrListCount == 0){
        if (empty($form_state['storage']['search_add_users'])) {
        	$userListMsg = t('MSG627');
      	}
      	else {
      	  $userListMsg = t('MSG381').'.';
      	}
        $form['no-users-list'] = array(
          '#type' => 'item',
          '#prefix' => '<div class="clearBoth"></div><div class="nonlist" id="no-users-list">' .  $userListMsg,
          '#suffix' => '</div>',
        );
      }
      else{
         $deleteTxt = "<td width='5%' class='adduser-title-heading' style='border-left:0'>&nbsp;</td>";
          global $theme_key;
          if($theme_key == 'expertusoneV2') {
                $form['heading-add-user'] = array(
                '#type' => 'markup',
                '#prefix' => "<div class='edit-adduser-list'><div class='edit-adduser-list-grid'><table class='adduser-table-heading' cellpadding='0' cellspacing='0' border='0' width='100%'><tr height='26px'>",
                '#suffix' =>  "<td width='30%' style='padding-left: 15px;border-left:0' class='adduser-title-heading user-list-header user-title-head-pad'>".t('LBL054')."</td>
                			   <td width='45%' class='adduser-title-heading'>".t('LBL691')."</td>
                			   <td width='18%' class='adduser-title-heading user-title-head-status'>".t('LBL102')."</td>
                			   ".$deleteTxt."
                			   <td width='5%' class='adduser-title-heading' style='border-left:0'>&nbsp;</td>
                			   </tr></table><table class='adduser-table-heading'>",
              );
          }else
          {
          	 $form['heading-add-user'] = array(
                '#type' => 'markup',
                '#prefix' => "<div class='edit-adduser-list'><div class='edit-adduser-list-grid'><table class='adduser-table-heading' cellpadding='0' cellspacing='0' border='0' width='100%'><tr height='30px'>",
                '#suffix' =>  "<td width='30%' style='padding-left: 15px;' class='adduser-title-heading user-list-header user-title-head-pad'>".t('LBL054')."</td>
                			   <td width='45%' class='adduser-title-heading'>".t('LBL691')."</td>
                			   <td width='18%' class='adduser-title-heading user-title-head-status'>".t('LBL102')."</td>
                			   ".$deleteTxt."
                			   <td width='5%' class='adduser-title-heading'>&nbsp;</td>
                			   </tr></table><table class='adduser-table-heading'>",
              );
          }
              expDebug::dPrint( 'sabeee before for'.count($userList));
               for($i=0;$i<count($userList);$i++) {
               	expDebug::dPrint( 'sabeee inside for-----');
                						$uniqueId = $roleId.'-'.$userList[$i]->user_id.'-';
                						$dynamic_cos_id      =    $userList[$i]->user_id;
                 					  $dynamic_div         =	"delete_all_".$uniqueId;

                 					  $username = $userList[$i]->uname;
    		           					$displayName  = titleController('ADMIN-ROLE-UNAME', $username,13);

                 					  $form['edit-adduser-uname-list-'.$i] = array(
	               									'#type' => 'markup',
                    							'#prefix' =>  "<tr><td width='30%' style='padding-left:15px;line-height:25px;' class='user-list-detail user-title-head-pad-username'><span class='vtip' title='". sanitize_data($userList[$i]->uname)."'>". $displayName."",
                   								'#suffix' =>  "</span></td>",
              							);

              							$fullname = $userList[$i]->fname;
    		           					$displayName  = titleController('ADMIN-ROLE-FNAME', $fullname,13);

                  				 $form['edit-adduser-fname-list-'.$i] = array(
	                							 '#type' => 'markup',
                    						 '#prefix' =>  "<td width='47%' class='user-list-detail user-list-full-name'><span class='vtip' title='". sanitize_data($userList[$i]->fname)."'>". $displayName."",
                    						 '#suffix' =>  "</span></td>",
              );
              						 $userList[$i]->status = ($userList[$i]->status == 'Suspended') ? t('LBL572'): t('LBL573');
              						 if($theme_key == 'expertusoneV2') {
              						 $form['edit-adduser-status-list-'.$i] = array(
	                							 '#type' => 'markup',
                    						 '#prefix' =>  "<td width='15%'  class='user-list-detail'><span class='vtip' title='". $userList[$i]->status."'>". $userList[$i]->status."",
                   							 '#suffix' =>  "</span></td>",
              );
              						 }else{
              						 	 $form['edit-adduser-status-list-'.$i] = array(
	                							 '#type' => 'markup',
                    						 '#prefix' =>  "<td width='20%'  class='user-list-detail'><span class='vtip' title='". $userList[$i]->status."'>". $userList[$i]->status."",
                   							 '#suffix' =>  "</span></td>",
              );
              						 }
              	$deleteAttributes = array();
                $deleteAttributes['class'][]   = 'addedit-form-expertusone-throbber';
                $deleteAttributes['class'][]   = 'admin-delete-img';
                $deleteAttributes['class'][]   = 'add-user-delete';
                $wrapperId                     =	'role-detail-wrapper';
                $deleteAttributes['data-wrapperid'] = array($wrapperId);

                 if($theme_key == 'expertusoneV2') {
                 $form['delete-group-list-button-start-'.$i] = array(
                	'#type' => 'markup',
                    '#prefix' => '<td width="10%"><div class="add-user-delete" onclick="$(\'#deleteAddedUser-'.$i.'\').click();" title='.t("LBL286").'>&nbsp;</div><span style="display:none;">',
                 );
                 }else{
                 	$form['delete-group-list-button-start-'.$i] = array(
                	'#type' => 'markup',
                    '#prefix' => '<td width="5%"><div class="add-user-delete" onclick="$(\'#deleteAddedUser-'.$i.'\').click();" title='.t("LBL286").'>&nbsp;</div><span style="display:none;">',
                 );
               }

                   $form['delete-group-list-button-'.$i] = array(
                    '#type' => 'checkbox',
                    '#name' => 'deleteAddedUser-'.$i,
                    '#id' => 'deleteAddedUser-'.$i,
                    //'#prefix' => '',
                    '#suffix' => '</span></td></tr>',
                    '#attributes' => $deleteAttributes,
                    '#ajax' => array(
                         'callback'  => 'exp_sp_administration_user_delete_callback',
                       	 'wrapper'   =>'role-detail-wrapper',
                         'loop_id'   =>$i,
                     	   'user_id'   =>$userList[$i]->user_id,
                         'role_id'   =>$roleId,
                         'event'     => 'click',
                      ),
                    );


                }
                $form['heading-add-user-end'] = array(
                '#type' => 'markup',
                //'#prefix' => "<div class='edit-adduser-list'><table class='adduser-table-heading' cellpadding='0' cellspacing='0' border='0' width='100%'><tr height='30px'>",
                '#suffix' =>  "</table></div>",
              );
      }

              /* ------------------------------------Start Pagination----------------------------*/
		      $attributesFirst = array();
		      $attributesFirst['class'][] = 'addedit-form-expertusone-throbber';
		      $attributesFirst['class'][] = 'add-user-first-btn';
		      $attributesFirst['data-wrapperid'] = 'role-detail-wrapper';

		      if($pg_page == 1) {
		      	$form['adduser-pagination-first'] = array(
		      			'#type' => 'markup',
		      			'#markup' => '<div class="add-user-pagination-container" style="'.$displayPageStyle.'"><span class="add-user-first-btn"></span>', //start
		      	);
		      }else{
		      	$form['adduser-pagination-first'] = array(
		      			'#type' => 'button',
		      			'#id' => 'add_usr_pg_first',
		      			'#prefix' => '<div class="add-user-pagination-container" style="'.$displayPageStyle.'">',//(PR) Page :'.$pg_page." || start : ".$start
		      			'#suffix' => ' ',
		      			//'#value' => '<<', //attach_crs_pg_previous
		      			'#name' => 'add_user_pagination_first',
		      			'#attributes' => $attributesFirst,
		      			'#ajax' => array(
		      					'wrapper' => 'role-detail-wrapper',
		      					'callback' => 'add_user_pagination_callback',
		      					'method' => 'replace',
		      					'effect' => 'none',
		      					'event'=>'click',
		      					'question_pgn_page' => 1,
		      					'role_id' =>$roleId,
		      					'keypress' => true,
		      					'progress' => array(
		      							'type' => 'throbber',
		      							'message' => ''
		      					),
		      			)
		      	);
		      }

            $attributesPrev = array();
            $attributesPrev['class'][] = 'addedit-form-expertusone-throbber';
            $attributesPrev['class'][] = 'add-user-previous-btn';
            $attributesPrev['data-wrapperid'] = 'role-detail-wrapper';

            if($pg_page == 1) {
                 $form['adduser-pagination-previous'] = array(
                 '#type' => 'markup',
                 //'#markup' => '<div class="add-user-pagination-container" style="'.$displayPageStyle.'"><span class="add-user-previous-btn"></span>', //start
                 '#markup' => '<span class="add-user-previous-btn"></span>', //start
                 );
            }else{
             $form['adduser-pagination-previous'] = array(
                '#type' => 'button',
                '#id' => 'add_usr_pg_previous',
                //'#prefix' => '<div class="add-user-pagination-container" style="'.$displayPageStyle.'">',//(PR) Page :'.$pg_page." || start : ".$start
             		'#prefix' => '',
                '#suffix' => '',
                //'#value' => '<<', //attach_crs_pg_previous
                '#name' => 'add_user_pagination_previous',
                '#attributes' => $attributesPrev,
                '#ajax' => array(
                  'wrapper' => 'role-detail-wrapper',
                  'callback' => 'add_user_pagination_callback',
                  'method' => 'replace',
                  'effect' => 'none',
                  'event'=>'click',
   				        'question_pgn_page' => ($pg_page-1),
   				       'role_id' =>$roleId,
                  'keypress' => true,
                  'progress' => array(
                    'type' => 'throbber',
                    'message' => ''
                  ),
                )
               );
            }


            $attributesCenter = array();
            $attributesCenter['class'][] = 'addedit-form-expertusone-throbber';
            $attributesCenter['data-wrapperid'] = 'role-detail-wrapper';

            $form['adduser-pagination-total-txt-1'] = array(
              '#type' => 'textfield',
              '#id' => 'add_usr_pg_txtfld',
              '#name' => 'add_usr_pg_txtfld',
              '#prefix' => '<div class="tot-txt-cls">',
              '#suffix' =>  '<span style="float:right;padding-top:3px;">'.'&nbsp;'.'of&nbsp;&nbsp;'.$total_pages.'&nbsp;</span></div>',
              //'#default_value' => 1,
              '#value' => $pg_page,
              '#attributes' => $attributesCenter,
              '#size' => 1,
              '#ajax' => array(
                     'callback' => 'add_user_pagination_callback',
                   	 'wrapper' =>'role-detail-wrapper',
                     'question_pgn_page' => $pg_page,
   				           'role_id' =>$roleId,
                     'event' => 'change',
                  ),

             );


            $attributesNxt = array();
            $attributesNxt['class'][] = 'addedit-form-expertusone-throbber';
            $attributesNxt['class'][] = 'add-user-next-btn';
            $attributesNxt['data-wrapperid'] = 'role-detail-wrapper';

            if($pg_page == $total_pages) {
                 $form['adduser-pagination-next'] = array(
                 '#type' => 'markup',
                '#markup' => '<span class="add-user-next-btn"></span>',
                 );
            }else{
                 $form['adduser-pagination-next'] = array(
                 '#type' => 'button',
                '#id' => 'add_usr_pg_next',
                '#prefix' => '',//(NX) Page :'.$pg_page." || start : ".$start
                //'#suffix' => '</div>',
                '#suffix' => '',
                '#value' => ' ', //add_usr_pg_next
                '#name' => 'add_user_pagination_next',
                '#attributes' => $attributesNxt,
                '#ajax' => array(
                  'wrapper' => 'role-detail-wrapper',
                  'callback' => 'add_user_pagination_callback',
                  'method' => 'replace',
                  'effect' => 'none',
                  'event'=>'click',
                  'question_pgn_page' => ($pg_page+1),
   				        'role_id' =>$roleId,
                  'keypress' => true,
                  'progress' => array(
                    'type' => 'throbber',
                    'message' => ''
                  ),
                )
               );
            }
            $attributesLast = array();
            $attributesLast['class'][] = 'addedit-form-expertusone-throbber';
            $attributesLast['class'][] = 'add-user-last-btn';
            $attributesLast['data-wrapperid'] = 'role-detail-wrapper';

            if($pg_page == $total_pages) {
            	$form['adduser-pagination-last'] = array(
            			'#type' => 'markup',
            			'#markup' => '<span class="add-user-last-btn"></span></div>',
            	);
            }else{
            	$form['adduser-pagination-last'] = array(
            			'#type' => 'button',
            			'#id' => 'add_usr_pg_last',
            			'#prefix' => ' ',//(NX) Page :'.$pg_page." || start : ".$start
            			'#suffix' => '</div>',
            			'#value' => ' ', //add_usr_pg_next
            			'#name' => 'add_user_pagination_last',
            			'#attributes' => $attributesLast,
            			'#ajax' => array(
            					'wrapper' => 'role-detail-wrapper',
            					'callback' => 'add_user_pagination_callback',
            					'method' => 'replace',
            					'effect' => 'none',
            					'event'=>'click',
            					'question_pgn_page' => $total_pages,
            					'role_id' =>$roleId,
            					'keypress' => true,
            					'progress' => array(
            							'type' => 'throbber',
            							'message' => ''
            					),
            			)
            	);
            }
         /* ------------------------------------End Pagination----------------------------*/
       return $form;
       }catch (Exception $ex) {
       	watchdog_exception('exp_sp_administration_role_attaching_user_form', $ex);
       	expertusErrorThrow($ex);
       }
}
 function exp_sp_administration_user_delete_callback($form, &$form_state){
     expDebug::dPrint( 'Delete Call back() $form_state[triggering_element] = ' . print_r($form_state['triggering_element'], true) , 5);
 		 try {

 		 	$triggeringElement = $form_state['triggering_element'];

      expDebug::dPrint( '$triggeringElement1 = ' .$triggeringElement['#ajax']['user_id']);
      expDebug::dPrint( '$triggeringElement2 = ' .$triggeringElement['#ajax']['role_id']);

      //$actionCheck = explode("-", $triggeringElement['#name']);

      $userId = $triggeringElement['#ajax']['user_id'];
      $roleId = $triggeringElement['#ajax']['role_id'];
      $entityType = $triggeringElement['#ajax']['entity_type'];
      deleteUserRole($roleId,$entityType,$userId);
      $min_form_state = array(
       'ajax' => TRUE,
       're_render' => TRUE,
       'no_redirect' => TRUE,
       'role_id' => $roleId,
       'user_id' =>  $userId,
       'build_info' => array('args' => array('ajax'))
      );

      $form_state = $min_form_state;

      expDebug::dPrint('exp_sp_administration_user_delete_callback formstateee : '.print_r($form_state,true) , 5);

      $formId = 'exp_sp_administration_role_attaching_user_form';
      $builtForm = drupal_build_form($formId, $form_state);

      $commands = array();
      $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));
      $commands[] = ajax_command_refresh_narrow_search_results('onclose');
      return array(
            '#type' => 'ajax',
            '#commands' => $commands
      );
  	} catch (Exception $ex) {
    	watchdog_exception('exp_sp_administration_user_delete_callback', $ex);
    	expertusErrorThrow($ex);
 	 	}

	}
function role_add_user_autocomplete_callback__($form, &$form_state){
			try{
			expDebug::dPrint('role_add_user22: '.print_r($form_state['triggering_element']['#ajax']['role_id'],true));
 			//$userId = $triggeringElement['#ajax']['user_id'];
 			$roleId = $form_state['triggering_element']['#ajax']['role_id'];
 			//$getuserName =$form_state['triggering_element']['#ajax']['getuserName'] ;
 			$form_state = array();
 			$form_state['rebuild'] = TRUE;

      $min_form_state = array(
       'ajax' => TRUE,
       're_render' => TRUE,
       'no_redirect' => TRUE,
       'role_id' => $roleId,
       'build_info' => array('args' => array('ajax'))
      );

      $form_state = $min_form_state;

      //$form_state['storage']['page'] = $question_pgn_page;
      //expDebug::dPrint('attached Coursese : '.print_r($form_state,true) , 5);
      $formId = 'exp_sp_administration_role_attaching_user_form';
      $builtForm = drupal_build_form($formId, $form_state);
    	//expDebug::dPrint('attached Coursese : '.print_r($builtForm,true));
      $commands = array();
      $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));
      return array(
            '#type' => 'ajax',
            '#commands' => $commands
      );

			}catch (Exception $ex) {
    	watchdog_exception('role_add_user_autocomplete_callback__', $ex);
    	expertusErrorThrow($ex);
 	 	}
}

function role_add_user_autocomplete_callback($form, &$form_state){
	try {
	expDebug::dPrint('role_add_user22: '.print_r($form_state['triggering_element']['#ajax']['role_id'],true));
 	//$userId = $triggeringElement['#ajax']['user_id'];
 	$roleId = $form_state['triggering_element']['#ajax']['role_id'];
  $form_state = array();
  $form_state['rebuild'] = TRUE;
  $min_form_state = array(
    'ajax' => TRUE,
    're_render' => TRUE,
    'no_redirect' => TRUE,
    'role_id' => $roleId,
    'build_info' => array('args' => array('ajax'))
  );
  $form_state = $min_form_state;

  $formId = 'exp_sp_administration_role_attaching_user_form';
  $builtForm = drupal_build_form($formId, $form_state);

  $commands = array();
  $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
  }catch (Exception $ex) {
  	watchdog_exception('role_add_user_autocomplete_callback', $ex);
  	expertusErrorThrow($ex);
  }
}
function add_user_pagination_callback($form, &$form_state){
  try {
    expDebug::dPrint('page call'.$form_state['triggering_element']['#ajax']['role_id']);
    expDebug::dPrint('page callddd'.$form_state['triggering_element']['#ajax']['question_pgn_page']);
    $roleId = $form_state['triggering_element']['#ajax']['role_id'];
    $question_pgn_page    = $form_state['triggering_element']['#ajax']['question_pgn_page'];


    $form_state = array();

    $form_state['rebuild'] = TRUE;

      $min_form_state = array(
       'ajax' => TRUE,
       're_render' => TRUE,
       'no_redirect' => TRUE,
       'program_id' => $roleId,
      'question_pgn_page' => $question_pgn_page,
       'build_info' => array('args' => array('ajax'),'question_pgn_page' => $question_pgn_page)
      );

      $form_state = $min_form_state;

     //$form_state['storage']['page'] = $question_pgn_page;

      expDebug::dPrint('add_user_pagination_callback: '.print_r($form_state,true) , 5);

      $formId = 'exp_sp_administration_role_attaching_user_form';
      $builtForm = drupal_build_form($formId, $form_state);

      $commands = array();
      $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));

      return array(
            '#type' => 'ajax',
            '#commands' => $commands
      );

      }catch (Exception $ex) {
      	watchdog_exception('add_user_pagination_callback', $ex);
      	expertusErrorThrow($ex);
      }
}
function exp_sp_administration_role_attaching_user_form_validate($form, &$form_state){
	try {
  if ($form_state['triggering_element']['#id'] == 'add_usr_pg_txtfld') { expDebug::dPrint("Validate herrrrr : 3");
      $form_state['display_class']   = TRUE;
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['step'] = 'view';
      $form_state['storage']['page'] = $form_state['input']['add_usr_pg_txtfld'];//$form_state['triggering_element']['#ajax']['question_pgn_page'];//
      return;
    }

    if ($form_state['triggering_element']['#id'] == 'add_usr_pg_next') { expDebug::dPrint("Validate herrrrr : 1");
      $form_state['display_class']   = TRUE;
      $form_state['input']           = array();
      $form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['step'] = 'view';
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
      return;
    }

    if ($form_state['triggering_element']['#id'] == 'add_usr_pg_previous') {expDebug::dPrint("Validate herrrrr : 2");
      $form_state['display_class']   = TRUE;
      $form_state['input']           = array();
      $form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['step'] = 'view';
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
      return;
    }
    if ($form_state['triggering_element']['#id'] == 'add_usr_pg_first') {
    	expDebug::dPrint("Validate herrrrr : 4");
    	$form_state['display_class']   = TRUE;
    	$form_state['input']           = array();
    	$form_state['values']          = array();
    	$form_state['rebuild']         = TRUE;
    	$form_state['storage']['step'] = 'view';
    	$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
    	return;
    }
    if ($form_state['triggering_element']['#id'] == 'add_usr_pg_last') {
    	expDebug::dPrint("Validate herrrrr : 5");
    	$form_state['display_class']   = TRUE;
    	$form_state['input']           = array();
    	$form_state['values']          = array();
    	$form_state['rebuild']         = TRUE;
    	$form_state['storage']['step'] = 'view';
    	$form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];
    	return;
    }

if ($form_state['triggering_element']['#id'] == 'search_addusers') {expDebug::dPrint("Validating ..");
      $form_state['storage']['search_add_users'] = $form_state['values']['username-search-autocomplete'];
      $form_state['storage']['search_usr_type']     = $form_state['values']['hiddengptype'];//search_usr_type
      $form_state['display_class']   = TRUE;
      $form_state['input']           = array();
      $form_state['values']          = array();
      $form_state['rebuild']         = TRUE;
      $form_state['storage']['step'] = 'view';
      $form_state['storage']['page'] = $form_state['triggering_element']['#ajax']['question_pgn_page'];

      return;
    }
    }catch (Exception $ex) {
    	watchdog_exception('exp_sp_administration_role_attaching_user_form_validate', $ex);
    	expertusErrorThrow($ex);
    }
}


function exp_sp_administration_role_permission() {
	try {
    return array(
    'Security Admin Perm' => array(
      'title' => t('Security Admin Perm')
    )
  );
    }catch (Exception $ex) {
    	watchdog_exception('exp_sp_administration_role_permission', $ex);
    	expertusErrorThrow($ex);
    }
}

function addUsersDetailsList($form, &$form_state) {
expDebug::dPrint(' addUsersDetailsListaddUsersDetailsList ');
	include_once(drupal_get_path('module', 'exp_sp_administration_role') .'/exp_sp_administration_role.inc');
  $txn = db_transaction();
  try {
    expDebug::dPrint('$_POST = ' . print_r($_POST, true), 5);
    expDebug::dPrint('$form_state[values] = ' . print_r($form_state['triggering_element']['#ajax']['role_id'], true), 5);
    expDebug::dPrint('$form_state[values] 2 = ' . print_r($form_state['triggering_element']['#ajax']['user_id'], true), 5);
    $roleId = $form_state['triggering_element']['#ajax']['role_id'];
    $userId = $form_state['user_id'];
    $uniqueId  = "RoleAddUsers-$roleId-$userId";
    expDebug::dPrint(' UNIQUE '.$uniqueId);
    expDebug::dPrint('$_POST[hidden_idlist_ = ' . $_POST['hidden_idlist_' . $uniqueId], 5);
    $associateIdListArray = '';
    expDebug::dPrint(' sabeeenn ---> '.$form_state['input']['hidden_idlist_'.$uniqueId].'----->'.$form_state['input']['hidden_idlist_'.$uniqueId]);
    if(!empty($form_state['input']['hidden_idlist_'.$uniqueId]) || !empty($form_state['hidden_idlist_'.$uniqueId])){
      expDebug::dPrint(' UNIQUE IDDDDDDDD ---> insiddddeeeeee');
      $userId = getSltpersonUserId();
      if (!empty($form_state['input']['hidden_idlist_'.$uniqueId])) {
      		$associateIdListArray = $form_state['input']['hidden_idlist_'.$uniqueId];
      }
      else {
        $associateIdListArray = $form_state['hidden_idlist_'.$uniqueId];
      }
      $newUserList=$_POST['hidden_idlist_' . $uniqueId];
      $existingUsersList = getRoleUserListField($roleId);
      $updateUser = db_update('slt_security_role');
      $updateUser->condition('id', $roleId, '=');
      $updateUser->fields(array(
                        'userlist'       =>  ((empty($existingUsersList)) ? '' : $existingUsersList . ',') .
                                             $newUserList,
          'updated_on'    => now(),
          'updated_by'    => $userId
      ));
      expDebug::dPrintDBAPI('QUERY DEFAULT ---> ', $updateUser);
     	$updateUser->execute();
     	//
     	$select = db_select('role','role');
     	$select->join('slt_security_role','srole','role.name=srole.name');
     	$select->addField('role','rid','rid');
     	$select->addField('srole','status','status');
     	$select->condition('srole.id',$roleId,'=');
     	expDebug::dPrintDBAPI('Fetch role Id ' , $select);
     	$query =$select->execute()->fetchAll();
     	$role_id =$query[0]->rid;
     	$status = $query[0]->status;
     	if(!empty($newUserList) && ($status!='cre_sec_sts_itv')){
     	  $newUserListArray = explode(',',$newUserList);
     	  foreach($newUserListArray as $new){
     	    $results = db_select('users','usr');
     	    $results->join('slt_person','per','usr.name=per.user_name');
     	    $results->addField('usr','uid','uid');
     	    $results->condition('per.id',$new,'=');
     	    $usersId = $results->execute()->fetchField();

     	    $select1 = db_insert('users_roles');
     	    $select1->fields(array('uid' => $usersId, 'rid' => $role_id));
     	    expDebug::dPrintDBAPI('Insert userlist ' , $select1);
     	    $select1->execute();
     	    if($roleId == 3){
     	      $updatesmt = db_update('slt_person');
     	      $updatesmt->condition('id', $new, '=');
     	      $updatesmt->fields(array(
     	          'is_instructor' => 'Y'
     	      ));
     	      expDebug::dPrintDBAPI('QUERY DEFAULT slt_person instructor---> ', $updatesmt);
     	      $updatesmt->execute();
     	    }
     	    if($roleId == 2){
     	      $updatesmt = db_update('slt_person');
     	      $updatesmt->condition('id', $new, '=');
     	      $updatesmt->fields(array(
     	          'is_manager' => 'Y'
     	      ));
     	      expDebug::dPrintDBAPI('QUERY DEFAULT slt_person manager---> ', $updatesmt);
     	      $updatesmt->execute();
     	    }

     	  }
     	}
      //Audit Trail Entry
     	expDebug::dPrint('existing list'.$existingUsersList);
     	$entityType = 'cre_sec';
     	$updatedUsersList['user_list'] = getRoleUserListField($roleId);
     	$existUsersList[0]->user_list = $existingUsersList;
     	expDebug::dPrint('existing list'.print_r($existUsersList,true));
      make_audit_trail_entries($updatedUsersList, getIdOfLoggedInUser() , $existUsersList ,$roleId, 'Updated', $entityType, 'exp_sp_administration_role',
          'UpdatedUserlist', array('user_list'));
      //$form_state['storage']['mode']='view';
      $form_state['rebuild'] = TRUE;
      //return;
    }

  }
  catch (Exception $ex) {
    $txn->rollback();
    watchdog_exception('addUsersDetailsList', $ex);
    throw $ex;
  }

  unset($txn); // Commit txn

}


function display_assigned_users($form, &$form_state) {
	try {
	include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_role') .'/exp_sp_administration_role.inc');
	$role_id = $form_state['role_id'];
	$userId= $form_state['user_id'];
	$entityType = 'cre_sec';
	$excludedRoleId = '';
	$uniqueId = "RoleDisplayUsers-$role_id-$entityType";
	$wrapperId = 'security-role-detail-wrapper-list';
	$form = array();
	$form['#prefix'] = (( stripos($_SERVER['HTTP_USER_AGENT'], 'Chrome') || stripos($_SERVER['HTTP_USER_AGENT'], 'Firefox') )? '</form>' : '' ) .'<div id="security-role-detail-wrapper-list">';
	$form['#suffix'] = '</div>';
	$setminHight =  'admin-add-users-tab-datagrid-wrapper';
	$form['edit-class-details-start'] = array(
	  '#prefix' => "<div id='add-user-role-page'>",
	);

	if(isset($addAttributes))
      	unset($addAttributes['onclick']);

  $form['add-class-list'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="catalog-class-addedit-form-details"><div id="add-class-list-wrapper">'
  );
  $paintMultiAction  = "<div id='search-list-class-title-keyword' class='search-list-keyword' style='display:block;'>";
     $paintMultiAction .= "<span id='search-dropdwn-list-class'>";
     $paintMultiAction .= "<input type='hidden' id='search_all_user_type-hidden' value='usrtit' />";
     $paintMultiAction .= "<input type='hidden' id='username-search-autocomplete_hidden' value='".t('LBL181')."' />";
     $paintMultiAction .= "<span id='select-list-class-dropdown' class='select-list-dropdown-class'>".t('LBL054')."</span>";
     $paintMultiAction .= "<a id='admin-dropdown-arrow' class='select-list-class-dropdown-link dropdown-link-font ' onclick='$(\"#root-admin\").data(\"narrowsearch\").moreClassSearchHideShow();'> </a>";
     $paintMultiAction .= "<ul id='select-list-class-dropdown-list'>";
     $paintMultiAction .= "<li onclick=\"$('#root-admin').data('narrowsearch').moreClassSearchTypeText('".t('LBL054')."','usrtit');\">".t('LBL054')."</li>";
     $paintMultiAction .= "<li onclick=\"$('#root-admin').data('narrowsearch').moreClassSearchTypeText('".t('LBL691')."','fultit');\">".t('LBL691')."</li>";
     $paintMultiAction .= "</ul>";
     $paintMultiAction .= "</span></div>";

     $form['class_multi_search_container'] = array(
     '#type' => 'markup',
     '#markup' => '<div class="role_multi_search_container">', //class="admin_class_multi_search_container"
     );
     $UserList=fetchUserListToRole($role_id,'');
     $Usercount=count($UserList->execute()->fetchAll());
     expDebug::dPrint('userscount'.count($Usercount));
     if($Usercount !=0){
     		$form['more_add_enrolluser_search'] = array(
     		'#type' => 'markup',
     		'#markup' => $paintMultiAction,
     		);

     		$form['class_auto-search'] = array(
      	'#type' => 'markup',
      	'#markup' => '<div class="admin-class-auto-search-container">',
      	);
      	$userSearchType = '';
      	$userSearchType = $form_state['storage']['search_usr_type'];
      	// onload="$(\'#root-admin\').data(\'narrowsearch\').classDisplayPagination('.$courseId.','.$classId.');"
      	$searchAjaxEvent = 'click';
      	$excludedRoleId =0;
     		// $searchAttributes['onClick'][] = '$("body").data("mulitselectdatagrid").searchDataGrid("'.$displayMode.'", "enrolltpuser", $(\'#enrolltpuser-autocomplete\').val(), "'.$entityId.'", "'.$entityType.'", "0"); return false;';
      	$searchAttributes['onClick'][] = '$("body").data("mulitselectdatagrid").searchDataGrid("edit", "RoleDisplayUsers", $(\'#username-search-autocomplete\').val(), "'.$role_id.'", "'.$userId.'", "'.$excludedRoleId .'"); return false;';

      	$acMenuPath = "administration/people/role/user-name-autocomplete/".$role_id.'/'.'listusers';

      	$default_text_title = t('LBL181');
      	$autoCompleteAttributes['class'][] = 'admin_class_ac_input_mainform';
     		// $autoCompleteAttributes['class'][] = 'admin_ac_class_txtbox';
     		$autoCompleteAttributes['onkeydown'][]  = '$("body").data("mulitselectdatagrid").multiSelectSearchBoxKeyDown(event)';
      	addACFieldForMultiSelect($form, 'username-search-autocomplete', $acMenuPath, '', '', '', array(),
                                  array('search_type' => "$('#search_all_user_type-hidden').val()"), false, false,
                                  $default_text_title, $autoCompleteAttributes);

      	$form['class_auto-search-end'] = array(
      	'#type' => 'markup',
      	'#markup' => '</div>',
      	);

      	$searchAttributes['class'][] = 'admin-pagination-role-search-go';
      	$searchAttributes['class'][] = 'addedit-form-expertusone-throbber';
      	/*$wrapperId                     =	'role-detail-wrapper';
      	$searchAttributes['data-wrapperid'][] = $wrapperId; */
      	$searchAttributes['data-wrapperid'][] = 'security-role-detail-wrapper-list';
      	//$searchAttributes['onClick'][] = "getUserDetailList($roleId,); ";
       	$form['search_add_urs'] = array(
        	'#type' => 'submit',
        	'#id'   => 'search_add_urs',
        	'#title' => t('LBL304'),
        	'#value' => ' ',
        	'#name' => 'Search role users',
        	//'#submit' => array('search_enrolltpuser'),
        	'#attributes' => $searchAttributes,
        	'#ajax' => array(
                  'wrapper' => 'security-role-detail-wrapper-list',
                  //'callback' => 'role_add_user_autocomplete_callback',
                  'method' => 'replace',
                  'effect' => 'none',
                  'event'=>'click',
			   				  'question_pgn_page' => 1,
			   				  'program_id' =>$role_id,
                  'get_attached_course_name'=> $form_state['values']['username-autocomplete_hidden'],
                  'keypress' => true,
                  'progress' => array(
                    'type' => 'throbber',
                    'message' => ''
                  	),
                )
      	);
      	$form['class_multi_search_container-end'] = array(
      	'#type' => 'markup',
      	'#markup' => '<div class="filter-search-start-date-right-bg"></div></div>',
      	);
     //}
	$form['edit-class-details-paginate'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="admin-add-course-training-plan" class="display_user_list"><div id="role-'.$wrapperId.'" class="admin-datagrid-pagination '.$setminHight.'">',
    '#suffix' => '<div>',
  );
  $form['role_user_view_grid_markup'] = array(
      '#type' => 'markup',
      '#markup' => '<div id="datagrid-div-'.$uniqueId.'"><table id="datagrid-container-'.$uniqueId.'" class="datagrid-container-common"></table><div id="pager-datagrid-'.$uniqueId.'" class="pager-datagrid-common" style="display:none;"></div></div>',
   );
	$form['role_user_grid_load'] = array(
	  '#type' => 'markup',
	  '#prefix' => '<div style="display:block"><img src="themes/seven/images/buttons.png" width="0" height="0" onload="$(\'body\').data(\'mulitselectdatagrid\').createLoader(\'datagrid-div-'.$uniqueId.'\'); $(\'body\').data(\'mulitselectdatagrid\').loadDataGrid(\'view\', \'RoleDisplayUsers\', \'\', \''.$role_id.'\', \''.$entityType.'\', \''.$excludedRoleId.'\');" width="100" height="132" /></div>',
	);
	$form['role_user_grid_load_end'] = array(
	  '#type' => 'markup',
	  '#prefix' => '</div></div>',
	);

	$cancelAttributes['class'][] = 'addedit-form-expertusone-throbber admin-action-button-middle-bg  white-btn-bg-middle';
  $cancelAttributes['onclick'][]         =  "$('#root-admin').data('narrowsearch').removeActiveQtip('addroletousers'); return false;";
  $cancelAttributes['data-wrapperid'] = array($wrapperId);

  $form['cancel_assigneduser_edit_mode'] = array(
     '#type' => 'submit',
     '#value' => t('LBL123'),
     '#title' => t('LBL123'),
     '#prefix' => '<div id="assigned_user" ><div class="addedit-form-cancel-container-actions admin-save-button-container resize-save_btn2"><div class="white-btn-bg-left"></div>',
    '#suffix' =>   '<div class="white-btn-bg-right"></div>',
     '#name' => 'Cancel addusers',
     '#attributes' => $cancelAttributes,
   );
	$setAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg';
  $setAttributes['data-wrapperid'] = 'security-role-detail-wrapper-list';
	$form['add-users-button'] = array(
          '#type' => 'button',
          '#prefix' => '<div id="attach_user_list" class="admin-save-button-container add-class-button"><div class="admin-save-button-left-bg"></div>',
	        '#suffix' => '<div class="admin-save-button-right-bg"></div></div></div></div></div></div></div></div>',
          '#value' => t("LBL1038"),
          '#name' => "Add Users",
          '#limit_validation_errors' => array(),
          '#attributes' => $setAttributes,
	 				'#ajax' => array(
				      'wrapper' => $wrapperId,
				      'callback' => 'attachUsersDetails',
			        'role_id' => $role_id,
			        'entity_type' => $entityType,
				      'method' => 'replace',
				      'effect' => 'none', // 'fade',
		          'event'=>'click',
				      'keypress' => true,
				      'progress' => array(
				        'type' => 'throbber',
				        'message' => ''
				      ),
					)
        );
     }else{
     			$msg= t('MSG643');
     			$setAttributes['class'][] = 'addedit-form-expertusone-throbber admin-save-button-middle-bg';
  				$setAttributes['data-wrapperid'] = 'security-role-detail-wrapper-list';
     			$form['add-users-button'] = array(
          '#type' => 'button',
          '#prefix' => '<div id="attach_user_list_div" class="admin-save-button-container add-class-button"><div class="admin-save-button-left-bg"></div>',
	        '#suffix' => '<div class="admin-save-button-right-bg"></div></div></div></div></div></div>',//</div></div>',
          '#value' => t("LBL1038"),
          '#name' => "Add Users",
          '#limit_validation_errors' => array(),
          '#attributes' => $setAttributes,
	 				'#ajax' => array(
				      'wrapper' => $wrapperId,
				      'callback' => 'attachUsersDetails',
			        'role_id' => $role_id,
			        'entity_type' => $entityType,
				      'method' => 'replace',
				      'effect' => 'none', // 'fade',
		          'event'=>'click',
				      'keypress' => true,
				      'progress' => array(
				        'type' => 'throbber',
				        'message' => ''
				      ),
					)
        );

        $form['addroleuser_view_grid_no_msg'] = array(
            '#type' => 'markup',
            '#markup' => '<div class="admin-empty-text-msg"> '.$msg.'</div>',
          );
     }

  return $form;
  }catch (Exception $ex) {
  	watchdog_exception('display_assigned_users', $ex);
  	expertusErrorThrow($ex);
  }
}
function search_addusers(){
// donothing
try {
return false;
}catch (Exception $ex) {
	watchdog_exception('search_addusers', $ex);
	expertusErrorThrow($ex);
}
}

function includeFilesRole(){
	include_once(drupal_get_path('module', 'exp_sp_administration_role') .'/exp_sp_administration_role.inc');
	$css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
	$js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
	global $theme_key;
	if($theme_key == "expertusoneV2"){
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_role') .'/exp_sp_administration_role_v2.css');
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
	}else{
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_role') .'/exp_sp_administration_role.css');
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
	}

	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_role') .'/exp_sp_administration_role.js', $js_module_optional);
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
}
?>