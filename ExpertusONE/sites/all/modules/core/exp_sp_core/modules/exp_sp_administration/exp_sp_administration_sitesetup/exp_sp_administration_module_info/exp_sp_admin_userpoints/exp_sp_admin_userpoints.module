<?php

/* Implementation of hook_init().
 */
function exp_sp_admin_userpoints_init() {
	try {
  if(arg(0) == 'administration' && arg(1) == 'sitesetup' && arg(2) == 'moduleinfo'){
  	global $theme_key;
  	$css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
  	if($theme_key == 'expertusoneV2')
    	drupal_add_css(drupal_get_path('module', 'exp_sp_admin_userpoints') .'/exp_sp_admin_userpoints_v2.css', $css_theme_optional);
  	else
   	  drupal_add_css(drupal_get_path('module', 'exp_sp_admin_userpoints') .'/exp_sp_admin_userpoints.css', $css_theme_optional);  
    include_once(drupal_get_path('module', 'exp_sp_admin_userpoints') .'/exp_sp_admin_userpoints.inc');
  }
  }catch(Exception $ex) {
  	watchdog_exception('exp_sp_admin_userpoints_init', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_block_info().
 */
function exp_sp_admin_userpoints_block_info() {
	try {
  $blocks = array();
  $blocks['userpoints'] = array(
    'info' => t('LBL1061'), //user points
  	'cache' => DRUPAL_CACHE_PER_ROLE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => 'learning/my-profile'
  );
  
  return $blocks;
  }catch(Exception $ex) {
  	watchdog_exception('exp_sp_admin_userpoints_block_info', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_block_configure().
 */
/*function exp_sp_admin_userpoints_block_configure($delta = '') {
  global $user;
}*/

/**
 * Implements hook_block_save().
 */
function exp_sp_admin_userpoints_block_save($delta = '',$edit = array()) {
	try {
  global $user;
  
  switch ($delta) {
    case 'leaderboard':
      variable_set('exp_sp_admin_userpoints_block_max_list_count', $edit['exp_sp_admin_userpoints_block_max_list_count']);
      return $form;
  }
  }catch(Exception $ex) {
  	watchdog_exception('exp_sp_admin_userpoints_block_save', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_block_view().
 */
function exp_sp_admin_userpoints_block_view($delta = '') {
	try {
  global $user;
  global $theme_key;
  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  $css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
  
  $block = array();
  switch ($delta) {
    case 'userpoints':
      include_once(drupal_get_path('module', 'exp_sp_admin_userpoints') .'/exp_sp_admin_userpoints.inc');
      drupal_add_js(drupal_get_path('module', 'exp_sp_admin_userpoints').'/exp_sp_admin_userpoints.js',$js_module_optional);
      includeJqGridJsCss();
      if($theme_key == 'expertusoneV2')
        drupal_add_css(drupal_get_path('module', 'exp_sp_admin_userpoints').'/exp_sp_admin_userpoints_v2.css', $css_module_optional);
      else
        drupal_add_css(drupal_get_path('module', 'exp_sp_admin_userpoints').'/exp_sp_admin_userpoints.css', $css_module_optional);
      
      $block['subject'] = t('LBL1064'); //user points
      $block['content'] =  " ";
      break;
    
  }
  expDebug::dPrint(' $block = ' . print_r($block, true),4);
  
  return $block;
  }catch(Exception $ex) {
  	watchdog_exception('exp_sp_admin_userpoints_block_view', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_menu().
 */
function exp_sp_admin_userpoints_menu() {
	try {
  $items = array();

  $items['administration/sitesetup/moduleinfo/userpoints/leaderboard-user/%'] = array(
 	'title' => 'Fetch the list of users to show in leader board',
	'page callback' => 'fetchLeaderBoardUsersList',
  	'page arguments' => array(5),
  	'access arguments' => array('access content'),  
	'type' => MENU_CALLBACK,
	'file' => 'exp_sp_admin_userpoints.inc',
    'file path' => drupal_get_path('module', 'exp_sp_admin_userpoints')
  );
   $items['administration/sitesetup/moduleinfo/userpoints/user-autocomplete'] = array(
    'title' => 'Search User in Leader Board Autocomplete',
    'page callback' => 'getUserCatalogAutoComplete',
    //'page arguments' => array(5),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),    
    'file' => 'exp_sp_user_catalog.inc',
    'file path' => drupal_get_path('module', 'exp_sp_user_catalog')
  );

 expDebug::dPrint(' $items = ' . print_r($items, true) , 4);
 return $items;
 }catch(Exception $ex) {
 	watchdog_exception('exp_sp_admin_userpoints_menu', $ex);
 	expertusErrorThrow($ex);
 }
}


function exp_sp_admin_userpoints_permission() {
	try {
  return array(
    'UserPoints Admin Perm' => array(
    'title' => t('UserPoints Admin Perm')
  )
  );
  }catch(Exception $ex) {
  	watchdog_exception('exp_sp_admin_userpoints_permission', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_administration_userpoints_display_form($js = NULL) {
	try {
  global $theme_key;

  include_once(drupal_get_path('module', 'exp_sp_admin_userpoints') .'/exp_sp_admin_userpoints.inc');
  
  // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
  $catalog_style = array(
    'ctools-admin-user-points-addedit-wrapper' => array(
      'modalSize' => array(
        'width' => 405,
        'minHeight' => 350,
      ),
    )
  );

  drupal_add_js($catalog_style, 'setting');
  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  drupal_add_js(drupal_get_path('module', 'exp_sp_admin_userpoints') .'/exp_sp_admin_userpoints.js', $js_module_optional);

  if ($js) {
    // Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
    $argsList = array();
     
    // Prepare list of forms to be displayed in the modal
    $formIdList = array(
    array('id' => 'exp_sp_administration_userpoints_addedit_form',
                        'title' => t('LBL1061'))
    );

    exp_ctools_modal_multi_ajaxonly_forms_display($formIdList, $argsList);
  }
  else {
    throw new Exception('exp_sp_administration_userpoints_display_form');
  }
  }catch(Exception $ex) {
  	watchdog_exception('exp_sp_administration_userpoints_display_form', $ex);
  	expertusErrorThrow($ex);
  }
}


function exp_sp_administration_userpoints_addedit_form($form, &$form_state) {
  try{
    $cnt = 0;
    $init = 1;
    $pointDetails = array();

    $formWrapperId = 'userpoints-admin-form';

    $form = newAddEditFormWithCancelAndSave($formWrapperId);
    
    $form['user-points-master-text'] = array(
      '#type'    => 'markup',
      '#markup'  => '<div class="user-points-master-text">'.t('LBL1065').': '.'</div>'  
    );

    $pointDetails = getPointDetailsForUserPoint();
	include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_sitesetup/exp_sp_administration_module_info/exp_sp_administration_module_info_share.inc";
	$sharemodule=getShareModuleStatus('user_points');

	 
    foreach($pointDetails as $value)
    {     	 
       $cnt++;
	   $ro = false; 
	   if(!$sharemodule && $value->code == 'sharing_class'){
	    $ro = true;
		$value->points='';
	  }
	  addUserPointsTextFieldToAddEditForm($form, $value->code,t($value->name), $value->points, $cnt, false,$ro,8,8);
	  } 
    $form['user-points-seperator'] = array(
      '#type'    => 'markup',
      '#markup'  => '<div class="clearBoth"></div><div style="display:block; padding:11px 0px"><div class="points-badges-seperator"></div></div>'  
    );
    
    $form['user-points-badge-text'] = array(
      '#type'    => 'markup',
      '#markup'  => '<div class="user-points-badge-text">'.t('LBL1135').': '.'</div>'  
    );
    
    $badgeDetails = getBadgeDetailsForUserPoint();
    foreach($badgeDetails as $code)
    {
      $cnt++;
      $newCheckValue = getProfileItemNamesKeyed($code->badge_code);
	  $ro = false;
	   if(!$sharemodule && $code->badge_code == 'cre_sys_upt_bg2'){
	   $ro = true;
	   $code->badge_points ='';
	}
		 addUserPointsTextFieldToAddEditForm($form, $code->badge_code,t($newCheckValue[$code->badge_code]), $code->badge_points, $cnt, false,$ro,8,8); 	  
      /*$newCheckValue = getProfileItemNamesKeyed($code->badge_code);
      
      $attributes = array();
      $attributes['autocomplete'] = 'off'; // Prevent browser autocomplete
      $attributes['class'] = array('addedit-edit-' . $code->badge_code); // This class must be prefixed with 'addedit-edit-' followed by the form field id.
      $attributes['class'][] = 'addedit-edit-textfield';
      $attributes['onkeydown'][] = 'return onlyNumbers(event)';

      if (isset($cnt) && $cnt > 0) {
        $attributes['tabindex'] = $cnt;
      }
      $prefix = '';
      $suffix = '';
      if (empty($form['addedit_tmp_storage']['two_column'])) {
        $prefix = addEditGetPrefix('FIELD', $badgeTitle, false);
        $suffix = addEditGetSuffix('FIELD');
      }
      $form[$code->badge_code] = array(
    	'#type' => 'textfield',
    	'#prefix' => '<div class="addedit-new-field">' .
               '<div class="addedit-new-field-title-user-points">' .
                  $badgeTitle . '</div>' .
               '<div class="addedit-new-field-value">',
    	'#suffix' => '</div>'.' '.'<div class="addedit-new-field-title-user-points">'.$code->badge_title.'</div></div>',
    	'#title' => $badgeTitle ,
    	'#title_display' => 'invisible',
    	'#default_value' => $code->badge_points,
     	'#attributes' => $attributes,
    	'#size' => 50,
    	'#maxlength' => 7
      );*/
    }
    
    addEditFormWithUserPointsCancelAndSaveClose($form, 'userpoints-admin-form', 9);

    return $form;

  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_userpoints_addedit_form', $ex);
    expertusErrorThrow($ex);
  }
}

function addEditFormWithUserPointsCancelAndSaveClose(&$form, $wrapperId = 'userpoints-admin-form', $tabIndex) {
  global $theme_key;
  try {
    // Button ids
    $saveButtonId = 'usrpoints-save-button';
    $cancelButtonId = 'usrpoints-cancel-button';
    $esignHiddenButt = 'esign-' . $wrapperId;

    // Add the Cancel button
    // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
    // each time the form is re-built.
    $cancelAttributes['class'] = array('addedit-edit-' . $cancelButtonId);

    // Using this class to applying bg color to the save button
    $cancelAttributes['class'][] = 'admin-action-button-middle-bg';

    // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
    $cancelAttributes['class'][] = 'addedit-form-expertusone-throbber';
    // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
    $cancelAttributes['data-wrapperid'] = array($wrapperId);

    // A common class for all addedit form cancel button, for styling to appear as a link.
    $cancelAttributes['class'][] = 'exp-addedit-form-cancel-button';

    $cancelAttributes['onclick'][] = 'Drupal.CTools.Modal.dismiss(); return false;';
    $cancelAttributes['tabindex'][] = $tabIndex + 1;
    if($theme_key == 'expertusoneV2') {
      $prefix = '<div style="clear:both;"></div>' .
                   '<div class="addedit-form-cancel-and-save-actions-row">' .
                     '<div class="addedit-form-cancel-container-actions">'.
                        '<div class="white-btn-bg-container"><div class="white-btn-bg-left"></div><div class="white-btn-bg-middle">';
    
      $suffix = '</div><div class="white-btn-bg-right"></div></div>';
    }else {
      $prefix = '<div style="clear:both;"></div>' .
                   '<div class="addedit-form-cancel-and-save-actions-row">' .
                     '<div class="addedit-form-cancel-container-actions">';
    
      $suffix = '';
    }

    $form[$cancelButtonId] = array(
      '#type' => 'button',
      '#prefix' => $prefix,
    // Suffix to close the two divs is added in #suffix property of Save button
      '#suffix' => $suffix,
      '#value' => ($theme_key == 'expertusoneV2') ? t('LBL109') : t('LBL123') , //Close
      '#name' => 'cancel',
      '#attributes' => $cancelAttributes
    );

    // Add the Save button
    $ajaxCallbackSave = 'addEditRepaintForm';

    // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
    // each time the form is re-built.
    $saveAttributes['class'] = array('addedit-edit-' . $saveButtonId);

    // Using this class to applying bg color to the save button
    $saveAttributes['class'][] = 'admin-save-button-middle-bg';
    $saveAttributes['tabindex'][] = $tabIndex;
    // A common class for all addedit form submit buttons and ajax enabled fields for showing expertusone throbber.
    $saveAttributes['class'][] = 'addedit-form-expertusone-throbber';
    // Communicate the wrapper to javascript for showing the expertusone throbber via HTML data tag
    $saveAttributes['data-wrapperid'] = array($wrapperId);

    $eSignatureAvailable = true;

    if(module_exists('exp_sp_esignature') && isActiveEsignRegion() && $eSignatureAvailable){
      $form[$saveButtonId] = array(
        '#type' => 'submit',
        '#value' => t('LBL141'), // Save
        '#name' => 'save',
        '#prefix' => '<div class="admin-save-button-container">' .
                       '<div class="admin-save-button-left-bg"></div>',
        '#suffix' =>   '<div class="admin-save-button-right-bg"></div>' .
                     '</div>' .
                     '<div class="clearBoth"></div>' .
                   '</div>' . // see #prefix of close button above
                   '<div class="clearBoth"></div>' .
                 '</div>', // see #prefix of close button above
        '#id' => $saveButtonId,
        '#attributes' => $saveAttributes,
        '#ajax' => array(
          'wrapper' => $wrapperId,
          'callback' => $ajaxCallbackSave,
          'method' => 'replace',
          'effect' => 'none', // 'fade',
          'event'=> 'click',
          'drupalUserId' => 'drupal_uid',
          'customButtonId'=> $esignHiddenButt,
          'keypress' => true,
          'progress' => array(
            'type' => 'throbber',
            'message' => ''
            ),
            )
            );
    }
    else {
      $saveAttributes['onclick'] = array();
      $saveAttributes['onclick'][] = '$("#' . $esignHiddenButt . '").click(); return false;';
      $form[$saveButtonId] = array(
        '#type' => 'button',
        '#prefix' => '<div class="admin-save-button-container">' .
                       '<div class="admin-save-button-left-bg"></div>',
        '#suffix' =>   '<div class="admin-save-button-right-bg"></div>' .
                     '</div>' .
                     '<div class="clearBoth"></div>' .
                   '</div>' . // see #prefix of close button above
                   '<div class="clearBoth"></div>' .
                 '</div>', // see #prefix of close button above
        '#value' => t('LBL141'), // Save
        '#name' => 'save',
        '#attributes' => $saveAttributes,
      );
    }

    unset($saveAttributes['tabindex']);
    $saveAttributes['onclick'] = array();
    $form[$esignHiddenButt] = array(
      '#type' => 'submit',
      '#value' => t('hidden-save'),
      '#name' => 'hidden-save',
      '#prefix' => '<span id = "esign-admin-div" style="display:none">',
      '#suffix' => '</span>',
      '#id' =>$esignHiddenButt,
      '#attributes' => $saveAttributes,
      '#ajax' => array(
        'wrapper' => $wrapperId,
        'callback' => $ajaxCallbackSave,
        'method' => 'replace',
        'effect' => 'none', // 'fade',
        'event'=>'click',
        'keypress' => true,
        'progress' => array(
          'type' => 'throbber',
          'message' => ''
          ),
          )
          );

          // Close form div
          $form['addedit-left-col-end'] = array(
      '#type' => 'markup',
      '#markup' =>   '</div>' ,
                   //'<div class="clearBoth"></div>',
          );
  }
  catch (Exception $ex) {
    watchdog_exception('addEditFormWithUserPointsCancelAndSaveClose', $ex);
    expertusErrorThrow($ex);
  }
}

/*
 * exp_sp_administration_userpoints_addedit_form_validate : validate function for user points
 */
function exp_sp_administration_userpoints_addedit_form_validate($form, &$form_state) {
  try {
    expDebug::dPrint('$form_state[values] = ' . print_r($form_state['values'], true), 5);
    expDebug::dPrint('$form_state[triggering_element] = ' . print_r($form_state['triggering_element'], true), 5);

    $form_state['hidden-save-submit'] = false;
    $form_state['esign_show_popup']= false;
     
    if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
      $validationTrigger  = 'save';
    }
    else{
      $validationTrigger  = 'hidden-save';
    }

    if ($form_state['triggering_element']['#name'] == $validationTrigger) {
      $form_state['esign_show_popup']= true;

    if(($form_state['values']['register_class'])!="" && !is_numeric($form_state['values']['register_class'])){
        form_set_error('register_class', t('MSG648'));
        $form_state['esign_show_popup']= false;
      }
    if(($form_state['values']['sharing_class'])!="" && !is_numeric($form_state['values']['sharing_class'])){
        form_set_error('sharing_class', t('MSG648'));
        $form_state['esign_show_popup']= false;
      }
    if(($form_state['values']['add_topic'])!="" && !is_numeric($form_state['values']['add_topic'])){
        form_set_error('add_topic', t('MSG648'));
        $form_state['esign_show_popup']= false;
      }
    if(($form_state['values']['add_comment_reply'])!="" && !is_numeric($form_state['values']['add_comment_reply'])){
        form_set_error('add_comment_reply', t('MSG648'));
        $form_state['esign_show_popup']= false;
      }
    if(($form_state['values']['complete_class_training'])!="" && !is_numeric($form_state['values']['complete_class_training'])){
        form_set_error('complete_class_training', t('MSG648'));
        $form_state['esign_show_popup']= false;
      }
    if(($form_state['values']['rating_class'])!="" && !is_numeric($form_state['values']['rating_class'])){
        form_set_error('rating_class', t('MSG648'));
        $form_state['esign_show_popup']= false;
      }
    if(($form_state['values']['cre_sys_upt_bg1'])!="" && !is_numeric($form_state['values']['cre_sys_upt_bg1'])){
        form_set_error('cre_sys_upt_bg1', t('MSG648'));
        $form_state['esign_show_popup']= false;
      }
    if(($form_state['values']['cre_sys_upt_bg2'])!="" && !is_numeric($form_state['values']['cre_sys_upt_bg2'])){
        form_set_error('cre_sys_upt_bg2', t('MSG648'));
        $form_state['esign_show_popup']= false;
      }
    if(($form_state['values']['cre_sys_upt_bg3'])!="" && !is_numeric($form_state['values']['cre_sys_upt_bg3'])){
        form_set_error('cre_sys_upt_bg3', t('MSG648'));
        $form_state['esign_show_popup']= false;
      }
    if(($form_state['values']['cre_sys_upt_bg4'])!="" && !is_numeric($form_state['values']['cre_sys_upt_bg4'])){
        form_set_error('cre_sys_upt_bg4', t('MSG648'));
        $form_state['esign_show_popup']= false;
      }
    if(($form_state['values']['cre_sys_upt_bg5'])!="" && !is_numeric($form_state['values']['cre_sys_upt_bg5'])){
        form_set_error('cre_sys_upt_bg5', t('MSG648'));
        $form_state['esign_show_popup']= false;
      }
    }

    if ($form_state['triggering_element']['#name'] == 'hidden-save' || $form_state['triggering_element']['#ajax']['triggerEvent'] == 'hidden-save') {
      $form_state['hidden-save-submit'] = true;
    }

    $form_state['esign_validation_status'] = false; // checked to be false in exp_sp_administration.inc:addEditRepaintForm() as a precondition to
    // showing popup.
    if (!($form_state['hidden-save-submit'])) {
      unset($_SESSION['esign_validate']); // for every button other than hidden-save, unset $_SESSION['esign_validate'].
    }
  }
  catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_userpoints_addedit_form_validate', $ex);
    expertusErrorThrow($ex);
  }
}
/*
 * badgePointsFieldCheck() : check the badge points are greater than the above
 */
function badgePointsFieldCheck($form, $form_state) {
  try {
    if(($form_state['values']['badge1'])=="") {
      form_set_error('badge1', t('ERR174'));
        $form_state['esign_show_popup']= false;
    }
  }
  catch(Exception $ex) {
    watchdog_exception('badgePointsFieldCheck',$ex);
    expertusErrorThrow($ex);
  }
}
/*
 * exp_sp_administration_userpoints_addedit_form_submit : updating the values to the table given in the form
 */
function exp_sp_administration_userpoints_addedit_form_submit($form, &$form_state) {
  expDebug::dPrint('$form_state[values] = ' . print_r($form_state['values'], true), 5);
  expDebug::dPrint('$form_state[triggering_element] = ' . print_r($form_state['triggering_element'], true), 5);
  expDebug::dPrint('$form_state[storage] = ' . print_r($form_state['storage'], true), 5);

  try {
    $eSignValidated = true;
    if (module_exists('exp_sp_esignature') && isActiveEsignRegion()) {
      if($form_state['hidden-save-submit'] == true && $_SESSION['esign_validate'] ==  1) {
        $form_state['storage']['submit_triggering_element'] = $form_state['storage']['triggering_button_element'];
      }
      else {
        $eSignValidated = false;
        $form_state['storage']['triggering_button_element'] = $form_state['triggering_element']['#name'];
      }
    }
    else {
      $form_state['storage']['submit_triggering_element'] = $form_state['triggering_element']['#name'];
    }
     
    if ($eSignValidated) {
      $form_state['esign_validation_status'] = true;
      $loggedInUserId = getIdOfLoggedInUser();

      updateMasterPoints($form, $form_state, $loggedInUserId);
      watchdog('exp_admin_user_points', 'User Points updated.');

      expertus_set_message(t('LBL563').' '.t('MSG601').'.'); //User Point settings saved successfully.
      $form_state['values'] = array(); // no further use
      $form_state['input'] = array(); // on form rebuild show form default values to user to show data actually saved in db (e.g. trimmed values)
      $form_state['rebuild'] = true; // rebuild form
    }
  }
  catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_userpoints_addedit_form_submit', $ex);
    expertusErrorThrow($ex);
  }
}
?>