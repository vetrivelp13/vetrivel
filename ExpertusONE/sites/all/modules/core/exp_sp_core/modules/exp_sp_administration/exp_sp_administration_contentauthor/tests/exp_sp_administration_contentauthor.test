 <?php 

class AdministrationContentAuthorTestHelper extends ExpertusWebTestCase {
	private $searchResultContentAuthor=null;
	public $listContent = '';
	protected $testcases = array();
	
	protected $checkBoxVidType = array();
	

	
	private $srcParam = array(
			'title'=>'',		// Title base search
			'announcementdaterange'=>'',		// date range on announcement
			'announcementlang'=>'cre_sys_lng_eng', 	// Selected languages pipe separated
			'sortby'=> 'desc',		//	Sort by option
			'announcemanage' => 'cre_sys_fop_me'
	);

	public function setUp() {
		parent::setUp();
	//	$this->drupalLogin($this->admin); // login as admin
		
		if($this->loggedInUser === FALSE){
			$this->drupalLogin($this->admin); // login as admin
		}
		
		$this->getContentAuthorTestCases();
		
		if(empty($this->checkBoxVidType)){
			$this->getVidTypeList();
		}
		
		// set refer to prevent access denied error
		$this->setHttpReferer('learning/enrollment-search');
	}
	
	protected function getVidTypeList(){
	
		$select = db_select('slt_content_master', 'scm');
		
		// Select the fields to fetch
		$select -> addField('scm', 'subtype', 'subtype');
		$select -> addField('scm', 'subtype', 'subtype');
		
		// Order results by subtype
		$select -> orderBy('subtype');
		
		// Set the conditions
		$select -> condition('scm.subtype', db_like('h5p-') . '%', 'LIKE');
		$select -> condition('scm.subtype', db_like('h5p-p') . '%', 'NOT LIKE');
		
		$result = $select -> execute() -> fetchAllKeyed();
		$key = 1;
		foreach($result as $value) {
			
			$this->checkBoxVidType[$key] = $value ;  
			$key++;
		}
	
		expDebug::dPrint(' videotype details merged = ' . print_r($this->checkBoxVidType, true) , 4);
	}
	
	
	
	
	public function manageAdminContentAuthor($scope = 'basic') {
	
		// Get Main HTML content
		$this->drupalPost('administration/contentauthor/video');
		$content = $this->content;
	
		// Get Filters
		$this->drupalGetAJAX('administration/search-filter/video');
		$this->content = drupal_json_decode($this->content);
			
		//Update filters with existing response
		$replArray = array(
				'rendered_narrow_search_filters' => 'narrow-search',
				'rendered_main_div' => 'root-admin-results',
				'rendered_tab_content_main' => 'tab-content-main',
				'rendered_narrow_search_sortbar' => 'admin-maincontent_tab',
				'rendered_narrow_search_actionbar' => 'sort-bar-V2'
		);
			
		$this->updateSearchFilters($content, $replArray, 'div', 'tag', 'div' );
	
		$this->displayTagsById('narrow-search');
		$this->displayTagsById('root-admin-results');
	
		// Based on the scope set the data to test
		if ($scope == 'all') {
			$testCases = $this->testcases['contentList'];
		} else {
			$testCases = array($this->testcases['contentList'][$scope]);
		}
		
		//Get search results
	/*	foreach($testCases as $test){
			$this->getAdministrationContentAuthorList($test);
		} */
		if(empty($testCases)){
			$this->getAdministrationContentAuthorList();
		}else{
			foreach($testCases as $test){
				$this->getAdministrationContentAuthorList($test);
				foreach ($test as $key => $val){
					if($key == 'contentauthor_videotype'){
						$key='subtype';
					}
					if($key == 'contentstatus'){
						$key='status';
					}
					$condition_params['condition'][] = array('per.'.$key,$val,'=');
				}
			  }
			}
		
		//	$this->assertMessages($condition_params);
	}
	
	public function getAdministrationContentAuthorList($opt = array()){
		$optParam = $opt;
		$opt = array_merge($this->basicParam, $opt);
		$content = $this->content;
		$srcRc = $this->drupalGetAJAX('administration/contentauthor/video/search/all/',array('query'=>$opt));
		
		if(!empty($optParam)){
			$this->setCheckBoxFilters($opt,$content,'contentauthor_videotype','contentauthor_videotype_filterset',$this->checkBoxVidType,'video type');
			$statusValues = array('1' => 'lrn_cnt_sts_atv',
					              '2' => 'lrn_cnt_sts_itv');
			$this->setCheckBoxFilters($opt,$content,'contentstatus','contentstatus_filterset',$statusValues);
			
			$managedByValues = array('1' => 'cre_sys_fop_me',
					'2' => 'cre_sys_fop_oth');
			$this->setCheckBoxFilters($opt,$content,'contentmanage','contentmanage_filterset',$managedByValues,'managed_by');
				
		}
		$this->updateSearchResults($content,$srcRc,'narrow-search-results-holder');
	}

	protected function getContentAuthorTestCases(){
		$rand = $this->randomName();
		$largeBanImage = realpath ( 'sites/default/files/simpletest_files/contents/sample_Abhi_test_CA.mp4' );
		$this->testcases = array(
				'contentList' => array(
						'basic' => array(),
						'contentauthor_videotype' => array('contentauthor_videotype' => 'h5p-Youtube|h5p-video-mp4|h5p-video-webm'),
						'youtube' => array('contentauthor_videotype' => 'h5p-Youtube'),
						'webm' => array('contentauthor_videotype' => 'h5p-video-webm'),
						'mp4' => array('contentauthor_videotype' => 'h5p-video-mp4'),
						'status' => array('contentstatus' => 'lrn_cnt_sts_atv|lrn_cnt_sts_itv'),
						'published' => array('contentstatus' => 'lrn_cnt_sts_atv'),
						'unpublished' => array('contentstatus' => 'lrn_cnt_sts_itv'),
						'contentmanage' => array('contentmanage' => 'cre_sys_fop_me|cre_sys_fop_oth'),
						'me' => array('contentmanage' => 'cre_sys_fop_me'),
						'others' => array('contentmanage' => 'cre_sys_fop_oth'),
						'sortby' => array('sortby' => 'AZ|ZA|NewlyListed'),
						'AZ' => array('sortby' => 'AZ'),
						'ZA' => array('sortby' => 'ZA'),
						'NewlyListed' => array('sortby' => 'NewlyListed'),
						
				),		
				'contentCreate' => array(
		  				'st_case1' => array(
		  						"title"				        => 'Test for contentAuthor create - Video Embed'.$rand,
		  						"url" 				        => 'https://www.youtube.com/watch?v=S90iguFS9aE',
							    "passingscore"              => '60',
								"short_description[value]" 	=> 'web test case checking - Video Embed'.$rand, 
								"show_solution"			    => 'Enabled',
								"retry"                     => 'Enabled'
		  				 ),
						'st_case2' => array(
		  						"title"				        => 'My Test for contentAuthor create - Video Upload'.$rand,
		  						//"url" 				        => 'https://www.youtube.com/watch?v=S90iguFS9aE',
					            "files[video]"              => $largeBanImage,
							    "passingscore"              => '50',
								"short_description[value]" 	=> 'web test case checking - Video Upload'.$rand, 
								"show_solution"			    => 'Enabled',
								"retry"                     => 'Enabled'
						),
				),
				'contentUpdate' => array(
						'st_case1' 	=> array(
							"title"			            => 'st_case1 content title changed- '.$rand,
							"id"						=> $this->getContentAuthorId('st_case1'),	
						 ),
						'st_case2' => array(
							"title"			            => 'st_case2 content title changed- '.$rand,
							"id"						=> $this->getContentAuthorId('st_case2'),
						),
				),
				'contentDelete' => array(
						'st_case1' 	=> array( 'id'	 	=> $this->getContentAuthorId('st_case1') ),
						'st_case2' 	=> array( 'id' 		=> $this->getContentAuthorId('st_case2') ),
				),
				'contentStatus' => array(
						'st_case1' 	=> array( 'id'	 	=> $this->getContentAuthorId('st_case1') ),
						'st_case2' 	=> array( 'id' 		=> $this->getContentAuthorId('st_case2') ),
				),
		);
	}
	
	public function getContentAuthorTitle($contentId = '') {
		$contentTitle = db_query("SELECT code FROM slt_content_master WHERE id = :content_id", array(':content_id' => $contentId ))->fetchField();
		return $contentTitle;
	}
	
	public function getContentAuthorStatus($contentId = '') {
		$contentStatus = db_query("SELECT status FROM slt_content_master WHERE id = :content_id", array(':content_id' => $contentId ))->fetchField();
		return $contentStatus;
	}
	//To check if the given content is already attached to a class.
	public function getContentAuthorTemplateCount($contentId = '') {
		$classCount = db_query("SELECT count(content_id) FROM slt_course_content_mapper WHERE content_id = :contentId", array(':contentId' => $contentId ))->fetchField();
		return $classCount;
	}
	
	
	public function getContentAuthorId($search_str = '') {
		$select = db_select('slt_content_master', 'con');
		$select->addField('con', 'id', 'id');
		$select->condition('con.code', '%' . db_like($search_str) . '%', 'LIKE');
		$select->condition('con.subtype', array('h5p-video-mp4','h5p-video-webm','h5p-Youtube'),'IN');
		$select->orderBy('con.id', 'DESC');
		$select->range(0,1);
		$contentId = $select->execute()->fetchField();
		return $contentId;
	}
}


class AdministrationContentAuthorListBase extends AdministrationContentAuthorTestHelper
{
	
}

class AdministrationContentAuthorListAll extends AdministrationContentAuthorListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Content Author - List - All Tests',
				'description' => 'Module : exp_sp_administration_contentauthor',
				'group' => '1601 - Administration - Content Author - Video - List',
		);
	}
	
	public function testContentAuthorListAll() {
		debug('testAdminContentAuthorListAll called');
		$this->manageAdminContentAuthor('all');
	}
}

//class AdministrationContentAuthorListCase1 extends AdministrationContentAuthorListBase
class AdministrationContentAuthorListByVideoType extends AdministrationContentAuthorListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Content Author - List - Video Type',
				'description' => 'Module : exp_sp_administration_contentauthor',
				'group' => '1601 - Administration - Content Author - Video - List',
		);
	}

	public function testContentAuthorListVideoTypeYoutube() {
		debug('testContentAuthorListVideoTypeYoutube called');
		$this->manageAdminContentAuthor('youtube');
	}
	public function testContentAuthorListVideoTypeWebM() {
		debug('testContentAuthorListVideoTypeWebM called');
		$this->manageAdminContentAuthor('webm');
	}
	public function testContentAuthorListVideoTypeMp4() {
		debug('testContentAuthorListVideoTypeMp4 called');
		$this->manageAdminContentAuthor('mp4');
	}
}

class AdministrationContentAuthorSortBy extends AdministrationContentAuthorListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Content Author - List - SortBy',
				'description' => 'Module : exp_sp_administration_contentauthor',
				'group' => '1601 - Administration - Content Author - Video - List',
		);
	}

	public function testContentAuthorSortByAsc() {
		debug('testContentAuthorSortByAsc called');
		$this->manageAdminContentAuthor('AZ');
	}
	public function testContentAuthorSortByDsc() {
		debug('testContentAuthorSortByDsc called');
		$this->manageAdminContentAuthor('ZA');
	}
	public function testContentAuthorSortByNewlyListed() {
		debug('testContentAuthorSortByNewlyListed called');
		$this->manageAdminContentAuthor('NewlyListed');
	}
}



class AdministrationContentAuthorListByPublishStatus extends AdministrationContentAuthorListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Content Author - List - Publish Status',
				'description' => 'Module : exp_sp_administration_contentauthor',
				'group' => '1601 - Administration - Content Author - Video - List',
		);
	}

	public function testContentAuthorListPublished() {
		debug('testContentAuthorListPublished called');
		$this->manageAdminContentAuthor('published');
	}
	public function testContentAuthorListUnPublished() {
		debug('testContentAuthorListPublished called');
		$this->manageAdminContentAuthor('unpublished');
	}
	
}


class AdministrationContentAuthorListByManagedBy extends AdministrationContentAuthorListBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Content Author - List - Managed By',
				'description' => 'Module : exp_sp_administration_contentauthor',
				'group' => '1601 - Administration - Content Author - Video - List',
		);
	}

	public function testContentAuthorListManagedByMe() {
		debug('testContentAuthorListManagedByMe called');
		$this->manageAdminContentAuthor('me');
	}
	public function testContentAuthorListManagedByOthers() {
		debug('testContentAuthorListManagedByOthers called');
		$this->manageAdminContentAuthor('others');
	}

}


 /**
  * For publish and unpublish functionality 
  */


class AdministrationContentAuthorStatusBase extends AdministrationContentAuthorTestHelper
{
	public function statusGroupTestCase($scope = 'all') {
		
		
		// Get Main HTML content
		$this->drupalPost('administration/contentauthor/video');
		$content = $this->content;
		
		// Get Filters
		$this->drupalGetAJAX('administration/search-filter/video');
		$this->content = drupal_json_decode($this->content);
			
		//Update filters with existing response
		$replArray = array(
				'rendered_narrow_search_filters' => 'narrow-search',
				'rendered_main_div' => 'root-admin-results',
				'rendered_tab_content_main' => 'tab-content-main',
				'rendered_narrow_search_sortbar' => 'admin-maincontent_tab',
				'rendered_narrow_search_actionbar' => 'sort-bar-V2'
		);
			
		$this->updateSearchFilters($content, $replArray, 'div', 'tag', 'div' );
		
		$this->displayTagsById('narrow-search');
		$this->displayTagsById('root-admin-results');
		
		
		
		
		// Based on the scope set the data to test
		if ($scope == 'all') {
			$testCases = $this->testcases['contentStatus'];
		} else {
			$testCases = array($this->testcases['contentStatus'][$scope]);
		}
		
		
		foreach($testCases as $test){
			$contentId = $test['id'];
			//$contentId = 245;
			debug("The content ID is" .$contentId);
			if ($contentId != '') {
				//checking the status if the content attach any class
				$notication_template_count=$this->getContentAuthorTemplateCount($contentId);
				if($notication_template_count==0){
					debug("The content ID is" .$contentId);
					//fetching the content status
					//if content is not attached to any class,we can publish/unpublish it
					$status=$this->getContentAuthorStatus($contentId);
					$this->getAdministrationContentAuthorList();
					$this->changeStatus($contentId,$status);
					$this->getAdministrationContentAuthorList();
					$status=$this->getContentAuthorStatus($contentId);
					$this->changeStatus($contentId,$status);
					$this->getAdministrationContentAuthorList();
					$this->content = $this->listContent;
				}else
					//if content attached any class,we can't publish/unpublish
					debug("This content is already attached to class.");
			} else
				debug ( 'The content id not found' );

		}
	}
	//change the content status
	public function changeStatus($contentId,$status) {
		if($status=='lrn_cnt_sts_atv'){
			//content is published status.
			$this->changeContentStatus($contentId);
			$this->assertResponse(200,'Content  unpublished successfully');
		}else{
			//content is unpublished status.
			$this->changeContentStatus($contentId);
			$this->assertResponse(200,'Content published successfully');
		}
	}

	public function changeContentStatus($contentId) {
		$post_field = array('wrapper'=>'paint-narrow-search-results');
		$this->drupalPostAJAX(null, $edit,'Save','?q=ajax/administration/contentauthor/video/publish-and-unpublish/' . $contentId,array(),array(),'',$post_field);
		$this->verbose('Request to: ' . $this->getUrl() . '<hr />' . $this->content);
	}

}

class AdministrationContentAuthorStatusCase1 extends AdministrationContentAuthorStatusBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Content Author - Status - Case1',
				'description' => 'Module : exp_sp_administration_contentauthor',
				'group' => '1601 - Administration - Content Author - Video - Status',
		);
	}

	public function testContentAuthorPublishCase1() {
		debug('testContentPublishCase1 called');
		$this->manageAdminContentAuthor('case1');
		$this->statusGroupTestCase('st_case1');
	}
}

class AdministrationContentAuthorStatusCase2 extends AdministrationContentAuthorStatusBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Content Author -  Status - Case2',
				'description' => 'Module : exp_sp_administration_contentauthor',
				'group' => '1601 - Administration - Content Author - Video - Status',
		);
	}

	public function testContentAuthorPublishCase2() {
		debug('testContentPublishCase2 called');
	//	$this->manageAdminContentAuthor('case2');
		$this->statusGroupTestCase('st_case2');
	}
}


/**
 * For sort-By functionality
 */



?>