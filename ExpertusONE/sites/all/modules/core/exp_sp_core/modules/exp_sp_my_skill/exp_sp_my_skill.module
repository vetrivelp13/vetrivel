<?php
/**
 * Implementation of hook_block_info().
 */

function exp_sp_my_skill_cron() {
	try {
		$config           = getConfig("exp_sp");
		$cert_expiry_reminder = isset($config["Certificate_verification_expiry"]) ? $config["Certificate_verification_expiry"] : 10;
		
		$select = db_select('slt_skill_set','skill');
		$select->addField('skill','id');
		$select->condition('skill.verification_status',"Verification pending",'=');
		$select->where("DATEDIFF(DATE_ADD(skill.created_on, INTERVAL $cert_expiry_reminder DAY),NOW()) <=0");
		$select->isNull('skill.is_deleted');
		$result = $select->execute()->fetchAll();
		expDebug::dPrintDBAPI(' Fetch users list query 2 =sasasaaa ' , $select );
		expDebug::dPrint('add_new_skillcron check: '.print_r($result,true) , 5);
		foreach($result as $resultset){
			expDebug::dPrint('add_new_skillcron check: '.print_r($resultset->id,true) , 5);
			$numUpdated = db_update('slt_skill_set')
			->fields(array(
					'verification_status' => "Not verified",
					'updated_on' => NOW()))
					->condition('id', $resultset->id)
					->execute();
			expDebug::dPrint('$numUpdated = ', $numUpdated);
		//	expDebug::dPrintDBAPI(' Fetch users list query 2 =sasasaaa ' , $select );
		}
		

	}catch (Exception $ex) {
		watchdog_exception('exp_sp_my_skill_cron function have error:', $ex);
		throw $ex;
	}
}

include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration.inc";
function exp_sp_my_skill_block_info() {
	try{
  $blocks = array();
  $blocks['my_skill'] = array(
    'info' => t('My Skill'),
  	'cache' => DRUPAL_CACHE_PER_ROLE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'learning/my-profile
     learning/my-profile/skills
     learning/ajax/user/*'
  );

  return $blocks;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_my_skill_block_info', $ex);
  	throw $ex;
  }
}

/**
 * Implementation of hook_block_view().
 */
function exp_sp_my_skill_block_view($delta = ''){
  try{
  $block = array();
   global $theme_key;
  switch ($delta) {
    case 'my_skill':
    if(arg(3)=='user') {
          $block['subject'] = t('LBL833');
          includeJqGridJsCss();
          $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
          drupal_add_js(drupal_get_path('module', 'exp_sp_my_skill') .'/exp_sp_my_skill.js',$js_module_optional);
          drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/qtippopup.js',$js_module_optional);
          drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
          if($theme_key == 'expertusoneV2') {
  	      //NEWUI THEME STYLE SHEET 
          drupal_add_css(drupal_get_path('module','exp_sp_my_skill') .'/exp_sp_my_skill_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
          }else{
          drupal_add_css(drupal_get_path('module','exp_sp_my_skill') .'/exp_sp_my_skill.css', array('type' => 'file', 'group' => CSS_DEFAULT));	
          }
          $block['content'] = drupal_get_form('exp_sp_my_skill_set_form',arg(4));
        }else{
          $block['subject'] = t('LBL833');
          includeJqGridJsCss();
          $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
          drupal_add_js(drupal_get_path('module', 'exp_sp_my_skill') .'/exp_sp_my_skill.js',$js_module_optional);
          drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/qtippopup.js',$js_module_optional);
          if($theme_key == 'expertusoneV2') {
  	      //NEWUI THEME STYLE SHEET 
          drupal_add_css(drupal_get_path('module','exp_sp_my_skill') .'/exp_sp_my_skill_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
          }else{
            drupal_add_css(drupal_get_path('module','exp_sp_my_skill') .'/exp_sp_my_skill.css', array('type' => 'file', 'group' => CSS_DEFAULT));	
          }
          $block['content']   = drupal_get_form('exp_sp_my_skill_set_form','emptyvalue');
          $block['validpage'] = 'emptyvalue'; 
        }
        enableCtool();
       // drupal_add_library('system', 'drupal.ajax');
        $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
        drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
        
        drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.js', $js_module_optional);
        //drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_core.js', $js_module_optional);
        drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_core.js',$js_module_optional);
        
      // YOURMODULE_page();
        break;
  }
  return $block;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_skill_block_view', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Implementation of hook_menu().
 */
function exp_sp_my_skill_menu() {
  try{
    $items = array();
    
   	$items['learning/myprofile/skillset/%'] = array (
    'title' => 'Fetch the list of skill details',
  	'page callback' => 'getSkillResultForGrid',
    'access callback' => array('user_is_logged_in'),
    'page arguments' => array(3),  
  	'type' => MENU_CALLBACK,
  	'access arguments' => array('expertus learner'),
  	'file' => 'exp_sp_my_skill.inc'
  );
  $items['learning/cert/username/autocomplete'] = array (
  		'title' => 'Fetch the username',
  		'page callback' => 'getUsernameAutocomp',
  		'access callback' => array('user_is_logged_in'),
  		'page arguments' => array(3),
  		'type' => MENU_CALLBACK,
  		'access arguments' => array('expertus learner'),
  		'file' => 'exp_sp_my_skill.inc'
  );
 $items['learning/ajax/skill-set/add-skill/%/%'] = array (
    'title' => 'Fetch the list of skill details',
  	'page callback' => 'getskillSetDisplay',
    'access callback' => array('user_is_logged_in'), 
  	'type' => MENU_CALLBACK,
    'page arguments' => array(4,5),  
  	'access arguments' => array('expertus learner'),
  	'file' => 'exp_sp_my_skill.inc'
  );
  $items['learning/cert/mgrusername/autocomplete'] = array (
  		'title' => 'Fetch mgrusrname',
  		'page callback' => 'getmgrUsername',
  		'access callback' => array('user_is_logged_in'),
  		'type' => MENU_CALLBACK,
  		'page arguments' => array(4,5),
  		'access arguments' => array('expertus learner'),
  		'file' => 'exp_sp_my_skill.inc'
  );
 $items['learning/ajax/profile/certificate-details/%/%'] = array (
 		'title' => 'Fetch the list of certificate details',
 		'page callback' => 'getCertificatetDisplay',
 		'access callback' => array('user_is_logged_in'),
 		'type' => MENU_CALLBACK,
 		'page arguments' => array(4,5),
 		'access arguments' => array('expertus learner'),
 		'file' => 'exp_sp_my_skill.inc'
 );
  $items['learning/myprofile/skills/remove/%'] = array (
    'title' => 'Remove activity details',
  	'page callback' => 'delete_skills_process',
    'page arguments' => array(4),  
    'access callback' => array('user_is_logged_in'),
  	'type' => MENU_CALLBACK,
  	'access arguments' => array('expertus learner'),
  	'file' => 'exp_sp_my_skill.inc'
  ); 
  $items['administration/learning/addcertificate/%ctools_js/addedit'] = array(
  		'title' => 'Add / Edit Profile Certificate',
  		'page callback' => 'exp_sp_administration_add_profile_certificate_display_addedit_form',
  		//'page callback' => 'tudakozo_page_callback',
  		'page arguments' => array(3),
  		'access callback' => 'user_access',
  		'access arguments' => array('expertus learner'),
  		'type' => MENU_CALLBACK,
  		'file' => 'exp_sp_my_skill.inc'
  );
  $items['ajax/certificate-details/%'] = array(
  		'title' => 'Add Certificate Form',
  		'page callback' => 'getDetailsForAddCertificatesDialog',
  		'page arguments' => array(2),
  		'type' => MENU_CALLBACK,
  		'access arguments' => array('expertus learner'),
  		'file' => 'exp_sp_my_skill.inc'
  );
  $items['learning/certificate/%/%'] = array(
  		'title' => 'Add Certificate Form',
  		'page callback' => 'ManagerVerifyCetificate',
  		'page arguments' => array(2,3),
  		'type' => MENU_CALLBACK,
  		//'access arguments' => array('expertus learner'),
  		'file' => 'exp_sp_core.inc'
  );
   $items['learning/myprofile/export'] = array(
    'title' => 'Print My profile',
    'page callback' => 'myProfileExport',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK
    );
    $items['learning/skill-set/delete-img/%'] = array(
            'title' => 'delete imgg',
            'page callback' => 'myCertificateDeleteImg',
            'page arguments' => array(3),
            'access arguments' => array('expertus learner'),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_my_skill.inc'
    );

   return $items;
   }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_skill_menu', $ex);
    expertusErrorThrow($ex);
  } 
}
/**
 * Implements hook_theme().
 */
function exp_sp_my_skill_theme() {
	try{
  return array(
    'my_skill' => array(
      'variables' => array('results' => array()),
      'template' => 'exp_sp_my_skill_details-view',
    ),
    'exp_sp_my_skill_list' => array(
      'variables' => array('results' => array()),
      'template' => 'exp_sp_my_skill_list-view',
    ),
  );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_my_skill_theme', $ex);
  	throw $ex;
  }
}
function exp_sp_my_skill_set_form ($form, &$form_state){
try{
  global $user;
  require_once('exp_sp_my_skill.inc');
  $form = array();
  //$loggedUserId = getSltpersonUserId();
  $form['box'] = array(
    	    '#type' => 'markup',
    	    '#markup' => theme('my_skill', array('results' => '')),
      );  
  return $form;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_skill_set_form', $ex);
    expertusErrorThrow($ex);
  }
  
  
}

function getSkillResultForGrid($getUserId) {
  try{
    global $user;
    $page         = $_GET['page']; 
    $limit        = $_GET['rows'];
    if($getUserId =='emptyvalue'){
      $userid       = getSltpersonUserId();
     }else{
      $userid     = $getUserId;
    }
    //$drupalUserId = getDrupalIdOfUser($userid);
     $skillCount      = getMySkillDetails($userid,TRUE);
     $start = $limit * $page - $limit;
     $listskillquery  = getMySkillDetails($userid,false,$start,$limit);
    // echo 'count -'.$count .' start--'.$start.'limit-'.$limit;
    //die('ss');
    $listskillquery->range($start, $limit);
    // Execute query
    $skillQueryResult = $listskillquery->execute()->fetchAll();
    if( $skillCount >0 ){ 
      $total_pages = ceil($skillCount/$limit); 
    }else{ 
      $total_pages = 0; 
    }	  
    if($page > $total_pages) 
    	$page = $total_pages;
    if($start < 0) {
    	$start = 0;
    }
  
    $srch_result_response_skills->total   = $total_pages;
    $srch_result_response_skills->records = $skillCount;
    $srch_result_response_skills->page    = $page;
    $_SESSION['jq_count'] = array();
    $i=0;
 
    foreach ($skillQueryResult as $rec_search_results){
      $rec_search_results->colheader   = $i;
      $rec_search_results->getuserid   = $getUserId;
      $srch_result_response_skills->rows[$i]['id']   = $rec_search_results->order_id;
     $srch_result_response_skills->rows[$i]['cell'] = array(
           	'details'     => theme('exp_sp_my_skill_list', array('results' => $rec_search_results)),
    );
      $i++; 
    }
    
    print drupal_json_encode($srch_result_response_skills);
  }catch (Exception $ex) {
    watchdog_exception('getSkillResultForGrid', $ex);
    expertusErrorThrow($ex);  
  }
}

function getskillSetDisplay($optionValue,$entityId){
  
  try {

      $form_state = array(
   		'no_redirect'  => TRUE,
    	'build_info'   => array('args' => array('ajax')),
   		'entity_id'    => $entityId,
        'option_value'    => $optionValue,
      );      
      
      
      $formId                 = 'exp_sp_my_skill_set_add_form';
      $builtForm              = drupal_build_form($formId, $form_state);
      $renderedTabContentHTML = drupal_render($builtForm);
      $drupalSettings         = getDrupalSettings();
    
      $addSkillResponse = array(
        'drupal_settings'     => $drupalSettings,
        'render_content_main' => $renderedTabContentHTML,
      ); 
     
      echo drupal_json_output($addSkillResponse);
      exit;
       
  } catch (Exception $ex) {
    watchdog_exception('getskillSetDisplay', $ex);
    expertusErrorThrow($ex);
  }
  
}
function getCertificatetDisplay($optionType,$entityId){

	try {
		drupal_add_library('system', 'drupal.ajax');
		drupal_add_js('misc/ajax.js');
		enableCtool();
		$js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
		drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
		$form_state = array(
				'no_redirect'  => TRUE,
				'build_info'   => array('args' => array('ajax')),
				'entity_id'    => $entityId,
				'option_value'    => $optionType,
				'entity_id'    => $entityId,
		);
      

		$formId                 = 'exp_sp_my_certificate_add_form';
		$builtForm              = drupal_build_form($formId, $form_state);
		$builtForm['submit'] = ajax_pre_render_element($form['submit']);
		expDebug::dPrint(' $statusMsgHTMLsannn ssssss = ' . print_r($builtForm, true) , 4);
		
		$renderedTabContentHTML = drupal_render($builtForm);
		$drupalSettings         = getDrupalSettings();
		
		$addCertificateResponse = array(
				'drupal_settings'     => $drupalSettings,
				'render_content_main' => $renderedTabContentHTML,
		);
		
		
		
		
		
		//expDebug::dPrint(' $statusMsgHTML = ' . print_r($statusMsgHTML, true) , 4);
		expDebug::dPrint(' $statusMsgHTMLsannn = ' . print_r($form_state, true) , 4);
		echo drupal_json_output($addCertificateResponse);
		exit;
		 
	} catch (Exception $ex) {
		watchdog_exception('getCertificatetDisplay', $ex);
		expertusErrorThrow($ex);
	}

}

function exp_sp_my_skill_set_add_form ($form, &$form_state){
try{
  require_once('exp_sp_my_skill.inc');

  global $theme_key;
  $userId = getIdOfLoggedInUser();
  $option_value = $form_state['option_value'];
  $entityId = $form_state['entity_id'];
  if($option_value == "edit") {
    $default = getMySkillDetails($userId,false,$entityId);
    $default->range(0, 100);
    $defaultDetails= $default->execute()->fetchAssoc();
  }
  $form = array();
  $form['add_skill_set_topic_details'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="skill-set-topic"></div>',
  );
  
  $form['start-my-skill'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="myskill-parent">'
  );
   //change for the ticket 0020909 = For updating tp in skills//
   expDebug::dPrint('program id ' .$defaultDetails['programid'] , 5);
  if($defaultDetails['programid']){
    $read=array('tabindex' => '13','class'=>array('skill-text-box'),'disabled'=>true);
  }
  else{
    $read=array('tabindex' => '13','class'=>array('skill-text-box'));
  }
  
  if(empty($defaultDetails['programid'])){ // For getting updated TP title. ticket: 0023049 //
    $defaultSkill = $defaultDetails['skill_name'];
  }else{
    $defaultSkill = $defaultDetails['title'];
  }
  $form['skill_name'] = array(
			'#type' => 'textfield',
			'#prefix' => '<div class="skill-name-parent"> <span class="skill-label"><label>'.t('LBL876').':<span class="addedit-mandatory">*</span></label></span>',
			'#suffix' => '</div>',
            //'#title' => t('Skill Name'),      
            '#maxlength' => 300,    
			'#default_value' => $defaultSkill,
			'#attributes' => $read
	);
	
  $form['proficiency'] = array(
			'#type' => 'select',
			'#prefix' => '<div class="prof-parent"> <span class="prof-label"><label>'.t('LBL835').':</label></span><div class="expertus-dropdown-bg-addSkill"><div class="expertus-dropdown-icon-addSkill ">',
			'#suffix' => '</div></div></div>',
            //'#title' => t('Proficiency'),
			'#options'=> array('1'=>'1','2'=>'2','3'=>'3','4'=>'4','5'=>'5','6'=>'6','7'=>'7','8'=>'8','9'=>'9','10'=>'10'),
			'#default_value' =>$defaultDetails['proficiency'],
	        '#attributes' => array('tabindex' => '13','class'=>array('skill-dropdown-prof')),
	);	
  $ver_skill_disp = FALSE;
  if($defaultDetails['display_to_others'] == "Yes" )
      $ver_skill_disp = TRUE;
  $form['display_to_others'] = array(
          '#type' => 'checkbox',
          '#prefix' => '<div class="disp-parent"> <span class="disp-label"><label>'.t('LBL834').':</label></span>',
          '#suffix' => '</div>',
          '#default_value' => $ver_skill_disp,
  );

  $suffixDiv = '';
  $prefixDiv = '';
  if($theme_key == 'expertusoneV2') {
	  $prefixDiv = '<div class="white-btn-bg-container"><div class="white-btn-bg-left"></div>';
	  $suffixDiv    = '<div class="white-btn-bg-right"></div></div>';  
	}	
  $setAttributesCancel['class'] = array('admin-action-button-middle-bg white-btn-bg-middle');
  $setAttributesCancel['onClick'][] = 'closeSkilldialog();';
  $form['cancel_skills'] = array(
    '#type' => 'submit',
    '#value' => t('LBL123'),
    '#title' => 'Close',
    '#prefix' => '<div class="learner-save-skill-button"> <div class="addedit-form-cancel-container-actions">'.$prefixDiv,
     '#suffix' => $suffixDiv,
    '#attributes' => $setAttributesCancel,
    '#name' => 'Cancel skills '
    );
    	
   $addSkillSaveAttributes['class'][]= 'admin-save-button-middle-bg';
   $addSkillSaveAttributes['class'][] = 'addedit-form-expertusone-throbber';
   $addSkillSaveAttributes['data-wrapperid'] = array('myskill-parent');
   $form['add_skill_save_button'] = array(
      '#type' => 'submit',
      '#value' => t('LBL569'),
      '#name' => 'Add-skill-details',
      '#prefix' => '<div class="skil-save-button-container"><div class="admin-save-button-left-bg"></div>',
      '#suffix' => '<div class="admin-save-button-right-bg"></div></div><div class="clearBoth"></div></div></div>',
      //'#submit' => array('skill_details_add_row'),
      '#attributes' => $addSkillSaveAttributes,
      '#ajax' => array(
                  'wrapper' => 'myskill-parent',
                  'callback' => 'skill_set_add_callback',
                  'method' => 'replace',
                  'effect' => 'none',
                  'event'=>'click',
  				  'entityId'=>$entityId,
  				  'from_page'=>$from_page,
                  'keypress' => true,
                  'progress' => array(
                    'type' => 'throbber',
                    'message' => ''
                  ),
          )        
      //'#ajax' => array(
       // 'callback' => 'skill_set_add_callback',
        //'wrapper' => 'myskill-parent',
	    // ),
    );
  $form['start-my-skill-end'] = array(
    '#type' => 'markup',
    '#markup' => '</div>'
  );
 return $form;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_skill_set_add_form', $ex);
    expertusErrorThrow($ex);
  }
  
  
}

function exp_sp_my_skill_set_add_form_validate ($form, &$form_state) {
	try{
 if(empty($form_state['values']['skill_name']) || trim($form_state['values']['skill_name']) == '')
      form_set_error('skill_name',t('LBL1157'));
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_my_skill_set_add_form_validate', $ex);
  	throw $ex;
  }
}

function exp_sp_my_skill_set_add_form_submit($form, &$form_state) {
	try{
  expDebug::dPrint('exp_sp_my_skill_set_add_form_submit : '.print_r($form_state,true) , 5);
  
  $entityId = $form_state['entity_id'];
  $option_value = $form_state['option_value'];
  $from_page = $form_state['from_page'];

   if($option_value == "add") {
   $return_val =  add_new_skill_set_details($form, $form_state);
    expertus_set_message(t('LBL272').' '.t('MSG600').'.');
    
    $form_state['option_value'] = 'edit';
    $form_state['entity_id'] = $return_val;
    $form_state['build_info']['args'][]      = $return_val;
  }else{
    updateSkillSetDetails($form, $form_state);
    expertus_set_message(t('MSG601').'.');
  }
  
  $form_state['rebuild']  = TRUE;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_my_skill_set_add_form_submit', $ex);
  	throw $ex;
  }
  
}

function skill_set_add_callback(&$form, &$form_state){
	try{
  $entityId = $form_state['triggering_element']['#ajax']['entityId'];
  $fromPage = $form_state['triggering_element']['#ajax']['from_page'];
  
  $min_form_state = array(
   'ajax' => TRUE, 
   're_render' => TRUE, 
   'no_redirect' => TRUE, 
   'build_info' => array('args' => array('ajax')) 
  );
  
  $form_state = $min_form_state;
  
  $formId = 'exp_sp_my_skill_set_add_form';
  
  $commands = array();
  
  
  $statusMsgHTML = theme('status_messages');

  expDebug::dPrint(' $statusMsgHTML = ' . print_r($statusMsgHTML, true) , 4);
  
  if (!empty($statusMsgHTML)) {
  	// Show the messages
    $commands[] = ajax_command_html('#paintskillAddcert #show_expertus_message', $statusMsgHTML);
  }
  else{
      $commands[] = ajax_command_invoke(NULL, "refreshSkillList",array($entityId));
    }
 return array(
        '#type' => 'ajax',
        '#commands' => $commands
  );
 }catch (Exception $ex) {
 	watchdog_exception('skill_set_add_callback', $ex);
 	throw $ex;
 }
}
function exp_sp_my_certificate_add_form ($form, &$form_state){
	try{
		expDebug::dPrint(' $statusMsgHTML1111 = ' . print_r($form_state, true) , 4);
		
		$certi_verification = getConfigValue('Certification_verification');
		
		
		//expDebug::dPrint(' $statusMsgHTML 222222= ' . print_r($form_state, true) , 4);
		
		require_once('exp_sp_my_skill.inc');
		$js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
		drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
		
		drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.js', $js_module_optional);
		//drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_core.js', $js_module_optional);
		drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_core.js',$js_module_optional);
		
		include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration.inc";
		global $theme_key;
		$userId = getIdOfLoggedInUser();
		$option_value = $form_state['option_value'];
		$entityId = $form_state['entity_id'];
		if(!empty($entityId)) {
			$default = getMySkillDetails($userId,false,$entityId);
			$default->range(0, 100);
			$defaultDetails= $default->execute()->fetchAssoc();
			expDebug::dPrint('$skillId : obj =sandnnddd ' . print_r($defaultDetails, true) , 3);
		}
		
		$editCertificate = "";
		$readOnly = false;
		if($defaultDetails['verification_status'] == "Verification pending" || $defaultDetails['verification_status'] == "Verified"){
		    $readOnly = true;
		    $editCertificate = "certNoDelete";
		}
		
		
		$form = array();
	//	$form = newAddEditFormWithCancelAndSave('add-profile-certi-basic-addedit-form');
		$form['add_skill_set_topicrrr_details'] = array(
				'#type' => 'markup',
				'#markup' => '<div id="certi-set-topic"></div>',
		);

		$form['start-my-certi'] = array(
				'#type' => 'markup',
				'#markup' => '<div id="mycertificate-parent" class ="'.$editCertificate.'">'
		);
		//change for the ticket 0020909 = For updating tp in skills//
		expDebug::dPrint('program id ' .$defaultDetails['programid'] , 5);
		if($defaultDetails['programid']){
			$read=array('tabindex' => '13','class'=>array('skill-text-box'),'disabled'=>true);
		}
		else{
			$read=array('tabindex' => '13','class'=>array('skill-text-box'));
		}

		if(empty($defaultDetails['programid'])){ // For getting updated TP title. ticket: 0023049 //
			$defaultSkill = $defaultDetails['skill_name'];
		}else{
			$defaultSkill = $defaultDetails['title'];
		}
		
		$form['certificate_name'] = array(
				'#type' => 'textfield',
				'#prefix' => '<div class="certificate-name-parent"> <span class="certificate-label"><label>'.t('LBL205').':<span class="addedit-mandatory">*</span></label></span>',
				'#suffix' => '</div>',
			//	'#title' => t('LBL205'),
				'#maxlength' => 300,
				'#default_value' => (!empty($entityId))? $defaultDetails['skill_name']: '',
				'#attributes' => $read,
		        '#disabled' => $readOnly,
		);

		$form['company_name'] = array(
				'#type' => 'textfield',
				'#prefix' => '<div class="company-name-parent"> <span class="company-label"><label>'.t('Company').':</label></span>',
				'#suffix' => '</div>',
				//'#title' => t('Skill Name'),
				'#maxlength' => 300,
				'#default_value' => (!empty($entityId))? $defaultDetails['company']: '',
				'#attributes' => $read,
		        '#disabled' => $readOnly,
		);
		$form['certificate_number'] = array(
				'#type' => 'textfield',
				'#prefix' => '<div class="certificate-number-parent"> <span class="certificate-label"><label>'.t('LBL205').' '. t('LBL161').':</label></span>',
				'#suffix' => '</div>',
				//'#title' => t('Skill Name'),
				'#maxlength' => 100,
				'#default_value' => (!empty($entityId))? $defaultDetails['certificate_number']: '',
				'#attributes' => $read,
		        '#disabled' => $readOnly,
		);
	
		$form['validity_details'] = array(
				'#type' => 'markup',
				'#markup' => '<div id="validity_det"><span class = "validity_det_label"><label>'.t('LBL604').':</label></span>',
		);
		
		$attributes = array();
		$attributes['autocomplete'] = 'off';
		$attributes['class'] = array('addedit-edit-start'); // This class must be prefixed with 'addedit-edit-' followed by the form field id.
		
		$attributes['data-datePickerDatesDisplayOption'] = "all";
		$attributes['data-emptyDateFieldText'] = t('LBL112');
		$attributes['data-datePickerTooltip'] = t('LBL218');
	//	}
		$attributes['class'][] = 'addedit-edit-datefield';
		$attributes['class'][] = 'addedit-edit-ac-textfield';
		$attributes['onclick'][]         = 'datepickerAddEdit();';
		$attributes['readonly'] = 'readonly';
	
		
	
		$form['valid_from'] = array(
				'#title' => t('LBL649'),
				'#id'   => 'valid_from',
				'#type' => 'textfield',
				'#prefix' => '<div class="admin-addedit-class-start-on certi-date-container">',
				'#suffix' => '</div>',
				'#default_value' => (!empty($entityId) && $defaultDetails['valid_from'] != '0000-00-00')? $defaultDetails['valid_from']: DATE_FORMAT(" ",'%m-%d-%Y'),
				'#size' => 10,
				'#attributes' => $attributes,
		        '#disabled' => $readOnly,
		
					
		);
		$form['valid_to'] = array(
				'#title' => strtolower(t('LBL621')),
				'#id'   => 'valid_to',
				'#type' => 'textfield',
				'#prefix' => '<div class="admin-addedit-class-start-on certi-date-container">',
				'#suffix' => '</div></div>',
				'#default_value' => (!empty($entityId) && $defaultDetails['valid_to'] != '0000-00-00')? $defaultDetails['valid_to']: DATE_FORMAT(" ",'%m-%d-%Y'),
				'#size' => 10,
				'#attributes' => $attributes,
		        '#disabled' => $readOnly,
		
					
		);
		/* $form['upload-certificate'] = array(
				'#type' => 'file',
				// '#prefix' => addEditGetPrefix('FIELD', $title, $mandatory),
				//'#suffix' => addEditGetSuffix('FIELD'),
				'#prefix' => '<div class="upload-name-parent"> <span class="certificate-file-label"><label>'.t('Upload Certificate').':</label></span>',
				'#suffix' => '</div>',
				//'#title' => $title,
				'#title_display' => 'invisible',
				'#default_value' => '',
			//	'#disabled' => $readOnly,
			//	'#attributes' => $attributes,
			//	'#size' => $viewWidthInChars,
			//	'#maxlength' => $maxChars
		); */
		$defaultValueforFile = (!empty($entityId))? $defaultDetails['certificate_img']: '';
		$cert_name =    basename($defaultValueforFile);
		
		
		$arr = explode("-", $cert_name, 2);
		$cert_name = $arr[1];
		
		addHiddenFieldToAddEditForm($form, 'CERT_IMG', $cert_name);
		addHiddenFieldToAddEditForm($form, 'CERT_ID', $entityId);
		expDebug::dPrint('program id 1111 ' .$cert_name , 5);
		
		
		addFileUploadControlToAddEditForm($form, 'upload-certificate', t('LBL610'). ' '. strtolower(t('LBL205')), $cert_name, 26,false,$readOnly,15);
	//	addDateFieldToAddEditFormNew($form, 'Valid_from', t('From'), '', t('LBL112'), 'future', t('LBL218'), 7);
	//	addDateFieldToAddEditFormNew($form, 'valid_to', t('To'), '', t('LBL112'), 'future', t('LBL218'), 8);
	
		$ver_checked = FALSE;
		if($defaultDetails['verification_status'] == "Verification pending" || $defaultDetails['verification_status'] == "Verified" || $defaultDetails['verification_status'] == "Rejected" )
		{
		    $ver_checked = TRUE;
		} 
		
		
		$form['verify_required'] = array(
        '#type' => 'checkbox',
		// '#default_value' => 1;       
			'#prefix' => '<div class="verification_req-parent" checked="checked"> <span class="certificate-label"><label>'.t('Verification').' '. strtolower(t('LBL213')).':</label></span>',
		    '#suffix' => '</div>',
		    '#default_value' =>$ver_checked,
			'#ajax' => array(
						'wrapper'        => 'mycertificate-parent',
					//	'callback'       => 'certificate_add_repaint_callback',
						'method'         => 'replace',
						'effect'         => 'none',
						'event'          => 'change',
						'keypress'       => true,
				      //  'checked'        => 'checked',
						'progress' => array(
								'type'     => 'throbber',
								'message'  => ''
						),
				),
		      '#disabled' => $readOnly,
		
		      
		  
      ); 
		$ver_disp = FALSE;
		if($defaultDetails['display_to_others'] == "Yes")
		    $ver_disp = TRUE;
		    
		$form['display_to_others'] = array(
				'#type' => 'checkbox',
				'#prefix' => '<div class="display_to_others-parent"> <span class="certificate-label"><label>'.t('LBL834').':</label></span>',
				'#suffix' => '</div>',
		        '#default_value' =>$ver_disp,
		);
		expDebug::dPrint('$resultstmt---->>' . print_r($form_state['values']["verify_required"],true),5);
		$verification_required = isset($form_state['values']["verify_required"])?$form_state['values']["verify_required"] : '';
		
		 $addCls = "";
		$mangr = getmgrUsername();
		if(empty($mangr))
		    $addCls = "disableManager";
		    
		    
		$form['verification_by_start'] = array(
				'#type' => 'markup',
				'#markup' => '<div id = "verify_block" class='.$addCls.'>',
		  //      '#suffix' => '<img class="dummyCls" src="" onload="verifyByAddEdit1()">',
		);
	/*	$form['hidden_markup_img'] = array(
		        '#type'     => 'markup',
		        '#prefix'   => '<img style="display:none;" src="" onload="verifyByAddEdit1(3)" />',
		);
		
	*/	
		
//		if($verification_required == 1 || $defaultDetails['verification_status'] == "Verification pending" || $defaultDetails['verification_status'] == "Verified" || $defaultDetails['verification_status'] == "Rejected")
		{
		
			if($option_value == "add" && $entityId== "emptyvalue" && $certi_verification == "internal") {
				$completed_options = array(
						'manager' => t('Manager'),
						//'days' => t('LBL3057').' '. t('LBL3083'),
						'user' => '<span class="" title="user" >'.titleController('COMPLETED-BY', sanitize_data(t('Users')),20).'</span>',
						//'hire_days' => t('LBL3057').' '. t('LBL3084'),
						
				);
				
			}else{
			
		        $completed_options = array(
				'manager' => t('Manager'),
				//'days' => t('LBL3057').' '. t('LBL3083'),
				'user' => '<span class="" title="user" >'.titleController('COMPLETED-BY', sanitize_data(t('Users')),20).'</span>',
				//'hire_days' => t('LBL3057').' '. t('LBL3084'),
				//'ExternalUser' => '<span title="ExternalUser" class="" >'.titleController('COMPLETED-BY', sanitize_data(t('External').' '. strtolower(t('Users'))),40).'</span>',
                'ExternalUser' => '<span title="ExternalUser" class="" >'.titleController('COMPLETED-BY', sanitize_data(t('Others')),40).'</span>',
		                
		      );
			}
		
		
		
		$defaultValue['verification_by'] = (!empty($entityId))? $defaultDetails['verification_required']: '';
		
		$compliance_completed = isset($form_state['values']["verification_by"]) ? $form_state['values']["verification_by"] : (!empty($defaultValue['verification_by']) ? $defaultValue['verification_by'] : 'manager');
		
		expDebug::dPrint('$resultstmt---->>sssssss' .$defaultDetails['user_name']);
		
	

		
		if($defaultDetails['certificate_type'] == "External")
		{
		    $compliance_completed = 'ExternalUser';
		}
		else if($defaultDetails['certificate_type'] == "Internal" && ($mangr != $defaultDetails['user_name'] || $compliance_completed == 'user'))
		{
		    $compliance_completed = 'user';
		}
		
		
	/*	$attributescert = array();
		$attributescert['onclick'][]         = 'verifyByAddEdit();'; 
	*/
		$form['verification_by'] = array (
				'#type' => 'radios',
				'#prefix' => addEditGetPrefix('TWOCOL_FIRSTCOL_FIELD', t('Verification').' '. t('by'), FALSE),
				'#suffix' => addEditGetSuffix('TWOCOL_FIRSTCOL_FIELD'),
			//	'#title' => t('Verfication by'),
				'#title_display' => 'invisible',
				'#default_value' =>  $compliance_completed,
				'#options' => $completed_options,
				'#disabled' => $readOnlyCompliance,
			//	'#attributes' => $attributescert,
				 '#ajax' => array(
						'wrapper'        => 'mycertificate-parent',
					//	'callback'       => 'certificate_add_repaint_callback',
						'method'         => 'replace',
						'effect'         => 'none',
						'event'          => 'change',
						'keypress'       => true,
						'progress' => array(
								'type'     => 'throbber',
								'message'  => ''
						),
				), 
		        '#disabled' => $readOnly,
		);
		
	//	if($compliance_completed == 'manager') 
		{
			//
		
			
		} 
	//	else if ($compliance_completed == 'user') 
		{
			$sUrl = "learning/cert/username/autocomplete";
			
			$attrOnfocus = '(function ($) {' . '$("#edit-user-text").autocomplete("/?q=' . $sUrl . '", ' . '{' . "minChars: 3, " . "max: 50, " . "autoFill: true, " . "mustMatch: false, " . "matchContains: false, " . 'inputClass: "ac_input", ' . 'loadingClass: "ac_loading", ' . '}' . ');' . '}' . ')(jQuery);';
			
			
			$attributesnew = array();
			$attributesnew['onfocus'][] = $attrOnfocus;
			$attributesnew['placeholder'] = t('Enter').' '.t('LBL107');
			
		
			$form['user_text'] = array(
					'#type' => 'textfield',
					'#prefix' => '<div class="input_fellow_username inpSearch"><a>&nbsp;</a>',
					'#suffix' => '</div>',
					'#title' => t('User'),
					'#title_display' => 'invisible',
					'#default_value' =>(!empty($entityId))? $defaultDetails['user_name']: '',
					//'#disabled' => $readOnly,
					'#attributes' => $attributesnew,
					'#size' => 17,//$viewWidthInChars,
					'#disabled'      => $readOnlyCompliance,
					'#maxlength' => 300,
			        '#disabled' => $readOnly,
			       
					//'#description' => $description
			);
		} 
	//	else if($compliance_completed == 'ExternalUser') 
		{
		    $attributesExtUser = array();
		    $attributesExtUser['tabindex'] = '13';
		    $attributesExtUser['placeholder'] = t('Enter').' '.t('LBL107');
		    $attributesExtUser['class'] = array('skill-text-box');
		
			$form['ext_user_name'] = array(
				'#type' => 'textfield',
				'#prefix' => '<div class="ext_user_fieldset"> <div class="ext_username"> <span class="external-users-name"><label>'.t('LBL107').':<span class="addedit-mandatory">*</span></label></span>',
				'#suffix' => '</div>',
				//'#title' => t('Skill Name'),
				'#maxlength' => 300,
				'#default_value' => (!empty($entityId))? $defaultDetails['user_name']: '',
			    '#attributes' => $attributesExtUser,
			    '#disabled' => $readOnly,
		);
			
			$attributesExtPhone = array();
			$attributesExtPhone['tabindex'] = '13';
			$attributesExtPhone['placeholder'] = t('Enter').' '.t('LBL070').' '.t('LBL161');
			$attributesExtPhone['class'] = array('skill-text-box');
			
			$form['ext_phone_no'] = array(
					'#type' => 'textfield',
					'#prefix' => '<div class="ext_phone-number"> <span class="external-phone-number"><label>'.t('LBL070').':<span class="addedit-mandatory">*</span></label></span>',
					'#suffix' => '</div>',
					//'#title' => t('Skill Name'),
					'#maxlength' => 300,
					'#default_value' => (!empty($entityId))? $defaultDetails['mobile_no']: '',
					//'#attributes' => $read,
			        '#disabled' => $readOnly,
			        '#attributes' => $attributesExtPhone,
			);
			
			$attributesExtEmail = array();
			$attributesExtEmail['tabindex'] = '13';
			$attributesExtEmail['placeholder'] =  t('Enter').' Email ID';
			$attributesExtEmail['class'] = array('skill-text-box');
			
			$form['ext_email'] = array(
					'#type' => 'textfield',
					'#prefix' => '<div class="ext_email"> <span class="external-email"><label>'.t('LBL061').':<span class="addedit-mandatory">*</span></label></span>',
					'#suffix' => '</div> </div>',
					//'#title' => t('Skill Name'),
					'#maxlength' => 300,
					'#default_value' => (!empty($entityId))? $defaultDetails['email']: '',
					//'#attributes' => $read,
			        '#disabled' => $readOnly,
			        '#attributes' => $attributesExtEmail,
			);
			
			
		}
		}
		$form['verification_by_end'] = array(
				'#type' => 'markup',
				'#markup' => '</div>'
		);
	/* 	$form['display_to_others'] = array(
				'#type' => 'select',
				'#prefix' => '<div class="disp-parent"> <span class="disp-label"><label>'.t('LBL834').':</label></span><div class="expertus-dropdown-bg-addSkill"><div class="expertus-dropdown-icon-addSkill ">',
				'#suffix' => '</div></div></div>',
				//'#title' => t('Display to Others'),
				'#options'=> array('Yes'=>t('Yes'),'No'=>t('No')),
				//'#options'=> getProfileItemNamesKeyed('cre_usr_skl_'),//array('Beginner'=>'Beginner','Intermediate'=>'Intermediate','Expierence'=>'Expierence'),
				'#default_value' => $defaultDetails['display_to_others'],
				'#attributes' => array('tabindex' => '13','class'=>array('skill-dropdown-disp')),
		); */
		$suffixDiv = '';
		$prefixDiv = '';
		if($theme_key == 'expertusoneV2') {
	  $prefixDiv = '<div class="white-btn-bg-container"><div class="white-btn-bg-left"></div>';
	  $suffixDiv    = '<div class="white-btn-bg-right"></div></div>';
		}
		$setAttributesCancel['class'] = array('admin-action-button-middle-bg white-btn-bg-middle');
		$setAttributesCancel['onClick'][] = 'closeCertidialog();';
		$form['cancel_skills'] = array(
				'#type' => 'submit',
				'#value' => t('LBL123'),
				'#title' => 'Close',
				'#prefix' => '<div class="learner-save-certi-button"> <div class="addedit-form-cancel-container-actions">'.$prefixDiv,
				'#suffix' => $suffixDiv,
				'#attributes' => $setAttributesCancel,
				'#name' => 'Cancel skills '
		);
		 
		$addSkillSaveAttributes['class'][]= 'admin-save-button-middle-bg';
		$addSkillSaveAttributes['class'][] = 'addedit-form-expertusone-throbber';
		$addSkillSaveAttributes['data-wrapperid'] = array('mycertificate-parent');
		$form['add_certi_save_button'] = array(
				'#type' => 'submit',
			//	'#value' => t('LBL141'),
		        '#value' => t('LBL124'),
		        '#name' => 'save',
				'#prefix' => '<div class="certi-save-button-container"><div class="admin-save-button-left-bg"></div>',
				'#suffix' => '<div class="admin-save-button-right-bg"></div></div><div class="clearBoth"></div></div></div>',
				//'#submit' => array('skill_details_add_row'),
				'#attributes' => $addSkillSaveAttributes,
				'#ajax' => array(
						'wrapper' => 'mycertificate-parent',
						'callback' => 'certificate_add_callback',
						'method' => 'replace',
						'effect' => 'none',
						'event'=>'click',
						'entityId'=>$entityId,
						'from_page'=>$from_page,
						'keypress' => true,
						'progress' => array(
								'type' => 'throbber',
								'message' => ''
						),
				)
				//'#ajax' => array(
				// 'callback' => 'skill_set_add_callback',
				//'wrapper' => 'myskill-parent',
				// ),
		);
				$form['start-my-certi-end'] = array(
						'#type' => 'markup',
						'#markup' => '</div>'
				);
				$form['submit'] = ajax_pre_render_element($form['submit']);
				//YOURMODULE_page();
				// Print JS
				//drupal_get_js();
				return $form;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_my_skill_set_add_form', $ex);
		expertusErrorThrow($ex);
	}


}
function certificate_add_repaint_callback($form, &$form_state){
	try {
	    
	    expDebug::dPrint("completionrule save callback final result abhii - ");
	    
	  //  $commands[] = onAfterLoadFormCert(3);
	    
		return $form;
		
	   /*  return array(
	            '#type' => 'ajax',
	            '#commands' => $commands
	    ); 
	    
	  */  
	} catch (Exception $ex) {
		watchdog_exception('certificate_add_repaint_callback', $ex);
		expertusErrorThrow($ex);
	} 
}

function certificate_add_callback($form, &$form_state){
	try{  
		
		expDebug::dPrint("completionrule save callback final result - ");
		
		
		
		
		
		
		
		
		
		expDebug::dPrint(' $statusMsgHTML san entereddd= '  );
		$entityId = $form_state['triggering_element']['#ajax']['entityId'];
		$fromPage = $form_state['triggering_element']['#ajax']['from_page'];

		$min_form_state = array(
				'ajax' => TRUE,
				're_render' => TRUE,
				'no_redirect' => TRUE,
				'build_info' => array('args' => array('ajax'))
		);

		$form_state = $min_form_state;

		$formId = 'exp_sp_my_certificate_add_form';

		$commands = array();
		$builtForm = drupal_build_form($formId, $form_state);
		// $commands[] = ajax_command_replace(NULL, drupal_render($builtForm));
	//	$commands[] = ajax_command_replace('#myskill-parent', drupal_render($builtForm));
	//	$commands[] = ajax_command_replace('#mycertificate-parent', drupal_render($builtForm));
      
		$statusMsgHTML = theme('status_messages');

		expDebug::dPrint(' $statusMsgHTML = ' . print_r($statusMsgHTML, true) , 4);
		expDebug::dPrint(' $statusMsgHTMLsannn = ' . print_r($form_state, true) , 4);
		expDebug::dPrint(' $statusMsgHTMLsannnform = ' . print_r($form, true) , 4);
		if (!empty($statusMsgHTML)) {
			// Show the messages
			$commands[] = ajax_command_html('#paintContentAddcert #show_expertus_message', $statusMsgHTML);
		}
		else{
			 $commands[] = ajax_command_replace('#mycertificate-parent', drupal_render($form));
		}
		$commands[] = onAfterLoadFormCert();
		
		return array(
				'#type' => 'ajax',
				'#commands' => $commands
		);
	}catch (Exception $ex) {
		watchdog_exception('skill_set_add_callback', $ex);
		throw $ex;
	}
}

function exp_sp_my_certificate_add_form_validate ($form, &$form_state) {
	try{
		expDebug::dPrint('exp_sp_my_certificate validare : '.print_r($form_state,true) , 5);
		expDebug::dPrint('exp_sp_my_certificate validare formmm: '.print_r($form,true) , 5);
		
			
			$form['certificate_name']['#title'] = t('LBL205').' '.strtolower(t('LBL083'));
			$form['user_text']['#title'] = t('LBL054');
			$form['ext_user_name']['#title'] = t('LBL107');
			$form['ext_email']['#title'] = t('LBL061');
			$form['ext_phone_no']['#title'] = t('LBL070').' '.t('LBL161');
		    if(isset($form_state['values']["verify_required"]) && $form_state['values']["verify_required"]==1)
		    {
		      if($form_state['values']["verification_by"] == "user"){
		            addEditCheckMandatoryFields($form, $form_state, array(
		   	        'certificate_name',
			        'user_text',
			    ));
    		     $username = $form_state['values']['user_text'];
    			expDebug::dPrint('user name : '.print_r($username,true) , 5);
    			$select = db_select('slt_person','per');
    			$select->addExpression('count(*)','Count');
    			$select->condition('per.user_name',$username, '=');
    			expDebug::dPrintDBAPI("Get User id:-",$select);
    			$ids = $select->execute()->fetchAll();
			
			     expDebug::dPrint('user name $ids: '.print_r($ids,true) , 5);
			        if($ids[0]->count == 0){
			            form_set_error('user_text',t('ERR068'));
			            $form_state["storage"]["form_validate"] = false;
			            $form_state['esign_show_popup']         = false;
			    }
		      }
		      else if($form_state['values']["verification_by"] == "manager"){
		            addEditCheckMandatoryFields($form, $form_state, array(
		   	        'certificate_name',
			    ));
		         $usr =  getmgrUsername();
		         if(empty($usr)){
		             form_set_error('verification_by',t('MSG947'));
		             $form_state["storage"]["form_validate"] = false;
		             $form_state['esign_show_popup']         = false;
		         }
		            
		      } 
			 else if($form_state['values']["verification_by"] == "ExternalUser"){
		    	addEditCheckMandatoryFields($form, $form_state, array(
		   	        'certificate_name',
			        'ext_user_name',
			        'ext_email',
		   	        'ext_phone_no',
			    ));
		    	
		    	 if (!filter_var($form_state['values']['ext_email'], FILTER_VALIDATE_EMAIL)) {
		    	    form_set_error('ext_email',t('ERR002'));
    	            $form_state["storage"]["form_validate"] = false;
                    $form_state['esign_show_popup']         = false;
		    	} 
		    
		    if(!is_numeric($form_state['values']['ext_phone_no']) ){
		    	    form_set_error('ext_phone_no',t('LBL070').' '.t('LBL161').' '. t('ERR250'));
		    	    $form_state["storage"]["form_validate"] = false;
		    	    $form_state['esign_show_popup']         = false;
		    	}
		    	
		    	
		    	
		     }
		    }
		  else{
		      addEditCheckMandatoryFields($form, $form_state, array(
		              'certificate_name',
		      ));
		  } 

		  $fromDt = $form_state['values']['valid_from'];
		  $toDt = $form_state['values']['valid_to'];
		  
		  $StartDate = str_replace("-","/", $fromDt);
		  $EndDate = str_replace("-","/", $toDt);
		  if(($EndDate!="mm/dd/yyyy") && (strtotime($EndDate) < strtotime($StartDate))){
		      form_set_error('valid_to',t('ERR1765'));
		      $form_state["storage"]["form_validate"] = false;
		      $form_state['esign_show_popup']= false;
		  }
		  
		  // file validation 
	   expDebug::dPrint('exp_sp_my_certificate validare ssssssssssss: '. $_FILES['files']['name']['upload-certificate'] , 5);
	     $ext = pathinfo($_FILES['files']['name']['upload-certificate'], PATHINFO_EXTENSION);
		if(!empty($_FILES['files']['name']['upload-certificate']) && ($ext != 'png' && $ext != 'pdf' && $ext != 'PNG' && $ext != 'PDF'))
		{
		    form_set_error('files[upload-certificate]',t('MSG1113'));
		    $form_state["storage"]["form_validate"] = false;
		    $form_state['esign_show_popup']         = false;
		}
		  
			
		$form_state['rebuild'] = TRUE;
			return false;
			//
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_my_certificate_add_form_validate', $ex);
		throw $ex;
	}
}

function exp_sp_my_certificate_add_form_submit($form, &$form_state) {
	try{
		expDebug::dPrint('exp_sp_my_certificate_add_form camee : '.print_r($form_state,true) , 5);
		
		$config           = getConfig("exp_sp");
		$cert_expiry_reminder = isset($config["Certificate_verification_expiry"]) ? $config["Certificate_verification_expiry"] : 10;
		
		$entityId = $form_state['entity_id'];
		$option_value = $form_state['option_value'];
		$from_page = $form_state['from_page'];
		
		$select = db_select('slt_skill_set','skill');
		$select->addField('skill','verification_status','verification_status');
		$select->condition('skill.id',$entityId,'=');
		expDebug::dPrintDBAPI("Get verification status from db ",$select);
		$verif_status = $select->execute()->fetchField();
		expDebug::dPrintDBAPI("Get verification status from db ",$verif_status);
		if($option_value == "edit" && !empty($entityId)) {
			update_certificate_details($form, $form_state);
			if(isset($form_state['values']["verify_required"]) && $form_state['values']["verify_required"]==1 && $verif_status == "Not verified"){
			    expertus_set_message(t('MSG1111', array('@cert_expiry_reminder'=>$cert_expiry_reminder)));
			}
			else if(($verif_status == "Not verified" || $verif_status == "Verified") || (isset($form_state['values']["verify_required"]) && $form_state['values']["verify_required"]==1 && $verif_status == "Verification pending")){
			    expertus_set_message(t('MSG601').'.');
			}
			else if($verif_status == "Rejected" && isset($form_state['values']["verify_required"]) && $form_state['values']["verify_required"]==1){
			    expertus_set_message(t('MSG1111', array('@cert_expiry_reminder'=>$cert_expiry_reminder)));
			}
			else{
			    expertus_set_message(t('MSG601').'.');
			}
		}else{
			$return_val = add_new_certificate_details($form, $form_state);
			if(isset($form_state['values']["verify_required"]) && $form_state['values']["verify_required"]==1){
			        expertus_set_message(t('MSG1111', array('@cert_expiry_reminder'=>$cert_expiry_reminder)));
			}
			else{
			    expertus_set_message(t('LBL272').' '.t('MSG600').'.');
			}
			$form_state['option_value'] = 'edit';
			$form_state['entity_id'] = $return_val;
			$form_state['build_info']['args'][]      = $return_val;
			
		}
		$form_state['rebuild']  = false;

		
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_my_certificate_add_form', $ex);
		throw $ex;
	}

}
function add_new_certificate_details($form, $form_state) {
	$txn = db_transaction();
	expDebug::dPrint('Runnnfinf the function ', 5);
	try{
		expDebug::dPrint('add_new_skill_details : '.print_r($form_state,true) , 5);
		$userId = getIdOfLoggedInUser();
		$verification_from = $form_state['values']["verification_by"];
	//	if(!empty($form_state['values']['Add-certi-details'])){
			
			include_once $_SERVER["DOCUMENT_ROOT"]."/includes/file.inc";
			$validators  = array(
					'file_validate_extensions' => array('png pdf PDF PNG'), // Validate extensions.
					// 'file_validate_is_image' => array(), // Validates file is really an image.
					// 'file_validate_image_resolution' => array('85x85'),
			);
			expDebug::dPrint('add_new_neeeeeeeeegfdgfdgfdgdfse '.print_r($verification_from,true) , 5);
		//}
		$certificate = file_save_upload('upload-certificate', $validators,$destination = FALSE);
		expDebug::dPrint(' $filedirectory =eeeeee ' . print_r($certificate, true) , 4);
		if(!empty($certificate)) {
			expDebug::dPrint(' $filedirectoryddddddddddddddd = ' . print_r($certificate, true) , 4);
			if (!$certificate->status) { // i.e. if picture is a temporary file
				// Prepare the pictures directory.
				$filedirectory = file_default_scheme() . '://' . variable_get('certificate_verify', 'certificate');
				expDebug::dPrint(' $filedirectory = ' . print_r($filedirectory, true) , 4);
				file_prepare_directory($filedirectory, FILE_CREATE_DIRECTORY);
		
				// Prepare the unique file name to place the picture under the $filedirectory.
				expDebug::dPrint(' $info returned by image_get_info = ' . print_r($info, true) , 4);
				$destination = file_stream_wrapper_uri_normalize($filedirectory . '/'.REQUEST_TIME . '-' .$certificate->filename);
				expDebug::dPrint(' $destination = ' . print_r($destination, true) , 4);
		
				// Move the temporary file into the final location.
				if ($certificatemove = file_move($certificate, $destination, FILE_EXISTS_RENAME)) {
					expDebug::dPrint(' $picture returned by file_move() = ' . print_r($announcementmove, true) , 4);
		
					$certificatemove->status = FILE_STATUS_PERMANENT;
					$save_certificate = file_save($certificatemove);
					expDebug::dPrint(' $picture returned by file_save() = ' . print_r($save_certificate, true) , 4);
		
					$sitepath      ="sites/default/files/certificate/";
					$newcertificateName =$sitepath.$save_certificate->filename;
					expDebug::dPrint(' $picture returned by file_save() = ' . print_r($newcertificateName, true) , 4);
				}
			}
		}
		
		$old_dateformat  = str_replace("-","/",$form_state['values']['valid_from']);
		$start_date      = date_format(date_create( $old_dateformat),'Y-m-d');
		
		$old_dateformat  = str_replace("-","/",$form_state['values']['valid_to']);
		$end_date      = date_format(date_create( $old_dateformat),'Y-m-d');
		
		expDebug::dPrint(' $picture new saveee start dateee) = ' . print_r($form_state['values']['user_text'], true) , 4);
		expDebug::dPrint(' $picture new saveee end date) = ' . print_r($verification_from, true) , 4);
		
		$auditUserEntry = "";
		
		if($form_state['values']['verify_required']==1  && $verification_from == "manager"){
			expDebug::dPrint(' entereddd todayyyyyyyy' . print_r($end_date, true) , 4);
			$userName = getmgrUsername() ;
			$cert_type = "Internal";
			$valid_uname = true;
		}elseif($form_state['values']['verify_required']==1  && $verification_from == "user"){
		    expDebug::dPrint(' $picture new saveee start dateee) dddd= ' );
			$userName = $form_state['values']['user_text'] ;
			$select = db_select('slt_person','per');
			$select->addExpression('count(*)','Count');
			$select->condition('per.user_name',$userName, '=');
			expDebug::dPrintDBAPI("Get User id userName:-",$select);
			$ids = $select->execute()->fetchAll();
			expDebug::dPrint('user name $ids: '.print_r($ids,true) , 5);
			if($ids[0]->count == 0){
			    $valid_uname = false;
			}
			else{
    			$cert_type = "Internal";
    			$auditUserEntry = 'user_text';
    			$valid_uname = true;
			}
		}elseif($form_state['values']['verify_required']==1  && $verification_from == "ExternalUser"){
			$userName = $form_state['values']['ext_user_name'] ;
			$email = $form_state['values']['ext_email'] ;
			$mobile_no = $form_state['values']['ext_phone_no'] ;
			$cert_type = "External";
			$auditUserEntry = 'ext_user_name';
			$valid_uname = true;
		}
		if(empty( $form_state['values']['verify_required'])){
			$verification_status =  "Not verified";
		}
		if(!empty($userName) && $form_state['values']['verify_required']==1){
		
			$verification_status =  "Verification pending";
		}
		if($valid_uname || $form_state['values']['verify_required'] != 1){
		$insertStmt = db_insert('slt_skill_set');
			$fields = array(
			'skill_name'           => $form_state['values']['certificate_name'],
			'company'          => $form_state['values']['company_name'],
			'type'    => 'certificate',
			'certificate_number'    => $form_state['values']['certificate_number'],
			'valid_from'    => $start_date,
			'valid_to'    => $end_date,
			'certificate_img'    => $newcertificateName,
		//	'certificate_content'    => $form_state['values']['display_to_others'],
			'display_to_others'    => ($form_state['values']['display_to_others'] ==1) ? 'Yes' : 'No',
			'verification_required'    => $form_state['values']['verify_required'],
					'certificate_type' => $cert_type,
		//	'verification_by_user_id'    => $form_state['values']['display_to_others'],
		//	'request_verification_email'    => $form_state['values']['display_to_others'],
		//	'request_verification_phone_no'    => $form_state['values']['display_to_others'],
		'verification_status' => $verification_status ,
				'user_name'    =>$userName,
			'email' =>$email,  
			'mobile_no' =>$mobile_no ,
			'user_id'              => $userId,     //change for the ticket 0020909 = For updating tp in skills//
			'created_by'           => $userId,
			'created_on'           => now(),
			'updated_by'           => $userId,
			'updated_on'           => now()

			);
			$insertStmt->fields($fields);
			expDebug::dPrintDBAPI(' Fetch users list query 2 =sasas ' , $insertStmt );
			$skillId = $insertStmt->execute();
			expDebug::dPrint(' $picture returned by file_save()aaaa = ' . print_r($skillId, true) , 4);
				
			$userId = getSltpersonUserId();
			
			$qry = "select id from slt_person where user_name= '".$userName."' order by id desc";
			expDebug::dPrint('add_new_skill_details aaaaaaaaaaaaaaaaaaaaaaaa: '.print_r($qry,true) , 5);
			$verifier_id = db_query($qry)->fetchField();
		//	$verifier_id=db_query('select id from slt_person where user_name= "'.$$userName.'" order by id desc ')->fetchField();
			expDebug::dPrint('$learnerid'.$verifier_id);
			expDebug::dPrint('add_new_skill_details : '.print_r($form_state['values'],true) , 5);
			if($form_state['values']['verify_required']==1  && $verification_from == "ExternalUser"){
				$verifier_id = "External";
			}		
			if(!empty($userName) && $form_state['values']['verify_required']==1){
				insertNotification('RequestCertificateVerification', $skillId, $verifier_id, $userId, $userId);
			//	
			}

	
			
			$fields_audit = array(
			        'certificate_name'           => $form_state['values']['certificate_name'],
			        'company_name'          => $form_state['values']['company_name'],
			        'certificate_number'    => $form_state['values']['certificate_number'],
			        'valid_from'    => $start_date,
			        'valid_to'    => $end_date,
			        'certificate_img'    => $newcertificateName,
			        //	'certificate_content'    => $form_state['values']['display_to_others'],
			        'display_to_others'    => ($form_state['values']['display_to_others'] ==1) ? 'Yes' : 'No',
			        'verify_required'    => $form_state['values']['verify_required'],
			      
			        $auditUserEntry    => $userName,
			        
			       /*  'user_text'=>$userName, */

			        'ext_phone_no' => $mobile_no,
			        'ext_email'	=> $email,       
			       
			        'user_id'              => $userId,     //change for the ticket 0020909 = For updating tp in skills//
			      
			);
			

			$fieldsList = array('certificate_name', 'company_name','certificate_number','valid_from','valid_to','certificate_img','display_to_others','verification_required',$auditUserEntry,'email','mobile_no','user_id');
			make_audit_trail_entries($fields_audit,  $userId, null, $skillId, 'Inserted', 'cre_sys_obt_usr', 'exp_sp_my_skill', 'addnewCertificatedetails',
		$fieldsList,$userId);
		}
		
		return $skillId;
	}catch (Exception $ex) {
		$txn->rollback();
		watchdog_exception('add_new_skill_details', $ex);
		throw $ex;
	}
	unset($txn);
}

function update_certificate_details($form, $form_state) {
    
    //hit the db and get the certificate status for not triggering mail when status in pending
    
    
	$txn = db_transaction();
	expDebug::dPrint('Runnnfinf the function ', 5);
	try{
		expDebug::dPrint('add_new_skill_details : '.print_r($form_state,true) , 5);
		$userId = getIdOfLoggedInUser();
		$verification_from = $form_state['values']["verification_by"];
	//	if(!empty($form_state['values']['Add-certi-details'])){
			
			include_once $_SERVER["DOCUMENT_ROOT"]."/includes/file.inc";
			$validators  = array(
					'file_validate_extensions' => array('png pdf PNG PDF'), // Validate extensions.
				//	 'file_validate_is_image' => array(), // Validates file is really an image.
				//	 'file_validate_image_resolution' => array('85x85'),
			);
			expDebug::dPrint('add_new_neeeeeeeeee '.print_r($verification_from,true) , 5);
		//}
		$certificate = file_save_upload('upload-certificate', $validators,$destination = FALSE);
		expDebug::dPrint(' $filedirectory =eeeeee ' . print_r($certificate, true) , 4);
		
		
		if(!empty($certificate))
		{
			expDebug::dPrint(' $filedirectoryddddddddddddddd = ' . print_r($certificate, true) , 4);
			if (!$certificate->status) { // i.e. if picture is a temporary file
				// Prepare the pictures directory.
				$filedirectory = file_default_scheme() . '://' . variable_get('announcement_attachment_path', 'certificate');
				expDebug::dPrint(' $filedirectory = ' . print_r($filedirectory, true) , 4);
				file_prepare_directory($filedirectory, FILE_CREATE_DIRECTORY);
		
				// Prepare the unique file name to place the picture under the $filedirectory.
				expDebug::dPrint(' $info returned by image_get_info = ' . print_r($info, true) , 4);
				$destination = file_stream_wrapper_uri_normalize($filedirectory . '/'.REQUEST_TIME . '-' .$certificate->filename);
				expDebug::dPrint(' $destination = ' . print_r($destination, true) , 4);
		
				// Move the temporary file into the final location.
				if ($certificatemove = file_move($certificate, $destination, FILE_EXISTS_RENAME)) {
					expDebug::dPrint(' $picture returned by file_move() = ' . print_r($announcementmove, true) , 4);
		
					$certificatemove->status = FILE_STATUS_PERMANENT;
					$save_certificate = file_save($certificatemove);
					expDebug::dPrint(' $picture returned by file_save() = ' . print_r($save_certificate, true) , 4);
		
					$sitepath      ="sites/default/files/certificate/";
					$newcertificateName =$sitepath.$save_certificate->filename;
					expDebug::dPrint(' $picture returned by file_save() = ' . print_r($newcertificateName, true) , 4);
				}
			}
		}
		
		$old_dateformat  = str_replace("-","/",$form_state['values']['valid_from']);
		expDebug::dPrint(' $picture new saveee start dateeewww) = ' . print_r($old_dateformat, true) , 4);
		$start_date      = date_format(date_create( $old_dateformat),'Y-m-d');
		
		$old_dateformat  = str_replace("-","/",$form_state['values']['valid_to']);
		$end_date      = date_format(date_create( $old_dateformat),'Y-m-d');
		
		expDebug::dPrint(' $picture new saveee start dateee) = ' . print_r($start_date, true) , 4);
		expDebug::dPrint(' $picture new saveee end date) = ' . print_r($end_date, true) , 4);
		
		$verification_from  = isset($form_state['values']["verification_by"]) ? $form_state['values']["verification_by"]: '';
		$email = '';
		$mobile_no = '';
		$auditUserEntry = '';
		if($form_state['values']['verify_required']==1  && $verification_from == "manager"){
			$cert_type = "Internal";
			$userName = getmgrUsername() ;
		}elseif($form_state['values']['verify_required']==1  && $verification_from == "user"){
			$cert_type = "Internal";
			$userName = $form_state['values']['user_text'] ;
			$auditUserEntry = 'user_text';
		}elseif($form_state['values']['verify_required']==1  && $verification_from == "ExternalUser"){
			$userName = $form_state['values']['ext_user_name'] ;
			$email = $form_state['values']['ext_email'] ;
			$mobile_no = $form_state['values']['ext_phone_no'] ;
			$cert_type = "External";
			$auditUserEntry = 'ext_user_name';
		}
	
	/* 	 $defaultQryStr     = 'SELECT skill_name as certificate_name, company as company_name,certificate_number,certificate_img, verification_required as verify_required,display_to_others,user_name as '.$auditUserEntry.',email as ext_email,mobile_no as ext_phone_no,valid_from,valid_to,verification_status from slt_skill_set where id = :cid';
		$defaultQryStrArgs = array(
		        ':cid' => $form_state['entity_id']
		);
		$defaultQry        = db_query($defaultQryStr, $defaultQryStrArgs);
		expDebug::dPrintDBAPI('$defaultQry', $defaultQry, $defaultQryStrArgs);
		$default = $defaultQry->fetchAll(); 
		expDebug::dPrint('add_new_skillcron check abhi : '.print_r($default,true) , 5); */
	
	    $select = db_select('slt_skill_set','skill');
		$select->addField('skill','skill_name','certificate_name');
		$select->addField('skill','company','company_name');
		$select->addField('skill','certificate_number','certificate_number');
		$select->addField('skill','certificate_img','certificate_img');
		$select->addField('skill','verification_required','verify_required');
		$select->addField('skill','display_to_others','display_to_others');
		
		if($form_state['values']['verify_required']==1  && ($verification_from == "ExternalUser" || $verification_from == "user"))
		  $select->addField('skill','user_name',$auditUserEntry);
		
		$select->addField('skill','email','ext_email');
		$select->addField('skill','mobile_no','ext_phone_no');
		$select->addField('skill','valid_from','valid_from');
		$select->addField('skill','valid_to','valid_to');
		$select->addField('skill','verification_status','verification_status');
	
		$select->condition('skill.id',$form_state['entity_id'],'=');
		$default = $select->execute()->fetchAll();
	    expDebug::dPrintDBAPI(' Fetch users list query 2 abhi ' , $select );
	    expDebug::dPrint('add_new_skillcron check abhi1 : '.print_r($default,true) , 5);  
		
		
		
	
		$verification_status = ($userName!=NULL)?'Verification pending':'Not verified';
		$updateStmt = db_update('slt_skill_set');
		
		if($default[0]->verification_status != "Verification pending" && $default[0]->verification_status != "Verified")
		{
			$fields = array(
			'skill_name'           => $form_state['values']['certificate_name'],
			'company'          => $form_state['values']['company_name'],
			'type'    => 'certificate',
			'certificate_number'    => $form_state['values']['certificate_number'],
			'verification_status'  => $verification_status,
			'valid_from'    => $start_date,
			'valid_to'    => $end_date,
			'certificate_img'    => $newcertificateName,
			'display_to_others'    => ($form_state['values']['display_to_others'] ==1) ? 'Yes' : 'No',
			'verification_required'    => $form_state['values']['verify_required'],
			'user_name'    =>$userName,
			'email' =>$email,
			'mobile_no' =>$mobile_no ,
					'certificate_type' => $cert_type,
			'updated_by'           => $userId,
			'updated_on'           => now()

			);
		}
		else{
		    $fields = array(
		       'display_to_others'    => ($form_state['values']['display_to_others'] ==1) ? 'Yes' : 'No',
		            );
		}
		
		
		if(empty($newcertificateName) && !empty($default[0]->certificate_img)){
		    unset($fields['certificate_img']);
		    
		}
			$updateStmt->fields($fields);
			$updateStmt->condition('id', $form_state['entity_id']);
			$numUpdated = $updateStmt->execute();
		
			$userId = getSltpersonUserId();
			
			$qry = "select id from slt_person where user_name= '".$userName."' order by id desc";
			expDebug::dPrint('add_new_skill_details : '.print_r($qry,true) , 5);
			$verifier_id = db_query($qry)->fetchField();
			//	$verifier_id=db_query('select id from slt_person where user_name= "'.$$userName.'" order by id desc ')->fetchField();
			expDebug::dPrint('$learnerid'.$verifier_id);
			expDebug::dPrint('add_new_skill_details : '.print_r($form_state['values'],true) , 5);
			if($form_state['values']['verify_required']==1  && $verification_from == "ExternalUser"){
				$verifier_id = "External";
			}
			
			
			if(!empty($userName) && $form_state['values']['verify_required']==1 && $default[0]->verification_status != "Verification pending" && $default[0]->verification_status != "Verified"){ 
				insertNotification('RequestCertificateVerification', $numUpdated, $verifier_id, $userId, $userId);
			}
	
			
			$fields_audit = array(
			        'certificate_name'           => $form_state['values']['certificate_name'],
			        'company_name'          => $form_state['values']['company_name'],
			        'certificate_number'    => $form_state['values']['certificate_number'],
			        'valid_from'    =>    ($start_date == "")?"0000-00-00":$start_date,
			        'valid_to'    =>      ($end_date == "")?"0000-00-00":$end_date,
			        'certificate_img'    => $newcertificateName,
			        //	'certificate_content'    => $form_state['values']['display_to_others'],
			        'display_to_others'    => ($form_state['values']['display_to_others'] ==1) ? 'Yes' : 'No',
			        'verify_required'    => $form_state['values']['verify_required'],
			        $auditUserEntry    => $userName,
			        'ext_phone_no' => $mobile_no,
			        'ext_email'	=> $email,
			         
			        //    'user_id'              => $userId,      //change for the ticket 0020909 = For updating tp in skills//
			
			);
			
			
				
		if($form_state['values']['verify_required']==1  && ($verification_from == "ExternalUser" || $verification_from == "user"))
		{
			$fieldsList = array( 'certificate_name','company_name','certificate_number','valid_from','valid_to','certificate_img','display_to_others','verify_required',$auditUserEntry,'ext_email','ext_phone_no','user_id');
		}
		else{
		    $fieldsList = array( 'certificate_name','company_name','certificate_number','valid_from','valid_to','certificate_img','display_to_others','verify_required','ext_email','ext_phone_no','user_id');
		    
		}	
			make_audit_trail_entries($fields_audit,  $userId, $default, $form_state['entity_id'], 'Updated', 'cre_sys_obt_usr', 'exp_sp_my_skill', 'updatecertificatedetails',
		        $fieldsList,$userId);
			

	}catch (Exception $ex) {
		$txn->rollback();
		watchdog_exception('add_new_skill_details', $ex);
		throw $ex;
	}
	unset($txn);
}
function myProfileExport(){
	try{
	$uid = getIdOfLoggedInUser();
	$select = getSkillCertificates('export');
	$select->groupBy('skill.id');
	expDebug::dPrintDBAPI('myProfileExport called seelllllllcccc =',$select);
	$colHeadersMap = array(
			t('LBL036')  => 'type',
	        t('LBL876').'/'.t('LBL205').' '.strtolower(t('LBL107'))   => 'skill_name',
			t('LBL691')   => 'full_name',
			t('LBL835')  => 'proficiency',
			t('LBL834')  => 'display_to_others',   //show to others
			t('Company')  => 'company',   //company
			t('LBL205').' '.t('LBL161')=> 'certificate_number',
			t('Valid from')  => 'valid_from',
			t('Valid to')  => 'valid_to',
			t('Verification').' '.t('LBL102')  => 'verification_status',
			t('Verification').' '.t('by')  => 'verifier',
			
	);
	SendNarrowSearchResultsAsCSVFile($select, $colHeadersMap, 'export', array(), '', 'profile_export');
	}catch (Exception $ex) {
		watchdog_exception('myProfileExport', $ex);
		throw $ex;
	}
}


function onAfterLoadFormCert(){
    expDebug::dPrint("onAfterLoadFormCertABHIII ", 4);
    try{
        return array(
                'command' => 'onAfterLoadFormCert',
              
        );

    }catch (Exception $ex) {
        watchdog_exception('onAfterLoadFormCert', $ex);
        expertusErrorThrow($ex);
    }
}

