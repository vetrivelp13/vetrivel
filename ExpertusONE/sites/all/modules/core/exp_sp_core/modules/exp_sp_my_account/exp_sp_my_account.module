<?php

/**
 * Implementation of hook_init().
 */
function exp_sp_my_account_init() {
	try{
  global $user;
  expDebug::dPrint("My Account init",4);
 // if(arg(0) == 'batch')
  	require_once "exp_sp_my_account.inc";
  if((arg(1) == 'my-account') && ($user->uid==0)) {
    $query = array('destination' => "learning/my-account");
    //drupal_goto('learning/login', array('query' => $query));
    drupal_goto('/', array('query' => $query));
  }else if(arg(1) == 'my-account'){
        $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
        $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
        drupal_add_css(drupal_get_path('module', 'exp_sp_userregister') .'/exp_sp_userregister_V2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  	drupal_add_js(drupal_get_path('module', 'exp_sp_my_account').'/exp_sp_my_account.js', array('type' => 'file', 'group' => JS_DEFAULT));
        drupal_add_js(drupal_get_path('module', 'exp_sp_userregister').'/exp_sp_userregister.js', array('type' => 'file', 'group' => JS_DEFAULT));
  	drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.js', $js_module_optional);
        enableCtool();
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_my_account_init', $ex);
  	expertusErrorThrow($ex);
  }
}
/**
* Implementation of hook_block_info().
 */
function exp_sp_my_account_block_info() {
	try{
  $blocks = array();
  $blocks['my_account_details'] = array(
    'info' => t('My Account Details'),
  	'cache' => DRUPAL_CACHE_PER_ROLE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'learning/my-account
    learning/my-account/preference
    learning/my-account/shopping-cart'
  );
  return $blocks;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_my_account_block_info', $ex);
  	expertusErrorThrow($ex);
  }
}



/**
 * Implementation of hook_block_view().
 */
function exp_sp_my_account_block_view($delta = ''){
  try{    
  $block = array();
  switch ($delta) {
    case 'my_account_details':
        $block['subject'] = t('Account');
        if(arg(2)=='preference'){
          $block['content'] =  drupal_get_form('exp_sp_my_account_preference_form');
        }elseif(arg(2)=='shopping-cart'){
          includeJqGridJsCss();
          $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
          drupal_add_js(drupal_get_path('module', 'exp_sp_my_account') .'/exp_sp_my_account.js',$js_module_optional);
          $block['content'] =  drupal_get_form('exp_sp_my_account_shopping_cart_form');
        }
        else {
        	$merge=merge_form();
        	$block['content'] = $merge;
        	}
        break;
  }
  return $block;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_account_block_view', $ex);
    expertusErrorThrow($ex);
  } 
}

function merge_form() {
	global $user;
	$build = array();
	$build['form_one'] = drupal_get_form('exp_sp_my_account_form');
	require_once('exp_sp_my_account.inc');
	$userDetails  = getMyAccountDetails($user->uid);
	$instructor = $userDetails[0][0]->person_is_instructor;
	$webex_module=getProfileListItemByCode('lrn_cls_vct_web');
	if($instructor == 'Y' && $webex_module[0]->status == 'Y' && variable_get(webex_User)==1){
	$build['form_two'] = drupal_get_form('exp_sp_my_meeting_form',$userDetails);
	}
	return $build;
}


/**
 * Implementation of hook_menu().
 */
function exp_sp_my_account_menu() {
  try{
  	
  $items['learning/my-account'] = array(
    'title' => t('My Account'),
    'page callback' => 'empty_value',
    //'page arguments' => array('exp_sp_my_account_form'),
    'access arguments' => array('expertus learner'),
    'access callback' => array('user_is_logged_in'),
    'type' => MENU_CALLBACK
  );
  
  $items['learning/my-account/shopping-cart/results'] = array(
    'title' => 'List Order Details',
    'page callback' => 'getOrderResultForGrid',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_my_account.inc'
    );  
  
    $items['learning/my-account/countrycheck/%'] = array(
  		'title' => 'checkcountryname',
  		'page callback' => 'getcountrycheck',
  		'page arguments' => array(3),
  		//'access callback' => 'user_access',
  		'access arguments' => array('access content'),
  		'type' => MENU_CALLBACK,
    );
 
  return $items;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_account_menu', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Implements hook_theme().
 */
function exp_sp_my_account_theme() {
	try{
  return array(
    'my_account' => array(
      'variables' => array('results' => array()),
      'template' => 'exp_sp_my_account-view',
    ),
    'my_accountaddr' => array(
        'variables' => array('results' => array()),
        'template' => 'exp_sp_my_accountaddr-view',
    ),
    'my_accountpreference' => array(
      'variables' => array('results' => array()),
      'template' => 'exp_sp_my_accountpreference-view',
    ),
    'my_shoppingcart_orders' => array(
      'variables' => array('results' => array()),
      'template' => 'exp_sp_my_shoppingcart_orders-view',
    ),
   'my_meeting' => array(
  	  'variables' => array('results' => array()),
  	  'template' => 'exp_sp_my_meeting-view',
  	),
  );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_my_account_theme', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_my_account_form($form, &$form_state) {
  try{
  global $user;
  global $theme_key;
  global $base_url;
  /*-- Code to check SAML module enalbled and multi mode authendication is disabled --*/
  if (module_exists('saml') && variable_get('saml_multimode_auth') == 'no') {
   $saml_enabled = 1;
  }
  if(module_exists('ldap_authentication'))
		 {
		 	$auth_conf = ldap_authentication_get_valid_conf();
	  	$authenticationMode=$auth_conf->authenticationMode;
	  	$const_var=LDAP_AUTHENTICATION_EXCLUSIVE;
		 }
	drupal_add_js(drupal_get_path('module', 'exp_sp_my_account').'/exp_sp_my_account.js', array('type' => 'file', 'group' => JS_DEFAULT));
  if($theme_key == 'expertusoneV2') {
  		//NEWUI THEME STYLE SHEET	 
  drupal_add_css(drupal_get_path('module', 'exp_sp_my_account') .'/exp_sp_my_account_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  }else{
  	drupal_add_css(drupal_get_path('module', 'exp_sp_my_account') .'/exp_sp_my_account.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  }
  if(module_exists('exp_sp_esignature')){ 
  	if($theme_key == 'expertusoneV2') {
  	//NEWUI THEME STYLE SHEET	  	   
  	drupal_add_css(drupal_get_path('module', 'exp_sp_esignature') .'/exp_sp_esignature_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  	}else{
  	 	drupal_add_css(drupal_get_path('module', 'exp_sp_esignature') .'/exp_sp_esignature.css', array('type' => 'file', 'group' => CSS_DEFAULT));	
  	}
  }
  require_once('exp_sp_my_account.inc');
  include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/exp_sp_userregister/exp_sp_userregister.inc";
  include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration.inc";
  
  //$form = array();
  //$form['#prefix'] = '<div id="wizard-form-wrapper" class="my-account-wrapper">';
  //$form['#suffix'] = '</div>';
  $step = empty($form_state['account']['step']) ? 1 : $form_state['account']['step'];
  $form_state['account']['step'] = $step;
  $form['#tree'] = TRUE;  // We want to deal with hierarchical form
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $submit_status  = $form_state['account']['submit_status'];
  $error  = $form['hidden']['#value'];
  
  switch ($step) {
    case 1:
      $userDetails  = getMyAccountDetails($user->uid);
      $welcomeName = $userDetails[0][0]->person_first_name." ".mb_substr($userDetails[0][0]->person_last_name,0,1,'UTF-8');
	    $welcomeNote  = t('Welcome ').$welcomeName;
	    
	 if($error!='error' && $submit_status!=1){
	 	   
	 if($theme_key == 'expertusoneV2'){   
      $form['next-edit-account'] = array(
      	'#type' => 'submit',
       // '#prefix' => getPrefix('','action','false').'<div class="detail-cancel-button"><div class="white-btn-bg-container"><div class="white-btn-bg-left"></div><input type="button" class="my-account-cancel-button white-btn-bg-middle" value="'. t('LBL212').'" onclick="history.go(-1);" /><div class="white-btn-bg-right"></div></div></div><div class="admin-edit-button-container"><div class="admin-edit-button-left-bg"></div>',
        '#prefix' => getPrefix('','action','false').'<div class="admin-edit-button-container"><div class="admin-edit-button-left-bg"></div>',
        '#suffix' => '<div class="admin-edit-button-right-bg"></div></div>', 
        '#value' => t('LBL063'),
      	'#name' => "account",
      	'#attributes' => array('Class' => 'layout-add-edit-button my-account-edit-button admin-edit-button-middle-bg'),
      	'#ajax' => array(
                    'wrapper' => 'wizard-form-wrapper',
                    'callback' => 'exp_sp_my_account_form_callback',
                    'method' => 'replace',
                    'effect' => 'fade',
      				'event'=>'click',
                  ),
      );
	 } else {
      $form['next-edit'] = array(
      	'#type' => 'submit',
      	'#prefix' => getPrefix('','action','false'),//.'<input type="button" class="my-account-cancel-button" value="[ &nbsp;'.t('LBL212').'  ]" onclick="history.back();" />', //Back
      	'#value' => t('LBL063'), //Edit
      	'#attributes' => array('Class' => 'layout-add-edit-button my-account-edit-button'),
        '#ajax' => array(
                    'wrapper' => 'wizard-form-wrapper',
                    'callback' => 'exp_sp_my_account_form_callback',
                    'method' => 'replace',
                    'effect' => 'fade',
      				'event'=>'click',
                  ),
      ); 
	 }
	 $form['back'] = array(
    	    '#type' => 'markup',
    	    '#suffix' => getSuffix('action'),
    	    #prefix' => getPrefix('','action','false'),
    	    '#markup' => '',
      );
	 $instructor = $userDetails[0][0]->person_is_instructor;
	 $webex_module=getProfileListItemByCode('lrn_cls_vct_web');
	 
	 if(variable_get('webex_User') == 1 && $instructor == 'Y' && $webex_module[0]->status == 'Y'){
	 	$form['main-form'] = array(
	 			'#type' => 'markup',
	 			'#markup' => '<div id="main-form">
	 			<img src="'.$base_url.'/sites/all/themes/core/expertusoneV2/logo.png" id="main-form" onload="setTimeout(function() { wrapper_alignment(\'main-form\') },750);return false;" style="display:none;"/></div>',
	 
	 	);
	 }
	}
      if($submit_status=='saved'){
      	$form_state['storage']['refresh_page']=1;
      	if($form_state['storage']['refresh_page']==1){
      		unset($form_state['storage']['refresh_page']);
      		$pngPath = base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/spacer.gif';
      		$form['newonloadreftresh'] = array(
      				'#type' => 'markup',
      				'#markup' => '<div style="display:none;"><img id= "edit-preference-language" src="'.$pngPath.'" onload = "refreshAccountSetting();"></div>',
      		);
      	}
      	}else if($error!='error' && $submit_status!=1){
    	  $form['box'] = array(
    	    '#type' => 'markup',
    	    '#markup' => theme('my_account', array('results' => $userDetails)),
    	  );
      }
      
    break;
    case 2:

    	$form['#tree'] = TRUE;  // We want to deal with hierarchical form
    	$form['#attributes'] = array('enctype' => "multipart/form-data");
    	$submit_status  = $form_state['account']['submit_status'];
    	
    	$userDetails  = getMyAccountDetails($user->uid);
    	$welcomeName = $userDetails[0][0]->person_first_name." ".mb_substr($userDetails[0][0]->person_last_name,0,1,'UTF-8');
    	$welcomeNote  = t('Welcome ').$welcomeName;
    	
    	    	
       $form['addedit-column-details-1-start'] = array(
      '#type'   => 'markup',
      '#markup' => '<div id="addedit-account-details-page" class="details-without-pass-policy detail-cancel-save-right-align">',
      );
           
      $userInfo = getMyAccount($user->uid);
      // Save the default values in form_state for audit trail reference in form submit handler
      $form_state['storage']['default_values'] = array();
      
      
      
   	  $form['requiredBox']['#markup']  = '<table cellspacing="0" cellpadding="0" border="0" align="left"><tr><td colspan="2" class="field-title"><span><span class="require-heading"></span>&nbsp;&nbsp;</span></td></tr></table>';
   	  
   	  $userDetails  = getMyAccountDetails($user->uid);
   	  
   	  $instructor = $userDetails[0][0]->person_is_instructor;
   	  $webex_module=getProfileListItemByCode('lrn_cls_vct_web');
   	  if(variable_get('webex_User') == 1 && $instructor == 'Y' && $webex_module[0]->status == 'Y'){
   	  $form['account-edit'] = array(
   	  			'#type' => 'markup',
   	  			'#markup' => '<div id="account-edit">
   	  			<img src="'.$base_url.'/sites/all/themes/core/expertusoneV2/logo.png" id="account-form-edit" onload="setTimeout(function() { wrapper_alignment(\'account-form-edit\') }, 750);return false;" style="display:none;"/></div>',
   	  
   	  	);
   	  }

   	  $form['FirstName'] = array(
	          '#type' => 'textfield',
	          '#prefix' => getPrefix(t('LBL056'),'prefix','true'),
	          '#suffix' => getSuffix('suffix'),
	          '#title' => t('LBL056'),
      		  '#maxlength' => 255,
	          '#default_value' => empty($form_state['values']['FirstName']) ? $userInfo->person_first_name : $form_state['values']['FirstName'],
	          '#required' => TRUE,
	          '#attributes' => (module_exists('ldap_authentication') && $authenticationMode == $const_var) ? array('tabindex' => '1', 'disabled'=>array('true')) : array('tabindex' => '1'),
      );
      $form_state['storage']['default_values']['FirstName'] = $userInfo->person_first_name;
      
     /* $form['MiddleName'] = array(
  	        '#type' => 'textfield',
  	        '#prefix' => getPrefix(t('LBL057'),'prefix','false'),
  	        '#suffix' => getSuffix('suffix'),
  	        '#title' => t('Middle Initial'),
  	        '#default_value' => empty($form_state['values']['MiddleName']) ? $userInfo->person_middle_name : $form_state['values']['MiddleName'],
            '#attributes' => array('tabindex' => '2'),
      );*/
      $form_state['storage']['default_values']['MiddleName'] = $userInfo->person_middle_name;
            
      $form['LastName'] = array(
  	        '#type' => 'textfield',
  	        '#prefix' => getPrefix(t('LBL058'),'prefix','true'),
  	        '#suffix' => getSuffix('suffix'),
  	        '#title' => t('LBL058'),
      		'#maxlength' => 255,
  	        '#default_value' => empty($form_state['values']['LastName']) ? $userInfo->person_last_name : $form_state['values']['LastName'],
            '#required' => TRUE,
    				'#attributes' => (module_exists('ldap_authentication') && $authenticationMode == $const_var) ? array('tabindex' => '3', 'disabled'=>array('true')) : array('tabindex' => '3'),
      );
      $form_state['storage']['default_values']['LastName'] = $userInfo->person_last_name;
    
      $form['Username'] = array(
  	        '#type' => 'textfield',
  	        '#prefix' => getPrefix(t('LBL054'),'prefix','false'),
  	        '#suffix' => getSuffix('suffix'),
  		'#attributes' => array('disabled'=>array('true'),'class'=>array('readonly-text account-details-username-label'),'tabindex' => '4'),
  	        '#title' => t('LBL054'),
  	        '#default_value' => empty($form_state['values']['Username']) ? $userInfo->person_user_name : $form_state['values']['Username'],
  	        '#required' => TRUE,
      );
      /*-- check sso enabled --*/
      if(!$saml_enabled) {
       $form['Password'] = array(
   	        '#type' => 'password',
   	        '#prefix' => getPrefix(t('LBL060'),'prefix','false'),
   	        '#suffix' => getSuffix('suffix'),
   	        '#title' => t('LBL060'),
   	        '#default_value' => empty($form_state['Password']['state']) ? '': $form_state['values']['Password'],
 			'#attributes' => (module_exists('ldap_authentication') && $authenticationMode == $const_var) ? array('tabindex' => '5', 'disabled'=>array('true')) : array('tabindex' => '5'),
       );
     }
	
	    $form['Email'] = array(
	  	        '#type' => 'textfield',
	  	        '#prefix' => getPrefix(t('LBL061'),'prefix','true'),
	  	        '#suffix' => getSuffix('suffix'),
	  	        '#title' => t('LBL061'),
	  	        '#default_value' => empty($form_state['values']['Email']) ? $userInfo->person_email : $form_state['values']['Email'],
	  	        '#required' => TRUE,
	    				'#attributes' => (module_exists('ldap_authentication') && $authenticationMode == $const_var) ? array('tabindex' => '6', 'disabled'=>array('true')) : array('tabindex' => '6'), 
	    );
      $form_state['storage']['default_values']['Email'] = $userInfo->person_email;
      
      $form['hidden'] = array(
      		'#type' => 'hidden',
      		'#default_value' => '',
      		);
      

      //Start # Added by Velu #0030384
      $config = getConfig("exp_sp");
      if($config['sms_api_flag'] == 1){
		      $class = ($userInfo->person_mobile_no) ? 'mobnum-nonempty' : 'mobnum-empty'; // Added for #0045961
		      $form['MobileNo'] = array(
		      		'#type' => 'textfield',
		      		'#prefix' => getPrefix(t('Mobile'),'prefix','false'),
		      		'#suffix' => getSuffix('suffix'),
		      		'#title' => t('Mobile'),
		      		'#default_value' => empty($userInfo->person_mobile_no) ? t('LBL1233') : $userInfo->person_mobile_no,
		      		'#required' => FALSE,
		      		'#attributes' => (module_exists('ldap_authentication') && $authenticationMode == $const_var) ? array('tabindex' => '7', 'disabled'=>array('true')) : 
		      		 array('tabindex' => '7', 
				      		 		'onblur' => "if (this.value == 	'') {this.style.color='#999999';	this.value = '".t('LBL1233')."'}", 
											'onfocus' => "if (this.value == '".t('LBL1233')."') { this.style.color='#333333';	this.value = ''}",
				      		 		'class' => array('form-text','select-greyed-out-text',$class)
				      		 	),
		      );
		      $form_state['storage']['default_values']['MobileNo'] = $userInfo->person_mobile_no;
		      
		      $smsChk = ($userInfo->person_sms_alert == 'Y') ? 1 : 0;
		      
		      $checkboxPrefix = ($smsChk == 1) ? '<div class="checkbox-selected">' : '<div class="checkbox-unselected">';
		      $checkboxSuffix = '</div>';
		      $checkboxOnClick = 'checkboxSelectedUnselectedCommon(this);';
		      
		      $form['SmsAlertCheck'] = array(
		      		'#type' => 'checkbox',
		      		//'#prefix' => '',
		      		'#suffix' =>'<span class="field-yes smsalert-check-yes">'.t('LBL1234').'</span>',
		      		'#field_prefix' => $checkboxPrefix,
		      		'#field_suffix' => $checkboxSuffix,
		      		//'#title' => t('LBL1234'),
		      		'#title_display'=> 'invisible',
		      		'#attributes' => array('tabindex' => '8' , 'onclick' => $checkboxOnClick),
		      		'#default_value' => empty($form_state['values']['SmsAlertCheck']) ? $smsChk : $form_state['values']['SmsAlertCheck'],
		      );
		      $form_state['storage']['default_values']['SmsAlertCheck'] = $userInfo->person_sms_alert;
		      //End # Added by Velu #0030384
      }
      /* Added by Subin. Ticket #73719 & #73718 */
      $config = getConfig("exp_sp");
      $edit_address = isset($config["user_address_modify"]) ? trim($config["user_address_modify"]) : 0;
      if($edit_address == 1){
      $form['addr1'] = array(
                '#type' => 'textfield',
                '#prefix' => getPrefix(t('LBL064'),'prefix','false'),
  	        '#suffix' => getSuffix('suffix'),
      		'#title' => t('LBL064'),
                '#default_value' => empty($form_state['values']['addr1']) ? $userInfo->person_addr1  : $form_state['values']['addr1'],
      		'#attributes' => array('tabindex' => '12'),
      		'#size' => 40,
      		'#maxlength' => 255,
      );
      $form_state['storage']['default_values']['addr1'] = $userInfo->person_addr1;
      
      
      $form['addr2'] = array(
                '#type' => 'textfield',
                '#prefix' => getPrefix(t('LBL065'),'prefix','false'),
  	        '#suffix' => getSuffix('suffix'),
      		'#title' => t('LBL065'),
                '#default_value' => empty($form_state['values']['addr2']) ? $userInfo->person_addr2 : $form_state['values']['addr2'],
      		'#attributes' => array('tabindex' => '13'),
      		'#size' => 40,
      		'#maxlength' => 255,
      );
      $form_state['storage']['default_values']['addr2'] = $userInfo->person_addr2;
      
      
      $form['city'] = array(
                '#type' => 'textfield',
                '#prefix' => getPrefix(t('LBL066'),'prefix','false'),
  	        '#suffix' => getSuffix('suffix'),
      		'#title' => t('LBL066'),
                '#default_value' => empty($form_state['values']['city']) ? $userInfo->person_city : $form_state['values']['city'],
      		'#attributes' => array('tabindex' => '14'),
      		'#size' => 40,
      		'#maxlength' => 255,
      );
      $form_state['storage']['default_values']['city'] = $userInfo->person_city;
      
      
      $form['zipcode'] = array(
                '#type' => 'textfield',
                '#prefix' => getPrefix(t('LBL562'),'prefix','false'),
  	        '#suffix' => getSuffix('suffix'),
      		'#title' => t('LBL562'),
                '#default_value' => empty($form_state['values']['zipcode']) ? $userInfo->person_zip : $form_state['values']['zipcode'],
      		'#attributes' => array('tabindex' => '15'),
      		'#size' => 40,
      		'#maxlength' => 50,
      );
      $form_state['storage']['default_values']['zipcode'] = $userInfo->person_zip;  
            
      if(!isset($form_state['values']['country']) && empty($userInfo->person_country)){
            $userLocation = getUserCurrentLocation();
            $userLocation['country_code'] = empty($userLocation) ? 'US' : $userLocation['country_code'];
      }else if(!isset($form_state['values']['country']) && $userInfo->person_country){
            $userLocation['country_code'] = $userInfo->person_country;
      }else {
            $userLocation['country_code'] = $form_state['values']['country'];
      }
      //$state = getStateDef();
      $countryCode =  $userLocation['country_code'];
      $defStateVal = getStateDef($countryCode);
      $optstate[''] = t('LBL674');
      foreach($defStateVal as $code => $name){
      	$optstate[$name->sta_code] = $name->sta_name;
      }
      $form['state'] = array(
                '#id' => 'state',
                '#type' => 'select',
                '#prefix' => getPrefix(t('LBL152'),'prefix','false'),
  	        '#suffix' => getSuffix('suffix'),
      		'#title' => t('LBL152'),
                '#validated' => TRUE,
                '#default_value' => empty($userInfo->person_state) ? $form_state['values']['state'] : $userInfo->person_state,
      		'#attributes' => array('tabindex' => '17', 'onchange' => 'updateSelectFieldStyleOnChange(this);'),
      		'#options' => $optstate,
      );
      $form_state['storage']['default_values']['state'] = $userInfo->person_state;
    
        $country = getCountry();
      	$optcountry[''] = t('LBL674');
      	foreach($country as $code => $name){
      		$optcountry[$name->cnt_code] = $name->cnt_name;
      	}
        $form['country'] = array(
                '#id' => 'count',
                '#type' => 'select',
                '#prefix' => getPrefix(t('LBL039'),'prefix','false'),
  	        '#suffix' => getSuffix('suffix'),
      		'#title' => t('LBL039'),
                '#default_value' => empty($userInfo->person_country) ? $userLocation['country_code'] : $userInfo->person_country,
      		'#attributes' => array('tabindex' => '16', 'onchange' => 'getstatesforcountryval(this.value);'),
      		'#options' => $optcountry,
         );
         $form_state['storage']['default_values']['country'] = $userInfo->person_country;
       
      }else{
            $form['box'] = array(
    	    '#type' => 'markup',
    	    '#markup' => theme('my_accountaddr', array('results' => $userDetails)),
        );
      }
      /*Code Ends for Ticket #73719 & #73718 */
    
     
     // Comment the upload picture
     /* $form['Photo'] = array(
  	        '#type' => 'file',
  	        '#prefix' => getPrefix(t('LBL170'),'prefix','false'),
  	        '#suffix' => getSuffix('suffix'),
  	        '#title' => t('LBL170'),
    				'#size' => 20,
    				'#attributes' => array('tabindex' => '9', 'class' => array('my-account-browse-btn')),
      );
            
    if(!empty($userInfo->person_avatar)){
      $form['rem_link'] = array(
		   	'#type' => 'checkbox',
      		'#title' => t('LBL369'),
      		'#prefix' => '<div class="learner-myaccount-delete-btn">',
      		'#suffix' => '</div>',
      		'#attributes' => array('tabindex' => '10'),
      );
    }*/
    $form['editUname'] = array(
        	'#type'           => 'hidden',
      		'#default_value'  => $userInfo->person_user_name,
            );
    
    $form['addrval'] = array(
                '#type' => 'hidden',
                '#attributes' => array('id' => 'addrval-status'),
	);
    
    $form['is_verified_add'] = array(
                '#type' => 'hidden',
                '#attributes' => array('value' => (!empty($form_state['values']['is_verified_add']) ? $form_state['values']['is_verified_add'] : '')),
    );
                        
    $form['is_valid_add'] = array(
                '#type' => 'hidden',
                '#attributes' => array('value' => (!empty($form_state['values']['is_valid_add']) ? $form_state['values']['is_valid_add'] : '')),
    );

    $form['invalid_add_reason'] = array(
                '#type' => 'hidden',
                '#attributes' => array('value' => (!empty($form_state['values']['invalid_add_reason']) ? $form_state['values']['invalid_add_reason'] : '')),
    );
    
    if($form_state['values']['addrval']){
		$form['addrval-hidden-image'] = array(
			//'#type' => 'hidden',
			'#markup' => '<div id="dropdown_initialization_id" style="display:none">
			<img src="'.$base_url.'/sites/all/themes/core/expertusoneV2/logo.png" id="Img" onload="confirmationPopup(1);"/></div>',
			);
	}
    
    /*$form['empty_value_space'] = array(
		   	'#type' => 'markup',
     		'#markup' =>'<table cellspacing="2" cellpadding="2" class="my-account-box my-account-box-cont-cls"><tbody><tr><td class="field-title"></td><td class="field-value"></td></tr></table>'
      );   */
   /* if($userInfo->subcripe == 'Y')
    $subcripe = 1;
    expDebug::dPrint('user datails : ' . $subcripe.$userInfo->subcripe , 4);
    $form['sub_check'] = array(
		   	'#type' => 'checkbox',
     		'#prefix' =>'<table cellspacing="2" cellpadding="2" class="my-account-preference-box my-account-box-cont-cls"><tbody><tr><td class="field-title"></td><td><div class="receive-news-txt" >',
		   	'#suffix' =>'</div></td></tr></table>',
     		'#title' => t('LBL150'),
      		'#attributes' => array('tabindex' => '11'),
     		'#default_value' => empty($form_state['values']['sub_check']) ? $subcripe : $form_state['values']['sub_check'],
      );*/
    // Printing out the restrictions.
/*    if (variable_get('password_policy_show_restrictions', 0) && !empty($translate) && isset($translate)) {
      $form['#suffix'] = '<div id="password-policy-restrictions-acc" class="password-note-cls divNote"><ul><li>('. implode('</li><li>', $translate) .')</li></ul></div>';
    }*/
    /*-- check sso enabled --*/
    $account_validate = user_default_account_validators($form, $form_state);
    if ($saml_enabled) {
      $account_validate = array_diff($account_validate, array('user_acc_password_validate'));
    }
    $form['#validate'] = $account_validate;
    $form['addedit-column-details-1-end'] = array(
      '#type'   => 'markup',
      '#markup' => '</div>',
    );
    /*-- check sso enabled --*/
    if(!$saml_enabled) {
     $form['addedit-column-details-2-start'] = array(
       '#type'   => 'markup',
       '#markup' => '<div id="addedit-account-details-pass-policy" class="details-with-pass-policy">',
     );
     $policy = _password_policy_load_active_policy(array(DRUPAL_AUTHENTICATED_RID));
     $translate = array();
     if (!empty($policy['policy'])) {
      // Some policy constraints are active.
      foreach ($policy['policy'] as $key => $value) {
       $translate['constraint_'. $key] = _password_policy_constraint_error($key, $value);
      }
     }
     if (variable_get('password_policy_show_restrictions', 0) && !empty($translate) && isset($translate)) {
      $passwordPolicy = '<div class="password-note-cls divNote" id="password-policy-restrictions-acc"><ul><li>('. implode('</li><li>', $translate) .')</li></ul></div>';
     }
     $form['password-policies-display'] = array(
       '#type'   => 'markup',
       '#prefix' => $passwordPolicy,
     );
    }     
      
      $form['addedit-column-details-2-end'] = array(
      '#type'   => 'markup',
      '#markup' => '<div class="clearBoth"></div></div><div class="clearBoth"></div>',
  );
      if($theme_key == 'expertusoneV2'){
      	$form['prev'] = array(
      			'#type' => 'submit',
      			'#value' => t("LBL109"), //Cancel
      			'#prefix' =>getPrefix('','action_save','false').'<div class="detail-edit-cancel-button"><div class="white-btn-bg-container"><div class="white-btn-bg-left"></div>',
      			'#suffix' => '<div class="white-btn-bg-right"></div></div></div>',
      			'#limit_validation_errors' => array(),
      			'#submit' => array('exp_sp_my_account_form_submit'),
      			'#attributes' => array('tabindex' => '12','Class' => 'my-account-cancel-button white-btn-bg-middle'),
      			'#ajax' => array(
      					'wrapper' => 'wizard-form-wrapper',
      					'callback' => 'exp_sp_my_account_form_callback',
      					'event'=>'click',
      			),
      	);
      }else{
      	$form['prev'] = array(
      			'#type' => 'submit',
      			'#value' => t("LBL109"), //Cancel
      			'#prefix' =>getPrefix('','action_save','false'),
      			'#limit_validation_errors' => array(),
      			'#submit' => array('exp_sp_my_account_form_submit'),
      			'#attributes' => array('tabindex' => '12','Class' => 'my-account-cancel-button'),
      			'#ajax' => array(
      					'wrapper' => 'wizard-form-wrapper',
      					'callback' => 'exp_sp_my_account_form_callback',
      					'event'=>'click',
      			),
      	);
      }
      $customHiddenButtonId = 'esign-account-save';
      $setAttributes['tabindex'] = array('11');
      $setAttributes['Class'] =  array('admin-save-button-middle-bg');
      $setAttributes['onclick'] = array();
      if (module_exists('exp_sp_esignature') && isActiveEsignRegion()) {
      	$setAttributes['onclick'][] = 'remove_messages();';
      	$form['next-save-esignon'] = array(
      			'#type' => 'button',
      			'#prefix' => '<div class="admin-save-button-container">' .
      			'<div class="admin-save-button-left-bg"></div>',
      			'#suffix' =>   '<div class="admin-save-button-right-bg"></div>'.
      			'</div>'.getSuffix('action'),
      			'#title' => t('LBL141'), //Save
      			'#value' => t('LBL141'), //Save
      			'#name' => 'save',
      			//'#submit' => array('addNewEnrollTPUserDetails'),
      			'#attributes' => $setAttributes,
      			'#ajax' => array(
      					'callback' => 'exp_sp_my_account_form_callback',
      					'wrapper' => 'wizard-form-wrapper',
      					'customButtonId'=>$customHiddenButtonId,
      					'method' => 'replace',
      					'effect' => 'none', // 'fade',
      					'event'=>'click',
      					'keypress' => true,
      					'progress' => array(
      							'type' => 'throbber',
      							'message' => ''
      					),
      			),
      	);
      }
      else {
      	$setAttributes['onclick'][] = '$("#'.$customHiddenButtonId.'").click(); return false;';
      	$form['next-save-esignoff'] = array(
      			'#type' => 'button',
      			'#prefix' =>'<div class="admin-save-button-container">' .
      			'<div class="admin-save-button-left-bg"></div>',
      			'#suffix' =>  '<div class="admin-save-button-right-bg"></div>' .
      			'</div>' . getSuffix('action'),
      			'#title' => t('LBL141'), //Save
      			'#value' => t('LBL141'), //Save
      			'#name' => 'save',
      			'#attributes' => $setAttributes
      	);
      }
      
      
       
      // $setAttributes['onclick'] = array();
      $setAttributes['onclick'] = array();
      $setAttributes['onclick'][] = 'createLoader(\'wizard-form-wrapper\');remove_messages();';
      $form[$customHiddenButtonId] = array(
      		'#type' => 'submit',
      		'#value' => t('hidden-save'),
      		'#name'	=> 'hidden-save',
      		'#prefix' => '<span id = "esign-admin-div" style="display:none;">',
      		'#suffix' => '</span>',
      		'#id' =>$customHiddenButtonId,
      		'#attributes' => $setAttributes,
      		'#ajax' => array(
      				'wrapper' => 'wizard-form-wrapper',
      				'callback' => 'exp_sp_my_account_form_callback',
      				'method' => 'replace',
      				'effect' => 'none', // 'fade',
      				'event'=>'click',
      				'keypress' => true,
      				'progress' => array(
      						'type' => 'throbber',
      						'message' => ''
      				),
      		),
      );
      
      
     break;
  }
  return $form;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_account_form', $ex);
    expertusErrorThrow($ex);
  } 
}

function exp_sp_my_account_form_callback($form, &$form_state) {
  try{
  	global $user;
		
  	if (!empty($form_state['values']['Email'])) {
  		$email_id = validateEmail($form_state['values']['Email']);
  	}
  	if(empty($form_state['values']['FirstName']) || empty($form_state['values']['LastName']) || empty($form_state['values']['Email']) || $email_id == 0){
  		$form['hidden']['#value'] = 'error';
  	}
  	if(($form_state['values']['next-edit-account'] == t('LBL063')) && ($form_state['values']['prev'] == t('LBL109')) && ($form_state['values']['next-edit-meeting'] != t('LBL063')) || $form['hidden']['#value'] == 'error'){
        $build = array();
        $build['form_one'] = exp_sp_my_account_form($form,$form_state['values']);
		require_once('exp_sp_my_account.inc');
		$userDetails  = getMyAccountDetails($user->uid);
		$instructor = $userDetails[0][0]->person_is_instructor;
		$webex_module=getProfileListItemByCode('lrn_cls_vct_web');
		if($instructor == 'Y' && $webex_module[0]->status == 'Y' && variable_get(webex_User)==1)
        $build['form_two'] = drupal_get_form('exp_sp_my_meeting_form',$userDetails);
		$form=$build;
  	}

  $commands = array();
  if(module_exists('exp_sp_esignature')){
    $triggerValue  = 'save';
  }else{
    $triggerValue  = 'hidden-save';
  }
  if(module_exists('exp_sp_esignature') && isActiveEsignRegion() && $form_state['triggering_element']['#name'] ==  $triggerValue){
	  if(!form_set_error()){
	  		$form_state['esign_show_popup'] = true;	  		
	  }else{	  	
	  	$form_state['esign_show_popup'] = false;
	  }
    $custButtonId  = $form_state['triggering_element']['#ajax']['customButtonId'];
    $esignObj  = '{"popupDiv":"ctools-face-table","esignFor":"AddAdmin","esignButtId":"'.$custButtonId.'"}';
    if($form_state['esign_show_popup']==true){
      $commands[] = ajax_command_invoke(NULL, 'getNewEsignPopup',array($esignObj));
      return array('#type' => 'ajax', '#commands' => $commands);
    }else{
      $form['#prefix'] = '<div id="wizard-form-wrapper" class="my-account-wrapper">';
	  $form['#suffix'] = '</div>';
    	  return $form;
    }
  }else{
	  $form['#prefix'] = '<div id="wizard-form-wrapper" class="my-account-wrapper">'.theme('status_messages');
	  $form['#suffix'] = '</div>';
	  $commands = array();
		/*if(isset($form_state['display_name']) && !empty($form_state['display_name'])){
	  	$outhtml = t("LBL195").' '.$form_state['display_name'];
	    $commands[] = ajax_command_invoke(NULL, 'resetWelcomeText',array($outhtml));
  	}*/
	  $commands[] = ajax_command_replace(NULL, drupal_render($form));
	  return array('#type' => 'ajax', '#commands' => $commands);
  }
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_account_form_callback', $ex);
    expertusErrorThrow($ex);
  } 
}

function exp_sp_my_account_form_submit($form, &$form_state) {
  try{
  global $user;
  
  expDebug::dPrint(' $user = ' . print_r($user, true) , 4);
  require_once('exp_sp_my_account.inc');
  
  $current_step = 'step' . $form_state['account']['step'];
  if (!empty($form_state['values'][$current_step])) {
    $form_state['account']['values'][$current_step] = $form_state['values'][$current_step];
  }
  
  // Increment or decrement the step as needed. Recover values if they
  if ($form_state['triggering_element']['#value'] == t('LBL063')) {	//Edit
    $form_state['account']['step']++;
    // If values have already been entered for this step, recover them from
    // $form_state['storage'] to pre-populate them.
    $step_name = 'step' . $form_state['account']['step'];
    if (!empty($form_state['account']['values'][$step_name])) {
      $form_state['values'][$step_name] = $form_state['account']['values'][$step_name];
    }	    
  }
  
  if ($form_state['triggering_element']['#value'] == t('LBL109')) { //Cancel
    $form_state['account']['step']--;
    // Recover our values from $form_state['storage'] to pre-populate them.
    $step_name = 'step' . $form_state['account']['step'];
    //$form_state['values'][$step_name] = $form_state['account']['values'][$step_name];
    }
        //Added by Subin for User Address validation
        $addrval_fail = false;
	//$is_verified_add = 'No';
	$is_valid_add = '';
	$invalid_add_reason = '';
        //vaidate address
		include_once(drupal_get_path('module', 'exp_sp_administration_module_info') .'/exp_sp_administration_module_info.inc');
		include_once(drupal_get_path('module', 'exp_sp_usps_integration') .'/exp_sp_usps_integration.module');
		$uspsValidate = getDrupalModuleStatus(array('exp_sp_usps_integration'));
		$countryCode = strtolower(trim($form_state['values']['country']));
	
	if($form_state['values']['addrval'] != '0') {
		if($uspsValidate == 1 && strtolower($countryCode) == 'us'){
			$address_info = array(
				'apt' => trim($form_state['values']['addr1']),
				'address' => trim($form_state['values']['addr2']),
				'city' => trim($form_state['values']['city']),
				'state' => trim($form_state['values']['state']),
				'zip5' => trim($form_state['values']['zipcode']),
			);
                        
                        if($address_info['apt']=='' && $address_info['address']=='' && $address_info['city']=='' && $address_info['state']=='' && $address_info['zip5']==''){
                            $addressVerify = '';
                        }else{
                            $addressVerify = exp_sp_usps_integration_verify_address($address_info);
                        }
			$response = end($addressVerify);
			$is_verified_add = (isset($response)) ? 'Yes' : 'No';
			$isuspsError = $response['Address']['Error']['Description'];
                        if(empty($isuspsError) && !empty($response)){
                            $resCity = strtolower($response['Address']['City']);
                            $inpCity = strtolower($address_info['city']);
                            $isuspsError = ($resCity == $inpCity) ? '' : 'Invalid City';
                        }
                        $is_valid_add = (!empty($isuspsError)) ? 'Invalid' : (empty($response) ? '': 'Valid');
			$invalid_add_reason = (!empty($isuspsError)) ? $isuspsError : null;
			if(!empty($invalid_add_reason) && $is_valid_add == 'Invalid'){
				$addrval_fail = true; //set the flag to initiate the confirmation popup to the user
			}
			// do nothing
		}
	}
	$form_state['values']['is_valid_add'] = empty($is_valid_add) ? $form_state['values']['is_valid_add'] : $is_valid_add;
        $form_state['values']['is_verified_add'] = ($uspsValidate == 1 && strtolower($countryCode) == 'us') ? (empty($form_state['values']['is_valid_add']) ? 'No' : 'Yes') : 'No';
	$form_state['values']['invalid_add_reason'] = (empty($invalid_add_reason) && $form_state['values']['is_valid_add'] == 'Valid') ? null : (empty($invalid_add_reason) ? $form_state['values']['invalid_add_reason'] : $invalid_add_reason);
	expDebug::dPrint('form state value end'.print_r($form_state['values'], 1));
	if($addrval_fail && $form_state['triggering_element']['#value'] == 'hidden-save') {
		 $form_state['values']['addrval'] = 1;
	}else if ($form_state['triggering_element']['#name'] == t('hidden-save')) {
	    $form_state['esign_show_popup']= false;
            exp_sp_my_account_form_commonsave($form, $form_state);
        }
        // Otherwise, we still have work to do.
        $form_state['rebuild'] = TRUE;
  
        /* if($form_state['triggering_element']['#value'] == t('E-Sign')){
	  	if(checkUserNameEsign($form_state['values']['esign']['name'],$form_state['values']['esign']['pass']) == true){
		  	exp_sp_my_account_form_commonsave($form, $form_state);
			$form_state['rebuild'] = TRUE;
	  	}else{
	  		form_set_error('pass',t('Sorry,unrecognized password in E-Signature.'));
	  		//$form['esigm']['pass']['#attributes']['class'] = array('error');
	  		$form_state['rebuild'] = '';
	  	}
	  }*/
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_account_form_submit', $ex);
    expertusErrorThrow($ex);
  } 
}

function user_default_account_validators($form, &$form_state) {
  try{
  $form_state['esign_show_popup']= true;
  
  return array('user_acc_password_validate',
  			 'user_acc_email_validate',
  			 'user_acc_emailformat_validate',
  		     'user_acc_smschk_validate'
  );
  }catch (Exception $ex) {
    watchdog_exception('user_default_account_validators', $ex);
    expertusErrorThrow($ex);
  } 
}

function user_acc_email_validate($form, &$form_state) {
  try{
	global $user;
  $email_add = $form_state['values']['Email'];
  if(existsUserEmail($email_add, $user->uid)){
  	form_set_error('Email', t('ERR001'));
  	$form_state['esign_show_popup']= false;
  }
  }catch (Exception $ex) {
    watchdog_exception('user_acc_email_validate', $ex);
    expertusErrorThrow($ex);
  } 
}

function user_acc_emailformat_validate($form, &$form_state) {
  try{
  $mail = trim($form_state['values']['Email']);
  
  if (!empty($mail)) {
  	$email_id = validateEmail($mail);
	if($email_id == 0){
   // if (!valid_email_address($mail)) { commented for #61961 
    	form_set_error('Email', t('ERR002'));
    	$form_state['esign_show_popup']= false;
    	$form['hidden']['#value'] = 'error';
   // }
  }
  }
  }catch (Exception $ex) {
    watchdog_exception('user_acc_email_validate', $ex);
    expertusErrorThrow($ex);
  } 
}

function user_acc_smschk_validate($form, &$form_state) {
	try{
		global $user;
		$MobileNo = $form_state['values']['MobileNo'];
		$SmsAlertCheck = $form_state['values']['SmsAlertCheck'];
		expDebug::dPrint(' user_acc_smschk_validate $MobileNo = '.$MobileNo);
		expDebug::dPrint(' user_acc_smschk_validate $SmsAlertCheck = '.$SmsAlertCheck);
 		if( (empty($MobileNo) || $MobileNo == t('LBL1233')) && $SmsAlertCheck == 1 ){
			form_set_error('MobileNo', t('Mobile').' '.t('ERR101'));
			$form_state['esign_show_popup']= false;
		} 
	}catch (Exception $ex) {
		watchdog_exception('user_acc_smschk_validate', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * Password save validate handler.
 */
function user_acc_password_validate($form, &$form_state) {
  try{
  global $user;
  $password = $form_state['values']['Password'];
  if (!empty($password)) {
    $error = _password_policy_constraint_validate($password, $user);
    if ($error) {
      form_set_error('Password', t('ERR004') . ':</span><li><span>' . implode('</span></li><li><span>', $error));
      $form_state['esign_show_popup']= false;
    }
  }
  }catch (Exception $ex) {
    watchdog_exception('user_acc_password_validate', $ex);
    expertusErrorThrow($ex);
  } 
}//End of user_acc_password_validate()


/* function commonly used for normal save and esign in */
function exp_sp_my_account_form_commonsave($form, &$form_state){
  try{
	global $user;
	include_once $_SERVER["DOCUMENT_ROOT"]."/includes/password.inc";
        include_once $_SERVER["DOCUMENT_ROOT"]."/includes/file.inc";

    // Old values (username is readonly)
    $oldPassword = $user->pass;
    $oldPhotoFileId = $user->picture;
    
    // User Input
    $postVar     = $form_state['values'];
    
    $postPwd     = $postVar['Password'];
    $postPwd     = !empty($postPwd) ? user_hash_password(trim($postPwd)) : '';

    $editUname   = $postVar['editUname'];
    $FirstName   = $postVar['FirstName'];
    $MiddleName  = $postVar['MiddleName'];
    $LastName    = $postVar['LastName'];
    $Email       = $postVar['Email'];
    $MobileNo    = $postVar['MobileNo'];
    $SmsAlertCheck    = $postVar['SmsAlertCheck'];
    //Check to update or not 
    $config = getConfig("exp_sp");
    $edit_address = isset($config["user_address_modify"]) ? trim($config["user_address_modify"]) : 0;
    if($edit_address == 1){
    $editAddr1   = $postVar['addr1'];
    $editAddr2   = $postVar['addr2'];
    $editCity   = $postVar['city'];
    $editZip   = $postVar['zipcode'];
    $editState   = $postVar['state'];
    $editCountry   = $postVar['country'];
    $editVerifiedAdd = $postVar['is_verified_add'];
    $editValidAdd = $postVar['is_valid_add'];
    $editInvalidReason = $postVar['invalid_add_reason'];
    }
    /*$Photo       = $postVar['Photo'];
    $RemovePhoto = $postVar['rem_link'];*/	
    expDebug::dPrint(' $RemovePhoto = ' . print_r($RemovePhoto, true) , 5);
    $userId = getIdOfLoggedInUser(); // The slt_person table id of the logged in user is needed to maintain audit trail entry

    //Comment the image upload once implement in the new profile then we need to delete the code peremantely.
   /* if($RemovePhoto == 1){
         $account = user_load($user->uid, TRUE);
         // Reduce the file usage count
         file_usage_delete($account->picture, 'user', 'user', $account->uid);
         
         // Remove file reference from users table record
         $account = user_save($account, array('picture' => 0));
        
         add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_my_account', 'My Account', 'Deleted picture', null, $oldPhotoFileId, 0);
         if (!module_exists(exp_sp_audit_trail)) { // Cannot delete the file if audit trail is on
           file_delete($account->picture);
         }    
    }
    
    $updatedPhoto = uploadUserPicture('Photo', $user->uid);
*/ 
    if($edit_address == 1){
    $userInfo = array(
            'UserName'	 => $editUname,
            'FirstName'   => $FirstName,
            'MiddleName'  => $MiddleName,
            'Password'    => $postPwd,
            'LastName'    => $LastName,
            'Email'       => $Email,
            'MobileNo'    => $MobileNo,
            'SmsAlertCheck'    => $SmsAlertCheck,
            'addr1'  => $editAddr1,
            'addr2'  => $editAddr2,
            'city'  => $editCity,
            'zipcode'  => $editZip,
            'state'  => $editState,
            'country'  => $editCountry,
            'is_verified_add' => $editVerifiedAdd,
            'is_valid_add' => $editValidAdd,
            'invalid_add_reason' => $editInvalidReason,
        ); 
    }else{
        $userInfo = array(
            'UserName'	 => $editUname,
            'FirstName'   => $FirstName,
            'MiddleName'  => $MiddleName,
            'Password'    => $postPwd,
            'LastName'    => $LastName,
            'Email'       => $Email,
            'MobileNo'    => $MobileNo,
            'SmsAlertCheck'    => $SmsAlertCheck,
            );
    }
    updateAccount($userInfo, $user->uid,$edit_address);
    // Add audit trail entries for modified fields
    make_myaccount_audit_trail_entries($postVar, $userId, $form_state['storage']['default_values'], $oldPassword);
    
    /* Added by Vincent  to update cookie for new first name and last name*/
    $dispname = $FirstName." ".mb_substr($LastName,0,1,'utf8');
    $fullname = $FirstName." ".$LastName;
    require_once "./getLearnerInfo.php";
		$obj = new GetLearnerInfo();
		$val = $obj->setValue(array('userfullname'=>$dispname,'usermail'=>$Email,'userfirstname'=>$FirstName,
							'userlastname'=>$LastName,'usersavedfullname'=>$fullname));
		$form_state['display_name']=$dispname;
		/* Added by Vincent */
        
    $form_state['account']['step']--;
    // Recover our values from $form_state['storage'] to pre-populate them.
    $step_name = 'step' . $form_state['account']['step'];
    // $form_state['values'][$step_name] = $form_state['account']['values'][$step_name];
    $form_state['account']['submit_status']  = 'saved';
    drupal_get_messages('error');
    drupal_set_message(t('MSG011'));
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_account_form_commonsave', $ex);
    expertusErrorThrow($ex);
  } 
}


function exp_sp_my_account_preference_form_commonsave($form,&$form_state,$result){
  try{
	updateAccountPreference($form_state['values'], $result->UserId, $form_state['storage']['default_values']);
    //$form_state['storage']['step']--;
    // Recover our values from $form_state['storage'] to pre-populate
  	// them.
    $step_name = 'step' . $form_state['storage']['step'];
    $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
    $form_state['storage']['refresh_page']=1;
    $form_state['storage']['step']=2;
    drupal_set_message(t('MSG011'));  
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_account_preference_form_commonsave', $ex);
    expertusErrorThrow($ex);
  }
}

function my_order_profile_validate($form,&$form_state) {
  try{
  $form_state['esign_show_popup']= true;
  return array(
  			 //'validate_add1',
  			 //'validate_add2',
  			// 'validate_city',
  			// 'validate_state',
  			// 'validate_zip',
  			 //'validate_phone',
             //'validate_companyname'
  			 );
  }catch (Exception $ex) {
    watchdog_exception('my_order_profile_validate', $ex);
    expertusErrorThrow($ex);
  } 
}
function exp_sp_my_account_preference_form($form, &$form_state) {
  try{
  global $user;
  global $theme_key;
  if(module_exists('ldap_authentication'))
	{
    	$auth_conf = ldap_authentication_get_valid_conf();
    	$authenticationMode=$auth_conf->authenticationMode;
        $const_var=LDAP_AUTHENTICATION_EXCLUSIVE;
   }
  drupal_add_js(drupal_get_path('module', 'exp_sp_my_account').'/exp_sp_my_account.js', array('type' => 'file', 'group' => JS_DEFAULT)); 
  if($theme_key == 'expertusoneV2') {
  //NEWUI THEME STYLE SHEET	 
  drupal_add_css(drupal_get_path('module', 'exp_sp_my_account') .'/exp_sp_my_account_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  }else{
   drupal_add_css(drupal_get_path('module', 'exp_sp_my_account') .'/exp_sp_my_account.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  }
  if(module_exists('exp_sp_esignature')){   
  	if($theme_key == 'expertusoneV2') {
  	//NEWUI THEME STYLE SHEET	    
 	drupal_add_css(drupal_get_path('module', 'exp_sp_esignature') .'/exp_sp_esignature_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  	}else{
  	drupal_add_css(drupal_get_path('module', 'exp_sp_esignature') .'/exp_sp_esignature.css', array('type' => 'file', 'group' => CSS_DEFAULT));	
  	}
  	}

  require_once('exp_sp_my_account.inc');
  //Added by Subin. Ticket #59698
  $default_profile_currency = getCurrencyDefDetails();
  $allow_currency_change = restrict_user_currency_select();
  
  $form = array();
  //$form['#prefix'] = '<div id="wizard-form-wrapper" class="my-profile-wrapper">';
  //$form['#suffix'] = '</div>';
  $step = empty($form_state['storage']['step']) ? 1 : $form_state['storage']['step'];
  $form_state['storage']['step'] = $step;
  $form['#tree'] = TRUE; // We want to deal with hierarchical form values.
  switch ($step) {
    case 1:
      //$backbuttonvalue="[&nbsp;&nbsp;".t('LBL212')."&nbsp;&nbsp;]"; 
     if($theme_key == 'expertusoneV2'){ 
    	$form['next-edit'] = array(
            '#type' => 'submit',
    		//'#prefix' =>getPrefix('','action','false'),//.'<input type="button" class="my-account-cancel-button" value='.$backbuttonvalue.' onclick="history.go(-1);" />',
    		'#prefix' =>getPrefix('','action','false').'<div class="admin-edit-button-container"><div class="admin-edit-button-left-bg"></div>',
    	    '#suffix' =>'<div class="admin-edit-button-right-bg"></div></div>', 
            '#attributes' => array('Class' => 'layout-add-edit-button admin-edit-button-middle-bg'),
    		'#value' => t('LBL063'),
    		/*'#ajax' => array(
      			'wrapper' => 'wizard-form-wrapper',
      			'callback' => 'exp_sp_my_account_preference_form_callback',
      			'method' => 'replace',
      			'effect' => 'fade',
      			'event'=>'click',
            ),*/
        );
        $form['back'] = array(
    	    '#type' => 'markup',
    	    '#suffix' => getSuffix('action'),
    	    //'#markup' => '<input type="button" class="my-profile-cancel-button" value="[&nbsp;&nbsp;Back&nbsp;&nbsp;]" onclick="history.go(-1);" />',
      );
      $form['box'] = array(
    	    '#type' => 'markup',
    	    '#markup' => theme('my_accountpreference', array('results' => getMyAccountProfileDetails($user->uid))),
      );
      break;   
     }else{
     	 $form['next-edit'] = array(
            '#type' => 'submit',
    		'#prefix' =>getPrefix('','action','false'),//.'<input type="button" class="my-account-cancel-button" value='.$backbuttonvalue.' onclick="history.go(-1);" />',
    		'#attributes' => array('Class' => 'layout-add-edit-button'),
    		'#value' => t('LBL063'),
    		/*'#ajax' => array(
      			'wrapper' => 'wizard-form-wrapper',
      			'callback' => 'exp_sp_my_account_preference_form_callback',
      			'method' => 'replace',
      			'effect' => 'fade',
      			'event'=>'click',
            ),*/
        );
        $form['back'] = array(
    	    '#type' => 'markup',
    	    '#suffix' => getSuffix('action'),
    	    //'#markup' => '<input type="button" class="my-profile-cancel-button" value="[&nbsp;&nbsp;Back&nbsp;&nbsp;]" onclick="history.go(-1);" />',
      );
      $form['box'] = array(
    	    '#type' => 'markup',
    	    '#markup' => theme('my_accountpreference', array('results' => getMyAccountProfileDetails($user->uid))),
      );
      break;   
     }
         
      
    case 2:
        if($form_state['storage']['refresh_page']==1){
            unset($form_state['storage']['refresh_page']);
            $pngPath = base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/spacer.gif';
        	 $form['newonloadreftresh'] = array(
               '#type' => 'markup',
               '#markup' => '<div style="display:none;"><img id= "edit-preference-language" src="'.$pngPath.'" onload = "refreshAccountSetting();"></div>',
              );  	  
        }
        $form['addedit-column-pref-start'] = array(
        		'#type'   => 'markup',
        		'#markup' => '<div id="addedit-account-preferences-page" class="account-preferences-edit-container">',
        );
		  
	  $form['#validate'] = my_order_profile_validate($form,$form_state);
      $profile = getMyAccountProfileDetails($user->uid);  
      $timeZoneList = getTimeZonesList();
      $locationList = getMyAccountLocation();
      $languageList = getMyAccountAllLanguage();
	  $currencyList = getMyAccountCurrency();
      $drupalLanguageList = locale_language_list('native');
      
      expDebug::dPrint('Expertus Language list: '. print_r($languageList, 1), 4);
      expDebug::dPrint('Drupal Language list: '. print_r($drupalLanguageList, 1), 4);

      // Save the default values in form_state for audit trail reference in form submit handler
      $form_state['storage']['default_values'] = array();

    //$form['requiredBox']['#markup']  = '<table cellspacing="2" cellpadding="2" border="0"><tr><td class="field-title" colspan="2"><span><span class="require-heading">*</span>&nbsp;-&nbsp;'.t('LBL213').'</span></td></tr></table>';
    
      //$ptLanguage[''] = t('LBL674');
      $optTZ['']= t('LBL674');
      foreach ($timeZoneList as $id => $row) {
       $timeZone[$row->zonecode] = $row->zonename;
      }
      $pfTimeZone = $optTZ + $timeZone;
      $prefTZAttr = array();
      $prefTZAttr['tabindex'] = 1;
      $prefTZAttr['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $prefTZAttr['class'] = array('exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to this class
      $form['timezone'] = array(
          '#type' => 'select',
          '#prefix' => getPrefix(t('LBL297'),'prefix','true'),
          '#suffix' => getSuffix('suffix'),
          '#title' => t('LBL297'),
          '#options'=> $pfTimeZone,
          '#default_value' => empty($form_state['values']['timezone'])? (empty($profile->person_time_zone)? '' : $profile->person_time_zone) : $form_state['values']['timezone'],
          '#required' => TRUE,
          '#attributes' => $prefTZAttr,
      );
        $form_state['storage']['default_values']['timezone'] = $profile->person_time_zone;
        
      foreach ($languageList as $id => $row) {
        if (array_key_exists($row->drupallangcode, $drupalLanguageList)) {
  	      $ptLanguage[$row->langcode] =  $drupalLanguageList[$row->drupallangcode]; // issue fix #44422
        }
      }
      expDebug::dPrint('Preferences :'.print_r($ptLanguage, 1), 4);
      $prefLangAttr = array();
      $prefLangAttr['tabindex'] = 2;
      $prefLangAttr['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $prefLangAttr['class'] = array('exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to this class
      $siteDefaultLanguage = getSiteDefaultLanguageCode();
      $siteLanguage = ($siteDefaultLanguage)? $siteDefaultLanguage : 'cre_sys_lng_eng';
      $preferedLanguage = ($profile->person_pref_language) ? $profile->person_pref_language : $siteLanguage;
      $form['preflanguage'] = array(
        '#type' => 'select',
        '#prefix' => getPrefix(t('LBL038'),'prefix','false'),
        '#suffix' => getSuffix('suffix'),
        '#title' => t('LBL038'),
        '#options'=> $ptLanguage,
        '#default_value' => empty($form_state['values']['preflanguage']) ? $preferedLanguage : $form_state['values']['preflanguage'],
  	    '#attributes' => $prefLangAttr,
  	  );
      $form_state['storage']['default_values']['preflanguage'] = $profile->person_pref_language;
      
      $ptLocation[''] = t('LBL674');
      foreach ($locationList as $id => $row) {
  	    $ptLocation[$row->location_id] = $row->location_name;
      }
      $prefLocAttr = array();
      $prefLocAttr['tabindex'] = 3;
      $prefLocAttr['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $prefLocAttr['class'] = array('exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to this class
      $form['preflocation'] = array(
        '#type' => 'select',
        '#prefix' => getPrefix(t('Location'),'prefix','false'),
        '#suffix' => getSuffix('suffix'),
        '#title' => t('Preferred Training Location'),
        '#options'=> $ptLocation,
        '#default_value' => empty($form_state['values']['preflocation']) ? $profile->person_pref_loc : $form_state['values']['preflocation'],
  	    '#attributes' => $prefLocAttr,
  	  );
      $form_state['storage']['default_values']['preflocation'] = $profile->person_pref_loc;
	  
	  $ptCurrency[''] = t('LBL674');
	  foreach ($currencyList as $id => $row) {
	  $ptCurrency[$row->currency_code] = ($row->currency_code." ".$row->currency_symbol." ".$row->currency_name);
	  }
      
      //Added by Subin. Ticket #59698    
      $prefCurr = array();
      $prefCurr['tabindex'] = 4;
      $prefCurr['onchange'] = 'updateSelectFieldStyleOnChange(this);';
      $prefCurr['class']    = array('exp-select-field-style'); // Drupal behavior to grey 'Select' option text is attached to this class
      $form['prefcurrency'] = array(
            '#type' => 'select',
            '#prefix' => getPrefix(t('LBL101'),'prefix','false'),
            '#suffix' => getSuffix('suffix'),
         // '#title' => t('LBL101'),
            '#options'=> $ptCurrency,
            '#default_value' => empty($form_state['values']['prefcurrency']) ? (empty($profile->person_pref_currency) ? $default_profile_currency : $profile->person_pref_currency) : $form_state['values']['prefcurrency'],
  	    '#attributes' => $prefCurr,
            '#disabled'  => $allow_currency_change
  	  );
      //$form_state['storage']['default_values']['prefcurrency'] = $profile->person_pref_currency;
        //commented for ticket 0042488
        /* $form_state['storage']['default_values']['sub_check'] = $profile->subcripe;
			    if($profile->subcripe == 'Y')
			    $subcripe = 1;
			    if($theme_key == 'expertusoneV2'){
			      $checkboxPrefix = ($profile->subcripe == 'Y')?'<div class="checkbox-selected">' : '<div class="checkbox-unselected">';
			      $checkboxSuffix = '</div>';
			      $checkboxOnClick = 'checkboxSelectedUnselectedCommon(this);';
			    }else{
			      $checkboxPrefix = '';
			      $checkboxSuffix = '';
			      $checkboxOnClick = '';
			    }
			    expDebug::dPrint('user datails : ' . $subcripe.$profile->subcripe , 4);
			    $form['sub_check'] = array(
					   	'#type' => 'checkbox',
			     		'#prefix' =>'<table cellspacing="2" cellpadding="2" class="my-account-box my-account-box-cont-cls"><tbody><tr><td class="field-title">'.t("LBL836").':</br></td><td class="field-value preference-mail-checkbox" >',
					   	'#suffix' =>'<span class="field-yes">'.t("Yes").'</span></td></tr></table>',
					   	'#field_prefix' => $checkboxPrefix,
			            '#field_suffix' => $checkboxSuffix,
			     		//'#title' => t('LBL150'),
			     		'#title_display'=> 'invisible',
			      		'#attributes' => array('tabindex' => '11' , 'onclick' => $checkboxOnClick),
			     		'#default_value' => empty($form_state['values']['sub_check']) ? $subcripe : $form_state['values']['sub_check'],
      ); */
     
    if($theme_key == 'expertusoneV2') {
      $form['preference-cancel-save-start'] = array(
        '#type'   => 'markup',
        '#markup' => '<div class="pref-save-cancel-container-alignment">'
        );
     } else{
      $form['preference-cancel-save-start'] = array(
        '#type'   => 'markup',
        '#markup' => '<div style = "padding-right:420px;">'
        );  
     }
     if($theme_key == 'expertusoneV2') {
      $form['prev'] = array(
	      '#type' => 'submit',
	      '#value' => t("LBL109"), //Cancel
	    // '#prefix' =>getPrefix('','action_save','flase'),
          '#prefix' =>'<div class="pref-cancel-button"><div class="white-btn-bg-container"><div class="white-btn-bg-left"></div>',
	      '#suffix' => '<div class="white-btn-bg-right"></div></div></div>'.getPrefix('','action_save','flase'), 
	      '#limit_validation_errors' => array(),
	      // #submit is required to use #limit_validation_errors
	      '#submit' => array('exp_sp_my_account_preference_form_submit'),
	      '#attributes' => array('tabindex' => '10','Class' => 'my-account-cancel-button white-btn-bg-middle'),
	      '#ajax' => array(
	        'wrapper' => 'wizard-form-wrapper',
	        'callback' => 'exp_sp_my_account_preference_form_callback',
	        'event'=>'click',
	      ),
		  );
		   } else{
		   	$form['prev'] = array(
	      '#type' => 'submit',
	      '#value' => t("LBL109"), //Cancel
	     '#prefix' =>getPrefix('','action_save','flase'),
          '#limit_validation_errors' => array(),
	      // #submit is required to use #limit_validation_errors
	      '#submit' => array('exp_sp_my_account_preference_form_submit'),
	      '#attributes' => array('tabindex' => '10','Class' => 'my-account-cancel-button'),
	      '#ajax' => array(
	        'wrapper' => 'wizard-form-wrapper',
	        'callback' => 'exp_sp_my_account_preference_form_callback',
	        'event'=>'click',
	      ),
		  );
		   }  
	 $customHiddenButtonId = 'esign-myaccount-preference-save';
     $setAttributes['tabindex'] = array('11');
	 $setAttributes['Class'] =  array('admin-save-button-middle-bg');
	 $setAttributes['onclick'] = array();
	 if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){   	    
	 	  $setAttributes['onclick'][] = 'remove_messages();';
	 	  $form['next-save-esignon'] = array(
		              '#type' => 'button',
		              '#prefix' => '<div class="admin-save-button-container">' .
		                             '<div class="admin-save-button-left-bg"></div>',
	      			    '#suffix' =>   '<div class="admin-save-button-right-bg"></div>' .
	      			                 '</div>' . getSuffix('action'),
		              '#title' => t('LBL141'), //Save
		              '#value' => t('LBL141'), //Save
		              '#name' => 'save',
		              '#attributes' => $setAttributes,
		              '#ajax' => array(
		                'callback' => 'exp_sp_my_account_preference_form_callback',
		                'wrapper' => 'wizard-form-wrapper',
		            	  'customButtonId'=>$customHiddenButtonId,
	            		  'method' => 'replace',
	          		    'effect' => 'none', // 'fade',
	          		    'event'=>'click',
	          		    'keypress' => true,
	          		    'progress' => array(
	          		        'type' => 'throbber',
	          		        'message' => ''
	          		      ),
		              ),  
	            );  
	 }else{
	 	
	 	$setAttributes['onclick'][] = '$("#'.$customHiddenButtonId.'").click(); return false;';
	            $form['next-save-esignoff'] = array(
		              '#type' => 'button',
		              '#prefix' =>'<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>',
	      			  '#suffix' => '<div class="admin-save-button-right-bg"></div></div>'.getSuffix('action'),
		              '#title' => t('LBL141'), //Save
		              '#value' => t('LBL141'), //Save
		              '#name' => 'save',
		              '#attributes' => $setAttributes,
	            );
	 }
	 
	 $setAttributes['onclick'] = array();
	 $setAttributes['onclick'][] = 'remove_messages();';
            $form[$customHiddenButtonId] = array(
			    '#type' => 'submit',
			    '#value' => t('hidden-save'),
			    '#name'	=> 'hidden-save',
			    '#prefix' => '<span id = "esign-admin-div" style="display:none;">',
			    '#suffix' => '</span>',
			    '#id' =>$customHiddenButtonId,
			  	'#attributes' => $setAttributes,
			    '#ajax' => array(
			      'wrapper' => 'wizard-form-wrapper',
			      'callback' => 'exp_sp_my_account_preference_form_callback',
			      'method' => 'replace',
			      'effect' => 'none', // 'fade',
			      'event'=>'click',
			      'keypress' => true,
			      'progress' => array(
			        'type' => 'throbber',
			        'message' => ''
			       ),			  
			     ),  
		  );
		  $form['preference-cancel-save-end'] = array(
		    '#type'   => 'markup',
		    '#markup' => '</div>'
		  );
		  $form['addedit-column-pref-end'] = array(
		  		'#type'   => 'markup',
		  		'#markup' => '</div>'
		  );
      break;
  } // end switch
  
  return $form;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_account_preference_form', $ex);
    expertusErrorThrow($ex);
  }
}
/**
 * Show/hide textfields based on AJAX-enabled checkbox clicks.
 */
function exp_sp_my_account_preference_form_callback($form, &$form_state) {
  try{	
  $commands = array();
  if(module_exists('exp_sp_esignature')){
    $triggerValue  = 'save';
  }else{
    $triggerValue  = 'hidden-save';
  }
  if(module_exists('exp_sp_esignature') && isActiveEsignRegion() && $form_state['triggering_element']['#name'] ==  $triggerValue){
	  if(!form_set_error()){
	  		$form_state['esign_show_popup'] = true;	  		
	  }else{	  	
	  	$form_state['esign_show_popup'] = false;
	  }
      $custButtonId  = $form_state['triggering_element']['#ajax']['customButtonId'];
      $esignObj  = '{"popupDiv":"ctools-face-table","esignFor":"AddAdmin","esignButtId":"'.$custButtonId.'"}';
      if($form_state['esign_show_popup']==true){
	      $commands[] = ajax_command_invoke(NULL, 'getNewEsignPopup',array($esignObj));
	      return array('#type' => 'ajax', '#commands' => $commands);
      }else{
    	  $form['#prefix'] = '<div id="wizard-form-wrapper" class="my-account-wrapper">';
		  $form['#suffix'] = '</div>';
		  return $form;
      }
  }else{
  	  $form['#prefix'] = '<div id="wizard-form-wrapper" class="my-account-wrapper">';
	  $form['#suffix'] = '</div>';
	  return $form;
  }
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_account_preference_form_callback', $ex);
    expertusErrorThrow($ex);
  }
}

function exp_sp_my_account_preference_form_submit($form, &$form_state) {
  try{
	expDebug::dPrint(' $form = ' . print_r($form, true) , 5);   
  expDebug::dPrint(' $form_state = ' . print_r($form_state, true) , 5);   
	
  global $user;
  require_once('exp_sp_my_account.inc');
  require_once "./getLearnerInfo.php";
  $obj = new GetLearnerInfo();
  $result->UserId = $obj->getValue('userid');

  // Save away the current information.
  $current_step = 'step' . $form_state['storage']['step'];
  if (!empty($form_state['values'][$current_step])) {
    $form_state['storage']['values'][$current_step] = $form_state['values'][$current_step];
  }
  
  // Increment or decrement the step as needed. Recover values if they
  // exist.
  if ($form_state['triggering_element']['#value'] == t('LBL063')) {
    $form_state['storage']['step']++;
    // If values have already been entered for this step, recover them from
    // $form_state['storage'] to pre-populate them.
    $step_name = 'step' . $form_state['storage']['step'];
    if (!empty($form_state['storage']['values'][$step_name])) {
      $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
    }
  }
  
  if ($form_state['triggering_element']['#value'] == t('LBL109')) {
    $form_state['storage']['step']--;
    // Recover our values from $form_state['storage'] to pre-populate them.
    $step_name = 'step' . $form_state['storage']['step'];
    $form_state['values'][$step_name] = $form_state['storage']['values'][$step_name];
  }
  if ($form_state['triggering_element']['#name'] == t('hidden-save')) {
	    $form_state['esign_show_popup']= false;
    	exp_sp_my_account_preference_form_commonsave($form, $form_state,$result);
  }
  // Otherwise, we still have work to do.
  $form_state['rebuild'] = TRUE;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_account_preference_form_submit', $ex);
    expertusErrorThrow($ex);
  }
}

function exp_sp_my_account_preference_form_update($form, &$form_state){
	try{
  return $form;
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_my_account_preference_form_update', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_my_account_shopping_cart_form ($form, &$form_state){
try{
  global $user;
  global $theme_key;
  drupal_add_js(drupal_get_path('module', 'exp_sp_my_account').'/exp_sp_my_account.js', array('type' => 'file', 'group' => JS_DEFAULT));
  if($theme_key == 'expertusoneV2') {
 //NEWUI THEME STYLE SHEET
  drupal_add_css(drupal_get_path('module', 'exp_sp_my_account') .'/exp_sp_my_account_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  }else{
  drupal_add_css(drupal_get_path('module', 'exp_sp_my_account') .'/exp_sp_my_account.css', array('type' => 'file', 'group' => CSS_DEFAULT));	
  }
  if(module_exists('exp_sp_esignature')){   	   
  if($theme_key == 'expertusoneV2') {
  //NEWUI THEME STYLE SHEET
  	drupal_add_css(drupal_get_path('module', 'exp_sp_esignature') .'/exp_sp_esignature_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  }else{
  	drupal_add_css(drupal_get_path('module', 'exp_sp_esignature') .'/exp_sp_esignature.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  }
  }
  require_once('exp_sp_my_account.inc');
  $form = array();
  $step = empty($form_state['storage']['step']) ? 1 : $form_state['storage']['step'];
  $form_state['storage']['step'] = $step;
  $form['#tree'] = TRUE; // We want to deal with hierarchical form values.
  switch ($step) {
    case 1:
      /*$backbuttonvalue="[&nbsp;&nbsp;".t('LBL212')."&nbsp;&nbsp;]"; 
      $form['next'] = array(
            '#type' => 'submit',
    		'#prefix' =>getPrefix('','action','false').'<input type="button" class="my-account-cancel-button" value='.$backbuttonvalue.' onclick="history.go(-1);" />',
    		'#attributes' => array('Class' => 'layout-add-edit-button'),
    		'#value' => t('LBL063'),
    		'#ajax' => array(
      			'wrapper' => 'wizard-form-wrapper',
      			'callback' => 'exp_sp_my_account_shopping_cart_form_callback',
      			'method' => 'replace',
      			'effect' => 'fade',
      			'event'=>'click',
            ),
        );
      $form['back'] = array(
    	    '#type' => 'markup',
    	    '#suffix' => getSuffix('action'),
    	    //'#markup' => '<input type="button" class="my-profile-cancel-button" value="[&nbsp;&nbsp;Back&nbsp;&nbsp;]" onclick="history.go(-1);" />',
      );*/
      $loggedUserId = getSltpersonUserId();
      $form['box'] = array(
    	    '#type' => 'markup',
    	    '#markup' => theme('my_shoppingcart_orders', array('results' => '')),
      );
      break;      
      
  } 
  return $form;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_my_account_shopping_cart_form', $ex);
    expertusErrorThrow($ex);
  }
  
  
}

function exp_sp_my_meeting_form($form,&$form_state,$userDetails){
	try{
		global $user;
		global $theme_key;
		global $base_url;

		drupal_add_css(drupal_get_path('module', 'exp_sp_my_account') .'/exp_sp_my_account_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
		if(module_exists('exp_sp_esignature')){
			drupal_add_css(drupal_get_path('module', 'exp_sp_esignature') .'/exp_sp_esignature_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
		}
		
		$step = empty($form_state['meeting']['step']) ? 1 : $form_state['meeting']['step'];
		$form_state['meeting']['step'] = $step;
		$form['#tree'] = TRUE;  // We want to deal with hierarchical form
		$form['#attributes'] = array('enctype' => "multipart/form-data");
		$submit_status  = $form_state['meeting']['submit_status'];
		$error  = $form['hidden']['#value'];
		
	  switch ($step) {
	  case 1: // view mode

	 // $userDetails  = getMyAccountDetails($user->uid);
	  $welcomeName = $userDetails[0][0]->person_first_name." ".mb_substr($userDetails[0][0]->person_last_name,0,1,'UTF-8');
	  $welcomeNote  = t('Welcome ').$welcomeName;
	  
		if($error!='error' && $submit_status!=1){
	  	$form['next-edit-meeting'] = array(
	  			'#type' => 'submit',
	  			'#prefix' => '<div class="my-meeting-admin-edit-button-container"><div class="my-meetingadmin-edit-button-left-bg"></div>',
	  			'#suffix' => '<div class="my-meeting-admin-edit-button-right-bg"></div></div>',
	  			'#value' => t('LBL063'),
	  			'#name' => "meeting",
	  			'#attributes' => array('Class' => 'layout-add-edit-button my-meeting-edit-button admin-edit-button-middle-bg'),
	  			'#ajax' => array(
	  					'wrapper' => 'wizard-form-wrapper',
	  					'callback' => 'exp_sp_my_meeting_form_callback',
	  					'method' => 'replace',
	  					'effect' => 'fade',
	  					'event'=>'click',
	  			),
	  	);
	  		$form['meeting-edit'] = array(
	 		'#type' => 'markup',
	 		'#markup' => '<div id="main-form">
	 		<img src="'.$base_url.'/sites/all/themes/core/expertusoneV2/logo.png" id="main-form" onload="setTimeout(function() { wrapper_alignment(\'meeting-form-edit\') }, 750);return false;" style="display:none;"/></div>',
	 
	 	);
		}
	  if($submit_status=='saved'){
	  	$form_state['storage']['refresh_page']=1;
	  	if($form_state['storage']['refresh_page']==1){
	  		unset($form_state['storage']['refresh_page']);
	  		$pngPath = base_path().'sites/all/themes/core/expertusone/expertusone-internals/images/spacer.gif';
	  		$form['newonloadreftresh'] = array(
	  				'#type' => 'markup',
	  				'#markup' => '<div style="display:none;"><img id= "edit-preference-language" src="'.$pngPath.'" onload = "refreshAccountSetting();"></div>',
	  		);
	  	}
	 }else if ($error!='error' && $submit_status!=1){
			  	$form['box'] = array(
	  			'#type' => 'markup',
	  			'#markup' => theme('my_meeting', array('results' => $userDetails)),
	  	);
	  }
	  
 
		break;
		 case 2: // edit mode
		
		 	$form['#tree'] = TRUE;  // We want to deal with hierarchical form
		 	$form['#attributes'] = array('enctype' => "multipart/form-data");
		 	$submit_status  = $form_state['meeting']['submit_status'];
		 	
		 	//$userDetails  = getMyAccountDetails($user->uid);
		 	$welcomeName = $userDetails[0][0]->person_first_name." ".mb_substr($userDetails[0][0]->person_last_name,0,1,'UTF-8');
		 	$welcomeNote  = t('Welcome ').$welcomeName;
		 	
		 	
		 $form['addedit-column-details-1-start'] = array(
				'#type'   => 'markup',
				'#markup' => '<div id="addedit-meeting-details-page" class="details-without-pass-policy detail-cancel-save-right-align">',
			);
								 
		$userInfo = getMyAccount($user->uid);
		// Save the default values in form_state for audit trail reference in form submit handler
		$form_state['storage']['default_values'] = array();
		
    	$form['requiredBox']['#markup']  = '<table cellspacing="0" cellpadding="0" border="0" align="left"><tr><td colspan="2" class="field-title"><span><span class="require-heading"></span>&nbsp;&nbsp;</span></td></tr></table></fieldset>';
		
		    $form['markup'] = array(
		    		'#type' => 'markup',
		    		'#markup' => '<fieldset><legend>'.t('MSG761').'</legend>',
		    		);
		        
		    $instructor = $userInfo->person_is_instructor;
		    if(variable_get('webex_User') == 1 && $instructor == 'Y'){
		    $form['meeting-edit-align'] = array(
		    		'#type' => 'markup',
		    		'#markup' => '<div id="meeting-edit">
   	  			<img src="'.$base_url.'/sites/all/themes/core/expertusoneV2/logo.png" id="meeting-form-edit" onload="setTimeout(function() { wrapper_alignment(\'meeting-form-edit\') }, 750);return false;" style="display:none;"/></div>',
   	  
		    );
		    }
		    
      		$form_state['storage']['default_values'] = array();
		    		    
			$form['webex_name'] = array(
					'#type' => 'textfield',
					'#prefix' => getPrefix(t('WebEx').t(' ').t('LBL054'),'prefix','false'),
					'#suffix' => getSuffix('suffix'),
					'#title' => t('WebEx').t(' ').t('LBL054'),
					'#maxlength' => 255,
					'#default_value' => (empty($form_state['values']['webex_name'])) ? $userInfo->person_webex_name : $form_state['values']['webex_name'],
					'#required' => False,
					'#attributes' => (array('tabindex' => '6')),
			);
			$form_state['storage']['default_values']['webex_name'] = $userInfo->person_webex_name;
			
			
			$enc = new Encrypt();
			$form['webex_pass'] = array(
					'#type' => 'password',
					'#prefix' => getPrefix(t('WebEx').t(' ').t('LBL060'),'prefix','false'),
					'#suffix' => getSuffix('suffix'),
					'#title' => t('WebEx').t(' ').t('LBL060'),
					'#maxlength' => 255,
					'#default_value' => ($form_state['values']['webex_pass'] == '')? $userInfo->person_webex_pass : $form_state['values']['webex_pass'],
					'#required' => False,
					'#attributes' => (array('tabindex' => '7')),
			);
			$form_state['storage']['default_values']['webex_pass'] = $userInfo->person_webex_pass;
			
			$form['hid'] = array(
					'#type' => 'hidden',
			        '#default_value' => $userInfo->person_webex_pass,
					);
			
			$form['hidden'] = array(
					'#type' => 'hidden',
			        '#default_value' => '',
					);
					
			$form['prev'] = array(
					'#type' => 'submit',
					'#value' => t("LBL109"), //Cancel
					'#prefix' =>getPrefix('','action_save','false').'<div class="detail-edit-cancel-button"><div class="white-btn-bg-container"><div class="white-btn-bg-left"></div>',
					'#suffix' => '<div class="white-btn-bg-right"></div></div></div>',
					'#limit_validation_errors' => array(),
					'#name' => 'Cancel',
					'#submit' => array('exp_sp_my_meeting_form_submit'),
					'#attributes' => array('tabindex' => '12','Class' => 'my-meeting-cancel-button white-btn-bg-middle'),
					'#ajax' => array(
							'wrapper' => 'wizard-form-wrapper',
							'callback' => 'exp_sp_my_meeting_form_callback',
							'event'=>'click',
					),
			);
			
			
			$customHiddenButtonId = 'esign-meeting-save';
			$setAttributes['tabindex'] = array('11');
			$setAttributes['Class'] =  array('admin-save-button-middle-bg');
			$setAttributes['onclick'] = array();
			if (module_exists('exp_sp_esignature') && isActiveEsignRegion()) {
				$setAttributes['onclick'][] = 'remove_messages();';
				$form['next-save-esignon'] = array(
						'#type' => 'button',
						'#prefix' => '<div class="admin-save-button-container">' .
						'<div class="admin-save-button-left-bg"></div>',
						'#suffix' =>   '<div class="admin-save-button-right-bg"></div>'.
						'</div>'.getSuffix('action'),
						'#title' => t('LBL141'), //Save
						'#value' => t('LBL141'), //Save
						'#name' => 'save',
						//'#submit' => array('addNewEnrollTPUserDetails'),
						'#attributes' => $setAttributes,
						'#ajax' => array(
								'callback' => 'exp_sp_my_meeting_form_callback',
								'wrapper' => 'wizard-form-wrapper',
								'customButtonId'=>$customHiddenButtonId,
								'method' => 'replace',
								'effect' => 'none', // 'fade',
								'event'=>'click',
								'keypress' => true,
								'progress' => array(
										'type' => 'throbber',
										'message' => ''
								),
						),
				);
			}
			else {
				$setAttributes['onclick'][] = '$("#'.$customHiddenButtonId.'").click(); return false;';
				$form['next-save-esignoff'] = array(
						'#type' => 'button',
						'#prefix' =>'<div class="admin-save-button-container">' .
						'<div class="admin-save-button-left-bg"></div>',
						'#suffix' =>  '<div class="admin-save-button-right-bg"></div>'.
						'</div>' . getSuffix('action'),
						'#title' => t('LBL141'), //Save
						'#value' => t('LBL141'), //Save
						'#name' => 'save',
						'#attributes' => $setAttributes
				);
			}
			$setAttributes['onclick'] = array();
			$setAttributes['onclick'][] = 'remove_messages();';
			$form[$customHiddenButtonId] = array(
					'#type' => 'submit',
					'#value' => t('hidden-save'),
					'#name'	=> 'hidden-save',
					'#prefix' => '<span id = "esign-admin-div" style="display:none;">',
					'#suffix' => '</span>',
					'#id' =>$customHiddenButtonId,
					'#attributes' => $setAttributes,
					'#ajax' => array(
							'wrapper' => 'wizard-form-wrapper',
							'callback' => 'exp_sp_my_meeting_form_callback',
							'method' => 'replace',
							'effect' => 'none', // 'fade',
							'event'=>'click',
							'keypress' => true,
							'progress' => array(
									'type' => 'throbber',
									'message' => ''
							),
					),
			);
		
			$form['addedit-column-details-1-end'] = array(
					'#type'   => 'markup',
					'#markup' => '</div>',
			);
			$form['markup1'] = array(
					'#type' => 'markup',
					'#markup' => '</fieldset>',
			);
		}
			return $form;
		
	}catch(Exception $ex){
		watchdog_exception('exp_sp_my_meeting_form', $ex);
		expertusErrorThrow($ex);
	}
}

function exp_sp_my_meeting_form_callback($form, &$form_state) {
	try{
		global $user;
		
		$name=$form_state['values']['webex_name'];
		$password=$form_state['values']['webex_pass'];
		$hid = $form_state['values']['hid'];

		if(!empty($name) || !empty($password)){
		if(((empty($name) && (!empty($password) || !empty($hid)))) || ((!empty($name) && (empty($password) && empty($hid)))) || (!empty($name) && empty($password) && ($name != $form['webex_name']['#default_value']))){
			$form['hidden']['#value'] = 'error';
		}
		}if(((empty($name)) || $name == '') && ($password == '' || (empty($password))) && (empty($hid) || $hid = '')){
			$form['hidden']['#value'] = '';
			}
		if(($form_state['values']['next-edit-meeting'] == t('LBL063')) && ($form_state['values']['prev'] == t('LBL109')) && ($form_state['values']['next-edit-account'] != t('LBL063')) || $form['hidden']['#value'] == 'error'){
		$build = array();
		$userDetails  = getMyAccountDetails($user->uid);
		$build['form_one'] = drupal_get_form('exp_sp_my_account_form');
		$build['form_two'] = exp_sp_my_meeting_form($form,$form_state['values'],$userDetails);
		$form=$build;
		}
		
		$commands = array();
		if(module_exists('exp_sp_esignature')){
			$triggerValue  = 'save';
		}else{
			$triggerValue  = 'hidden-save';
		}
		if(module_exists('exp_sp_esignature') && isActiveEsignRegion() && $form_state['triggering_element']['#name'] ==  $triggerValue){
	  if(!form_set_error()){
	  	$form_state['esign_show_popup'] = true;
	  }else{
	  	$form_state['esign_show_popup'] = false;
	  }
	  $custButtonId  = $form_state['triggering_element']['#ajax']['customButtonId'];
	  $esignObj  = '{"popupDiv":"ctools-face-table","esignFor":"AddAdmin","esignButtId":"'.$custButtonId.'"}';
	  if($form_state['esign_show_popup']==true){
	  	$commands[] = ajax_command_invoke(NULL, 'getNewEsignPopup',array($esignObj));
	  	return array('#type' => 'ajax', '#commands' => $commands);
	  }else{
	  	$form['#prefix'] = '<div id="wizard-form-wrapper" class="meeting-my-meeting-wrapper">';
	  	$form['#suffix'] = '</div>';
	  	return $form;
	  }
		}else{
	  $form['#prefix'] = '<div id="wizard-form-wrapper" class="meeting-my-meeting-wrapper">'.theme('status_messages');
	  $form['#suffix'] = '</div>';
	  $commands = array();
	  
	  $commands[] = ajax_command_replace(NULL, drupal_render($form));
	  return array('#type' => 'ajax', '#commands' => $commands);
		}
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_my_meeting_form_callback', $ex);
		expertusErrorThrow($ex);
	}
}

function exp_sp_my_meeting_form_validate($form,&$form_state){
	try{
			$name=$form_state['values']['webex_name'];
			$password=$form_state['values']['webex_pass'];
			$hid = $form_state['values']['hid'];
			
			if(!empty($name) || !empty($password)){
			if((empty($name)) && (!empty($password) ||  !empty($hid))){
				form_set_error('webex_name', t('LBL054').t(' ').t('ERR101'));
				$form_state['esign_show_popup']= false;
			}
			if((!empty($name)) && (empty($password) && empty($hid))){				
				form_set_error('webex_pass', t('LBL060').t(' ').t('ERR101'));
				$form_state['esign_show_popup']= false;
			}
			if(!empty($name) && empty($password) && ($name != $form['webex_name']['#default_value'])){
				form_set_error('webex_pass', t('LBL060').t(' ').t('ERR101'));
				$form_state['esign_show_popup']= false;			
			}	
			}
		}catch (Exception $ex) {
			watchdog_exception('exp_sp_my_meeting_form_validate', $ex);
			expertusErrorThrow($ex);
		}
	}

function exp_sp_my_meeting_form_commonsave($form, &$form_state){
	try{
		global $user;

		$postVar     = $form_state['values'];
		$webex_name   = $postVar['webex_name'];
		if(!empty($postVar['webex_pass']) || (empty($postVar['webex_pass']) && empty($postVar['webex_name']))){
		$ner = new Encrypt();
		$webex_pass   = $ner->encrypt($postVar['webex_pass']);
		}else{
		$webex_pass =$postVar['hid'];
		}
		
		$userId = getIdOfLoggedInUser(); // The slt_person table id of the logged in user is needed to maintain audit trail entry

		$userInfo = array(
				'webex_name' => $webex_name,
				'webex_pass' => $webex_pass,
		);
		updateMyWebexdetails($userInfo,$userId,$form_state['storage']['default_values']);
		
		
		$form_state['meeting']['step']--;
		// Recover our values from $form_state['storage'] to pre-populate them.
		$step_name = 'step' . $form_state['meeting']['step'];
		// $form_state['values'][$step_name] = $form_state['account']['values'][$step_name];
		$form_state['meeting']['submit_status']  = 'saved';
		drupal_get_messages('error');
		drupal_set_message(t('MSG011'));
		
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_my_meeting_form_commonsave', $ex);
		expertusErrorThrow($ex);
	}
}

function exp_sp_my_meeting_form_submit($form, &$form_state) {
	try{
		require_once('exp_sp_my_account.inc');

		$current_step = 'step' . $form_state['meeting']['step'];
		if (!empty($form_state['values'][$current_step])) {
			$form_state['meeting']['values'][$current_step] = $form_state['values'][$current_step];
		}

		// Increment or decrement the step as needed. Recover values if they
		if ($form_state['triggering_element']['#value'] == t('LBL063')) {	//Edit
			$form_state['meeting']['step']++;
			// If values have already been entered for this step, recover them from
			// $form_state['storage'] to pre-populate them.
			$step_name = 'step' . $form_state['meeting']['step'];
			if (!empty($form_state['meeting']['values'][$step_name])) {
				$form_state['values'][$step_name] = $form_state['meeting']['values'][$step_name];
			}
		}

		if ($form_state['triggering_element']['#value'] == t('LBL109')) { //Cancel
			$form_state['meeting']['step']--;
			// Recover our values from $form_state['storage'] to pre-populate them.
			$step_name = 'step' . $form_state['account']['step'];
			//$form_state['values'][$step_name] = $form_state['account']['values'][$step_name];
		}
		if ($form_state['triggering_element']['#name'] == t('hidden-save')) {
			$form_state['esign_show_popup']= false;
			exp_sp_my_meeting_form_commonsave($form, $form_state);
		}
		// Otherwise, we still have work to do.
		$form_state['rebuild'] = TRUE;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_my_meeting_form_submit', $ex);
		expertusErrorThrow($ex);
	}
}

function getcountrycheck($countryname){
	try{
            include_once $_SERVER["DOCUMENT_ROOT"]."/sites/all/modules/core/exp_sp_core/modules/exp_sp_userregister/exp_sp_userregister.inc";
		print getState($countryname);
		die;
	}catch (Exception $ex) {
		watchdog_exception('getcountrycheck', $ex);
		expertusErrorThrow($ex);
	}
};


?>