<?php
class AdministrationAssessmentTestHelper extends ExpertusWebTestCase {
	private $searchResultContent = null;
	protected $testcases = array ();
	public $listContent = '';
	private $srcParam = array (
			'title' => '', // Title base search
			'announcementdaterange' => '', // date range on announcement
			'announcementlang' => 'cre_sys_lng_eng', // Selected languages pipe separated
			'sortby' => 'desc', // Sort by option
			'announcemanage' => 'cre_sys_fop_me' 
	);
	public function setUp() {
		parent::setUp ();
		$this->drupalLogin ( $this->admin ); // login as admin
		$this->getAssessmentTestCases ();
		// set refer to prevent access denied error
		$this->setHttpReferer ( 'learning/enrollment-search' );
	}
	public function manageAdminAssessment($scope = 'basic') {
		
		// Get Main HTML content
		$this->drupalPost ( 'administration/assessment/assessmentdetails' );
		$content = $this->content;
		
		// Get Filters
		$this->drupalGetAJAX ( 'administration/search-filter/assessmentdetails' );
		$this->content = drupal_json_decode ( $this->content );
		
		// Update filters with existing response
		$replArray = array (
				'rendered_narrow_search_filters' => 'narrow-search',
				'rendered_main_div' => 'root-admin-results',
				'rendered_tab_content_main' => 'tab-content-main',
				'rendered_narrow_search_sortbar' => 'admin-maincontent_tab',
				'rendered_narrow_search_actionbar' => 'sort-bar-V2' 
		);
		
		$this->updateSearchFilters ( $content, $replArray, 'div', 'tag', 'div' );
		
		$this->displayTagsById ( 'narrow-search' );
		$this->displayTagsById ( 'root-admin-results' );
		
		// Based on the scope set the data to test
		if ($scope == 'all') {
			$testCases = $this->testcases ['assessmentList'];
		} else {
			$testCases = array (
					$this->testcases ['assessmentList'] [$scope] 
			);
		}
		
		// Get search results
		foreach ( $testCases as $test ) {
			$this->getAdministrationAssessmentList ( $test );
		}
	}
	public function getAdministrationAssessmentList($opt = array()) {
		$opt = array_merge ( $this->basicParam, $opt );
		$this->listContent = $this->content;
		$srcRc = $this->drupalGetAJAX ( 'administration/assessment/assessmentdetails/search/all/', array (
				'query' => $opt 
		) );
		$this->updateSearchResults ( $this->listContent, $srcRc, 'narrow-search-results-holder' );
	}
	protected function getAssessmentTestCases() {
		$rand = $this->randomName ( 10 );
		$this->testcases = array (
				'assessmentList' => array (
						'basic' => array (),
						'case1' => array () 
				),
				'assessmentCreate' => array (
						'st_case1' => array (
								"survey_title" => 'st_case1 title - ' . $rand,
								"survey_code" => 'st_case1 code - ' . $rand,
								"survey_qust_per_page" => 1,
								"survey_language" => 'cre_sys_lng_eng',
								"min_marks" => 2,
								"max_marks" => 4,
								"survey_description[value]" => 'st_case1 description - ' . $rand,
								"entity_value" => 'sry_det_typ_sry' 
						),
						'st_case2' => array (
								"survey_title" => 'st_case2 title - ' . $rand,
								"survey_code" => 'st_case2 code - ' . $rand,
								"survey_qust_per_page" => 1,
								"survey_language" => 'cre_sys_lng_eng',
								"min_marks" => 2,
								"max_marks" => 4,
								"survey_description[value]" => 'st_case2 description - ' . $rand,
								"entity_value" => 'sry_det_typ_sry' 
						) 
				),
				'assessmentUpdate' => array (
						'st_case1' => array (
								"survey_title" => 'st_case1 changed ' . $rand,
								"id" => $this->getAssessmentId ( 'st_case1' ) 
						),
						'st_case2' => array (
								"survey_title" => 'st_case2 changed ' . $rand,
								"id" => $this->getAssessmentId ( 'st_case2' ) 
						) 
				),
				'assessmentDelete' => array (
						'st_case1' => array (
								'id' => $this->getAssessmentId ( 'st_case1' ) 
						),
						'st_case2' => array (
								'id' => $this->getAssessmentId ( 'st_case2' ) 
						) 
				),
				'assessmentView' => array (
						'st_case1' => array (
								'id' => $this->getAssessmentId ( 'st_case1' ) 
						) 
				),
				'assessmentStatus' => array (
						'st_case1' => array (
								'id' => $this->getAssessmentId ( 'st_case1' ) 
						),
						'st_case2' => array (
								'id' => $this->getAssessmentId ( 'st_case2' ) 
						) 
				) 
		);
	}
	public function getAssessmentTitle($assessmentId = '') {
		$assessmentTitle = db_query ( "SELECT title FROM slt_survey WHERE type = :type and id = :survey_id", array (
				':type' => 'sry_det_typ_ass',
				':survey_id' => $assessmentId 
		) )->fetchField ();
		return $assessmentTitle;
	}
	// To check how many questions are attached for the particular assessment
	public function getAssessmentQuestionCount($assessmentId = '') {
		$assessmentCount = db_query ( "SELECT count(question_id) FROM slt_survey_groups_questions WHERE survey_id = :survey_id", array (
				':survey_id' => $assessmentId 
		) )->fetchField ();
		return $assessmentCount;
	}
	 // When assessment has questions, max marks entered by admin must equal the questions' score total
	public function checkAssessmentMaxMark($assessmentId=''){
		$select = db_select('slt_survey_groups_questions', 'sur_grp_ques');
		// $select->leftJoin('slt_survey_groups', 'sur_grp', 'sur_grp_ques.survey_group_id = sur_grp.id'); // Issue fix : #35887
		$select->leftJoin('slt_survey', 'sur', 'sur_grp_ques.survey_id = sur.id');
		$select->addExpression('SUM(sur_grp_ques.score)', 'total_score');
		$select->addExpression('COUNT(sur_grp_ques.id)', 'ques_cnt');
		$select->condition('sur_grp_ques.survey_id', $assessmentId, '=');
		$select->condition('sur.type', 'sry_det_typ_ass', '=');
		//$select->condition('sur.status', 'sry_det_sry_atv', '='); // Issue fix : #35887		
		$questionsTotalScore = $select->execute()->fetch();		
		$isValid = true;
		if ($questionsTotalScore->ques_cnt > 0) {
			$newMaxScore = db_query ( "SELECT max_mark FROM slt_survey WHERE type = :type and id = :survey_id", array (
					':type' => 'sry_det_typ_ass',
					':survey_id' => $assessmentId
			) )->fetchField ();
			if ($questionsTotalScore->total_score != $newMaxScore) {
				$isValid = false;
			}
		}		
		return $isValid;
	}
	
	// To check how many classes are attached for the particular survey
	public function getAssessmentMappingCount($assessmentId = '') {
		$assessmentmapCount = db_query ( "SELECT count(survey_id) FROM slt_survey_mapping WHERE survey_id = :survey_id", array (
				':survey_id' => $assessmentId 
		) )->fetchField ();
		return $assessmentmapCount;
	}
	public function getAssessmentStatus($assessmentId = '') {
		$assessmentStatus = db_query ( "SELECT status FROM slt_survey WHERE type = :type and id = :survey_id", array (
				':type' => 'sry_det_typ_ass',
				':survey_id' => $assessmentId 
		) )->fetchField ();
		return $assessmentStatus;
	}
	public function getAssessmentId($search_str = '') {
		$select = db_select ( 'slt_survey', 'survey' );
		$select->addField ( 'survey', 'id', 'id' );
		$select->condition ( 'survey.status', 'sry_det_sry_del', '!=' );
		$select->condition ( 'survey.type', 'sry_det_typ_ass' );
		$select->condition ( 'survey.title', '%' . db_like ( $search_str ) . '%', 'LIKE' );
		$select->orderBy ( 'survey.id', 'DESC' );
		$select->range ( 0, 1 );
		$assessmentId = $select->execute ()->fetchField ();
		return $assessmentId;
	}
}
class AdministrationAssessmentListBase extends AdministrationAssessmentTestHelper {
}
class AdministrationAssessmentListAll extends AdministrationAssessmentListBase {
	public static function getInfo() {
		return array (
				'name' => 'Administration - Assessment - List - All Tests',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1401 - Administration - Assessment - AssessmentDetails - List' 
		);
	}
	public function testAssessmentListAll() {
		debug ( 'testAdminAssessmentListAll called' );
		$this->manageAdminAssessment ( 'all' );
	}
}
class AdministrationAssessmentListCase1 extends AdministrationAssessmentListBase {
	public static function getInfo() {
		return array (
				'name' => 'Administration - Assessment - List - Case 1',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1401 - Administration - Assessment - AssessmentDetails - List' 
		);
	}
	public function testAssessmentListCase1() {
		debug ( 'testAdminAssessmentListCase1 called' );
		$this->manageAdminAssessment ( 'case1' );
	}
}

/**
 * Assessment view test cases
 * Created By :Maheswari.M
 * Created Date:21.12.2016
 */
class AdministrationAssessmentViewBase extends AdministrationAssessmentTestHelper {
	public function viewAssessmentTestCase($scope) {
		$ctoolModel = array (
				'modelWidth' => 890,
				'modelClass' => 'ctools-modal-ctools-viewscreen-wrapper',
				'modelTitle' => t ( 'View' ),
				'contentWidth' => 680,
				'contentMhight' => 335,
				'outerHeight' => 620,
				'outerWidth' => 336,
				'blockHeight' => 1232,
				'blockWidth' => 1343,
				'modelTop' => 150,
				'modelLeft' => 226.5,
				'docHeight' => 1232,
				'docWidth' => 1343 
		);
		$this->addCtoolModelContent ( $ctoolModel );
		
		$modelContent = $this->content;
		
		$testCases = $this->testcases ['assessmentView'] [$scope];
		
		if ($testCases ['id'] == 'null' || $testCases ['id'] == '') {
			debug ( 'there is no assessment exists' );
		} else {
			// Reset content with the ctool model
			$this->content = $modelContent;
			// Get empty form
			$post_field = array (
					'wrapper' => 'paint-narrow-search-results' 
			);
			$viewId = $testCases ['id'];
			
			$out = $this->drupalPostAJAX ( null, $edit, 'Save', '?q=administration/assessment/assessmentdetails/view-assess/ajax/addedit/' . $viewId . '/sry_det_typ_ass', array (), array (), '', $post_field );
			$this->verbose ( 'Request to: ' . $this->getUrl () . '<hr />' . $this->content );
			// Do General validations
			$this->assertResponse ( 200, 'Form Rended successfully' );
			$webError = "Website encountered an unexpected error";
			$this->assertNoText ( t ( $webError ), 'Web errors not found', 'catalog_admin' );
		}
	}
}
class AdministrationAssessmentViewCase1 extends AdministrationAssessmentViewBase {
	public static function getInfo() {
		return array (
				'name' => 'Administration - Assessment - View - All Tests',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1401 - Administration - Assessment - AssessmentDetails - View' 
		);
	}
	public function testAssessmentViewCase1() {
		debug ( 'testAssessmentViewCase1 called' );
		$this->manageAdminAssessment ( 'case1' );
		$this->viewAssessmentTestCase ( 'st_case1' );
	}
}

/**
 * Assessment change status test cases
 * Created By :Maheswari.M
 * Created Date:28.12.2016
 * To check the functionality for the assessment publish/unpublish .
 */
class AdministrationAssessmentStatusBase extends AdministrationAssessmentTestHelper {
	public function statusGroupTestCase($scope = 'all') {
		// Based on the scope set the data to test
		if ($scope == 'all') {
			$testCases = $this->testcases ['assessmentStatus'];
		} else {
			$testCases = array (
					$this->testcases ['assessmentStatus'] [$scope] 
			);
		}
		
		foreach ( $testCases as $test ) {
			$assessmentId = $test ['id'];
			if ($assessmentId != '') {
				$assessment_map = $this->getAssessmentMappingCount ( $assessmentId );
				if ($assessment_map > 0)
					debug ( 'Assessment mapped to the course/class,Published status' );
				else {
					// To check how many questions are attached for the particular assessment
					$num_question = $this->getAssessmentQuestionCount ( $assessmentId );
					if ($num_question > 0) {
						$checkScore = $this->checkAssessmentMaxMark ( $assessmentId );
						if($checkScore==true){						
						// we can publish/unpublish the assessment when the assessment have questions
						$status = $this->getAssessmentStatus ( $assessmentId );
						$this->changeStatus ( $assessmentId, $status );
						$status = $this->getAssessmentStatus ( $assessmentId );
						$this->changeStatus ( $assessmentId, $status );
						$this->content = $this->listContent;
						$this->getAdministrationAssessmentList ();
						}else 
					debug('When assessment has questions, max marks entered by admin must equal the questions("Publish status")');
					} else {
						// without question we can't publish/unpublish the assessment
						debug ( 'Assessment have no question' );
					}
				}
			} else
				debug ( 'The Assessment id not found' );
		}
	}
	
	// change the status of the assessment
	public function changeStatus($assessmentId, $status) {
		if ($status == 'sry_det_sry_atv') {
			// Assessment is already published status
			$this->changeAssessmentStatus ( $assessmentId );
			$this->assertResponse ( 200, 'Assessment status unpublished successfully' );
		} else {
			// Assessment is unpublished status
			$this->changeAssessmentStatus ( $assessmentId );
			$this->assertResponse ( 200, 'Assessment status published successfully' );
		}
	}
	public function changeAssessmentStatus($assessmentId) {
		$this->drupalPostAJAX ( null, $edit, 'Save', '?q=ajax/administration/assessment/survey-assessment/publish-and-unpublish/' . $assessmentId . '/Assessment', array (), array (), '', $post_field );
	}
}
class AdministrationAssessmentStatusCase1 extends AdministrationAssessmentStatusBase {
	public static function getInfo() {
		return array (
				'name' => 'Administration - Assessment - Status - Case1',
				'description' => 'Module : exp_sp_administration_assessment',
				'group' => '1401 - Administration - Assessment - AssessmentDetails - Status' 
		);
	}
	public function testAssessmentPublishCase1() {
		debug ( 'testAssessmentPublishCase1 called' );
		$this->manageAdminAssessment ( 'case1' );
		$this->statusGroupTestCase ( 'st_case1' );
	}
}
class AdministrationAssessmentStatusCase2 extends AdministrationAssessmentStatusBase {
	public static function getInfo() {
		return array (
				'name' => 'Administration - Assessment - Status - Case2',
				'description' => 'Module : exp_sp_administration_assessment',
				'group' => '1401 - Administration - Assessment - AssessmentDetails - Status' 
		);
	}
	public function testAssessmentPublishCase2() {
		debug ( 'testAssessmentPublishCase1 called' );
		$this->manageAdminAssessment ( 'case1' );
		$this->statusGroupTestCase ( 'st_case2' );
	}
}

?>