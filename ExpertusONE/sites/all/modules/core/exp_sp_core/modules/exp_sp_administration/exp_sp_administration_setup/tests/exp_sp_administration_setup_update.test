<?php 
class AdministrationSetupUpdateBase extends AdministrationSetupTestHelper
{
	public function updateSetupTestCase($scope = 'all', $type = '') {

		$attrType = $this->getProfileListCode($type);
		
		// Based on the scope set the data to test
		if ($scope == 'all') {
			$testCases = $this->testcases[$type]['setupUpdate'];
		} else {
			$testCases = array($this->testcases[$type]['setupUpdate'][$scope]);
		}

		foreach($testCases as $test){
			
			debug('test infor found : ' . print_r($test, 1));
			
			// search list form with specific enttity to update.
			$param = array(
					"form_id"=>"exp_sp_administration_setup_addedit_form",
					"_triggering_element_name" 	=>"Search List values",
					"list_code" => $attrType['code']
			);
			
			$newTest = array(
					'hiddenlisttype' 			=> $attrType['code'],
					'listvalues-autocomplete' 	=> $test['search']
					
			);
			
			$post_field = array('submit'=>$param, 'wrapper'=>'list-values-detail-wrapper');
			
			$out = $this->drupalPostAJAX(null, $newTest, 'Save','?q=system/ajax', array(), array(),'', $post_field);
			
			$this->verbose('Request to: ' . $this->getUrl() .	'<hr />' . $this->content);
			
			//Reset content with the ctool model
			//$idPath = 'qtip_addlistvalues_visible_disp_' . $test['detail']['id'] . '_' . $test['detail']['code'];
			$idPath = 'edit-list-values-0';
			$path = '//*[@id="' . $idPath . '"]';
			$addClassObj = $this->getQtipAttributes($path,'onclick');
			
			unset($test['search'], $test['detail']);
			
			//Add qtip popup for class
			$qtipDef = array(
					'tipWidth'=>$addClassObj['wBubble'],
					'tipTop'=>128,
					'tipLeft'=>139.767,
					'tipId'=>$addClassObj['catalogVisibleId'],
					'tipObjectId'=>$addClassObj['courseId'],
					'tipTableWidht'=>373,
					'tipContentId'=>$addClassObj['popupDispId'],
					'tipEntityType'=>'cre_sys_obt_cls',
					'tipClass'=>'qtip-parent',
					'tipPos'=>'bottomRight'
			
			);
			
			$this->addQtipModel($qtipDef);
				
			// Keep final content including qtip popup for multiple test
			$qtipContent = $this->content;
			
			$this->content = $qtipContent;
				
			//Get empty form
			$post_field = array('wrapper'=>'paintContent'.$addClassObj['popupDispId']);
			
			debug('post url: ' . $addClassObj['url']);
	  	
	  		$out = $this->drupalPostAJAX(null,$edit,'edit-group-list-values','?q='.$addClassObj['url'],array(),array(),'',$post_field);
			
			$this->verbose('Class Empty Form: ' . $this->getUrl() .
					'<hr />' . $this->content);

			// Do General validations
			$this->assertResponse(200,'Form Rended successfully');
			$webError = "Website encountered an unexpected error";
			$this->assertNoText(t($webError),'Web errors not found','catalog_admin');

			// Save form
			$param = array(
					"form_id"=>"exp_sp_administration_setup_addedit_list_form",
					"_triggering_element_name" 	=>"hidden-Save",
					"_triggering_element_value"	=>"hidden-Save",
			);
				
			$post_field = array('submit'=>$param,	'wrapper'=>'addedit-listvalues-detail-wrapper');

			$out = $this->drupalPostAJAX(null, $test,'Save','?q=system/ajax',array(),array(),'',$post_field);
				
				
			$this->verbose('Request to: ' . $this->getUrl() .	'<hr />' . $this->content);


			//Check if any error thrown
			$isError = $this->xpath('//div[@class="messages error"]//ul/li');
			$error = '';
			debug("ERROR STRINGS ");

			if(sizeOf($isError) > 0){
				$error = (string) $isError[0];
			}
			$this->assertResponse(200,'Form Repainted successfully');
			//$txt = 'Details saved successfully..';
			//$this->assertText(t($txt),'Details saved successfully.','catalog_admin');
			$this->assertNoText(t($error),'Error - '.$error,'catalog_admin');
			$webError = "Website encountered an unexpected error";
			$this->assertNoText(t($webError),'Web errors not found','catalog_admin');
		}
	}

}

class AdministrationSetupUpdateDepartmentAll extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - Department - All Tests',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}
	
	public function testSetupUpdateDepartmentAll() {
		$this->manageAdminSetup('basic', 'department');
		debug('testSetupUpdateDepartmentAll called');
		$this->updateSetupTestCase('all', 'department');
	}
}

class AdministrationSetupUpdateDepartmentCase1 extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - Department - Case 1',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateDepartmentCase1() {
		$this->manageAdminSetup('basic', 'department');
		debug('testSetupUpdateDepartmentCase1 called');
		$this->updateSetupTestCase('st_case1', 'department');
	}
}

class AdministrationSetupUpdateDepartmentCase2 extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - Department - Case 2',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateDepartmentCase2() {
		$this->manageAdminSetup('basic', 'department');
		debug('testSetupUpdateDepartmentCase2 called');
		$this->updateSetupTestCase('st_case2', 'department');
	}
}

class AdministrationSetupUpdateEmploymentTypeAll extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - EmploymentType - All Tests',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateEmploymentTypeAll() {
		$this->manageAdminSetup('basic', 'employment-type');
		debug('testSetupUpdateEmploymentTypeAll called');
		$this->updateSetupTestCase('all', 'employment-type');
	}
}

class AdministrationSetupUpdateEmploymentTypeCase1 extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - EmploymentType - Case 1',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateEmploymentTypeCase1() {
		$this->manageAdminSetup('basic', 'employment-type');
		debug('testSetupUpdateEmploymentTypeCase1 called');
		$this->updateSetupTestCase('st_case1', 'employment-type');
	}
}

class AdministrationSetupUpdateEmploymentTypeCase2 extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - EmploymentType - Case 2',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateEmploymentTypeCase2() {
		$this->manageAdminSetup('basic', 'employment-type');
		debug('testSetupUpdateEmploymentTypeCase2 called');
		$this->updateSetupTestCase('st_case2', 'employment-type');
	}
}


class AdministrationSetupUpdateJobRoleAll extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - JobRole - All Tests',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateJobRoleAll() {
		$this->manageAdminSetup('basic', 'job-role');
		debug('testSetupUpdateJobRoleAll called');
		$this->updateSetupTestCase('all', 'job-role');
	}
}

class AdministrationSetupUpdateJobRoleCase1 extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - JobRole - Case 1',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateJobRoleCase1() {
		$this->manageAdminSetup('basic', 'job-role');
		debug('testSetupUpdateJobRoleCase1 called');
		$this->updateSetupTestCase('st_case1', 'job-role');
	}
}

class AdministrationSetupUpdateJobRoleCase2 extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - JobRole - Case 2',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateJobRoleCase2() {
		$this->manageAdminSetup('basic', 'job-role');
		debug('testSetupUpdateJobRoleCase2 called');
		$this->updateSetupTestCase('st_case2', 'job-role');
	}
}

class AdministrationSetupUpdateJobTitleAll extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - JobTitle - All Tests',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateJobTitleAll() {
		$this->manageAdminSetup('basic', 'job-title');
		debug('testSetupUpdateJobTitleAll called');
		$this->updateSetupTestCase('all', 'job-title');
	}
}

class AdministrationSetupUpdateJobTitleCase1 extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - JobTitle - Case 1',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateJobTitleCase1() {
		$this->manageAdminSetup('basic', 'job-title');
		debug('testSetupUpdateJobTitleCase1 called');
		$this->updateSetupTestCase('st_case1', 'job-title');
	}
}

class AdministrationSetupUpdateJobTitleCase2 extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - JobTitle - Case 2',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateJobTitleCase2() {
		$this->manageAdminSetup('basic', 'job-title');
		debug('testSetupUpdateJobTitleCase2 called');
		$this->updateSetupTestCase('st_case2', 'job-title');
	}
}


class AdministrationSetupUpdateUserTypeAll extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - UserType - All Tests',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateUserTypeAll() {
		$this->manageAdminSetup('basic', 'user-type');
		debug('testSetupUpdateUserTypeAll called');
		$this->updateSetupTestCase('all', 'user-type');
	}
}

class AdministrationSetupUpdateUserTypeCase1 extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - UserType - Case 1',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateUserTypeCase1() {
		$this->manageAdminSetup('basic', 'user-type');
		debug('testSetupUpdateUserTypeCase1 called');
		$this->updateSetupTestCase('st_case1', 'user-type');
	}
}

class AdministrationSetupUpdateUserTypeCase2 extends AdministrationSetupUpdateBase
{
	public static function getInfo() {
		return array(
				'name' => 'Administration - Setup - Update - UserType - Case 2',
				'description' => 'Module : exp_sp_administration_people',
				'group' => '1204 - Administration - People - Setup - Update',
		);
	}

	public function testSetupUpdateUserTypeCase2() {
		$this->manageAdminSetup('basic', 'user-type');
		debug('testSetupUpdateUserTypeCase2 called');
		$this->updateSetupTestCase('st_case2', 'user-type');
	}
}




?>