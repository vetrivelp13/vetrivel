<?php

/**
 * Implementation of hook_init(). 
 */
function exp_sp_administration_contentauthor_init()
{

    //Load resources only when CA url hits
    if ( (substr($_SERVER['REQUEST_URI'], -strlen('administration/contentauthor/video')) == 'administration/contentauthor/video') ||
    	 (substr($_SERVER['REQUEST_URI'], -strlen('administration/contentauthor/presentation')) == 'administration/contentauthor/presentation')) 
    {
        global $theme_key;
        $js_module_optional = array(
            'type' => 'file',
            'group' => JS_DEFAULT
        );
        $css_theme_optional = array(
            'type' => 'file',
            'group' => CSS_THEME
        );
        drupal_add_js(drupal_get_path('module', 'exp_sp_administration_content') . '/exp_sp_administration_content.js', $js_module_optional);
        drupal_add_css(drupal_get_path('module', 'exp_sp_administration_contentauthor') . '/exp_sp_administration_contentauthor.css', array(
            'type' => 'file',
            'group' => CSS_THEME,
            'weight' => 1300
        ));
        drupal_add_js(drupal_get_path('module', 'exp_sp_administration_contentauthor') . '/exp_sp_administration_contentauthor.js', $js_module_optional);
        
        if ($theme_key == 'expertusoneV2') {
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration_content') . '/exp_sp_administration_content_v2.css', array(
                'type' => 'file',
                'group' => CSS_THEME,
                'weight' => 1300
            ));
            drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') . '/exp_sp_administration_data_grid.js', $js_module_optional);
        } else {
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration_content') . '/exp_sp_administration_content.css', $css_theme_optional);
        }
        
        drupal_add_js("apis/core/SCORM-API-WRAPPER-MOBILE.js");

        //drupal_add_js("/sites/all/libraries/h5plibraries/EmbeddedJS-1.0/js/ejs.js");
        drupal_add_js("/sites/all/libraries/h5plibraries/EmbeddedJS-1.0/js/ejs.js", array('preprocess' => FALSE));
        
        drupal_add_js("var H5PIntegration = {\"baseUrl\":\"https:\/\/h5p10.expertusone.com\",\"url\":\"\/sites\/default\/files\/\/contentupload\",\"postUserStatistics\":true,\"ajaxPath\":\"\/?q=h5p-ajax\/\",\"ajax\":{\"setFinished\":\"\/?q=h5p-ajax\/set-finished.json\",\"contentUserData\":\"\/?q=h5p-ajax\/content-user-data\/:contentId\/:dataType\/:subContentId\"},\"tokens\":{\"result\":\"d218b2484163c\",\"contentUserData\":\"7a45f978f4687\"},\"saveFreq\":\"10\",\"l10n\":{\"H5P\":{\"fullscreen\":\"Fullscreen\",\"disableFullscreen\":\"Disable fullscreen\",\"download\":\"Download\",\"copyrights\":\"Rights of use\",\"embed\":\"Embed\",\"size\":\"Size\",\"showAdvanced\":\"Show advanced\",\"hideAdvanced\":\"Hide advanced\",\"advancedHelp\":\"Include this script on your website if you want dynamic sizing of the embedded content:\",\"copyrightInformation\":\"Rights of use\",\"close\":\"Close\",\"title\":\"Title\",\"author\":\"Author\",\"year\":\"Year\",\"source\":\"Source\",\"license\":\"License\",\"thumbnail\":\"Thumbnail\",\"noCopyrights\":\"No copyright information available for this content.\",\"downloadDescription\":\"Download this content as a H5P file.\",\"copyrightsDescription\":\"View copyright information for this content.\",\"embedDescription\":\"View the embed code for this content.\",\"h5pDescription\":\"Visit H5P.org to check out more cool content.\",\"contentChanged\":\"This content has changed since you last used it.\",\"startingOver\":\"You'll be starting over.\",\"by\":\"by\",\"showMore\":\"Show more\",\"showLess\":\"Show less\",\"subLevel\":\"Sublevel\",\"confirmDialogHeader\":\"Confirm action\",\"confirmDialogBody\":\"Please confirm that you wish to proceed. This action is not reversible.\",\"cancelLabel\":\"Cancel\",\"confirmLabel\":\"Confirm\"}},\"user\":{\"name\":\"admin\",\"mail\":\"expertusone_fulldev@expertus.com\"}}", "inline");
        
        drupal_add_css("/sites/all/modules/core/exp_sp_core/modules/h5p/library/styles/h5p.css");
        drupal_add_css("/sites/all/modules/core/exp_sp_core/modules/h5p/library/styles/h5p-confirmation-dialog.css");
        drupal_add_css("/sites/all/modules/core/exp_sp_core/modules/h5p/library/styles/h5p-core-button.css");
        drupal_add_js("sites/all/modules/core/exp_sp_core/modules/h5p/library/js/jquery.js");
        drupal_add_js("sites/all/modules/core/exp_sp_core/modules/h5p/library/js/h5p.js");
        drupal_add_js("sites/all/modules/core/exp_sp_core/modules/h5p/library/js/h5p-event-dispatcher.js");
        drupal_add_js("sites/all/modules/core/exp_sp_core/modules/h5p/library/js/h5p-x-api-event.js");
        drupal_add_js("sites/all/modules/core/exp_sp_core/modules/h5p/library/js/h5p-x-api.js");
        drupal_add_js("sites/all/modules/core/exp_sp_core/modules/h5p/library/js/h5p-content-type.js");
        drupal_add_js("sites/all/modules/core/exp_sp_core/modules/h5p/library/js/h5p-confirmation-dialog.js");
        drupal_add_js("sites/all/modules/core/exp_sp_core/modules/h5p/modules/h5peditor/h5peditor/scripts/h5peditor-editor.js");
        drupal_add_js("sites/all/modules/core/exp_sp_core/modules/h5p/modules/h5peditor/scripts/application.js");
        drupal_add_js("sites/all/modules/core/exp_sp_core/modules/h5p/modules/h5peditor/h5peditor/language/en.js");
        
       if (substr($_SERVER['REQUEST_URI'], -strlen('administration/contentauthor/video')) == 'administration/contentauthor/video') {
            drupal_add_js("/h5pmerge/videofilesjson.json?v=12",array('preprocess' => FALSE));
        } else if (substr($_SERVER['REQUEST_URI'], -strlen('administration/contentauthor/presentation')) == 'administration/contentauthor/presentation') {
            drupal_add_js("/h5pmerge/courseprefilesjson.json",array('preprocess' => FALSE));
        }
        drupal_add_js("/sites/all/modules/core/exp_sp_core/modules/h5p/modules/h5peditor/h5peditor/scripts/interactions_metadata.json",array('preprocess' => FALSE));
    }
}

/**
 * Implementation of hook_menu().
 */
function exp_sp_administration_contentauthor_menu()
{
    try {
        $items = array();
        
        $items['administration/contentauthor/video'] = array(
            'title' => t('Video'),
            'page callback' => 'empty_value',
            'access callback' => 'user_access',
            'type' => MENU_CALLBACK,
            'weight' => 1,
            'access arguments' => array(
                'Video Admin Perm'
            )
        );
        
        $items['administration/contentauthor/video/search/all'] = array(
            'title' => 'Fetch Content List to display in JQGrid',
            'page callback' => 'sendContentAuthorListToJqGrid',
            'access callback' => 'user_access',
            'access arguments' => array(
                'Video Admin Perm'
            ),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        
        $items['administration/contentauthor/video/%ctools_js/addedit'] = array(
            'title' => 'Add/Edit Content',
            'page callback' => 'exp_sp_administration_contentauthor_display_addedit_form',
            'page arguments' => array(
                3
            ),
            'access callback' => 'user_access',
            'access arguments' => array(
                'Video Admin Perm'
            ),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        
        $items['ajax/administration/contentauthor/video/publish-and-unpublish/%'] = array(
            'title' => 'Publish Or Unpublish Content',
            'page callback' => 'publishOrUnpublishContentAuthor',
            'page arguments' => array(
                5
            ),
            'type' => MENU_CALLBACK,
            'access arguments' => array(
                'Video Admin Perm'
            ),
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        
        $items['ajax/administration/contentauthor/presentation/publish-and-unpublish/%'] = array(
            'title' => 'Publish Or Unpublish Content',
            'page callback' => 'publishOrUnpublishContentAuthor',
            'page arguments' => array(
                5
            ),
            'type' => MENU_CALLBACK,
            'access arguments' => array(
                'Presentation Admin Perm'
            ),
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        
        $items['ajax/administration/contentauthor/updateh5p'] = array(
            'title' => 'Update h5p',
            'page callback' => 'updateh5p',
            'type' => MENU_CALLBACK,
            'access arguments' => array(
                'Video Admin Perm'
            )
        );
        
        $items['ajax/administration/contentauthor/video/preview/%'] = array(
            'title' => 'Video Preview',
            'page callback' => 'previewContentAuthorVideoInQtipPopup',
            'page arguments' => array(
                5
            ),
            'access arguments' => array(
                'Video Admin Perm'
            ),
            'type' => MENU_CALLBACK
        );
        
        $items['administration/contentauthor/video/shareduser-autocomplete'] = array(
            'title' => 'SharedUser Autocomplete',
            'page callback' => 'getSharedUserAutoComplete',
            'access callback' => 'user_access',
            'access arguments' => array(
                'Video Admin Perm'
            ),
            'file' => 'exp_sp_administration_contentauthor.inc',
            'type' => MENU_CALLBACK
        );
        
        $items['administration/contentauthor/video/notshareduser-autocomplete'] = array(
            'title' => 'NotSharedUser Autocomplete',
            'page callback' => 'getNotSharedUserAutoComplete',
            'access callback' => 'user_access',
            'access arguments' => array(
                'Video Admin Perm'
            ),
            'file' => 'exp_sp_administration_contentauthor.inc',
            'type' => MENU_CALLBACK
        );
        
        $items['administration/contentauthor/video/textfilter-autocomplete'] = array(
            'title' => 'Search By Text Filter Autocomplete',
            'page callback' => 'getContentAuthorTextFilterAutoComplete',
            'access callback' => 'user_access',
            'access arguments' => array(
                'Video Admin Perm'
            ),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        
        $items['administration/contentauthor/video/view-content/%ctools_js/addedit/%']        = array(
            'title' => 'view content',
            'page callback' => 'exp_sp_administration_viewcontentauthor_addedit_form',
            'page arguments' => array(
                5,
                6
            ),
            'access callback' => 'user_access',
            'access arguments' => array(
                'Video Admin Perm'
            ),
            'file' => 'exp_sp_administration_contentauthor.inc',
            'type' => MENU_CALLBACK
        );
        $items['administration/contentauthor/presentation/view-content/%ctools_js/addedit/%'] = array(
            'title' => 'view content',
            'page callback' => 'exp_sp_administration_viewcontentauthor_addedit_form',
            'page arguments' => array(
                5,
                6
            ),
            'access callback' => 'user_access',
            'access arguments' => array(
                'Presentation Admin Perm'
            ),
            'file' => 'exp_sp_administration_contentauthor.inc',
            'type' => MENU_CALLBACK
        );
        
        
        $items['administration/contentauthor/presentation/textfilter-autocomplete'] = array(
            'title' => 'Search By Text Filter Autocomplete',
            'page callback' => 'getContentAuthorTextFilterAutoComplete',
            'access callback' => 'user_access',
            'access arguments' => array(
                'Presentation Admin Perm'
            ),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        
        $items['administration/contentauthor/video/export'] = array(
            'title' => 'Content Search Results CSV Export',
            'page callback' => 'fetchContentAuthorAll',
            'page arguments' => array(
                'CSV'
            ),
            'access callback' => 'user_access',
            'access arguments' => array(
                'Video Admin Perm'
            ),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        
        $items['administration/contentauthor/video/print'] = array(
            'title' => 'Content Search Results Print to PDF',
            'page callback' => 'fetchContentAuthorAll',
            'page arguments' => array(
                'PDF'
            ),
            'access callback' => 'user_access',
            'access arguments' => array(
                'Video Admin Perm'
            ),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        
        $items['administration/contentauthor/presentation/export'] = array(
            'title' => 'Content Search Results CSV Export',
            'page callback' => 'fetchContentAuthorPresentationAll',
            'page arguments' => array(
                'CSV'
            ),
            'access callback' => 'user_access',
            'access arguments' => array(
                'Presentation Admin Perm'
            ),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        
        $items['administration/contentauthor/presentation/print'] = array(
            'title' => 'Content Search Results Print to PDF',
            'page callback' => 'fetchContentAuthorPresentationAll',
            'page arguments' => array(
                'PDF'
            ),
            'access callback' => 'user_access',
            'access arguments' => array(
                'Presentation Admin Perm'
            ),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_contentauthor.inc'
        );

        $items['administration/contentauthor/presentation'] = array(
            'title' => t('LBL3018'),
            'page callback' => 'empty_value',
            'access callback' => 'user_access',
            'type' => MENU_CALLBACK,
            'weight' => 2,
            'access arguments' => array(
                'Presentation Admin Perm'
            )
        );
        
        $items['administration/contentauthor/presentation/search/all'] = array(
            'title' => 'Fetch Content List to display in JQGrid',
            'page callback' => 'sendContentAuthorListToJqGrid',
            'access callback' => 'user_access',
            'access arguments' => array(
                'Presentation Admin Perm'
            ),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        
        $items['administration/contentauthor/presentation/%ctools_js/addedit'] = array(
            'title' => 'Add/Edit Content',
            'page callback' => 'exp_sp_administration_contentauthor_presentation_display_addedit_form',
            'page arguments' => array(
                3
            ),
            'access callback' => 'user_access',
            'access arguments' => array(
                'Presentation Admin Perm'
            ),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        
        $items['ajax/administration/contentauthor/presentation/saveOrUpdatePresentationH5P'] = array(
            'title' => 'Update h5p',
            'page callback' => 'saveOrUpdatePresentationH5P',
            'type' => MENU_CALLBACK,
            'access arguments' => array(
                'Presentation Admin Perm'
            )
        );

 	$items['ajax/administration/contentauthor/presentation/presentationCleanup'] = array(
            'title' => 'delete h5p',
            'page callback' => 'presentationCleanup',
            'type' => MENU_CALLBACK,
            'access arguments' => array(
                'Presentation Admin Perm'
            )
        );
        
        $items['administration/contentauthor/content-share/%/%/%'] = array(
            'title' => 'Content Share',
            'page callback' => 'content_share_display',
            'page arguments' => array(
                2,
                3,
                4
            ),
            'access callback' => 'user_access',
            'access arguments' => array(
                'Video Admin Perm'
            ),
            'type' => MENU_CALLBACK,
            'file' => 'exp_sp_administration_contentauthor.inc'
        );
        return $items;
    }
    catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_content_menu', $ex);
        expertusErrorThrow($ex);
    }
}

function presentationCleanup()
{
	try
	{
	$h5pId        = $_REQUEST["h5p_id"];
	$select = db_select('slt_content_master_h5p_rel', 'rel');
	$select->addField('rel', 'content_master_id', 'content_master_id');
	$select->condition('rel.h5p_id', $h5pId, '=');
	$result = $select->execute()->fetchAll();
	
	$mappedId = $result[0]->content_master_id;
	if($mappedId  == "" || $mappedId == null) //delete h5p node record
	{
		$deleteStmt = db_delete('h5p_nodes');
		$deleteStmt->condition('content_id', $h5pId);
		$deleteStmt->execute();
		echo "cleaned";
	}
	}catch (Exception $ex) {
		watchdog_exception('presentationCleanup', $ex);
		expertusErrorThrow($ex);
		echo "not cleaned";
	}
}

function saveOrUpdatePresentationH5P()
{
    $txn = db_transaction();
	try 
	{
    $action = $_REQUEST["action"];
    if ($action == "saveorupdate") {
    	expDebug::dPrint("presentation saveorupdate" . print_r($_REQUEST, true), 4);
        $json_content = $_REQUEST["json_content"];
        $title        = $_REQUEST["title"];
        $description  = $_REQUEST["description"];
        $h5pId        = core_decrypt($_REQUEST["h5p_id"]);
        $id           = $_REQUEST["id"];
        $pre_status   = $_REQUEST["pre_status"];
        $updateUserId = getSltpersonUserId();
        
        $defaultQryStr     = 'SELECT json_content from h5p_nodes where content_id = :cid';
        $defaultQryStrArgs = array(
        		':cid' => $h5pId
        );
        $defaultQry        = db_query($defaultQryStr, $defaultQryStrArgs);
        expDebug::dPrintDBAPI('$defaultQry222222', $defaultQry, $defaultQryStrArgs);
        $default = $defaultQry->fetchAll();
   
        if ($id == "undefined" || $id == null)
            $id = "";
        
        $json_content = str_replace("/n", "", $json_content);
        $updateStmt   = db_update('h5p_nodes');
        
        $fields = array(
            'json_content' => $json_content,
            'filtered' => ''
        );
        $updateStmt->fields($fields);
        
        $updateStmt->condition('content_id', $h5pId);
        $numUpdated = $updateStmt->execute();
        
        include_once(drupal_get_path('module', 'exp_sp_administration_module_info') . '/exp_sp_administration_module_info.inc');
        
        /* Start of CDN upload - for Presentation Knowledge Content */
         $jsonData		= json_decode($json_content,true);
         try {
         //	include_once(drupal_get_path('module', 'exp_sp_administration_module_info') . '/exp_sp_administration_module_info.inc');
         //	include_once($_SERVER["DOCUMENT_ROOT"] . '/sites/all/modules/core/exp_sp_learning/exp_sp_learning.inc');
         	$stream_server_status = getDrupalModuleStatus(array(
         			'exp_sp_stream_server'
         	));
         	
         	
         	
         	 $cdn_status = getDrupalModuleStatus(array(
         			'cloud_files'
         	)); 
         	expDebug::dPrint('CDN - Cloud Files Modules is enabled 232323 = ' . $cdn_status . '---->' . print_r($cdn_status, true), 4);
         	if ($cdn_status == 1)
         	{ 
         		include_once($_SERVER["DOCUMENT_ROOT"] . '/sites/all/modules/core/exp_sp_learning/exp_sp_learning.inc');
         		 
               presentation_cdn_videoStream($h5pId,$jsonData,'CDN');  // Function for Video streaming and CDN for presentation.
         		
      
        	}
         
         }
         catch (Exception $ex) {
         	watchdog_exception('getUploadContentData : CDN upload', $ex);
         	expDebug::dPrint(' getUploadContentData : CDN upload Exception->' . print_r($ex, true), 1);
         	add_audit_trail_entry(getIdOfLoggedInUser(), '0', 'cre_sys_obt_cnt', 'exp_sp_administration_content', 'getUploadContentData', 'Content Uploaded Failed In CDN');
         }
         
         /* End of CDN upload - for Presentation Knowledge Content */

         
         /*video streaming support -start here */
         	
         	presentation_cdn_videoStream($h5pId,$jsonData,'video stream'); // Function for Video streaming and CDN for presentation. 
     
         /*video streaming support -end here */
      
           
         
        
		make_audit_trail_entries($fields, $updateUserId, $default, $id , 'Edited Interactions', 'cre_sys_obt_cnt', 'exp_sp_administration_contentauthor', 'saveOrUpdatePresentationH5P', array(
                'json_content'
            ));
        
        
        if ($id != "" && $id != "0") {
            addEditContentAuthorPreValidate("Edit", $title, $id); // To cross check if Title already exists
            
			$defaultQryStr     = 'SELECT code,status,description from slt_content_master where id = :cid';
        	$defaultQryStrArgs = array(
            	':cid' => $id
        	);
        	$defaultQry        = db_query($defaultQryStr, $defaultQryStrArgs);
        	expDebug::dPrintDBAPI('$defaultQry', $defaultQry, $defaultQryStrArgs);
        	$default = $defaultQry->fetchAll();
        
            
            $fields  = array();
            $updateStmt = db_update('slt_content_master');
            if ($pre_status != '') {
                if ($pre_status == 'unpublished_pre') {
                    $status = 'lrn_cnt_sts_atv';
                    
                } else if ($pre_status == 'published_pre') {
                    $status = 'lrn_cnt_sts_itv';
                    
                }
                $fields     = array(
                    'code' => $title,
                    'status' => $status,
                    'description' => $description,
                    'updated_by'=>$updateUserId,
                    'updated_on'=>now(),
                );
            } else {
                $fields     = array(
                    'code' => $title,
                    'description' => $description,
					'updated_by'=>$updateUserId,
                    'updated_on'=>now(),
                    
                );
            }
			$updateStmt->fields($fields);
			$updateStmt->condition('id', $id);
			$numUpdated = $updateStmt->execute();
			
			make_audit_trail_entries($fields, $updateUserId, $default, $id, 'Updated', 'cre_sys_obt_cnt', 'exp_sp_administration_contentauthor', 'saveOrUpdatePresentationH5P', array(
					'code'
			));
            
            $updateStmt = db_update('slt_content_version');
            $fields     = array(
                'title' => $title,
				'updated_by'=>$updateUserId,
				'updated_on'=>now(),
            );
            $updateStmt->fields($fields);
            $updateStmt->condition('content_master_id', $id);
            $numUpdated = $updateStmt->execute();
            
            $select = db_select('slt_content_version', 'mast');
            $select->addField('mast', 'id', 'id');
            $select->condition('mast.content_master_id', $id, '=');
            $result = $select->execute()->fetchAll();
            $content_version_id = $result[0]->id;
            
            $sql = "select nid from h5p_nodes where content_id=" . $h5pId;
            $launchid = 0;
            foreach (db_query($sql) as $result) {
                $launchid = $result->nid;
            }
            $launchurl = "?q=h5p/embed/" . $launchid;
            
            
            $updateStmt = db_update('slt_content_lesson');
            $fields     = array(
                'title' => $title,
                'launchurl' => $launchurl,
				'updated_by'=>$updateUserId,
				'updated_on'=>now(),
            );
            $updateStmt->fields($fields);
            $updateStmt->condition('content_version_id', $content_version_id);
            $numUpdated = $updateStmt->execute();

          //  $resultMsg = t('LBL3211', array('@status'=>'updated'));
          //  echo "{\"status\":\"".t("LBL3018").t(" ").$resultMsg."\",\"id\":" . $id . "}"; 
            echo "{\"status\":\"".t("LBL272").t(" ").t("MSG601")."\",\"id\":" . $id . "}";            
        } else {
			$createUserId = getSltpersonUserId();
        
            if ($pre_status == 'unpublished_pre') {
                $status = 'lrn_cnt_sts_atv';
            } else {
                $status = 'lrn_cnt_sts_itv';
            }
            $sql = "select nid from h5p_nodes where content_id=" . $h5pId;
            
            $launchid = 0;
            foreach (db_query($sql) as $result) {
                $launchid = $result->nid;
            }
            $launchurl = "?q=h5p/embed/" . $launchid;
            
            
            //FOR APPENDING THE ID TO REDUNDANT TITLE FOR CONTENT
            
            $title = addEditContentAuthorPreValidate("Add", $title);            
            $scm = db_insert('slt_content_master');
            $fields = array(
                'active' => 'Y',
                'code' => $title,
                'description' => $description,
                'type' => 'lrn_cnt_typ_knc',
                'lang_code' => 'cre_sys_lng_eng',
                'status' => $status,
                'entity_type' => 'cre_sys_obt_cnt',
                'subtype' => 'h5p-presentatn',
                'created_by' => $createUserId,
                'created_on' => now(),
                'updated_by' => $createUserId,
                'updated_on' => now()
            );
            $scm->fields($fields);
            $scmId = $scm->execute();
            make_audit_trail_entries($fields, $createUserId , null ,$scmId, 'Inserted','cre_sys_obt_cnt','exp_sp_administration_contentauthor','saveOrUpdatePresentationH5P',
            		array('code'));   
            $scv    = db_insert('slt_content_version');
            $fields = array(
                'content_master_id' => $scmId,
                'content_sub_type' => 'lrn_cnt_typ_knc',
                'title' => $title,
                'hosted_type' => '1',
                'total_lesson' => '1',
                'version' => '1',
                'overall_mastery_score' => '0',
                'status' => 'lrn_cnt_sts_atv',
                'created_by' => $createUserId,
                'created_on' => now(),
                'updated_by' => $createUserId,
                'updated_on' => now()
            );
            $scv->fields($fields);
            $scvId = $scv->execute();
            
            $scl    = db_insert('slt_content_lesson');
            $fields = array(
                'content_version_id' => $scvId,
                'title' => $title,
                'datafromlms' => '',
                'launchurl' => $launchurl,
                'masteryscore' => '0',
                'created_by' => $createUserId,
                'created_on' => now(),
                'updated_by' => $createUserId,
                'updated_on' => now()
            );
            $scl->fields($fields);
            $sclId = $scl->execute();
            
            
            if ($sclId) {
            	//Add entry to the relation table
                $h5prel    = db_insert('slt_content_master_h5p_rel');
            	$fields = array(
                	'h5p_id' => $h5pId,
	                'content_master_id' => $scmId,
    	            'created_by' => $createUserId,
        	        'created_on' => now(),
            	    'updated_on' => now(),
                	'updated_by' => $createUserId
	            );
    	        $h5prel->fields($fields);
        	    $h5prelId = $h5prel->execute();
            
                //db_query("insert into slt_content_master_h5p_rel(h5p_id,content_master_id,created_by,created_on,updated_on,updated_by)values($h5pId,$scmId,$createUserId,now(),now(),$createUserId)");
                
                include_once $_SERVER["DOCUMENT_ROOT"] . '/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_contentauthor/exp_sp_administration_contentauthor.inc';
				$loggedInUserId = getIdOfLoggedInUser();
                addNewShareContent($form, $form_state, $scmId, '', $loggedInUserId);
             //   $resultMsg = t('LBL3211', array('@status'=>'saved'));
              //  echo "{\"status\":\"".t("LBL3018").t(" ").$resultMsg."\",\"id\":" . $scmId . "}";
                echo "{\"status\":\"".t("LBL272").t(" ").t("MSG600")."\",\"id\":" . $scmId . "}";
            } else
                echo "{\"status\":\"".t("ERR057")."\",\"id\":\"\"}";
        }
        
    }
    }catch (Exception $ex) {
        $txn->rollback();
        watchdog_exception('saveOrUpdatePresentationH5P', $ex);
        throw $ex;
    }
    
    // Commit the transaction
    
    unset($txn);
}
function exp_sp_administration_contentauthor()
{
    try {
        return array(
            'Video Admin Perm' => array(
                'title' => t('Video Admin Perm')
            ),
            'Presentation Admin Perm' => array(
                'title' => t('Presentation Admin Perm')
            ),
        );
    }
    catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_contentauthor', $ex);
        expertusErrorThrow($ex);
    }
}

/*
 * exp_sp_administration_content_display_addedit_form() -Form implementation for content
 */
function exp_sp_administration_contentauthor_display_addedit_form($js = NULL, $contentId = '')
{
    try {
        $newRecord = false;
        if ($contentId == "upload" || $contentId == "embed") {
            $_SESSION["uploadtype"] = "new";
            $contentId              = "";
            $newRecord              = true;
        } else {
            $_SESSION["uploadtype"] = "";
        }
        include_once(drupal_get_path('module', 'exp_sp_administration_content') . '/exp_sp_administration_content.inc');
        $css_theme_optional = array(
            'type' => 'file',
            'group' => CSS_THEME
        );
        global $theme_key;
        if ($theme_key == 'expertusoneV2') {
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration_content') . '/exp_sp_administration_content_v2.css', $css_theme_optional);
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration') . '/exp_sp_administration_v2.css', $css_theme_optional);
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') . '/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
        } else {
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration_content') . '/exp_sp_administration_content.css', $css_theme_optional);
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration') . '/exp_sp_administration.css', $css_theme_optional);
        }
        $js_module_optional = array(
            'type' => 'file',
            'group' => JS_DEFAULT
        );
        drupal_add_js(drupal_get_path('module', 'exp_sp_administration_content') . '/exp_sp_administration_content.js', $js_module_optional);
        drupal_add_js(drupal_get_path('module', 'exp_sp_administration') . '/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
        
        // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
        $sample_style = array(
            'ctools-admin-content-addedit-style' => array(
                'modalSize' => array(
                    'width' => 850,
                    'minHeight' => 262
                )
            )
        );
        drupal_add_js($sample_style, 'setting');
        if ($js) {
            // Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
            $argsList = array();
            
            $contentTitle = '';
            if (!empty($contentId)) {
                $argsList[]   = $contentId;
                $contentTitle = 'Content';
            }
            
            // Prepare list of forms to be displayed in the modal
            $formIdList = array(
                array(
                    'id' => 'exp_sp_administration_contentauthor_addedit_form',
                    'title' => (t('Video'))
                )
            );
            exp_ctools_modal_multi_ajaxonly_forms_display_ca($formIdList, $argsList, null, null, $newRecord);
        } else {
            throw new Exception('exp_sp_administration_catalog.module: exp_sp_administration_courseclass_addedit_form() : nojs');
        }
    }
    catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_content_display_addedit_form', $ex);
        expertusErrorThrow($ex);
    }
}


/*
 * exp_sp_administration_content_display_addedit_form() -Form implementation for content
 */
function exp_sp_administration_contentauthor_presentation_display_addedit_form($js = NULL, $contentId = '')
{
    try {
        include_once(drupal_get_path('module', 'exp_sp_administration_content') . '/exp_sp_administration_content.inc');
        $css_theme_optional = array(
            'type' => 'file',
            'group' => CSS_THEME
        );
        global $theme_key;
        if ($theme_key == 'expertusoneV2') {
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration_content') . '/exp_sp_administration_content_v2.css', $css_theme_optional);
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration') . '/exp_sp_administration_v2.css', $css_theme_optional);
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') . '/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
        } else {
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration_content') . '/exp_sp_administration_content.css', $css_theme_optional);
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration') . '/exp_sp_administration.css', $css_theme_optional);
        }
        $js_module_optional = array(
            'type' => 'file',
            'group' => JS_DEFAULT
        );
        drupal_add_js(drupal_get_path('module', 'exp_sp_administration_content') . '/exp_sp_administration_content.js', $js_module_optional);
        drupal_add_js(drupal_get_path('module', 'exp_sp_administration') . '/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
        
        // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
        $sample_style = array(
            'ctools-admin-content-addedit-style' => array(
                'modalSize' => array(
                    'width' => 860,
                    'minHeight' => 490
                )
            )
        );
        drupal_add_js($sample_style, 'setting');
        if ($js) {
            // Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
            $argsList = array();
            
            $contentTitle = '';
            if (!empty($contentId)) {
                $argsList[]   = $contentId;
                $contentTitle = 'Content';
            }
            
            // Prepare list of forms to be displayed in the modal
            $formIdList = array(
                array(
                    'id' => 'exp_sp_administration_contentauthor_presentation_addedit_form',
                    'title' => (t('LBL3018'))
                )
            );
            exp_ctools_modal_multi_ajaxonly_forms_display_ca_presentation($formIdList, $argsList, null, null);
        } else {
            throw new Exception('exp_sp_administration_catalog.module: exp_sp_administration_courseclass_addedit_form() : nojs');
        }
    }
    catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_content_display_addedit_form', $ex);
        expertusErrorThrow($ex);
    }
}




/*
 * exp_ctools_modal_multi_ajaxonly_forms_display -
 */
function exp_ctools_modal_multi_ajaxonly_forms_display_ca_presentation($formInfoList = array(), $argsList = array(), $otherArgsList = array(), $commands = array())
{
    try {
        if (empty($formInfoList)) {
            throw new Exception('exp_sp_administration.inc : exp_ctools_modal_multi_ajax_forms_display() : $formIdList is empty.');
        }
        ctools_include('modal');
        ctools_include('ajax');
        
        // Prepare title for the modal dialog
        $title = empty($formInfoList[0]['title']) ? drupal_get_title() : $formInfoList[0]['title'];
        
        $renderMode = 'EDIT';
        if (empty($argsList)) {
            $renderMode = 'ADD';
        }
        
        $output = exp_ctools_modal_multi_ajaxonly_forms_render($formInfoList, $argsList, $renderMode, $otherArgsList);
        
        //$commands = array();
        // If the form has not yet been rendered, render it.
        $commands[] = ctools_modal_command_display($title, $output);
        $commands[] = exp_destroy_ckeditors_on_modal_close();
        $commands[] = ajax_command_invoke(NULL, "initializePresentationObjects");
        
        $commands[] = ajax_command_refresh_narrow_search_results('onclose');
        
        $commands[0]['output'] = mb_convert_encoding($commands[0]['output'], "HTML-ENTITIES", "UTF-8");
        expDebug::dPrint(' $commands = ' . print_r($commands, true), 4);
        
        print ajax_render($commands);
        exit;
    }
    catch (Exception $ex) {
        watchdog_exception('exp_ctools_modal_multi_ajaxonly_forms_display', $ex);
        expertusErrorThrow($ex);
    }
}

/*
 * exp_ctools_modal_multi_ajaxonly_forms_display -
 */
function exp_ctools_modal_multi_ajaxonly_forms_display_ca($formInfoList = array(), $argsList = array(), $otherArgsList = array(), $commands = array(), $newRecord)
{
    try {
        if (empty($formInfoList)) {
            throw new Exception('exp_sp_administration.inc : exp_ctools_modal_multi_ajax_forms_display() : $formIdList is empty.');
        }
        ctools_include('modal');
        ctools_include('ajax');
        
        // Prepare title for the modal dialog
        $title = empty($formInfoList[0]['title']) ? drupal_get_title() : $formInfoList[0]['title'];
        
        $renderMode = 'EDIT';
        if (empty($argsList)) {
            $renderMode = 'ADD';
        }
        
        $output = exp_ctools_modal_multi_ajaxonly_forms_render($formInfoList, $argsList, $renderMode, $otherArgsList);
        
        //$commands = array();
        // If the form has not yet been rendered, render it.
        $commands[] = ctools_modal_command_display($title, $output);
        $commands[] = exp_destroy_ckeditors_on_modal_close();
        $commands[] = exp_destroy_ckeditors_on_modal_close();
        if (!$newRecord)
            $commands[] = ajax_command_invoke(NULL, "hideUploadVideoControlAndDisplayLabel");
        $commands[] = ajax_command_invoke(NULL, "putCustomLabelForContentAuthor");
        
        $commands[0]['output'] = mb_convert_encoding($commands[0]['output'], "HTML-ENTITIES", "UTF-8");
        expDebug::dPrint(' $commands = ' . print_r($commands, true), 4);
        
        print ajax_render($commands);
        exit;
    }
    catch (Exception $ex) {
        watchdog_exception('exp_ctools_modal_multi_ajaxonly_forms_display', $ex);
        expertusErrorThrow($ex);
    }
}

function exp_sp_administration_contentauthor_presentation_addedit_form($form, &$form_state, $renderMode, $contentId)
{
    try {
        expDebug::dPrint("presentation contentid:" . $contentId ,4);
        expDebug::dPrint("presentation renderMode:" . $renderMode ,4);
        
        if (empty($contentId))
            $contentId = $form_state['build_info']['args'][4];
        expDebug::dPrint("presentation new contentid:" . $contentId ,4);
        
        //include_once $_SERVER["DOCUMENT_ROOT"] . "/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_learning/exp_sp_administration_catalog/exp_sp_administration_catalog_course.inc";
        if (empty($form_state['values'])) {
            $currentUserId = getIdOfLoggedInUser();
        }
        $showCancelSave  = 1;
        // To set the display mode as view
        $readOnlyForView = false;
        if (in_array('view', $form_state['build_info']['args'])) {
            $form_state['storage']['step']         = 'view';
            $form_state['storage']['display_mode'] = 'view';
            $readOnlyForView                       = true;
        }
        
        if (empty($form_state['storage'])) {
            if (!empty($contentId) && empty($form_state['storage'])) {
                $form_state['storage']['step'] = 'view';
            } elseif (empty($contentId) && empty($form_state['storage'])) {
                $form_state['storage']['step'] = 'add';
            }
        }
        
        $form = newAddEditFormWithCancelAndSave('contentauthor-presentation-addedit-form');
        unset($form_state['content_storage']);
        unset($form_state['values']['content_data_url']);
        unset($form_state['input']['content_data_url']);
        expDebug::dPrint(' $buildinfo = ' . print_r($form_state['build_info']['args'], true), 5);
        
        addHiddenValueToAddEditForm($form, 'id', $contentId);
        addHiddenFieldToAddEditForm($form, 'empty_id', $emptyId);
        addHiddenFieldToAddEditForm($form, 'entity_value', 'cre_sys_obt_cnt');
        
        $emptyId     = '';
        $entityId    = 0;
        $jsonContent = "";
        $h5pmapping  = array();
        if (empty($contentId)) {  
        	expDebug::dPrint("presentation empty contentid:" . $contentId ,4);
            $entityId           = $form_state['values']['id'];
            $emptyId            = empty($form_state['values']['empty_id']) ? microtime(false) : $form_state['values']['empty_id'];
            $h5pObj             = createH5PRecordPresentation("");
            $ob                 = new stdClass();
            $ob->h5p_content_id = $h5pObj->h5pId; //content_id
            $jsonContent        = $h5pObj->jsonData;
            $sql                = "select nid from h5p_nodes where content_id=" . $h5pObj->h5pId;
            
            $launchid = 0;
            foreach (db_query($sql) as $result) {
                $launchid = $result->nid;
            }
            $ob->h5p_id    = $launchid; //h5pId
            $h5pmapping[0] = $ob;
            
        } else {
            $entityId = $contentId;
            expDebug::dPrint("presentation new contentid else:" . $entityId ,4);
            $h5pmapping        = getH5PContentId($contentId);
            $contentDetailsArr = getContentAuthorDetails($contentId);
            $jsonContent       = $h5pmapping[0]->json_content;
            
            
            $jsonData = json_decode($h5pmapping[0]->json_content, true);
            expDebug::dPrint("presentation Showsoln status check" . print_r($jsonData, true), 4);
            
            $showSolution = $jsonData["override"]["overrideShowSolutionButton"];
            $retry        = $jsonData["override"]["overrideRetry"];
            $passScore    = $jsonData["presentation"]["passingscore"];
                
            $showSolEnabled = "";
            $retryEnabled   = "";
            
            if ($retry == "1") {
                $retryClsName = "retryChecked";
                $retryEnabled = "checked";
            } else {
                $retryClsName = "retryUnChecked";
                $retryEnabled = "";
            }
            if ($showSolution == "1") {
                $showSolClsName = "ShowSolnChecked";
                
                $showSolEnabled = "checked";
            } else {
                $showSolClsName = "ShowSolnUnChecked";
                
                $showSolEnabled = "";
            }
            
            
        }
        
        //for new records retryclsname & showSolClsName will be empty
        if ($retryClsName == "")
            $retryClsName = "retryUnChecked";
        
        if ($showSolClsName == "")
            $showSolClsName = "ShowSolnUnChecked";
        
        
        $form['mapped_course_id'] = array(
            '#type' => 'hidden',
            '#name' => 'mapped_course_id',
            '#value' => $entityId
        );
        
        $entityType = 'cre_sys_obt_cnt';
        $uniqueId   = $entityId . '-' . $entityType;
        
        addHiddenFieldToAddEditForm($form, 'empty_id', $emptyId);
        addHiddenFieldToAddEditForm($form, 'entity_value', $entityType);
        
        addHiddenFieldToAddEditForm($form, 'h5pId', core_encrypt($h5pmapping[0]->h5p_content_id)); 
        addHiddenFieldToAddEditForm($form, 'h5pEditorId', $h5pmapping[0]->h5p_content_id);
        
        
       // addHiddenFieldToAddEditForm($form, 'h5pId', $h5pmapping[0]->h5p_content_id);
        addHiddenFieldToAddEditForm($form, 'json_content', $jsonContent);
        addHiddenFieldToAddEditForm($form, 'library', "H5P.CoursePresentation 1.9");
        
        
        addTextFieldToAddEditForm($form, 'title', t('LBL083'), $contentDetailsArr[0]->title, 1, true, false, 100);
        //Mahes
        addTextFormatFieldToAddEditForm($form, 'short_description', t('LBL229'), $contentDetailsArr[0]->short_description, 'full_html', 2, true, false, 5000);
     
        addHiddenFieldToAddEditForm($form, 'entityId', $entityId);

        $showSolnHelpText     = t("MSG806");
        $retryHelpText        = t("MSG805");
        $presentationHelpText = t("MSG871");
        $ifrm                 = "";
        $ifrm .= '<div class="pre-passing-retry-soln">';
      
     
        $ifrm .= '<div class="retry_presentation allow-retry" ><div class="addnewtitle_field_show_retry ">' . t('LBL3025') . ':<img src="/sites/all/themes/core/expertusoneV2/expertusone-internals/images/help-info.png" class="vtip info-enr-upload"  title="' . $retryHelpText . '" ></div> <div class="cls-pre-passing-retry-right ' . $retryClsName . '"><input type="checkbox" name="retry" ' . $retryEnabled . ' id="retry"></input></div></div>';

       // $ifrm .= '<div class="solution_presentation">';
        $ifrm .= '<div class="solution_presentation show-solution" ><div class="addnewtitle_field_show_retry ">' . t('LBL3024') . ':<img src="/sites/all/themes/core/expertusoneV2/expertusone-internals/images/help-info.png" class="vtip info-enr-upload"  title="' . $showSolnHelpText . '" ></div><div class="cls-pre-passing-retry-right ' . $showSolClsName . '"><input type="checkbox" ' . $showSolEnabled . ' name="show_solution"  id="show_solution"></input></div></div>';
       // $ifrm .= '</div>';
        $ifrm .= '<div class="score_presentation"><div class="cls-pres-passing-score-lbl addedit-new-field-title">' . t('LBL3045') . ':<span class="addedit-mandatory">*</span></div><div class="addedit-firstcol-field-value"><div class="form-item form-type-textfield form-item-passingscore">';
        $ifrm .= '<label class="element-invisible" for="edit-passingscore">Passing score </label>';
        $ifrm .= '<div class="cls-pre-passing-retry-right"><input autocomplete="off" class="addedit-edit-passingscore addedit-edit-textfield form-text" tabindex="3" type="text" id="edit-passingscore" name="passingscore" value="' . $passScore . '" size="5" maxlength="3"></div>';
        $ifrm .= '</div>';
        $ifrm .= '</div></div>';
        $ifrm .= '</div>';
        
        //For Ticket #0074029
        $ifrm .= "<div class='addedit-new-field-title presentation-row'>" . t('LBL3018') . ": <img src='/sites/all/themes/core/expertusoneV2/expertusone-internals/images/help-info.png' class='vtip info-enr-upload' title='" . $presentationHelpText . "' ></div>";
        
        $ifrm .= "<div style='overflow:hidden;'  class='h5p-editor' id='h5p_presentation_frame' frameborder=0 width=700 height = 480  scmid='" . $entityId . "'></div>";
        
        
        $form['content_author_disp'] = array(
            '#type' => 'markup',
            '#prefix' => '<div id="contentauthor-addedit-form-disp">' . $ifrm . '</div>'
        );
              
        addEditFormWithContentAuthorPresentationCancelAndSaveClose($form, 'contentauthor-presentation-addedit-form', 'contentauthor-basic-save', 'contentauthor-basic-cancel', $contentId, $emptyId);
        
        //TO GET H5P RESOURCES
        $node   = h5peditor_get_source_node($form['#node']);
        $assets = h5p_add_core_assets();
        h5p_add_files_and_settings(TRUE, TRUE); // Force integration
        
        $content_validator = _h5p_get_instance('contentvalidator');
        
        $h5peditor_module_path = drupal_get_path('module', 'h5peditor');
        $cache_buster          = '?' . variable_get('css_js_query_string', '');
        $file_path             = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
        
        // Add our own styles
        foreach (H5peditor::$styles as $style) {
            $assets['css'][] = base_path() . $h5peditor_module_path . '/h5peditor/' . $style . $cache_buster;
        }
        
        // Add our own scripts
        foreach (H5peditor::$scripts as $script) {
            // We do not want the creator of the iframe inside the iframe
            if ($script !== 'scripts/h5peditor-editor.js') {
                $assets['js'][] = base_path() . $h5peditor_module_path . '/h5peditor/' . $script . $cache_buster;
            }
        }
        
        $settings = array(
            'h5peditor' => array(
                'filesPath' => base_path() . $file_path . '/h5peditor',
                'fileIcon' => array(
                    'path' => base_path() . $h5peditor_module_path . '/h5peditor/images/binary-file.png',
                    'width' => 50,
                    'height' => 50
                ),
                'ajaxPath' => url('h5peditor/' . H5PCore::createToken('editorajax') . '/' . (isset($h5pmapping[0]->h5p_id) ? $h5pmapping[0]->h5p_id : 0) . '/'),
                'modulePath' => $h5peditor_module_path,
                'libraryPath' => _h5p_get_h5p_path() . '/libraries/',
                'copyrightSemantics' => $content_validator->getCopyrightSemantics(),
                'assets' => $assets,
                'contentRelUrl' => '../contentupload/',
                'editorRelUrl' => '../../../h5peditor'
                
            )
        );
        
        addHiddenFieldToAddEditForm($form, 'h5ptoken', H5PCore::createToken('editorajax'));
        addHiddenFieldToAddEditForm($form, 'h5peditorsettings', json_encode($settings));
        
        
        
        if ($showCancelSave && $form_state['storage']['display_mode'] != 'view') {
            $form['content_author_wrapper_end'] = array(
                '#type' => 'markup',
                '#suffix' => '</div>'
            );
        } else {
            $form['content_author_wrapper_end'] = array(
                '#type' => 'markup',
                '#suffix' => '<div class="clearBoth"></div><div class="admin-class-course-separater"></div></div>'
            );
        }
        
        return $form;
        
    }
    catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_catalog_course_addedit_form', $ex);
        expertusErrorThrow($ex);
    }
}

/**
 * exp_sp_administration_user_basic_addedit_form() - Build the addedit form.
 */
function exp_sp_administration_contentauthor_addedit_form($form, &$form_state, $renderMode, $contentId)
{
    try {
        expDebug::dPrint("form_state contentid:" . $contentId ,4);
        expDebug::dPrint("form_state uploadtype:" . $_SESSION["uploadtype"] ,4);
        
        if (empty($form_state['values'])) {
            $currentUserId = getIdOfLoggedInUser();

        }
        $showCancelSave  = 1;
        // To set the display mode as view
        $readOnlyForView = false;
        if (in_array('view', $form_state['build_info']['args'])) {
            $form_state['storage']['step']         = 'view';
            $form_state['storage']['display_mode'] = 'view';
            $readOnlyForView                       = true;
        }
        
        if (empty($form_state['storage'])) {
            if (!empty($contentId) && empty($form_state['storage'])) {
                $form_state['storage']['step'] = 'view';
            } elseif (empty($contentId) && empty($form_state['storage'])) {
                $form_state['storage']['step'] = 'add';
            }
        }
        
        $form = newAddEditFormWithCancelAndSave('contentauthor-addedit-form');
        unset($form_state['content_storage']);
        unset($form_state['values']['content_data_url']);
        unset($form_state['input']['content_data_url']);
        expDebug::dPrint(' $buildinfo = ' . print_r($form_state['build_info']['args'], true), 5);
        
        addHiddenValueToAddEditForm($form, 'id', $contentId);
        addHiddenFieldToAddEditForm($form, 'empty_id', $emptyId);
        addHiddenFieldToAddEditForm($form, 'entity_value', 'cre_sys_obt_cnt');
        
        $emptyId  = '';
        $entityId = 0;
        if (empty($contentId)) {
            $entityId = $form_state['values']['id'];
            $emptyId  = empty($form_state['values']['empty_id']) ? microtime(false) : $form_state['values']['empty_id'];
        } else {
            $entityId = $contentId;
        }
        $form['mapped_course_id'] = array(
            '#type' => 'hidden',
            '#name' => 'mapped_course_id',
            '#value' => $entityId
        );
        
        $entityType = 'cre_sys_obt_cnt';
        $uniqueId   = $entityId . '-' . $entityType;
        
        addHiddenFieldToAddEditForm($form, 'empty_id', $emptyId);
        addHiddenFieldToAddEditForm($form, 'entity_value', $entityType);
        $form['content_author_disp'] = array(
            '#type' => 'markup',
            '#prefix' => '<div id="contentauthor-addedit-form-disp">'
        );
        
        $fieldList = array(
            'id',
            'title',
            'code',
            'language',
            'language_name',
            'status_name',
            'short_description',
            'type',
            'status',
            'video',
            'show_solution',
            'retry',
            'hostedtype'
        );
        
        $defaultValue = getDefaultContentAuthorVideoFormFieldValue($fieldList, $form_state, $contentId);
        list_ca_forms($form, $form_state, $defaultValue);
       /*  $form['content_author_wrapper'] = array(
            '#type' => 'markup',
            '#prefix' => '<div class="addedit-form-main-container">
      					 <div class="round-corner-left"><div class="round-corner-right"><div class="round-corner-middle"></div></div></div>
      					<div class="contentauthor-addedit-form-container" id="contentauthor-addedit-form-container">'
        ); */
        $form['content_author_wrapper'] = array(
        		'#type' => 'markup',
        		'#prefix' => '<div class="addedit-form-main-container">
        		<div class="contentauthor-addedit-form-container" id="contentauthor-addedit-form-container">'
        );
        expDebug::dPrint("steps:tt:" . $form_state['storage']['step'] . "===t:" . $form_state['storage']['substep'] ,4);
        
        
        if ($defaultValue["hostedtype"] == 1) {
            $_SESSION["uploadtype"] = "upload";
        } else if ($defaultValue["hostedtype"] == 2)
            $_SESSION["uploadtype"] = "embed";
        
        addHiddenFieldToAddEditForm($form, 'recordtype', $_SESSION["uploadtype"]);
        
        addHiddenFieldToAddEditForm($form, 'stream','undefined'); 
        
        
        if ($form_state['storage']['step'] == 'view') {
        	      if ($form_state['storage']['substep'] == 'details' || empty($form_state['storage']['substep'])) {
                $form       = displayVideoData($form, $form_state, $renderMode, $contentId, $defaultValue);
                $h5pmapping = getH5PContentId($contentId);
            }
            if ($form_state['storage']['substep'] == 'prerequisite') {
                $form['Prerequisite-Details-view-start'] = array(
                    '#type' => 'markup',
                    '#markup' => '<div>'
                );
                displayH5PEditor($form, $form_state, $entityId, $entityType, $uniqueId, 'complete_view');
            }
            addEditFormWithContentAuthorCancelAndSaveClose($form, 'contentauthor-addedit-form', 'contentauthor-basic-save', 'contentauthor-basic-cancel', $contentId, $emptyId);
            unset($form['addedit_tmp_storage']);
            $form['addedit-left-col-end1'] = array(
                '#type' => 'markup',
                '#markup' => '</div>'
            );
            
        } else {
            if ($form_state['storage']['substep'] == 'details' || empty($form_state['storage']['substep'])) {
                $form = displayVideoData($form, $form_state, $renderMode, $contentId, $defaultValue);
            }
            
            $form_state['esign_from_plugin'] = false;
            if ($form_state['storage']['substep'] == 'tag') {
                $form_state['esign_from_plugin'] = false;
                //displayTagDetails($form, $form_state, $entityId, 'Course', $uniqueId);
            }
            
            if ($form_state['storage']['substep'] == 'prerequisite') {
                $form_state['esign_from_plugin'] = false;
                $showCancelSave                  = 0;
                displayH5PEditor($form, $form_state, $entityId, $entityType, $uniqueId);
            }
            if ($showCancelSave && $form_state['storage']['display_mode'] != 'view') {
                $subStage = $form_state['storage']['substep'];
               addEditFormWithContentAuthorCancelAndSaveClose($form, 'contentauthor-addedit-form', 'contentauthor-basic-save', 'contentauthor-basic-cancel', $contentId, $emptyId);
             //  addEditFormWithContentAuthorCancelAndSaveClose($form, 'h5pdetails', 'contentauthor-basic-save', 'contentauthor-basic-cancel', $contentId, $emptyId);
                
            }
        }
       /*  $form['content_author_disp_end'] = array(
            '#type' => 'markup',
            '#suffix' => '<div class="clearBoth"></div>
      					<div class="round-corner-footer-left"><div class="round-corner-footer-right">
      					<div class="round-corner-footer-middle"></div></div></div></div></div><div class="clearBoth"></div>'
        ); */
        $form['content_author_wrapper_end'] = array(
        		'#type' => 'markup',
        		'#suffix' => '</div>'
        );
       /*  if ($showCancelSave && $form_state['storage']['display_mode'] == 'view') {
            
        } else {
            $form['content_author_wrapper_end'] = array(
                '#type' => 'markup',
                '#suffix' => '<div class="clearBoth"></div><div class="admin-class-course-separater"></div></div>'
            );
        } */
        
        return $form;
        
    }
    catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_catalog_course_addedit_form', $ex);
        expertusErrorThrow($ex);
    }
}


function getDefaultContentAuthorVideoFormFieldValue($fields, $form_state, $contentId)
{
    try {
        $contentDetailsArr             = getContentAuthorDetails($contentId);
        $contentDetails                = $contentDetailsArr[0];
        $interactions                  = $contentDetails->interactions;
        $interactions                  = json_decode($interactions, 1);
        $contentDetails->video         = $interactions['interactiveVideo']['video']['files'][0]['path'];
        $contentDetails->show_solution = $interactions['override']['overrideShowSolutionButton'];
        //($interactions['override']['overrideShowSolutionButton'] == true) ? t('Enabled') : t('Disabled');
        $contentDetails->retry         = $interactions['override']['overrideRetry'];
        $contentDetails->poster_image  = $interactions['interactiveVideo']['video']['poster']['path'];
        $contentDetails->passingscore  = $interactions['interactiveVideo']['video']['passingscore'];
        //($interactions['override']['overrideRetry'] == true) ? t('Enabled') : t('Disabled');
        expDebug::dPrint('$contentDetailsArr[0] values' . print_r($contentDetails, 1),4);
        $defaultValue        = '';
        $contentDefaultValue = array();
        for ($i = 0; $i < count($fields); $i++) {
            $field = $fields[$i];
            if ($field == 'short_description') {
                $contentDefaultValue[$field] = empty($form_state['values'][$field]['value']) || $form_state['values'][$field]['value'] == '' ? (empty($contentDetails->$field) || $contentDetails->$field == '' ? '' : $contentDetails->$field) : $form_state['values'][$field]['value'];
            } else if ($field != "video") {
                $contentDefaultValue[$field] = empty($form_state['values'][$field]) ? (empty($contentDetails->$field) || $contentDetails->$field == '' ? '' : $contentDetails->$field) : $form_state['values'][$field];
            } else if ($field == "video") {
                $contentDefaultValue[$field] = $contentDetails->video;
            }
        }
        $contentDefaultValue["interactions"] = $interactions;
        $contentDefaultValue["poster_image"] = $contentDetails->poster_image;
        $contentDefaultValue["passingscore"] = $contentDetails->passingscore;
        
        expdebug::dPrint('$contentDefaultValue' . print_r($contentDefaultValue, true), 3);
        
        return $contentDefaultValue;
    }
    catch (Exception $ex) {
        watchdog_exception('getDefaultCrsAddEditFormFieldValue', $ex);
        expertusErrorThrow($ex);
    }
}


/**
 * exp_sp_administration_content_addedit_form_validate() - Class form validation.
 */
function exp_sp_administration_contentauthor_addedit_form_validate($form, &$form_state)
{
    try {
    	include_once $_SERVER["DOCUMENT_ROOT"] . '/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_contentauthor/exp_sp_administration_contentauthor.inc';
        expDebug::dPrint("recordtype:" . $form_state["input"]["recordtype"] ,4);
        expDebug::dPrint("recordtype1111111:" . $form_state["input"]["stream"] ,4);
       
        $form_state['esign_show_popup']  = false;
        $form_state['esign_from_plugin'] = false;
           
        if ($form_state["values"]["url"] == "" && $form_state["input"]["recordtype"] != "embed"  ) {
            $_SESSION["uploadtype"] = "upload";
        } else {
            $_SESSION["uploadtype"]        = "embed";
            $form_state["values"]["video"] = $form_state["values"]["url"];
        }
        
       
 
        
        $form_state['values']['content_type'] = "lrn_cnt_typ_vod";
        global $secure_entities;
        
        $config                      = getConfig("exp_sp");
        $content_upload_path         = trim($config['content_upload_path']);
        $ffmpeg_home                 = trim($config['ffmpeg_home']);
        $convert_video_on_background = trim($config['convert_video_on_background']);
        $convert_video               = trim($config['convert_video_for_mobile_access']);
        $ffmpeg_server_ip            = trim($config['ffmpeg_server_ip']);
        
        if ($convert_video) {
            if ($form_state['values']['content_type'] == 'lrn_cnt_typ_vod' && !empty($_FILES['files']['name']['video']) && ($convert_video_on_background == '0') && empty($ffmpeg_home)) {
                form_set_error('', t('ERR057'));
            }
            
            if ($form_state['values']['content_type'] == 'lrn_cnt_typ_vod' && !empty($_FILES['files']['name']['video']) && ($convert_video_on_background == '1') && empty($ffmpeg_server_ip)) {
                form_set_error('', t('ERR057'));
            }
        }
        
        $getTypeURL = $_SESSION["uploadtype"];
        unset($form_state['content_storage']);
  
         $contentDataValidate = 0;
        if ($getTypeURL == "upload") {
            $contentDataValidate = 1;
        }
    
        if ($contentDataValidate && $form_state["values"]["url"] == "") {
      include_once(drupal_get_path('module', 'exp_sp_administration_content') .'/exp_sp_administration_content.inc');
            $vId = getLatestVersionId() + 1;
       
            
            if (!empty($_FILES['files']['name']['video'])) {
                expDebug::dPrint('suresh test1 $_FILES = ' . print_r($_FILES, true), 5);
                if (($filenameEncoding = mb_detect_encoding($_FILES['files']['name']['video'], array(
                    'UTF-8',
                    'ASCII',
                    'ISO-8859-1',
                    'ISO-8859-2',
                    'ISO-8859-3',
                    'ISO-8859-4',
                    'ISO-8859-5',
                    'ISO-8859-6',
                    'ISO-8859-7',
                    'ISO-8859-8',
                    'ISO-8859-9',
                    'ISO-8859-10',
                    'ISO-8859-13',
                    'ISO-8859-14',
                    'ISO-8859-15',
                    'ISO-8859-16',
                    'Windows-1251',
                    'Windows-1252',
                    'Windows-1254'
                ), true)) === false) {
                    expDebug::dPrint('Could not detect encoding for uploaded file\'s name', 4);
                    throw new Exception('System could not detect encoding of the uploaded content\'s zip file name.');
                } else {
                    expDebug::dPrint('Encoding of uploaded file name = ' . $filenameEncoding, 4);
                    $origFilename = $_FILES['files']['name']['video'];
                    if ($filenameEncoding == 'UTF-8') {
                        $_FILES['files']['name']['video'] = urlencode($_FILES['files']['name']['video']);
                    } else if ($filenameEncoding == 'ISO-8859-1') {
                        $origFilename                     = utf8_encode($_FILES['files']['name']['video']);
                        $_FILES['files']['name']['video'] = urlencode($origFilename);
                    } else {
                        // @TODO: to build support for other encodings as and when an issue is observed
                        throw new Exception('Zip file name in unsupported encoding: ' . $filenameEncoding);
                    }
                    
                    $_FILES['files']['name']['video'] = str_replace(" ", "", $_FILES['files']['name']['video']);
                    $_FILES['files']['name']['video'] = str_replace("%", "p", $_FILES['files']['name']['video']);
                    $_FILES['files']['name']['video'] = str_replace("+", "l", $_FILES['files']['name']['video']);
                    $_FILES['files']['name']['video'] = str_replace('.zip', '_v' . $vId . '.zip', $_FILES['files']['name']['video']);
                    
                    $content_data   = getUploadContentAuthorData($form, $form_state, 'video', $vId);
                    $contentDataIdx = ($contentType == 'lrn_cnt_typ_aic') ? 1 : 0;
                    
                    $launchUrl                     = $content_data[$contentDataIdx]->launchurl;
                    $form_state["values"]["video"] = $launchUrl;
                    
                    expDebug::dPrint("trunck checking " . print_r($content_data, true), 5);
                    if (count($content_data) > 0 && $launchUrl != '') {
                        $content_data[$contentDataIdx]->orig_file_name = $origFilename;
                        $form_state['content_storage']                 = $content_data;
                    } else {
                        form_set_error('content_data', t('LBL613'));
                    }
                }
            } else if (empty($form_state['values']['id'])) { // empty($_FILES['files']['name']['content_data'])
            	  form_set_error('content_data', $form['content_data']['#title'] . t('Video') . t('ERR101'));
                $form_state['esign_show_popup'] = false;
                
            }
        }
            else { // fix for #0084818
              if($form_state["values"]["url"] == "" && ($form_state["input"]["recordtype"] == "embed" || $form_state["input"]["recordtype"] == ""))
              {
                  form_set_error('content_data', $form['content_data']['#title'] . t('LBL611') . t('ERR101'));
    	            $form_state["storage"]["form_validate"] = false;
                $form_state['esign_show_popup']         = false;
              }
        }    
       
        $form_state['hidden-save-submit'] = false;
        //$form_state['esign_show_popup'] = false;
        
        if ($form_state['triggering_element']['#name'] == 'details') {
            $form_state['rebuild']            = TRUE;
            // Rebuild the form. Submit handler will not be called.
            $form_state['storage']['substep'] = 'details';
        }
        

        /* if (module_exists('exp_sp_esignature') && isActiveEsignRegion()) {
            $triggerValue = 'save';
        } else {
            $triggerValue = 'hidden-save';
        } */
        
        $triggerValue = 'hidden-save';
        
        $triggerElementByName = $form_state['triggering_element']['#name'];
      
        // 53078: System allowing to upload the content even if the content upload path is invalid or empty.
        $config              = getConfig("exp_sp");
        $content_upload_path = trim($config['content_upload_path']);

        if (($triggerElementByName == 'save' || $triggerElementByName == 'saveandpublish' || $triggerElementByName == 'hidden-save')) {
            if ($getTypeURL == "upload") {
             	if(trim($form_state['values']['passingscore'])== 0 && trim($form_state['values']['passingscore'])!= ''){
            		addEditCheckMandatoryFields($form, $form_state, array(
            				'title'));
            	}else{
            		addEditCheckMandatoryFields($form, $form_state, array(
            				'title',
            				'passingscore'
            		));
            	}   
                 
                if ($form_state["values"]["VIDEO_DELETE"] == "TRUE") {
                    $form_state["values"]["recordtype"] = "upload";
                    $cid           = $form_state["values"]["id"];
                    $h5pmapping    = getH5PContentId($cid);
                    $jsonData      = json_decode($h5pmapping[0]->json_content, true);
                    $videoFilePath = $_SERVER["DOCUMENT_ROOT"] . "/sites/default/files/h5peditor/" . $jsonData['interactiveVideo']['video']['files'][0]['path'];
                    if (!unlink($videoFilePath)) {
                        expDebug::dPrint("Error Deleted file",4);
                    } else {
                        expDebug::dPrint("Deleted file",4);
                    }
                    
                    $jsonData['interactiveVideo']['video']['files'][0]['path'] = "";
                    $jsonData['interactiveVideo']['video']['files'][0]['mime'] = "";
                    $form_state["values"]["video"]                             = "";
                    $updateStmt  = db_update('h5p_nodes');
                    $encodedData = json_encode($jsonData);
                    $encodedData = str_replace("\/", "/", $encodedData);
                    
                    $fields = array(
                        'json_content' => $encodedData
                    ); 
                    $updateStmt->fields($fields);
                    $updateStmt->condition('nid', $h5pmapping[0]->h5p_id);
                    expDebug::dPrintDBAPI('updatsummary $updateStmt', $updateStmt);

                    $videoValidate = 1;
                    if (empty($form_state['values']['video'])) {
                        $videoValidate = 0;
                        form_set_error("video", "Video is required");
                        $form_state['esign_show_popup'] = false;
                    }
                    if ($videoValidate == 1)
                        $numUpdated = $updateStmt->execute();
                }
                
            } else {
            	$form["passingscore"]["#title"] = "Passing score";
            	if($form_state['values']['passingscore']== 0 && $form_state['values']['passingscore']!= ''){
            		addEditCheckMandatoryFields($form, $form_state, array(
            				'title'));
            				}else{
            					addEditCheckMandatoryFields($form, $form_state, array(
            							'title',
            							'passingscore'
            					));
            	}
             
              if($form_state["values"]["url"] != ""){
               validYoutubeURL($form, $form_state, array(
                    'url'
                )); 
              }
            }
        
           
            if (!empty($form_state['values']['passingscore']) || $form_state['values']['passingscore']== 0 ) {
            	
            	//83771 issue
           if($form_state['values']['passingscore']== 0){
           	$ps=$form_state['values']['passingscore'];
           }else{
           	$ps =  ltrim($form_state['values']['passingscore'],'0');           
           	$form_state['values']['passingscore'] = $ps;           	
           }          
       //check the passing score is decimal or not 
                //if($ps >= 0 && $ps <= 100 && is_numeric( $ps ) && floor( $ps ) != $ps){
           //if($ps >= 0 && $ps <= 100 && is_numeric( $ps ) && (int) $ps != $ps){
           if($ps >= 0 && $ps <= 100 && is_numeric( $ps ) && strpos($ps,'.') !== false){
           
                	form_set_error("passingscore", t("LBL3045")." ".t("ERR185"));
                }else if ($ps >= 0 && $ps <= 100 && is_numeric($ps)) 
                {
                	//Change logic                	
                } else { 
                	form_set_error("passingscore", t("LBL3045")." ".t("LBL3095"));
                }
                
            } else {
            	form_set_error("passingscore", t("LBL3045")." ". t("ERR101"));
            }

            if (!empty($form_state['values']['id']))
                addEditContentAuthorValidate($form_state, $form_state['values']['id'], "Edit");
            
            $form_state["storage"]["form_validate"] = true;
            
            $descriptionValidate = 1;
            if (empty($form_state['values']['short_description']['value'])) {
                $descriptionValidate = 0;
                form_set_error('short_description', $form['short_description']['#title'] . t('ERR101'));
                $form_state['esign_show_popup'] = false;
            }
        }
    if ($triggerElementByName == 'hidden-save') {
            $form_state['hidden-save-submit'] = true;
            $form_state['esign_show_popup']   = false;
        }
        if ($triggerElementByName == 'delete') {
           $form_state['esign_show_popup'] = true;
        }
        if ($triggerElementByName == 'unpublish') {
            $form_state['esign_show_popup'] = false;
        }
        if ($triggerElementByName == 'saveandpublish') {
           $form_state['esign_show_popup'] = false;
        }
        if (!($form_state['hidden-save-submit'])) {
            unset($_SESSION['esign_validate']);
        }
    }
    catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_content_addedit_form_validate', $ex);
        expertusErrorThrow($ex);
    }
}



/*
 * exp_sp_administration_contentauthor_addedit_form_submit() - Save the data entered by the user in the exp_sp_administration_contentauthor_addedit_form_submit form
 */
function exp_sp_administration_contentauthor_addedit_form_submit($form, &$form_state)
{
    try {
        expDebug::dPrint('exp_sp_administration_contentauthor_addedit_form_submit suresh esign validate ' . print_r($form_state['values'], true));
        $entityType     = 'cre_sys_obt_cnt';
        $loggedInUserId = getIdOfLoggedInUser();
        
        if (isset($form_state['values']['title'])) {
            if (empty($form_state['values']['id']) || $form_state['values']['id'] == "embed" || $form_state['values']['id'] == "upload") {
                $form_state['values']['id'] = "";
                $returnArr                  = addNewContentAuthorDetails($form, $form_state, $loggedInUserId);
                
                
                // Create a interactive content node
                $mime            = "video/YouTube";
                $posterImageMime = "";
                $posterImage     = "";
                if ($_SESSION["uploadtype"] == "upload") {
                    $form_state['values']['video'] = str_replace("/sites/default/files/h5peditor/", "", $form_state['values']['video']);
                    if (strpos($form_state['values']['video'], ".mp4") > 0)
                        $mime = "video/mp4";
                    else if (strpos($form_state['values']['video'], ".webm") > 0)
                        $mime = "video/webm";
                }
                else
                {
					if (strpos($form_state['values']['video'], ".mp4") > 0)
                		    $mime = "video/mp4";
                		else if (strpos($form_state['values']['video'], "vimeo.com") > 0)
                		    $mime = "video/vimeo";
                		   
                }
                
                $posterImage = "";
                $posterImageMime = "";
                
                $videoLink = $form_state['values']['video'];

                $passingscore = ltrim($form_state['values']['passingscore'],'0');
               
                
                $show_solution = ($form_state['values']['show_solution'] == '1') ? true : false;
                $retry         = ($form_state['values']['retry'] == '1') ? true : false;
                
                
                
                if ($show_solution == "")
                    $show_solution = "false";
                else
                    $show_solution = "true";
                if ($retry == "")
                    $retry = "false";
                else
                    $retry = "true";
                global $user;
                        
                $iContentNode                    = new stdClass();
                $iContentNode->uid               = $user->uid;
                $iContentNode->type              = 'h5p_content';
                $iContentNode->language          = 'en-us';
                // $iContentNode -> title = $form_state['values']['title'];
                $iContentNode->title             = $returnArr[0]->title;
                $iContentNode->status            = 1;
                $iContentNode->promote           = 0;
                $iContentNode->sticky            = 0;
                $iContentNode->comment           = 2;
                $iContentNode->disable           = 0;
                $iContentNode->content_master_id = $returnArr[0]->id;
                // reference to slt_content_master
                
                if (!empty($passingscore))
                    $passingScoreStr = '"passingscore":' . $passingscore . ',';
                
                //create video in mp4 for safari if webm uploaded
                
                $mp4linkForSafari = "";
                if ($_SESSION["uploadtype"] == "upload" && strpos($form_state['values']['video'], ".webm") > 0) {
                   $videoPathInfo = pathinfo($videoLink);
                   expDebug::dPrint("videopath dir:".$videoPathInfo["dirname"]);
                   expDebug::dPrint("videopath file:".$videoPathInfo["filename"]);
                   $mp4VideoFileName = $videoPathInfo["dirname"]."/".$videoPathInfo["filename"].".mp4";
                	$mp4linkForSafari = ',{"path":"' . $mp4VideoFileName.'","mime":"video/mp4","copyright":{"license":"U"}}';
                }
                
                $jsondata = '{"interactiveVideo":{"video":{' . $passingScoreStr . '"title":"' . $iContentNode->title . '","startScreenOptions":{"hideStartTitle":false},"files":[{"path":"' . $videoLink . '","mime":"' . $mime . '","copyright":{"license":"U"}}'.$mp4linkForSafari.'],"poster":{"path":"' . $posterImage . '","mime":"' . $posterImageMime . '","copyright":{"license":"U"},"width":1988,"height":1062},"copyright":""},"assets":{"interactions":[],"bookmarks":[]},"summary":{"task":{"library":"H5P.Summary 1.4","params":{"intro":"","summaries":[{"tip":""}],"solvedLabel":"Progress:","scoreLabel":"Wrong answers:","resultLabel":"Your result","response":{"scorePerfect":{"title":"PERFECT!","message":"You got everything correct on your first try!"},"scoreOver70":{"title":"Great!","message":"You got most of the statements correct on your first try."},"scoreOver40":{"title":"Ok","message":"You got some of the statements correct on your first try."},"scoreOver0":{"title":"A few mistakes.","message":"Have another try!"}},"summary":"You got @score of @total statements (@percent %) correct on your first try."},"subContentId":"086a6ae2-3ee8-4974-82ba-d9a0b9c6f98b"},"displayAt":3}},"override":{"overrideButtons":true,"overrideShowSolutionButton":' . $show_solution . ',"overrideRetry":' . $retry . '},"l10n":{"interaction":"Interaction","play":"Play","pause":"Pause","mute":"Mute","unmute":"Unmute","quality":"Video Quality","fullscreen":"Fullscreen","exitFullscreen":"Exit Fullscreen","summary":"Summary","bookmarks":"Bookmarks","defaultAdaptivitySeekLabel":"Continue"}}';
                expDebug::dPrint("jsondata::suresh====" . $jsondata ,4);
                $iContentNode->nid          = '';
                $iContentNode->vid          = '';
                $iContentNode->changed      = '';
                $iContentNode->h5p          = '';
                $iContentNode->json_content = $jsondata;
                $iContentNode->main_library_id = 36;
                $iContentNode->embed_type      = 'div';
                $iContentNode->h5p_type        = 'create';
                $iContentNode->h5p_library     = 'H5P.InteractiveVideo 1.9';
                $iContentNode->created         = time();
                $iContentNode->revision        = 0;
                $iContentNode->timestamp       = time();
                $iContentNode->op              = "Save";
                $iContentNode->submit          = "Save";
                $iContentNode->preview         = "Preview";
                $iContentNode->form_id         = "h5p_content_node_form";
                expDebug::dPrint("Final form save: " . print_r($iContentNode, 1), 4);
                
                node_save($iContentNode);
                $h5p_id = h5p_get_content_id($iContentNode);
                
               // addNewShareContent($form, $form_state, $returnArr[0]->id, '', $loggedInUserId);
                
                $sql = "select nid from h5p_nodes where content_id=" . $h5p_id;
                
                $launchid = 0;
                foreach (db_query($sql) as $result) {
                    $launchid = $result->nid;
                }
                
                if ($_SESSION["uploadtype"] == "upload" && (strpos($form_state['values']['video'], ".mp4") > 0 || strpos($form_state['values']['video'], ".webm") > 0)) {
                    
                    $srcPath  = "public://h5peditor/" . $form_state['values']['video'];
                    $destPath = "public://contentupload/" . $h5p_id . "/" . $form_state['values']['video'];
                    
                    
                    $path = pathinfo($destPath);
                    mkdir($path['dirname'], 0777, true);
                    
                    $srcPathArr = pathinfo($srcPath);
                    $files2 = scandir($srcPathArr['dirname'], 1);
                    expDebug::dPrint("file2....".print_r($files2,true));
                    
                    for($fileItr = 0; $fileItr< count($files2); $fileItr++)
                    {
                    	if($files2[$fileItr] == "." || $files2[$fileItr] == "..")
                    		continue;
                    	expDebug::dPrint("basename::".basename($files2[$fileItr]));
                    	//expDebug::dPrint("filename::".$files2[$fileItr]);
                    	//expDebug::dPrint("destPath::".$destPath); //destPath::public://h5p/content/387/videos/b_81/b.webm
                    	//expDebug::dPrint("srcPath::".$srcPath); //srcPath::public://h5peditor/videos/b_81/b.webm
                    	
                    	$newSrcPath = $srcPathArr['dirname']."/".$files2[$fileItr];
                    	$newDestPath = $path['dirname']."/".$files2[$fileItr];
                    	
                    	expDebug::dPrint("new src path:".$newSrcPath);
                    	expDebug::dPrint("dest path:".$newDestPath);
                    	
                    	/*if(strpos($newSrcPath, 'mobile_')>0) //symlink
                    	{
							expDebug::dPrint("sym linked");
                    		$res = symlink($newSrcPath,$newDestPath);
                    		expDebug::dPrint("sym link result:".$res);
                    	}
                    	else*/
                    	{
                    	$file              = new stdClass();
                    	$file->filename    = basename($files2[$fileItr]);
                    	$file->filepath    = $newSrcPath;
                    	$file->filemime    = file_get_mimetype($newSrcPath);
                    	$file->filesize    = filesize($newSrcPath);
                    	$file->uid         = 1;
                    	$file->status      = FILE_STATUS_PERMANENT;
                    	$file->uri         = $newSrcPath;
                    	$file->display     = 1;
                    	$file->description = '';
                    	$file              = file_copy($file, $newDestPath, FILE_EXISTS_REPLACE); 
                    	}
                    	
                    
                    }
                    
                   /* $file              = new stdClass();
                    $file->filename    = basename($srcPath);
                    $file->filepath    = $srcPath;
                    $file->filemime    = file_get_mimetype($srcPath);
                    $file->filesize    = filesize($srcPath);
                    $file->uid         = 1;
                    $file->status      = FILE_STATUS_PERMANENT;
                    $file->uri         = $srcPath;
                    $file->display     = 1;
                    $file->description = '';
                    $file              = file_copy($file, $destPath, FILE_EXISTS_REPLACE);*/
                    
                }
                if ($form_state['storage']['edited_entity'] == false) {
                    $qry = "update slt_content_version v,slt_content_lesson l, slt_content_master_h5p_rel rel set l.launchurl='/?q=h5p/embed/$launchid' where ";
                    $qry .= "rel.h5p_id  = $h5p_id and rel.content_master_id = v.content_master_id and v.id = l.content_version_id;";
                    expDebug::dPrint("Final form after save qry: " . $qry ,4);
                    db_query($qry);
                }
                
                $entityId                            = $form_state['values']['id'];
                $form_state['storage']['step']       = 'edit';
                $form_state['build_info']['args'][]  = $entityId;
                $form_state['storage']['new_entity'] = TRUE;
                $emptyId                             = $form_state['values']['empty_id'];
                $form_state['rebuild']               = TRUE;
                unset($_SESSION['esign_validate']);
                //	drupal_set_message(t('LBL272') . ' ' . t('MSG600') . '.');

                //ADDING FOR VIDEO STREAMING
                $ffmpeg_servers             = explode(',', $config['ffmpeg_server_ip']);
                $module_name                = array(
                    'exp_sp_stream_server'
                );
                $video_stream_server_status = getDrupalModuleStatus($module_name);
           
                if ($_SESSION["uploadtype"] == "upload" && (!empty($ffmpeg_servers)) && ($video_stream_server_status == 1)) {
                    drupal_set_message(t('MSG700'));
                   
                    $form_state["input"]["stream"] = "true";
                } else {
                    drupal_set_message(t('LBL272') . ' ' . t('MSG600') . '.');
                    $form_state["input"]["stream"] = "false";
                }
                $form_state["input"]["recordtype"] = "newlycreated";
            } else {
                $esignEnabled = false;
                 /* if (module_exists('exp_sp_esignature') && isActiveEsignRegion())
                    $esignEnabled = true;  */
                if (($esignEnabled == true && $form_state['triggering_element']['#name'] == 'save') || ($esignEnabled == false && ($form_state['triggering_element']['#name'] == 'save' || $form_state['triggering_element']['#name'] == 'saveandpublish')) || ($form_state['triggering_element']['#name'] == 'unpublish')) {
                    unset($form_state['storage']['form_info_list']);
                    unset($form_state['storage']['new_entity']);
                    updateContentAuthorDetails($form, $form_state, $loggedInUserId);
                    expDebug::dPrint("interactiondata1234:".$form_state["values"]["INTERACTIONDATA"]);
                    $_REQUEST["action"] = "updateshowsolutionretry";
                    
                    $removeStrPosEnd = strpos($form_state["values"]["INTERACTIONDATA"],"&action=updatecoreh5p",1);
                    $json_content_key_val = substr($form_state["values"]["INTERACTIONDATA"],13,($removeStrPosEnd-13));
					expDebug::dPrint("interactiondata1234 substirng::".$json_content_key_val);
                    $_REQUEST["json_content"]= $json_content_key_val;
                    
                    //$arr = array();
                   // parse_str($form_state["values"]["INTERACTIONDATA"], $arr);
                   // $_REQUEST["json_content"]=$arr["json_content"];
                    
                    
                    if($form_state['triggering_element']['#name'] != 'unpublish')
                     updateh5p($form_state);
                    
                  /*  $arr = array();
                    parse_str($form_state["values"]["INTERACTIONDATA"], $arr);
                    $_REQUEST["action"] = "updatecoreh5p";
                    $_REQUEST["json_content"]=$arr["json_content"];
					$_REQUEST["action"]=$arr["action"];
					$_REQUEST["content_id"]=$arr["content_id"];
					$_REQUEST["slt_c_id"]=$arr["slt_c_id"];

                    updateh5p($form_state);  */
                    
                    if ($form_state['triggering_element']['#name'] == 'save' || $form_state['triggering_element']['#name'] == 'saveandpublish') {
                        expertus_set_message(t("LBL272")." ".t('MSG601') . '.');
                    } else if ($form_state['triggering_element']['#name'] == 'unpublish') {
                        expertus_set_message(t('MSG601') . '.');
                    } else {
                        expertus_set_message(t('LBL272') . ' ' . t('MSG601') . '.');
                    }
                    
                    $form_state['storage']['step']          = 'edit';
                    $entityId                               = $form_state['values']['id'];
                    $form_state['storage']['edited_entity'] = TRUE;
                }
            }
        } else {
            $entityId = $form_state['values']['mapped_course_id'];
        }
        
        $form_state['build_info']['args'][]      = $entityId;
        $form_state['storage']['form_info_list'] = $formIdList;
        $form_state['display_class']             = TRUE;
        $form_state['show_add_another']          = TRUE;
        $uniqueId = $entityId . '-' . $entityType;
        $form_state['rebuild'] = TRUE;   
    }
    catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_content_addedit_form_submit', $ex);
        expertusErrorThrow($ex);
    }
}


function displayH5PEditor(&$form, &$form_state, $entityId, $entityType, $uniqueId, $mode = '')
{
 try {
    $uniqueId                       = "prerequisite-$entityId-$entityType";
    $wrapperId                      = 'prerequisite-grid-wrapper-' . $uniqueId;
    $formName                       = 'prerequisite_form_' . $uniqueId;
    $form_state['form_unique_name'] = $formName;
    $h5pmapping = getH5PContentId($entityId);
    $form[$formName]['add_prereqiuisite_text'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="e1_h5p_editor" id="e1_h5p_editor-' . $uniqueId . '"><div id="iframe_editor" class="h5p-editor" style="border:0px;display:none;" src="?q=node/' . $h5pmapping[0]->h5p_id . '/edit" width="600px" height="600px" h5pid=' . $h5pmapping[0]->h5p_id . '></div><div id="h5pe1loading" style="height:300px;display:block;"></div></div></div>'
    );
     }
    catch (Exception $ex) {
        watchdog_exception('updateRemoveUser', $ex);
        expertusErrorThrow($ex);
    }
    
}

function updateh5p($form_state = null)
{
    
 	$txn = db_transaction();
	try 
	{
    $loggedInUserId = getIdOfLoggedInUser();
    $action = $_REQUEST["action"];
    if ($action == "updatecoreh5p") {
        $json_content = $_REQUEST["json_content"];
        $id           = $_REQUEST["content_id"];
        $slt_c_id     = $_REQUEST["slt_c_id"];
        $json_content = str_replace("/n", "", $json_content);
        
        $defaultQryStr     = 'SELECT json_content from h5p_nodes where content_id = :cid';
        $defaultQryStrArgs = array(
            ':cid' => $id
        );
        $defaultQry        = db_query($defaultQryStr, $defaultQryStrArgs);
        expDebug::dPrintDBAPI('$defaultQry', $defaultQry, $defaultQryStrArgs);
        $default = $defaultQry->fetchAll();
    
        
        $findStr = '"interactions":[]';
        if (strpos($json_content, $findStr) > 0) //if interactions empty
            {
            $json_content = str_replace("[]", '""', $json_content, $count);
            
            $json_content = utf8_decode($json_content);
        } else {
            //$json_content = utf8_encode($json_content); 
        	$json_content = htmlspecialchars_decode($json_content); // Changed for special character issue #0074156
        }
        
        $updateStmt = db_update('h5p_nodes');
        
        $fields = array(
            'json_content' => $json_content,
            'filtered' => ''
        );
        $updateStmt->fields($fields);
        $updateStmt->condition('content_id', $id);
        $numUpdated = $updateStmt->execute();
        
        if ($numUpdated) {
            echo t("LBL3209"); //"Interaction successfully saved.";
            
            $updateUserId = getIdOfLoggedInUser();
            $updatefields = $form_state['values'];
 
         
            make_audit_trail_entries($fields, $loggedInUserId, $default, $slt_c_id, 'Edited Interactions', 'cre_sys_obt_cnt', 'exp_sp_administration_contentauthor', 'updateh5p', array(
            		'code' ,
            		'content_type' ,
            		'json_content'
            ));

        } else
        	echo t("LBL3210");
          //  echo "Error in data";
    } else if ($action == "updateshowsolutionretry") {
        $mime = "video/YouTube";
        if ($_SESSION["uploadtype"] == "upload") {
            if (is_array($form_state['values']['video']))
                $form_state['values']['video'] = implode("/", $form_state['values']['video']);
            if (strpos($form_state['values']['video'], "sites/default/files/h5peditor") > 0)
                $form_state['values']['video'] = str_replace("/sites/default/files/h5peditor/", "", $form_state['values']['video']);
            if (strpos($form_state['values']['video'], ".mp4") > 0)
                $mime = "video/mp4";
            else if (strpos($form_state['values']['video'], ".webm") > 0)
                $mime = "video/webm";
        }
        else
        {
        		expDebug::dPrint("Sudhar update:".$form_state['values']['video']);
			if (strpos($form_state['values']['video'], ".mp4") > 0)
				$mime = "video/mp4";
			else if (strpos($form_state['values']['video'], "vimeo.com") > 0)
				$mime = "video/vimeo";
        		
        }
        $video = $form_state["values"]["video"];
        
        $id            = $form_state["values"]["id"];
        $retry         = $form_state["values"]["retry"];
        $show_solution = $form_state["values"]["show_solution"];
        
        $show_solution = ($show_solution == "Disabled" || $show_solution == "0") ? false : true;
        $retry         = ($retry == "Disabled" || $retry == "0") ? false : true;
        
        
        
        $passingscore = $form_state["values"]["passingscore"];
        expDebug::dPrint('$$$passingscore new way = ' .$passingscore);
        expDebug::dPrint('$$$retry = ' . $retry, 4);
        expDebug::dPrint('$$$show_solution = ' . $show_solution, 4);
        
        
        
         $h5pmapping   = getH5PContentId($id);
        expDebug::dPrint('Abhishek Codessss' . print_r($h5pmapping, true), 4);
        $jsonData     = json_decode($h5pmapping[0]->json_content, true); 
        
        $json_content = $_REQUEST["json_content"];
        
        
        expDebug::dPrint('$$json_content old way = ' . print_r($jsonData, true), 4);
        expDebug::dPrint('$$json_content new way = ' . print_r($json_content, true), 4);
        
        $json_content = str_replace("/n", "", $json_content);
      
       // $updateStmt = db_update('h5p_nodes');
        
       // $jsonData = $json_content;
        
        $jsonData = json_decode($json_content,true);
     //   $jsonData = get_object_vars($json_content);
        
        expDebug::dPrint('$$json_content4444 = ' . print_r($jsonData, true), 4);
       
        
        //Old value for audit
        $defaultQryStr     = 'SELECT json_content from h5p_nodes where content_id = :cid';
        $defaultQryStrArgs = array(
            ':cid' => $h5pmapping[0]->h5p_content_id
        );
        $defaultQry        = db_query($defaultQryStr, $defaultQryStrArgs);
        expDebug::dPrintDBAPI('$defaultQry1234', $defaultQry, $defaultQryStrArgs);
        $default = $defaultQry->fetchAll();
        //Encoding the default value, for its comparison with new encoded json data
        $default = json_encode($default);
        $default = str_replace("\/", "/", $default); 
        
        
        
        expDebug::dPrint('$$json_content555 = ' . $jsonData["override"]["overrideButtons"], 4);
        expDebug::dPrint('$$json_content666 = ' . $jsonData["override"]["overrideRetry"], 4);
        
        $jsonData["override"]["overrideButtons"]            = true;
        $jsonData["override"]["overrideRetry"]              = $retry;
        $jsonData["override"]["overrideShowSolutionButton"] = $show_solution;
        if (!empty($passingscore))
            $jsonData['interactiveVideo']['video']['passingscore'] = $passingscore;
        
            if (is_array($video))
                $video = implode("/", $video);
            
            $jsonData['interactiveVideo']['video']['files'][0]['path'] = $video;
            $jsonData['interactiveVideo']['video']['files'][0]['mime'] = $mime;


                //create video in mp4 for safari if webm uploaded
            $mp4linkForSafari = "";
     if ($_SESSION["uploadtype"] == "upload" && strpos($video, ".webm") > 0) {
                   $videoPathInfo = pathinfo($video);
                   expDebug::dPrint("edit videopath dir:".$videoPathInfo["dirname"]);
                   expDebug::dPrint("edit videopath file:".$videoPathInfo["filename"]);
                   $mp4VideoFileName = $videoPathInfo["dirname"]."/".$videoPathInfo["filename"].".mp4";
                    $jsonData['interactiveVideo']['video']['files'][1]['path'] = $mp4VideoFileName;
                	
                }
        $jsonData['interactiveVideo']['video']['title'] = $form_state['values']['title'];
        
        
        $json_content = json_encode($jsonData);
        $findStr = '"interactions":[]';
        if (strpos($json_content, $findStr) > 0) //if interactions empty
        {
        	//$json_content = str_replace("[]", '""', $json_content, $count);
        
        	//$json_content = utf8_decode($json_content);
        	$json_content = htmlspecialchars_decode($json_content);
        } else {
        	//$json_content = utf8_encode($json_content);
        	$json_content = htmlspecialchars_decode($json_content); // Changed for special character issue #0074156
        }
        
        expDebug::dPrint('$$json_content2222 = ' . print_r($json_content, true), 4);
        
       // $jsonData = json_encode($json_content);
        
      //  $jsonData = $json_content;
        
        $updateStmt  = db_update('h5p_nodes');
      //  $encodedData = json_encode($jsonData);
      //  $encodedData = str_replace("\/", "/", $encodedData);
        
        $encodedData = str_replace("\/", "/", $json_content);
        
        
        $fields = array(
            'json_content' => $encodedData
        ); 
        $updateStmt->fields($fields);
        $updateStmt->condition('nid', $h5pmapping[0]->h5p_id);
        expDebug::dPrintDBAPI('updatsummary $updateStmt', $updateStmt);
        $numUpdated = $updateStmt->execute();
        
        
        
        if ($_SESSION["uploadtype"] == "upload" && (strpos($form_state['values']['video'], ".mp4") > 0 || strpos($form_state['values']['video'], ".webm") > 0)) {
            $srcPath  = "public://h5peditor/" . $form_state['values']['video'];
            $destPath = "public://contentupload/" . $h5pmapping[0]->h5p_content_id . "/" . $form_state['values']['video'];
            $path = pathinfo($destPath);
            mkdir($path['dirname'], 0777, true);
            $file              = new stdClass();
            $file->filename    = basename($srcPath);
            $file->filepath    = $srcPath;
            $file->filemime    = file_get_mimetype($srcPath);
            $file->filesize    = filesize($srcPath);
            $file->uid         = 1;
            $file->status      = FILE_STATUS_PERMANENT;
            $file->uri         = $srcPath;
            $file->display     = 1;
            $file->description = '';
            $file              = file_copy($file, $destPath, FILE_EXISTS_REPLACE);
        }
       
           make_audit_trail_entries($fields, $loggedInUserId, $default, $id, 'Edited Show_Solution Retry Passing_Score in', 'cre_sys_obt_cnt', 'exp_sp_administration_contentauthor', 'updateh5p', array(
                'json_content'
            ));
    }
    
 	}catch (Exception $ex) {
        $txn->rollback();
        watchdog_exception('updateH5P', $ex);
        throw $ex;
    }
    
    // Commit the transaction
    
    unset($txn);    
    
}

/**
 * Show video preview in qtip like iframe free popup
 */
function previewContentAuthorVideoInQtipPopup($versionId)
{
    try {
        include_once(drupal_get_path('module', 'exp_sp_administration_contentauthor') . '/exp_sp_administration_contentauthor.inc');
        $lessonList = getContentAuthorLessonList($versionId);
        expDebug::dPrint('$lessonList = ' . print_r($lessonList, true), 4);
        
        $htmlId          = 'vod_' . $versionId;
        $title           = $lessonList[0]->title;
        $contenthosttype = $lessonList[0]->contenthostedtype;
        $output          = theme('videojs-player', array(
            'html_id' => $htmlId,
            'video_session_id' => $htmlId,
            'video_url' => $lessonList[0]->launchurl,
            'is_preview' => true,
            'type' => 'h5p'
        ));
        
        // Render the qtip box html to be directly appended to the container div
        // (see $popupVideoPreview settings in exp_sp_administration_content.inc: getOnclick())
        $output = theme('drupalajax_qtip', array(
            'popup_id' => 'video-preview-popup-' . $versionId, // The id to be given to the popup
            'popup_width' => '359px', // Popup width with unit
            'class' => 'video-preview-popup', // Class(es) to be added to the popup for styling etc.
            'display_html' => $output // The html to display inside the popup
        ));
        
        $commands   = array();
        $commands[] = contentauthorvideo_preview_qtip($output);
        $commands[] = contentauthorvideo_preview_initialize($htmlId);
        expDebug::dPrint(' $commands = ' . print_r($commands, true), 4);
        print ajax_render($commands);
        exit;
    }
    catch (Exception $ex) {
        watchdog_exception('previewVideoInQtipPopup', $ex);
        expertusErrorThrow($ex);
    }
}

function contentauthorvideo_preview_qtip($html)
{
    try {
        return array(
            'command' => 'expVideoPreviewQtip',
            'html' => $html
        );
    }
    catch (Exception $ex) {
        watchdog_exception('video_preview_qtip', $ex);
        expertusErrorThrow($ex);
    }
}

/*
 * Drupal.ajax command to show initialize video-js player in qtip popup
 */
function contentauthorvideo_preview_initialize($video_id)
{
    try {
        return array(
            'command' => 'initializeVideoJSPlayer',
            'video_id' => $video_id
        );
    }
    catch (Exception $ex) {
        watchdog_exception('video_preview_qtip', $ex);
        expertusErrorThrow($ex);
    }
}

function validYoutubeURL($form, &$form_state, $mandatoryFields = array())
{
    try {

        $form_state["storage"]["form_validate"] = true;

        foreach ($mandatoryFields as $fieldName) {
            $fieldValue = trim($form_state['values'][$fieldName]);
            
            
            //ADDING FOR CONTRACTED URL's
            $ytshorturl = 'youtu.be/';
            $ytlongurl  = 'www.youtube.com/watch?v=';
            if (strpos($fieldValue, $ytshorturl) !== false) {
                $fieldValue = str_replace($ytshorturl, $ytlongurl, $fieldValue);
            }
            
            
            if(strpos($fieldValue,"vimeo.com") > 0)
              $check = 1;
            else{
            		$check = preg_match('#https?://(?:www\.)?youtube\.com/watch\?v=([^&]+?)#', $fieldValue, $matches);
            		if ($check == 0) {
                	expDebug::dPrint(' ' . $form[$fieldName]['#title'] . ' is Invalid.', 5);
	              //  form_set_error($fieldName, $form[$fieldName]['#title'] . t(' is invalid.'));
                	form_set_error($fieldName, $form[$fieldName]['#title'] . ' ' . t('ERR259'));
    	            $form_state["storage"]["form_validate"] = false;
                $form_state['esign_show_popup']         = false;
            }
            }
        }
    }
    catch (Exception $ex) {
        watchdog_exception('validYoutubeURL', $ex);
        expertusErrorThrow($ex);
    }
}

function displayVideoData($form, &$form_state, $renderMode, $contentId, $defaultValue)
{
 	try 
 	{
    $typeofupload = $_SESSION["uploadtype"];
    
    $form['wrapper-start'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="h5pdetails">'
    );
    
    if (count($defaultValue["interactions"]["interactiveVideo"]["assets"]["interactions"]) > 0)
        $readOnly = true;
    
    
    $form['addedit-remove-space-title-start'] = array(
        '#type' => 'markup',
        '#markup' => '<div style="width:100%;">'
    );
    $form['addedit-remove-space-title-end']   = array(
        '#type' => 'markup',
        '#markup' => '</div>'
    );
    $defaultOption                            = "lrn_cnt_typ_vod";
    expDebug::dPrint("weeeee1....");
    addHiddenFieldToAddEditForm($form, 'VIDEO_DELETE', "FALSE");
    addHiddenFieldToAddEditForm($form, 'POSTER_DELETE', "FALSE");
    addHiddenFieldToAddEditForm($form, 'INTERACTIONDATA', "FALSE");
    
    addHiddenFieldToAddEditForm($form, 'VIDEO_SAVE', "TRUE");
    
    expDebug::dPrint("checking the default values123" . print_r($defaultValue, true), 4);
    
    addTextFieldToAddEditForm($form, 'title', t('LBL083'), $defaultValue['title'], 1, true, false, 100);
    addHiddenFieldToAddEditForm($form, 'ckeditor_word_count', '5000');
    $form['addedit-long-description-container'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="addedit-long-description-container">'
    );
    addTextFormatFieldToAddEditForm($form, 'short_description', t('LBL229'), $defaultValue['short_description'], 'full_html', 2, true, false, 5000);
    $form['addedit-long-description-container1'] = array(
        '#type' => 'markup',
        '#markup' => '</div>'
    );
    
    
    
    $showSolutionEnabled = (($defaultValue["show_solution"] == 1) || ($defaultValue["show_solution"] == "Enabled")) ? "Enabled" : "Disabled";
    $retryEnabled        = ($defaultValue["retry"] == 1 || $defaultValue["retry"] == "Enabled") ? "Enabled" : "Disabled";
    
    
    
    $showSolChecked = $showSolutionEnabled == "Enabled" ? "checked" : "";
    $retryChecked   = $retryEnabled == "Enabled" ? "checked" : "";
    
    $showSolnHelpText = t("MSG806");
    $retryHelpText    = t("MSG805");
    
    $retryClsName   = "";
    $showSolClsName = "";
    if ($retryChecked == "checked")
    	$retryClsName = "retryChecked";
    else
    	$retryClsName = "retryUnChecked";
    
    if ($showSolChecked == "checked")
    	$showSolClsName = "ShowSolnChecked";
    else
    	$showSolClsName = "ShowSolnUnChecked";
    
    
    $form['addedit-passscore-retry-show2'] = array(
    		'#type' => 'markup',
    		'#markup' => '<div id="video-right-container"><div id="retrycontainer" class="allow-retry ' . $retryClsName . '">'
    );
    addCheckBoxToAddEditFormCA($form, 'retry', t('LBL3025'), false, $retryChecked, 6, '', '', "addnewtitle_field_show_retry");
    $form['addedit-passscore-retry-show3'] = array(
    		'#type' => 'markup',
    		'#markup' => '</div>'
    );
    $form['addedit-passscore-retry-show4'] = array(
    		'#type' => 'markup',
    		'#markup' => '<div id="showsolutioncontainer" class="show-solution ' . $showSolClsName . '">'
    );
    addCheckBoxToAddEditFormCA($form, 'show_solution', t('LBL3024'), false, $showSolChecked, 7, '', '', 'addnewtitle_field_show_retry');
    $form['addedit-passscore-retry-show5'] = array(
    		'#type' => 'markup',
    		'#markup' => '</div>'
    );
    
    $form['addedit-passscore-retry-show'] = array(
    		'#type' => 'markup',
    		'#markup' => '<div id="passcorecontainer">'
    );
	
	if($defaultValue['passingscore'] != null && $defaultValue['passingscore'] != "")
		$defaultValue['passingscore'] =  ltrim($defaultValue['passingscore'],'0');
    expDebug::dPrint("Suresh ps....".$defaultValue['passingscore']);
    addTextFieldToAddEditForm($form, 'passingscore', t('LBL3045'), $defaultValue['passingscore'], 5, true, false, 3);
    $form['addedit-passscore-retry-show1'] = array(
    		'#type' => 'markup',
    		'#markup' => '</div></div>'
    );
    
    
    
    
    
    
    
    addTwoColumnRowToAddEditForm($form, 'url_uploadvideo');
    $form['addedit-url-video-container'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="addedit-twocol-firstcol" >'
    );
    if ($typeofupload == "embed")
        addTextFieldToAddEditForm($form, 'url', t('LBL611'), $defaultValue['video'], 3, true, $readOnly, 100);
    else
        addTextFieldToAddEditForm($form, 'url', t('LBL611'), '', 3, true, $readOnly, 100);
    
    $form['addedit-url-video-container1'] = array(
        '#type' => 'markup',
        '#markup' => '</div>'
    );
    
    
    
    $form['contentauthor_or_image'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="contentauthor_or_image" ><span class="orIcon orText">' .
              	                   t('LBL644') . '</span></div>'
    );
    
    
    
    $form['addedit-upload-video-container'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="addedit-twocol-secondcol">'
    );
    if ($typeofupload == "upload") {
        if (!is_array($defaultValue['video']))
            $onlyfilename = explode("/", $defaultValue['video']);
        else
            $onlyfilename = $defaultValue['video'];
        
        $filename = $onlyfilename[2];
        if (strpos($defaultValue['video'], "default") > 0)
            $filename = $onlyfilename[6];
        if ($filename != ""){
            $filename = titleController('VIDEO-FILE-TITLE', check_plain($filename), 100);
        }
        $form['videofilenamedisplay'] = array(
            '#type' => 'markup',
            '#markup' => '<div id="videofilenamedisplay" readonly="' . $readOnly . '" style="display:none;">' . $filename . '</div>'
        );
    }
    
    addFileUploadControlToAddEditForm($form, 'video', t('ERR206'), $onlyfilename, 4, true, $readOnly, 35);
    
    $form['addedit-upload-video-container1'] = array(
        '#type' => 'markup',
        '#markup' => '</div>'
    );
    endAddEditTwoColumnRow($form);
    
    
 
    
    
    if ($defaultValue["poster_image"] != "" && substr($defaultValue["poster_image"], 0, 6) != "images") 
    {    
        $defaultValue["poster_image"] = "images/" . $defaultValue["poster_image"];
    }
    $posterFileNameParts = explode("/", $defaultValue["poster_image"]);
    
    
    if (!empty($posterFileNameParts[2]))
        $posterFileNameParts[2] = titleController('POSTER-IMAGE-TITLE', check_plain($posterFileNameParts[2]), 100);
    else
        $posterFileNameParts[2] = "";
    
    
    $form['posterfilenamedisplay'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="posterfilenamedisplay" readonly="' . $readOnly . '" style="display:none;">' . $posterFileNameParts[2] . '</div>'
    );
    
    if (is_numeric($contentId)) {
        $h5pmapping = getH5PContentId($contentId);
        $h5pUrl     = "?q=node/" . $h5pmapping[0]->h5p_id . "/edit/&contentid=" . $contentId;
        $jsonData   = json_decode($h5pmapping[0]->json_content, true);
        expDebug::dPrint("json data...." . $h5pmapping[0]->json_content ,4);
        $feedbacksummary = $jsonData["interactiveVideo"]['summary']['task']['params']['summary'];
        $summaries       = $jsonData["interactiveVideo"]['summary']['task']['params']['summaries'];
        $displayAt       = $jsonData["interactiveVideo"]['summary']['displayAt'];
        $passingscore    = $jsonData['interactiveVideo']['video']['passingscore'];
        
        $stdObj                  = new stdClass();
        $stdObj->feedbacksummary = $feedbacksummary;
        $stdObj->summaries       = $summaries;
        $stdObj->displayAt       = $displayAt;
        $stdObj->passingscore    = $passingscore;
        $form['h5purl']          = array(
            '#type' => 'markup',
            '#markup' => '<div id="h5purl" style="display:none;">' . $h5pUrl . '</div><input fieldfor="summary" type="hidden" id="jsoncontent" value="' . urlencode(json_encode($stdObj)) . '"/><input type="hidden" id="library" value="H5P.InteractiveVideo 1.9"></input><input type="hidden" id="json_content" value="' . urlencode($h5pmapping[0]->json_content) . '" h5pId=' . $h5pmapping[0]->h5p_content_id . '></input>'
        );
        
        
        
        $node   = h5peditor_get_source_node($form['#node']);
        $assets = h5p_add_core_assets();
        h5p_add_files_and_settings(TRUE, TRUE); // Force integration
        
        $content_validator = _h5p_get_instance('contentvalidator');
        
        $h5peditor_module_path = drupal_get_path('module', 'h5peditor');
        $cache_buster          = '?' . variable_get('css_js_query_string', '');
        $file_path             = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
        
        // Add our own styles
        foreach (H5peditor::$styles as $style) {
            $assets['css'][] = base_path() . $h5peditor_module_path . '/h5peditor/' . $style . $cache_buster;
        }
        
        // Add our own scripts
        foreach (H5peditor::$scripts as $script) {
            // We do not want the creator of the iframe inside the iframe
            if ($script !== 'scripts/h5peditor-editor.js') {
                $assets['js'][] = base_path() . $h5peditor_module_path . '/h5peditor/' . $script . $cache_buster;
            }
        }
        
        $settings = array(
            'h5peditor' => array(
                'filesPath' => base_path() . $file_path . '/h5peditor',
                'fileIcon' => array(
                    'path' => base_path() . $h5peditor_module_path . '/h5peditor/images/binary-file.png',
                    'width' => 50,
                    'height' => 50
                ),
                'ajaxPath' => url('h5peditor/' . H5PCore::createToken('editorajax') . '/' . (isset($h5pmapping[0]->h5p_id) ? $h5pmapping[0]->h5p_id : 0) . '/'),
                'modulePath' => $h5peditor_module_path,
                'libraryPath' => _h5p_get_h5p_path() . '/libraries/',
                'copyrightSemantics' => $content_validator->getCopyrightSemantics(),
                'assets' => $assets,
                'contentRelUrl' => '../contentupload/',
                'editorRelUrl' => '../../../h5peditor'
                
            )
        );
        
        addHiddenFieldToAddEditForm($form, 'h5ptoken', H5PCore::createToken('editorajax'));
        addHiddenFieldToAddEditForm($form, 'h5peditorsettings', json_encode($settings));
    }
    $defaultValue['status'] = !empty($defaultValue['status']) ? $defaultValue['status'] : 'lrn_cnt_sts_itv';
    $form['status']         = array(
        '#type' => 'hidden',
        '#name' => 'status',
        '#value' => $defaultValue['status']
    );
    
    $form['wrapper-end'] = array(
        '#type' => 'markup',
        '#markup' => '</div>'
    );
    return $form;
     
    }catch (Exception $ex) {
        watchdog_exception('displayVideoData', $ex);
        expertusErrorThrow($ex);
    }
}






/*
 * addCheckboxToAddEditForm -  Use this function to add a checkbox to the addedit form
 */
function addCheckBoxToAddEditFormCA(&$form, $id, $title = '', $titlePrefixed = true, $defaultValue = 0, $tabIndex = null, $mandatory = false, $readOnly = false, $prefixClass)
{
    try {
        $attributes = array();
        
        // We need to add a class selector for any jQuery as we cannot use id which gets appended by an incrementing number
        // each time the form is re-built.
        $attributes['class'] = array(
            'addedit-edit-' . $id
        ); // This class must be prefixed with 'addedit-edit-' followed by the form field id.
        
        // Add class to apply common style to all checkbox fields
        $attributes['class'][] = 'addedit-edit-checkbox';
        
        if ($readOnly) {
            $attributes['class'][] = 'addedit-readonly-checkbox';
        }
        
        if ($defaultValue == "checked") {
            $attributes['checked'] = 'checked';
            
        }
        if (isset($tabIndex) && $tabIndex > 0) {
            $attributes['tabindex'] = $tabIndex;
        }
        
        $prefix = '';
        $suffix = '';
        if (empty($form['addedit_tmp_storage']['two_column'])) {
            if ($titlePrefixed == true) {
                $prefix = addEditGetPrefix('FIELD', $title, $mandatory);
                $suffix = addEditGetSuffix('FIELD');
            } else {
                $prefix = addEditGetPrefix('CHECKBOX_TITLE_SUFFIXED');
                $suffix = addEditGetSuffix('CHECKBOX_TITLE_SUFFIXED', $title, $mandatory);
            }
        } else {
            if ($form['addedit_tmp_storage']['two_column']['current_column'] == 0) {
                if ($titlePrefixed == true) {
                    $prefix = addEditGetPrefix('TWOCOL_FIRSTCOL_FIELD', $title, $mandatory);
                    $suffix = addEditGetSuffix('TWOCOL_FIRSTCOL_FIELD');
                } else {
                    $prefix = addEditGetPrefix('TWOCOL_FIRSTCOL_CHECKBOX_TITLE_SUFFIXED');
                    $suffix = addEditGetSuffix('TWOCOL_FIRSTCOL_CHECKBOX_TITLE_SUFFIXED', $title, $mandatory);
                }
                $form['addedit_tmp_storage']['two_column']['current_column'] = 1; // increment current column
            } else if ($form['addedit_tmp_storage']['two_column']['current_column'] == 1) {
                if ($titlePrefixed == true) {
                    $prefix = addEditGetPrefix('TWOCOL_SECONDCOL_FIELD', $title, $mandatory);
                    $suffix = addEditGetSuffix('TWOCOL_SECONDCOL_FIELD');
                } else {
                    $prefix = addEditGetPrefix('TWOCOL_SECONDCOL_CHECKBOX_TITLE_SUFFIXED');
                    $suffix = addEditGetSuffix('TWOCOL_SECONDCOL_CHECKBOX_TITLE_SUFFIXED', $title, $mandatory);
                }
                $form['addedit_tmp_storage']['two_column']['current_column'] = 2; // increment current column
            } else {
                throw new Exception('exp_sp_administration.inc : addCheckBoxToAddEditForm() : Attempt to add a third field to a two column row.');
            }
        }
        
        $prefix    = '<span class="' . $prefixClass . '" >' . $title . ':<img src="/sites/all/themes/core/expertusoneV2/expertusone-internals/images/help-info.png" class="vtip info-enr-upload"  ></span>';
        $form[$id] = array(
            '#type' => 'checkbox',
            '#prefix' => $prefix,
            '#suffix' => '',
            '#title' => $title,
            '#title_display' => 'invisible',
            '#default_value' => $defaultValue,
            '#disabled' => $readOnly,
            '#attributes' => $attributes
        );
    }
    catch (Exception $ex) {
        watchdog_exception('addCheckBoxToAddEditForm', $ex);
        expertusErrorThrow($ex);
    }
}

/* Function to check if the name given to the presentation content already exists */
function addEditContentAuthorPreValidate($mode, $title, $content_id = '')
{
    try {
        if ($mode == "Add") {
            $content_id = db_query("select id from slt_content_master  order by id DESC limit 1  ")->fetchField();
            $content_id += 1;
        }
        
        $select = db_select("slt_content_master", "cont");
        $select->addField('cont', 'id', 'cont_id');
        $select->addField('cont', 'code', 'cont_name');
        $select->condition('cont.type', 'lrn_cnt_typ_knc');
        $select->condition('cont.code', $title);
        if (!empty($content_id)) {
            $select->condition('cont.id', array(
                $content_id
            ), 'NOT IN');
        }
        
        $contList       = $select->execute()->fetchAll();
        $count_contList = count($contList);
        
        if ($count_contList != 0 && $mode == "Edit") {
            echo "{\"status\":\"Title already exists.\",\"id\":" . $content_id . "}";
            exit();
        } else if ($count_contList != 0 && $mode == "Add") {
            $title1 = $title . '-' . $content_id;
            return $title1;
        } else
            return $title;
    }
    catch (Exception $ex) {
        watchdog_exception('addEditContentAuthorPreValidate', $ex);
        expertusErrorThrow($ex);
    }
}

function presentation_cdn_videoStream($h5pId,$jsonData,$from){
	$numberOfSlides = count($jsonData['presentation']['slides']);
	if($numberOfSlides > 0){
		expDebug::dPrint('This is presentation json data');
		for($k = 0; $k < $numberOfSlides; $k++)
		{
		for($i = 0; $i < count($jsonData['presentation']['slides'][$k]['elements']); $i++)
		{
		$qrow = $jsonData['presentation']['slides'][$k]['elements'][$i];
		if($qrow["action"]["library"] == "H5P.Video 1.2")
		{
		$cdnUploadFile   = '';
		$CDNuploadfolder = '';
		$localStorePath = '';
		$setFileExit = '';
			$url_arr =  array();
			$url_arr1 =  array();
			$fileName = $jsonData['presentation']['slides'][$k]['elements'][$i]['action']['params']['sources'][0]['path'];
			$url_arr  = explode("^^^", $fileName);
			expDebug::dPrint('file name for presentation video'. print_r($url_arr, true), 4);
					$url_arr1  = explode("/", $url_arr[1]);
							expDebug::dPrint('file name for presentation video'. print_r($url_arr1, true), 4);
			$localStorePath = $_SERVER["DOCUMENT_ROOT"] . '/sites/default/files/contentupload/'.$h5pId.'/videos/'.$url_arr1[1];
			
			
			if($from == 'CDN')
			{
			$setFileExit = './sites/default/files/contentupload/videos/'.$h5pId;
			$CDNuploadfolder = str_replace('./sites/default/files/contentupload', '', $setFileExit);
			 
			$cdnUploadFile = fopen($localStorePath, 'r');
					 
					$rackspace_cloud_region    = variable_get('rackspace_cloud_region');
					$rackspace_cloud_container = variable_get('rackspace_cloud_container');
					 
					expDebug::dPrint(' Upload Content to CDN - $rackspace_cloud_container->' . print_r($rackspace_cloud_container, true), 4);
					expDebug::dPrint(' Upload Content to CDN - $rackspace_cloud_region->' . print_r($rackspace_cloud_region, true), 4);
			 
			$client = initializeCDN();
			$client->authenticate();
			$object_store_service = $client->objectStoreService('cloudFiles', $rackspace_cloud_region);
			$container            = $object_store_service->getContainer($rackspace_cloud_container);
			expDebug::dPrint("hello11111:" . $CDNuploadfolder . "===" . $url_arr1[1] . "====" . $cdnUploadFile);
			 
			$container->uploadObject('/' . $CDNuploadfolder . '/' . $url_arr1[1], $cdnUploadFile);
			
			}
			else{
				
				
			//	$setNewDirectory = 'h5peditor/videos/Testing_video_102/Testing_video.mp4';
				$gutil          = new GlobalUtil();
				$geturlpath     = $gutil->getConfig();
				$pathFromini    = $geturlpath["content_upload_path"];
			//	$urlpath        = $pathFromini . '/' . $setNewDirectory;
			//	$localStorePath = $urlpath;
				
				$ffmpeg_home    = getConfigValue("ffmpeg_home") . '/bin';
				
				
				$site_name   = variable_get('site_name');
				$source_path = $urlpath;
				$config      = getConfig("exp_sp");
				 
				//getting configuration things start here.
				 
				//$red5_server_on = $config["red5_server_on"];
				$red5_server_path = $config["red5_server_path"];
				$conversion_needed     = getConfigValue("convert_video_for_mobile_access");
				$conversion_background = getConfigValue("convert_video_on_background");
				
				//Adding the required parameters
				$source_path = $localStorePath;
				$flDir = $h5pId . '/videos';
				$fileName = $url_arr1[1];
				
				 
				/*  include_once(drupal_get_path('module', 'exp_sp_administration_module_info') . '/exp_sp_administration_module_info.inc');*/
				$module_name          = array(
						'exp_sp_stream_server'
				);
				$stream_server_status = getDrupalModuleStatus($module_name);
				expDebug::dPrint('$stream_server_status = ' . print_r($stream_server_status, true), 4);
				 
				if ($stream_server_status == 1) {
					$stream_server = true;
				} else {
					$stream_server = false;
				}
				//if streaming_server is in off status we need to convert in a single format for mobile purpose
				expDebug::dPrint('$stream_server_status111222 = ' .$source_path ."====" .$folder_path . "====" .$fileName, 4);
				
				if (($conversion_background == "1") && ($conversion_needed == "1")) {
					//modules/exp_sp_administration/exp_sp_administration_manage/exp_sp_administration_content/exp_sp_administration_content.inc
					///sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_manage/exp_sp_administration_content/exp_sp_administration_content.inc
					include_once($_SERVER["DOCUMENT_ROOT"] . '/sites/all/modules/core/exp_sp_core/modules/exp_sp_administration/exp_sp_administration_manage/exp_sp_administration_content/exp_sp_administration_content.inc');
					convertVideoForRed5Server($source_path, $folder_path, $fileName, $ffmpeg_home, $flDir, $stream_server);
					copy($source_path, $desination_path);
				}
				
				
				
				
				
			}
		}
	  }
	}
  }
}



?>
