<?php
/**
 * @file
 * custom_meta. Hans.Gutknecht@mlssoccer.com
 */

/**
 * Implements hook_permission().
 *
 */
function custom_meta_permission() {
  return array(
    'administer custom meta settings' => array(
      'title' => t('administer custom meta settings')
    )
  );
}

/**
 * Implements hook_init.
 * Places defined custom meta tags in the head of the document for non-administration pages.
 *
 */
function custom_meta_init() {
  global $user;
if(drupal_is_front_page() || arg(1) == "catalog-search") {
	expDebug::dPrint("Inside the loop, only for Home and Catalog Pages",5);
	
	//To check whether 'Catalog Learner' permission is set for Anonymous User.
	$is_anonymous_user_catalog = is_anonymous_user_catalog();
	expDebug::dPrint("is_anonymous_user_catalog function returns - ".$is_anonymous_user_catalog,5);
	
  $markup = '';
  $token_data = array();
  $meta_tags = custom_meta_get_tags(NULL);
  
  // Place tags in html head if not in admin section
  if ($meta_tags && arg(0) != 'admin') {
    $token_data['node'] = menu_get_object();
    $token_data['user'] = $user;
    $token_data['term'] = (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))) ? taxonomy_term_load(arg(2)) : NULL;
expDebug::dPrint('markup 1= '.print_r($meta_tags, true) , 4);
    foreach ($meta_tags as $key => $meta_tag) {
    	
    	$page=$meta_tag['page'];   	
    	$tag = '';
    	    	
    	if((arg(0)=="learning") && (arg(1)=="catalog-search") && ($page == "catalog") && ($is_anonymous_user_catalog == '1')) {    //For Catalog page		
    		$tag = '<meta ' . check_plain($meta_tag['meta_attr']) . '="description" content="' . check_plain($meta_tag['meta_content']) . '">';
    	}
    	if(drupal_is_front_page() && $page=='home'){  //For Home page
    			
     	expDebug::dPrint('home meta attr = '.print_r($meta_tag['meta_attr'], 1) , 4);
     	expDebug::dPrint('home meta value = '.print_r($meta_tag['meta_attr_value'], 1) , 4);
     	
        $tag = '<meta ' . check_plain($meta_tag['meta_attr']) . '="description" content="' . check_plain($meta_tag['meta_content']) . '">';
       }
      $tag = token_replace($tag, array('node' => $token_data['node'], 'user' => $token_data['user'], 'term' => $token_data['term']), array('sanitize' => TRUE, 'clear' => TRUE));
      $markup .= $tag;
      expDebug::dPrint('markup = '.print_r($markup, true) , 4);
    }
  }
    
  expDebug::dPrint('markup = '.print_r($markup, true) , 4);
  $all_tags = array(
    '#type' => 'markup',
    '#markup' => $markup
  );

  drupal_add_html_head($all_tags, 'custom_meta_tags');
}
}

/**
 * Implements hook_menu().
 *
 */
function custom_meta_menu() {
  $items = array();

  
  $items['admin/config/search/custom_meta/home'] = array(
  		'type' => MENU_NORMAL_ITEM,
  		'title' => 'Custom Meta Tag Settings',
  		'description' => 'Settings for custom_meta',
  		'page callback' => 'drupal_get_form',
  		'page arguments' => array('custom_meta_form'),
  		'file' => 'custom_meta.admin.inc',
  		'access callback' => 'user_access',
  		'access arguments' => array('administer custom meta settings'),
  );
  
  $items['admin/config/search/custom_meta'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Custom Meta Tag Settings',
    'description' => 'Settings for custom_meta',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_meta_form'),
    'file' => 'custom_meta.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer custom meta settings'),
  );

  $items['admin/config/search/custom_meta/edit/%'] = array(
    'title' => 'Meta Settings Edit Tag',
    'description' => 'Re-configure existing tags.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_meta_edit_form', 5),
    'file' => 'custom_meta.admin.inc',
    'access arguments' => array('administer custom meta settings'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/search/custom_meta/remove/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_meta_remove_tag', 5),
    'file' => 'custom_meta.admin.inc',
    'access arguments' => array('administer custom meta settings'),
    'type' => MENU_CALLBACK,
  );
  
  

  return $items;
}

/**
 * custom_meta_get_tags
 * Get a single tag or all custom tags from the db.
 *
 * @param $id (int) unique id of a tag in the db.
 * @return returns array of specified tag or all tags.
 */
function custom_meta_get_tags($id = '') {
  $return = '';
  if ($id) {
    $result = db_query("SELECT * FROM {custom_meta} WHERE meta_uid=:id", array(':id' => $id));
    return $result->fetchAssoc();
  }
  else {
    $result = db_query("SELECT * FROM {custom_meta}");
    while ($row = $result->fetchAssoc()) {
      $return[] = $row;
    }
    return $return;
  }
}

/**
 * custom_meta_set_tag
 * Set the custom tags to the db.
 *
 * @param $attr
 * @param $attr_value
 * @param $meta_content
 */
function custom_meta_set_tag($attr, $attr_value, $meta_content) {
  db_insert('custom_meta')
    ->fields(array(
      'meta_attr' => $attr,
      'meta_attr_value' => $attr_value,
      'meta_content' => $meta_content
    ))
    ->execute();
}

/**
 * custom_meta_remove_tag
 * Deletes the tag from the database.
 */
function custom_meta_remove_tag() {
  $id = arg(5);
  db_delete('custom_meta')
    ->condition('meta_uid', $id)
    ->execute();
  drupal_set_message(t('Tag removed.'));
  drupal_goto('admin/config/search/custom_meta');
}
