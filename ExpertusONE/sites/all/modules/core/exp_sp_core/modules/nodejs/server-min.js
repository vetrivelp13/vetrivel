var request=require("request"),url=require("url"),fs=require("fs"),express=require("express"),socket_io=require("socket.io"),util=require("util"),querystring=require("querystring"),vm=require("vm");var channels={},authenticatedClients={},clientPresenceTimeoutIds={},settingsDefaults={scheme:"http",port:8080,host:"localhost",resource:"/socket.io",serviceKey:"",debug:false,baseAuthPath:"/nodejs/",publishUrl:"publish",kickUserUrl:"user/kick/:uid",logoutUserUrl:"user/logout",addUserToChannelUrl:"user/channel/add/:channel/:uid",removeUserFromChannelUrl:"user/channel/remove/:channel/:uid",addChannelUrl:"channel/add/:channel",removeChannelUrl:"channel/remove/:channel",setUserPresenceListUrl:"user/presence-list/:uid/:uidList",addAuthTokenToChannelUrl:"authtoken/channel/add/:channel/:uid",removeAuthTokenFromChannelUrl:"authtoken/channel/remove/:channel/:uid",toggleDebugUrl:"debug/toggle",contentTokenUrl:"content/token",publishMessageToContentChannelUrl:"content/token/message",getContentTokenUsersUrl:"content/token/users",extensions:["drupalchat_nodejs.server.extension"],clientsCanWriteToChannels:false,clientsCanWriteToClients:true,transports:["websocket","flashsocket","htmlfile","xhr-polling","jsonp-polling"],jsMinification:true,jsEtag:true,flashPolicy:{port:10843},backend:{host:"localhost",scheme:"http",port:80,basePath:"",messagePath:"/?q=nodejs/message"},logLevel:1,drupalchatNodejs:{showUserPicture:true}},extensions=[];
try{var settings=vm.runInThisContext(fs.readFileSync(process.cwd()+"/nodejs.config.js"));}catch(exception){console.log("server.js : Failed to read config file, exiting: "+exception);process.exit(1);}for(var key in settingsDefaults){if(key!="backend"&&key!="flashPolicy"&&!settings.hasOwnProperty(key)){settings[key]=settingsDefaults[key];}}if(!settings.hasOwnProperty("backend")){settings.backend=settingsDefaults.backend;}else{for(var key2 in settingsDefaults.backend){if(!settings.backend.hasOwnProperty(key2)){settings.backend[key2]=settingsDefaults.backend[key2];}}}if(!settings.hasOwnProperty("flashPolicy")){settings.flashPolicy=settingsDefaults.flashPolicy;}else{for(var key3 in settingsDefaults.flashPolicy){if(!settings.flashPolicy.hasOwnProperty(key3)){settings.flashPolicy[key3]=settingsDefaults.flashPolicy[key3];}}}if(settings.debug){console.log("server.js : settings = ",settings);}for(var i in settings.extensions){try{extensions.push(require(__dirname+"/"+settings.extensions[i]));if(settings.debug){console.log("server.js : Extension loaded: ",settings.extensions[i]);
}}catch(exception){console.log("server.js : Failed to load extension: "+settings.extensions[i]+" ["+exception+"]");process.exit(1);}}var channelIsClientWritable=function(a){if(channels.hasOwnProperty(a)){return channels[a].isClientWritable;}return false;};var getBackendUrl=function(){return settings.backend.scheme+"://"+settings.backend.host+":"+settings.backend.port+settings.backend.messagePath;};var sendMessageToBackend=function(b,d){var c=querystring.stringify({messageJson:JSON.stringify(b),serviceKey:settings.serviceKey});var a={uri:settings.backend.scheme+"://"+settings.backend.host+":"+settings.backend.port+settings.backend.messagePath,body:c,headers:{"Content-Length":Buffer.byteLength(c),"Content-Type":"application/x-www-form-urlencoded"}};request.post(a,d);};var authenticateClient=function(a,b){if(settings.debug){console.log("server.js : authenticateClient() : called with client.id and message.authToken = ",a.id,b.authToken);}if(authenticatedClients[b.authToken]){if(settings.debug){console.log("server.js : authenticateClient() : Client's Drupal sid is already authenticated by backend. Setting up client connection.");
}setupClientConnection(a.id,authenticatedClients[b.authToken],b.contentTokens);}else{if(settings.debug){console.log("server.js : authenticateClient() : Sending authenticate message to backend");}b.messageType="authenticate";b.clientId=a.id;sendMessageToBackend(b,authenticateClientCallback);}};var authenticateClientCallback=function(c,b,a){if(c){console.log("server.js : authenticateClientCallback() : Error with authenticate client request: ",c);return;}if(b.statusCode==404){if(settings.debug){console.log("server.js : authenticateClientCallback() : Backend authentication url not found, full response info: ",b);}else{console.log("server.js : authenticateClientCallback() : Backend authentication url not found.");}return;}var f=false;try{f=JSON.parse(a);}catch(d){console.log("server.js : authenticateClientCallback() : Failed to parse authentication message:",d);if(settings.debug){console.log("server.js : authenticateClientCallback() : Failed message string: "+a);}return;}if(f.error){console.log("server.js : authenticateClientCallback() : Message rejected by Drupal server nodejs module with error = ",f.error);
if(f.clientId&&io.sockets.sockets[f.clientId]){io.sockets.sockets[f.clientId].emit("exp-auth-failed",{reason:f.error});}return;}if(!checkServiceKey(f.serviceKey)){console.log('server.js : authenticateClientCallback() : Invalid service key from backend "',f.serviceKey,'"');if(f.clientId&&io.sockets.sockets[f.clientId]){io.sockets.sockets[f.clientId].emit("exp-auth-failed",{reason:"invalid service key received from backend"});}return;}if(f.nodejsValidAuthToken){if(settings.debug){console.log('server.js : authenticateClientCallback() : Valid login for uid "',f.uid,'"');}setupClientConnection(f.clientId,f,f.contentTokens);authenticatedClients[f.authToken]=f;}else{console.log('server.js : authenticateClientCallback() : Invalid login for uid "',f.uid,'"');if(f.clientId&&io.sockets.sockets[f.clientId]){io.sockets.sockets[f.clientId].emit("exp-auth-failed",{reason:"invalid login"});}delete authenticatedClients[f.authToken];}};var sendPresenceChangeNotification=function(a,b){};var checkServiceKeyCallback=function(c,a,b){if(checkServiceKey(c.header("NodejsServiceKey",""))){b();
}else{a.send({error:"Invalid service key."});}};var checkServiceKey=function(a){if(settings.serviceKey&&a!=settings.serviceKey){console.log('server.js : checkServiceKey() : Invalid service key "'+a+'", expecting "'+settings.serviceKey+'"');return false;}return true;};var getContentTokenUsers=function(b,a){var c="";b.setEncoding("utf8");b.on("data",function(d){c+=d;});b.on("end",function(){try{var f=JSON.parse(c);a.send({users:getContentTokenChannelUsers(f.channel)});}catch(d){console.log('server.js : getContentTokensUsers() : Invalid JSON "'+c+'"',d);a.send({error:"Invalid JSON, error: "+d.toString()});}});};var toggleDebug=function(b,a){var c="";b.setEncoding("utf8");b.on("data",function(d){c+=d;});b.on("end",function(){try{var d=JSON.parse(c);settings.debug=d.debug;a.send({debug:d.debug});}catch(f){console.log('server.js : toggleDebug() : Invalid JSON "'+c+'"',f);a.send({error:"Invalid JSON, error: "+e.toString()});}});};var publishMessage=function(c,a){var b=0,d="";c.setEncoding("utf8");
c.on("data",function(f){d+=f;});c.on("end",function(){try{var g=JSON.parse(d);}catch(f){console.log('server.js : publishMessage() : Invalid JSON "'+d+'"',f);a.send({error:"Invalid JSON, error: "+f.toString()});return;}if(g.broadcast){if(settings.debug){console.log("server.js : publishMessage() : Broadcasting message");}io.sockets.json.send(g);b=io.sockets.sockets.length;}else{b=publishMessageToChannel(g);}process.emit("message-published",g,b);a.send({sent:b});});};var publishMessageToChannel=function(a){if(!a.hasOwnProperty("channel")){console.log("server.js : publishMessageToChannel() : An invalid message object was provided.");return 0;}if(a.channel=="expertus-chat-server"){if(settings.debug){console.log("server.js : publishMessageToChannel() : Msg for chat server xtn. It will be processed & responded to by chat server xtn");}return 0;}if(!channels.hasOwnProperty(a.channel)){console.log('server.js : publishMessageToChannel() : The channel "'+a.channel+"\" doesn't exist.");return 0;}var c=0;
for(var b in channels[a.channel].sessionIds){if(publishMessageToClient(b,a)){c++;}}if(settings.debug){console.log("server.js : publishMessageToChannel() : Sent message to "+c+' clients in channel "'+a.channel+'"');}return c;};var publishMessageToContentChannel=function(c,a){var b=0,d="";c.setEncoding("utf8");c.on("data",function(f){d+=f;});c.on("end",function(){try{var g=JSON.parse(d);}catch(f){console.log('server.js : publishMessageToContentChannel() : Invalid JSON "'+d+'"',f);a.send({error:"Invalid JSON, error: "+f.toString()});return;}if(!g.hasOwnProperty("channel")){console.log("server.js : publishMessageToContentChannel() : An invalid message object was provided.");a.send({error:"Invalid message"});return;}a.send({sent:"sent"});});};var publishMessageToClient=function(b,a){if(io.sockets.sockets[b]){io.sockets.socket(b).json.send(a);return true;}else{console.log("server.js : publishMessageToClient() : Failed to find client "+b);}};var queueAndPublishMessageToClient=function(c,a,b){if(typeof io.sockets.sockets[c].msgAckTimeoutId!="undefined"||typeof io.sockets.sockets[c].publishMsgBatchTimeoutId!="undefined"||typeof io.sockets.sockets[c].msgsQueue!="undefined"){if(typeof io.sockets.sockets[c].msgsQueue=="undefined"){io.sockets.sockets[c].msgsQueue=[];
}io.sockets.sockets[c].msgsQueue.push({"msgsource-nodejs-xtn":b,message:a});return;}process.emit("render-message",c,a,b);a.ack=true;publishMessageToClient(c,a);if(settings.debug){console.log("server.js : queueAndPublishMessageToClient() : setting msgAckTimeout for sessionId = ",c);}io.sockets.sockets[c].msgAckTimeoutId=setTimeout(msgNotAcknowledged,settings.msgAckTimeoutAfter,c);};var msgAcknowledged=function(a){if(typeof io.sockets.sockets[a].msgAckTimeoutId!="undefined"){console.log("server.js : msgAcknowledged() : clearing msgAckTimeoutId");clearTimeout(io.sockets.sockets[a].msgAckTimeoutId);}delete io.sockets.sockets[a].msgAckTimeoutId;if(typeof io.sockets.sockets[a].msgsQueue!="undefined"){if(settings.debug){console.log("server.js : msgAcknowledged() : setting publishMsgBatchTimeoutId for sessionId = ",a);}io.sockets.sockets[a].publishMsgBatchTimeoutId=setTimeout(publishNextMsgBatchToClient,settings.publishNextMsgsBatchAfter,a);}};var publishNextMsgBatchToClient=function(f){delete io.sockets.sockets[f].publishMsgBatchTimeoutId;
if(typeof io.sockets.sockets[f].msgsQueue!="undefined"){var b=io.sockets.sockets[f].msgsQueue.length<settings.publishQueuedMsgsBatchSize?io.sockets.sockets[f].msgsQueue.length:settings.publishQueuedMsgsBatchSize;for(var a=0;a<b;a++){var d=io.sockets.sockets[f].msgsQueue[a]["msgsource-nodejs-xtn"];var c=io.sockets.sockets[f].msgsQueue[a]["message"];process.emit("render-message",f,c,d);if(a==(b-1)){c.ack=true;}publishMessageToClient(f,c);}if(b==io.sockets.sockets[f].msgsQueue.length){delete io.sockets.sockets[f].msgsQueue;}else{io.sockets.sockets[f].msgsQueue.splice(0,b);}if(b>0){if(settings.debug){console.log("server.js : publishNextMsgBatchToClient() : setting msgAckTimeout for sessionId = ",f);}io.sockets.sockets[f].msgAckTimeoutId=setTimeout(msgNotAcknowledged,settings.msgAckTimeoutAfter,f);}}};var msgNotAcknowledged=function(a){if(settings.debug){console.log("server.js : msgNotAcknowledged() : disconnecting socket connection for sessionId = "+a);}io.sockets.sockets[a].disconnect();};
var dropMsgQueue=function(a){if(typeof io.sockets.sockets[a].msgAckTimeoutId!="undefined"){console.log("server.js : dropMsgQueue() : clearing msgAckTimeoutId as set for sessionId = ",a);clearTimeout(io.sockets.sockets[a].msgAckTimeoutId);}delete io.sockets.sockets[a].msgAckTimeoutId;if(typeof io.sockets.sockets[a].publishMsgBatchTimeoutId!="undefined"){console.log("server.js : dropMsgQueue() : clearing publishMsgBatchTimeoutId as set for sessionId = ",a);clearTimeout(io.sockets.sockets[a].publishMsgBatchTimeoutId);}delete io.sockets.sockets[a].publishMsgBatchTimeoutId;if(settings.debug){console.log("server.js : dropMsgQueue() : deleting msgsQueue for sessionId = ",a);}delete io.sockets.sockets[a].msgsQueue;};var send404=function(b,a){a.send("Not Found.",404);};var kickUser=function(f,b){if(f.params.uid){for(var c in authenticatedClients){if(authenticatedClients[c].uid==f.params.uid){delete authenticatedClients[c];}}for(var a in io.sockets.sockets){if(io.sockets.sockets[a].uid==f.params.uid){delete io.sockets.sockets[a];
if(settings.debug){console.log('server.js : kickUser() : deleted socket "'+a+'" for uid "'+f.params.uid+'"');}for(var d in channels){delete channels[d].sessionIds[a];}}}b.send({status:"success"});return;}console.log("server.js : kickUser() : Failed to kick user, no uid supplied");b.send({status:"failed",error:"missing uid"});};var logoutUser=function(b,a){var c="";b.setEncoding("utf8");b.on("data",function(d){c+=d;});b.on("end",function(){try{var p=JSON.parse(c);}catch(g){console.log('server.js : logoutUser() : Invalid JSON "'+c+'"',g);a.send({error:"Invalid JSON, error: "+g.toString()});return;}if(!(p.hasOwnProperty("authToken")&&p.hasOwnProperty("uid")&&p.hasOwnProperty("name")&&typeof p.authToken=="string"&&p.authToken.length>0&&p.uid>0&&typeof p.name=="string"&&p.name.length>0)){console.log("server.js : logoutUser() : An invalid userInfo object was provided ",p);a.send({error:"Invalid or incomplete userInfo"});return;}var o=p.authToken;var m=p.uid;var k=p.name;if(clientPresenceTimeoutIds[o]){clearTimeout(clientPresenceTimeoutIds[o]);
}delete clientPresenceTimeoutIds[o];var l=[];for(var d in io.sockets.sockets){if(typeof io.sockets.sockets[d].authToken!="undefined"&&io.sockets.sockets[d].authToken==o){l.push(d);}}var f=false;for(var h in authenticatedClients){if(authenticatedClients[h].username==k&&h!=o){f=true;}}for(var j=0;j<l.length;j++){if(settings.debug){console.log("server.js : logoutUser() : dropping msg queue for socket.id = ",l[j]);}dropMsgQueue(l[j]);}if(settings.debug){console.log("server.js : logoutUser() : emmitting user-logged-out with args ",m,k,o,l,f);}process.emit("user-logged-out",m,k,o,l,f);delete authenticatedClients[o];for(var j=0;j<l.length;j++){delete io.sockets.sockets[l[j]];for(var n in channels){delete channels[n].sessionIds[l[j]];if(Object.getOwnPropertyNames(channels[n].sessionIds).length==0){delete channels[n];}}}a.send({status:"success"});});};var getContentTokenChannelUsers=function(a){var b={uids:[],authTokens:[]};return b;};var getNodejsSessionIdsFromUid=function(b){var a=[];for(var c in io.sockets.sockets){if(io.sockets.sockets[c].uid==b){a.push(c);
}}return a;};var getNodejsSessionIdsFromAuthToken=function(b){var a=[];for(var c in io.sockets.sockets){if(io.sockets.sockets[c].authToken==b){a.push(c);}}return a;};var addUserToChannel=function(h,b){var f=h.params.uid||"";var g=h.params.channel||"";if(f&&g){if(!/^\d+$/.test(f)){console.log("server.js : addUserToChannel() : Invalid uid: "+f);b.send({status:"failed",error:"Invalid uid."});return;}if(!/^[a-z0-9_]+$/i.test(g)){console.log("server.js : addUserToChannel() : Invalid channel: "+g);b.send({status:"failed",error:"Invalid channel name."});return;}channels[g]=channels[g]||{sessionIds:{}};var a=getNodejsSessionIdsFromUid(f);if(a.length>0){for(var d in a){channels[g].sessionIds[a[d]]=a[d];}if(settings.debug){console.log("server.js : addUserToChannel() : Added channel '"+g+"' to sessionIds "+a.join());}b.send({status:"success"});}else{console.log("server.js : addUserToChannel() : No active sessions for uid: "+f);b.send({status:"failed",error:"No active sessions for uid."});}for(var c in authenticatedClients){if(authenticatedClients[c].uid==f){if(authenticatedClients[c].channels.indexOf(g)==-1){authenticatedClients[c].channels.push(g);
if(settings.debug){console.log("server.js : addUserToChannel() : Added channel '"+g+"' authenticatedClients");}}}}}else{console.log("server.js : addUserToChannel() : Missing uid or channel");b.send({status:"failed",error:"Missing uid or channel"});}};var addAuthTokenToChannel=function(g,b){var d=g.params.authToken||"";var f=g.params.channel||"";if(!d||!f){console.log("server.js : addAuthTokenToChannel() : Missing authToken or channel");b.send({status:"failed",error:"Missing authToken or channel"});return;}if(!/^[a-z0-9_]+$/i.test(f)){console.log("server.js : addAuthTokenToChannel() : Invalid channel: "+f);b.send({status:"failed",error:"Invalid channel name."});return;}if(!authenticatedClients[d]){console.log("server.js : addAuthTokenToChannel() : Unknown authToken : "+d);b.send({status:"failed",error:"Invalid authToken."});return;}channels[f]=channels[f]||{sessionIds:{}};var a=getNodejsSessionIdsFromAuthtoken(d);if(a.length>0){for(var c in a){channels[f].sessionIds[a[c]]=a[c];}if(settings.debug){console.log("server.js : addAuthTokenToChannel() : Added sessionIds '"+a.join()+"' to channel '"+f+"'");
}b.send({status:"success"});}else{console.log("server.js : addAuthTokenToChannel() : No active sessions for authToken: "+d);b.send({status:"failed",error:"No active sessions for uid."});}if(authenticatedClients[d].channels.indexOf(f)==-1){authenticatedClients[d].channels.push(f);if(settings.debug){console.log("server.js : addAuthTokenToChannel() : Added channel '"+f+"' to authenticatedClients");}}};var addClientToChannel=function(b,a){if(b&&a){if(!/^[0-9]+$/.test(b)||!io.sockets.sockets.hasOwnProperty(b)){console.log("server.js : addClientToChannel() : Invalid sessionId: "+b);}else{if(!/^[a-z0-9_]+$/i.test(a)){console.log("server.js : addClientToChannel() : Invalid channel: "+a);}else{channels[a]=channels[a]||{sessionIds:{}};channels[a].sessionIds[b]=b;if(settings.debug){console.log("server.js : addClientToChannel() : Added channel '"+a+"' to sessionId "+b);}return true;}}}else{console.log("server.js : addClientToChannel() : Missing sessionId or channel name");}return false;};var removeChannel=function(c,a){var b=c.params.channel||"";
if(b){if(!/^[a-z0-9_]+$/i.test(b)){console.log("server.js : removeChannel() : Invalid channel: "+b);a.send({status:"failed",error:"Invalid channel name."});return;}if(channels[b]){delete channels[b];if(settings.debug){console.log("server.js : removeChannel() : Successfully removed channel '"+b+"'");}a.send({status:"success"});}else{console.log("server.js : removeChannel() : Non-existent channel name '"+b+"'");a.send({status:"failed",error:"Non-existent channel name."});return;}}else{console.log("server.js : removeChannel() : Missing channel");a.send({status:"failed",error:"Invalid data: missing channel"});}};var addChannel=function(c,a){var b=c.params.channel||"";if(b){if(!/^[a-z0-9_]+$/i.test(b)){console.log("server.js : addChannel() : Invalid channel: "+b);a.send({status:"failed",error:"Invalid channel name."});return;}if(channels[b]){console.log("server.js : addChannel() : Channel name '"+b+"' already exists.");a.send({status:"failed",error:"Channel name '"+b+"' already exists."});return;
}channels[b]={sessionIds:{}};if(settings.debug){console.log("server.js : addChannel() : Successfully added channel '"+b+"'");}a.send({status:"success"});}else{console.log("server.js : addChannel() : Missing channel");a.send({status:"failed",error:"Invalid data: missing channel"});}};var removeUserFromChannel=function(j,b){var g=j.params.uid||"";var h=j.params.channel||"";if(g&&h){if(!/^\d+$/.test(g)){console.log("server.js : removeUserFromChannel() : Invalid uid: "+g);b.send({status:"failed",error:"Invalid uid."});return;}if(!/^[a-z0-9_]+$/i.test(h)){console.log("server.js : removeUserFromChannel() : Invalid channel: "+h);b.send({status:"failed",error:"Invalid channel name."});return;}if(channels[h]){var a=getNodejsSessionIdsFromUid(g);for(var f in a){if(channels[h].sessionIds[a[f]]){delete channels[h].sessionIds[a[f]];}}for(var d in authenticatedClients){if(authenticatedClients[d].uid==g){var c=authenticatedClients[d].channels.indexOf(h);if(c!=-1){delete authenticatedClients[d].channels[c];
}}}if(settings.debug){console.log("server.js : removeUserFromChannel() : Successfully removed uid '"+g+"' from channel '"+h+"'");}b.send({status:"success"});}else{console.log("server.js : removeUserFromChannel() : Non-existent channel name '"+h+"'");b.send({status:"failed",error:"Non-existent channel name."});return;}}else{console.log("server.js : removeUserFromChannel() : Missing uid or channel");b.send({status:"failed",error:"Invalid data"});}};var removeAuthTokenFromChannel=function(h,b){var f=h.params.authToken||"";var g=h.params.channel||"";if(f&&g){if(!authenticatedClients[f]){console.log("server.js : removeAuthTokenFromChannel() : Invalid authToken: "+uid);b.send({status:"failed",error:"Invalid authToken."});return;}if(!/^[a-z0-9_]+$/i.test(g)){console.log("server.js : removeAuthTokenFromChannel() : Invalid channel: "+g);b.send({status:"failed",error:"Invalid channel name."});return;}if(channels[g]){var a=getNodejsSessionIdsFromAuthToken(f);for(var d in a){if(channels[g].sessionIds[a[d]]){delete channels[g].sessionIds[a[d]];
}}if(authenticatedClients[f]){var c=authenticatedClients[f].channels.indexOf(g);if(c!=-1){delete authenticatedClients[f].channels[c];}}if(settings.debug){console.log("server.js : removeAuthTokenFromChannel() : Successfully removed authToken '"+f+"' from channel '"+g+"'.");}b.send({status:"success"});}else{console.log("server.js : removeAuthTokenFromChannel() : Non-existent channel name '"+g+"'");b.send({status:"failed",error:"Non-existent channel name."});return;}}else{console.log("server.js : removeAuthTokenFromChannel() : Missing authToken or channel");b.send({status:"failed",error:"Invalid data"});}};var removeClientFromChannel=function(b,a){if(b&&a){if(!/^[0-9]+$/.test(b)||!io.sockets.sockets.hasOwnProperty(b)){console.log("server.js : removeClientFromChannel() : Invalid sessionId: "+b);}else{if(!/^[a-z0-9_]+$/i.test(a)||!channels.hasOwnProperty(a)){console.log("server.js : removeClientFromChannel() : Invalid channel: "+a);}else{if(channels[a].sessionIds[b]){delete channels[channels].sessionIds[b];
if(settings.debug){console.log("server.js : removeClientFromChannel() : Removed sessionId '"+b+"' from channel '"+a+"'");}return true;}}}}else{console.log("server.js : removeClientFromChannel() : Missing sessionId or channel name");}return false;};var setUserPresenceList=function(b,c){var b=request.params.uid||"";var d=request.params.uidlist.split(",")||[];if(b&&d){if(!/^\d+$/.test(b)){console.log("server.js : setUserPresenceList() : Invalid uid: "+b);response.send({status:"failed",error:"Invalid uid."});return;}if(d.length==0){console.log("server.js : setUserPresenceList() : Empty uidlist");response.send({status:"failed",error:"Empty uid list."});return;}for(var a in d){if(!/^\d+$/.test(d[a])){console.log("server.js : setUserPresenceList() : Invalid uid: "+b);response.send({status:"failed",error:"Invalid uid."});return;}}response.send({status:"success"});}else{response.send({status:"failed",error:"Invalid parameters."});}};var cleanupSocket=function(a){for(var g in channels){delete channels[g].sessionIds[a.id];
if(Object.getOwnPropertyNames(channels[g].sessionIds).length==0){delete channels[g];}}var d=a.uid;var c=io.sockets.sockets[a.id].authToken?io.sockets.sockets[a.id].authToken:false;delete io.sockets.sockets[a.id];if(c!==false){var b=false;for(var f in io.sockets.sockets){if(typeof io.sockets.sockets[f].authToken!=="undefined"&&io.sockets.sockets[f].authToken==c){b=true;break;}}if(clientPresenceTimeoutIds[c]){clearTimeout(clientPresenceTimeoutIds[c]);}delete clientPresenceTimeoutIds[c];if(!b){if(settings.debug){console.log("server.js : cleanupSocket() : settingTimeout to check for client with authToken = ",c,settings.eraseDrupalAuthAfter);}clientPresenceTimeoutIds[c]=setTimeout(checkAuthenticatedClientStatus,settings.eraseDrupalAuthAfter,c);}else{if(settings.debug){console.log("server.js : cleanupSocket() : no need for settingTimeout to check for client with authToken = ",c);}}}};var checkAuthenticatedClientStatus=function(b){if(settings.debug){console.log("server.js : checkAuthenticatedClientStatus() : Checking presence of client with authToken = ",b);
}var a=false;for(var c in io.sockets.sockets){if(typeof io.sockets.sockets[c].authToken!=="undefined"&&io.sockets.sockets[c].authToken==b){a=true;break;}}if(!a){if(settings.debug){console.log("server.js : checkAuthenticatedClientStatus() : removing authToken entry from authenticatedClients as no more sockets associated with authToken = ",b);}delete authenticatedClients[b];}delete clientPresenceTimeoutIds[b];};var checkTokenChannelStatus=function(b,a){};var checkOnlineStatus=function(a){if(getNodejsSessionIdsFromUid(a).length==0){if(settings.debug){console.log("server.js : checkOnlineStatus() : Sending offline notification for ",a);}setUserOffline(a);}};var setUserOffline=function(a){sendPresenceChangeNotification(a,"offline");sendMessageToBackend({uid:a,messageType:"userOffline"},function(b){});};var setContentToken=function(b,a){var c="";b.setEncoding("utf8");b.on("data",function(d){c+=d;});b.on("end",function(){try{var f=JSON.parse(c);if(settings.debug){console.log("server.js : setContentToken() : message",f);
}}catch(d){console.log('server.js : setContentToken() : Invalid JSON "'+c+'"',d);a.send({error:"Invalid JSON, error: "+d.toString()});return;}a.send({status:"ok"});});};var setupClientConnection=function(d,c,a){if(settings.debug){console.log("server.js : setupClientConnection() : called with sessionId, authData.uid and contentTokens = ",d,c.uid,a);}if(!io.sockets.sockets[d]){console.log("server.js : setupClientConnection() : Client socket '"+d+"' went away.");console.log(c);return;}io.sockets.sockets[d].authToken=c.authToken;io.sockets.sockets[d].uid=c.uid;if(clientPresenceTimeoutIds[c.authToken]){if(settings.debug){console.log("server.js : setupClientConnection() : clearing clientPresenceTimeout for authToken = ",c.authToken);}clearTimeout(clientPresenceTimeoutIds[c.authToken]);}delete clientPresenceTimeoutIds[c.authToken];for(var b in c.channels){channels[c.channels[b]]=channels[c.channels[b]]||{sessionIds:{}};channels[c.channels[b]].sessionIds[d]=d;}if(settings.debug){console.log("server.js : setupClientConnection() : Emitting client-authenticated event with session id = ",d);
}process.emit("client-authenticated",d,c);if(d&&io.sockets.sockets[d]){io.sockets.sockets[d].emit("exp-authenticated",{status:"authenticated"});}};var server;if(settings.scheme=="https"){var sslOptions={key:fs.readFileSync(settings.sslKeyPath),cert:fs.readFileSync(settings.sslCertPath),passphrase:settings.passPhrase};if(settings.sslCAPath){sslOptions.ca=fs.readFileSync(settings.sslCAPath);}server=express.createServer(sslOptions);}else{server=express.createServer();}server.all(settings.baseAuthPath+"*",checkServiceKeyCallback);server.post(settings.baseAuthPath+settings.publishUrl,publishMessage);server.get(settings.baseAuthPath+settings.kickUserUrl,kickUser);server.post(settings.baseAuthPath+settings.logoutUserUrl,logoutUser);server.get(settings.baseAuthPath+settings.addUserToChannelUrl,addUserToChannel);server.get(settings.baseAuthPath+settings.removeUserFromChannelUrl,removeUserFromChannel);server.get(settings.baseAuthPath+settings.addChannelUrl,addChannel);server.get(settings.baseAuthPath+settings.removeChannelUrl,removeChannel);
server.post(settings.baseAuthPath+settings.toggleDebugUrl,toggleDebug);server.get("*",send404);server.listen(settings.port,settings.host);console.log("Started "+settings.scheme+" server.");var io=socket_io.listen(server,{port:settings.port,resource:settings.resource,"flash policy port":settings.flashPolicy.port});io.configure(function(){io.set("transports",settings.transports);io.set("log level",settings.logLevel);if(settings.jsEtag){io.enable("browser client etag");}if(settings.jsMinification){io.enable("browser client minification");}});io.sockets.on("connection",function(a){process.emit("client-connection",a.id);a.on("authenticate",function(b){if(settings.debug){console.log('server.js : socket.on authenticate : Authenticating client with key "'+b.authToken+'"');}authenticateClient(a,b);});a.on("message",function(b){if(io.sockets.sockets[a.id]&&b.hasOwnProperty("type")){if(settings.debug){console.log("server.js : socket.on message : Received message from client "+a.id);}if(b.hasOwnProperty("channel")){if(settings.clientsCanWriteToChannels||channelIsClientWritable(b.channel)){if(settings.debug){console.log("server.js : socket.on message : Emmitting client-message for message with channel");
}process.emit("client-message",a.id,b);}else{console.log("server.js : socket.on message : Received unauthorised message with channel from client: cannot write to channel "+a.id);}}else{if(settings.clientsCanWriteToClients){if(settings.debug){console.log("server.js : socket.on message : Emmitting message client-message");}process.emit("client-message",a.id,b);}else{console.log("server.js : socket.on message : Received unauthorised message from client: cannot write to client "+a.id);}}return;}});a.on("disconnect",function(){if(settings.debug){console.log("server.js : socket.on disconnect : dropping msg queue for socket.id",a.id);}dropMsgQueue(a.id);if(settings.debug){console.log("server.js : socket.on disconnect : Emitting client-disconnect event for socket.id = ",a.id);}process.emit("client-disconnect",a.id);cleanupSocket(a);});a.on("message-processed",function(){if(settings.debug){console.log("server.js : socket.on message-processed : socket.id = ",a.id);}msgAcknowledged(a.id);});}).on("error",function(a){console.log("server.js : io.socket.on error : Socket error ["+a+"]");
});var invokeExtensions=function(c){var a=arguments.length?Array.prototype.slice.call(arguments,1):[];for(var b in extensions){if(extensions[b].hasOwnProperty(c)&&extensions[b][c].apply){extensions[b][c].apply(this,a);}}};var extensionsConfig={publishMessageToChannel:publishMessageToChannel,publishMessageToClient:publishMessageToClient,queueAndPublishMessageToClient:queueAndPublishMessageToClient,dropMsgQueue:dropMsgQueue,addClientToChannel:addClientToChannel,settings:settings,channels:channels,io:io,sendMessageToBackend:sendMessageToBackend,authenticatedClients:authenticatedClients};invokeExtensions("setup",extensionsConfig);