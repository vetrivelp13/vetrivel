<?php
/**
 * Overriding password policy module menus.
 * 
 * Implementation of hook_menu().
 */
function exp_sp_formatter_password_menu() {
  try{
/*  $items['portalpages/sp_administrator/sys-admin/password-policy'] = array(
    'title' => 'Password policies',
    'description' => 'Configures policies for user account passwords.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_policy_admin_settings'),
    'access arguments' => array('administer password policies'),
    'weight' => 9,
    'file' => 'password_policy.admin.inc',
  	'file path' => drupal_get_path('module', 'password_policy'),
  );*/
  $items['portalpages/sp_administrator/sys-admin/password-policy/configure'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['portalpages/sp_administrator/sys-admin/password-policy/list'] = array(
    'title' => 'List',
    'description' => 'List all configured password policies.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_password_policy_admin_list'),
    'access arguments' => array('administer password policies'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    //'file' => 'password_policy.admin.inc',
  	//'file path' => drupal_get_path('module', 'password_policy'),
  );
  $items['portalpages/sp_administrator/sys-admin/password-policy/add'] = array(
    'title' => 'Add',
    'description' => 'Add a new password policy.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_password_policy_admin_form', NULL),
    'access arguments' => array('administer password policies'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'password_policy.admin.inc',
  	'file path' => drupal_get_path('module', 'password_policy'),
  );
  $items['portalpages/sp_administrator/sys-admin/password-policy/password-change'] = array(
    'title' => 'Force password change',
    'description' => 'Force users to change their password.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_policy_password_change_settings'),
    'access arguments' => array('force password change'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'password_policy.admin.inc',
  	'file path' => drupal_get_path('module', 'password_policy'),
  );
  $items['portalpages/sp_administrator/sys-admin/password-policy/%pp_policy'] = array(
    'title' => 'View',
    'type' => MENU_LOCAL_ACTION,
    'title callback' => 'password_policy_format_title',
    'title arguments' => array(4),
    'page callback' => 'password_policy_admin_view',
    'page arguments' => array(4),
    'access arguments' => array('administer password policies'),
    'file' => 'password_policy.admin.inc',
  	'file path' => drupal_get_path('module', 'password_policy'),
  );
  $items['portalpages/sp_administrator/sys-admin/password-policy/%pp_policy/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_password_policy_admin_form', 4),
    'access arguments' => array('administer password policies'),
    'weight' => 1,
    'file' => 'password_policy.admin.inc',
  	'file path' => drupal_get_path('module', 'password_policy'),
  );
  $items['portalpages/sp_administrator/sys-admin/password-policy/delete/%pp_policy'] = array(
    'title' => 'Delete',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_password_policy_admin_delete',5),
    'access arguments' => array('administer password policies'),
    'file' => 'password_policy.admin.inc',
  	'file path' => drupal_get_path('module', 'password_policy'),
  );
  $items['portalpages/sp_administrator/sys-admin/reset-password/%'] = array(
    'page callback' => 'format_user_pass_admin',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('Administration Perm'),
    'file' => 'password_policy.admin.inc',
  	'file path' => drupal_get_path('module', 'password_policy'),
  );
  $items['user/password/response'] = array(
	'title' => 'Request new password',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('format_user_pass_response'),
	'access callback' => TRUE,
	'type' => MENU_LOCAL_TASK,
   );
  return $items;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_formatter_password_menu', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
* Implementation of hook_menu_alter().
* Remember to clear the menu cache after adding/editing this function.
*/
function  exp_sp_formatter_password_menu_alter(&$items) {
	try{
  $items['user/password'] = array(
    'title' => 'Request new password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_user_pass'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/reset/%/%/%'] = array(
    'title' => t('Reset user password'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_user_pass_reset', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_formatter_password_menu_alter', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_form_alter().
 */
function exp_sp_formatter_password_form_alter(&$form, $form_state, $form_id) {
  try{
  if($form_id == 'format_user_pass' || $form_id == 'format_user_pass_reset') {
    $form['#prefix'] = '<div class="my-forgot-pass-frm">';
    $form['#suffix'] = '</div>';
  }
  if($form_id == 'format_user_pass') {
    drupal_set_title(t('MSG425'));
    $form['name']['#size'] = 25;
  }
  if($form_id == 'format_user_pass_reset') {
    drupal_set_title(t('Reset user password'));
    $form['#action'] = $form['#action'].'&destination=learning/reset-password';
  }

  }catch (Exception $ex) {
    watchdog_exception('exp_sp_formatter_password_form_alter', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Overriding password policy list page theme
 * 
 * Implements hook_theme(). 
 */
function exp_sp_formatter_password_theme() {
	try{
  return array(
    'format_password_policy_admin_list' => array(
      'render element' => 'form',
      //'file' => 'password_policy.admin.inc',
    ),
  );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_formatter_password_theme', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Overriding password policy list page, to change href links
 * 
 * The list of the password policies.
 */
function format_password_policy_admin_list($form) {
  try{
  $options = array();
  $enabled = array();

  $result = db_select('password_policy', 'p', array('fetch' => PDO::FETCH_ASSOC, 'target' => 'slave'))
      ->fields('p', array('pid', 'name', 'enabled', 'description', 'created', 'weight'))
      ->orderBy('weight')
      ->execute();

  $form['#tree'] = TRUE;
  foreach ($result as $row) {
    $pid = $row['pid'];
    $options[$pid] = $row['enabled'] ? format_date($row['created'], 'medium') : '';
    if ($row['enabled']) {
      $enabled[] = $pid;
    }

    $form['policies'][$pid]['name'] = array(
      '#markup' => $row['name'],
    );
    $form['policies'][$pid]['roles'] = array(
      '#markup' => theme('item_list', array('items' => _format_password_policy_admin_list_roles($pid))),
    );
    $form['policies'][$pid]['enabled'] = array('#type' => 'checkbox', '#default_value' => $row['enabled']);    
    $form['policies'][$pid]['view'] = array(
      '#type' => 'link',
      '#title' => 'view',
      '#href' => 'portalpages/sp_administrator/sys-admin/password-policy/'. $pid,
    );
    $form['policies'][$pid]['edit'] = array(
      '#type' => 'link',
      '#title' => 'edit',
      '#href' => 'portalpages/sp_administrator/sys-admin/password-policy/'. $pid . '/edit',
    );
    $form['policies'][$pid]['delete'] = array(
      '#type' => 'link',
      '#title' => 'delete',
      '#href' => 'portalpages/sp_administrator/sys-admin/password-policy/delete/'. $pid,
    );
    $form['policies'][$pid]['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight for @title', array('@title' => $row['name'])),
      '#title_display' => 'invisible',
      '#default_value' => $row['weight'],
    );
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save changes'),
  );
  return $form;
  }catch (Exception $ex) {
    watchdog_exception('format_password_policy_admin_list', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Overriding password_policy_admin_list_submit()
 * 
 * Submit hook for the form on the default list view for the password policy module.
 */
function format_password_policy_admin_list_submit($form, &$form_state) {
  $txn = db_transaction();
  try{
  foreach ($form_state['values']['policies'] as $pid => $policy) {
    db_query("UPDATE {password_policy} SET weight = :weight WHERE pid = :pid", array(':weight' => $policy['weight'], ':pid' => $pid));
    // Ensure we don't reset the timestamp on policies that are already enabled.
    if ($policy['enabled']) {
      db_query("UPDATE {password_policy} SET enabled = 1, created = :time WHERE pid = :pid AND enabled = 0", array(':time'=>time(), ':pid'=>$pid));
    }
    else {
      db_query("UPDATE {password_policy} SET enabled = 0 WHERE pid = :pid", array(':pid'=>$pid));
    }
  }

  drupal_set_message(t('The changes have been saved.'));
  }catch (Exception $ex) {
    $txn->rollback();
    unset($txn);
    watchdog_exception('format_password_policy_admin_list_submit', $ex);
    expertusErrorThrow($ex);
  }
  // Commit the transaction
  unset($txn);
}

/**
 * This function called by format_password_policy_admin_list()
 * To get roles of specified password policy 
 * 
 * Overriding _password_policy_admin_list_roles()
 * 
 * @param Integer type $pid
 * 		Password policy id
 * 		
 */
function _format_password_policy_admin_list_roles($pid) {
  try{
  $roles = array();
  $query = db_select('role', 'r', array('target' => 'slave'));
  $query->innerJoin('password_policy_role', 'p', 'p.rid = r.rid');
  $result = $query->fields('r', array('name'))
    ->condition('p.pid', $pid)
    ->execute();
  foreach ($result as $row) {
    $roles[] = $row->name;
  }
  return $roles;
  }catch (Exception $ex) {
    watchdog_exception('_format_password_policy_admin_list_roles', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Overriding theme_password_policy_admin_list()
 *   
 * @param $variables
 */
function theme_format_password_policy_admin_list($variables) {
  try{
  $form = $variables['form'];
  $rows = array();
  foreach (element_children($form['policies']) as $id) {
    $form['policies'][$id]['weight']['#attributes']['class'] = array('password-policy-order-weight');
    $rows[] = array(
      'data' => array(
        drupal_render($form['policies'][$id]['name']),
        drupal_render($form['policies'][$id]['roles']),
        drupal_render($form['policies'][$id]['enabled']),        
        drupal_render($form['policies'][$id]['weight']),
        drupal_render($form['policies'][$id]['view']),
        drupal_render($form['policies'][$id]['edit']),
        drupal_render($form['policies'][$id]['delete']),
      ),
      'class' => array('draggable'),
    );
  }
  $header = array(t('Name'), t('Roles'), t('Enabled'), t('Weight'), array('data' => t('Operations'), 'colspan' => 3));
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'password-policy-order')));
  $output .= drupal_render_children($form);

  drupal_add_tabledrag('password-policy-order', 'order', 'sibling', 'password-policy-order-weight');

  return $output;
  }catch (Exception $ex) {
    watchdog_exception('theme_format_password_policy_admin_list', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Overriding password_policy_admin_form()
 * 
 * Form display for new or to be edited password policies.
 */
function format_password_policy_admin_form($form, &$form_state, $policy = NULL) {
  try{
  $form['policy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Policy'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['policy']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => isset($policy['name']) ? $policy['name'] : '',
    '#maxlength' => 64,
    '#required' => TRUE,
  );
  $form['policy']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => isset($policy['description']) ? $policy['description'] : '',
  );

  $form['roles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Roles'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['roles']['roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles').':<span class="addedit-mandatory">*</span>',
    '#options' => user_roles(FALSE),
    '#default_value' => isset($policy['roles']) ? $policy['roles'] : array(),
    '#description' => t('Select the roles that this policy will apply to.'),
  );

  $form['expiration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Expiration'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['expiration']['expiration'] = array(
    '#type' => 'textfield',
    '#title' => t('Password Expiration'),
    '#default_value' => isset($policy['expiration']) ? $policy['expiration'] : '0',
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t('The passwords will expire after this number of days. The users with expired passwords will be blocked. Setting this field to 0 will not put any password expiration constraints.'),
  );
  $form['expiration']['warning'] = array(
    '#type' => 'textfield',
    '#title' => t('Password Expiration Warning'),
    '#default_value' => isset($policy['warning']) ? $policy['warning'] : '',
    '#size' => 10,
    '#description' => t('The comma separated list of days. The warning about expiration of the password will be sent out on those days before the expiration. Leaving this field empty won\'t send out or display any warnings.'),
  );

  $form['constraints'] = array(
    '#type' => 'fieldset',
    '#title' => t('Constraints'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );

  foreach (_password_policy_constraints() as $constraint) {
    $desc = _password_policy_constraint_description($constraint);
    $form['constraints']['constraint_'. $constraint] = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#default_value' => isset($policy['policy'][$constraint]) ? $policy['policy'][$constraint] : NULL,
      '#maxlength' => 3,
      '#title' => $desc['name'],
      '#description' => $desc['description'],
    );
  }

  $form['actions'] = array('#type' => 'actions');

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => is_array($policy) ? t('Save') : t('Create'),
  );

  if ($policy) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
    );
    $form['actions']['pid'] = array(
      '#type' => 'hidden',
      '#value' => isset($policy['pid']) ? $policy['pid'] : '',
    );
  }

  return $form;
  }catch (Exception $ex) {
    watchdog_exception('format_password_policy_admin_form', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Overriding password_policy_admin_form_validate()
 * 
 * Form validation hook for new or edited password policies.
 */
function format_password_policy_admin_form_validate($form, &$form_state) {
  try{
    if (!array_filter($form_state['input']['roles'])) {
       form_set_error('form-item-roles-1', t('ERR189'));
       return false;
    }
  $roles   = array_filter($form_state['values']['roles']);
  $existingRoles       = array();
  $existingRolesArray  = array();
  $existingRolesString = '';
  if (isset($form_state['values']['pid']) && $form_state['values']['pid']) {
    $pid    = $form_state['values']['pid'];
    $query  = db_select('password_policy_role', 'p', array('target' => 'slave'))
      ->fields('p', array('rid'))
      ->condition('pid', $pid,'<>')
      ->condition('rid', $roles,'IN')
      ->execute();
  }else{
    $query  = db_select('password_policy_role', 'p', array('target' => 'slave'))
      ->fields('p', array('rid'))
      ->condition('rid', $roles,'IN')
      ->execute();
  }
  foreach ($query as $row) {
    $existingRoles[] = $row->rid;
  }
  /*if (empty($roles)) {
    form_set_error('roles', t('You must select at least one role for a policy to apply to.'));
  }else*/ if(!empty($existingRoles)){
    $query  = db_select('role', 'r', array('target' => 'slave'))
      ->fields('r', array('name'))
      ->condition('rid', $existingRoles,'IN')
      ->execute();
    foreach ($query as $row) {
      $existingRolesArray[] = $row->name;
    }
    $existingRolesString   = implode(',',$existingRolesArray);
    form_set_error('roles', t('The selected role(s) \''.$existingRolesString.'\' have been assigned to a different password policy, please choose different role(s).'));
  }
  }catch (Exception $ex) {
    watchdog_exception('format_password_policy_admin_form_validate', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Overriding password_policy_admin_form_submit()
 * 
 * Form submission hook for new or edited password policies.
 */
function format_password_policy_admin_form_submit($form, &$form_state) {
  $txn = db_transaction();
  try{
  $op = $form_state['values']['op'];

  if ($op == t('Delete')) {
    drupal_goto('portalpages/sp_administrator/sys-admin/password-policy/delete/'. $form_state['values']['pid']);
  }

  $policy = array();
  foreach ($form_state['values'] as $key => $value) {
    // If we have no form value, then we have no constraint to set.
    if (!is_array($value)) { //dodge issues with roles array
      $value = trim($value);
      if ($value != "" && preg_match("/^constraint_/", $key)) {
        $policy[substr($key, 11)] = $value;
      }
    }
  }

  // If we have an pid, update, else save.
  if (isset($form_state['values']['pid']) && $form_state['values']['pid']) {
    db_update('password_policy') 
      ->fields(array(
        'name' => $form_state['values']['name'],
        'description' => $form_state['values']['description'],
        'policy' => serialize($policy),
        'expiration' => trim($form_state['values']['expiration']),
        'warning' => str_replace(' ', '', $form_state['values']['warning']),      
      ))
      ->condition('pid', $form_state['values']['pid'])
      ->execute();
    drupal_set_message(t('Policy %name has been updated.', array('%name' => $form_state['values']['name'])));
    watchdog('password_policy', 'Policy %name updated.', array('%name' => $form_state['values']['name']), WATCHDOG_NOTICE, l(t('edit'), 'portalpages/sp_administrator/sys-admin/password-policy/'. $form_state['values']['pid'] .'/edit'));
    $pid = $form_state['values']['pid'];
    db_delete('password_policy_role')
      ->condition('pid', $pid)
      ->execute();
  }
  else {
    $pid = db_insert('password_policy')
      ->fields(array(
        'name' => $form_state['values']['name'],
        'description' => $form_state['values']['description'],
        'enabled' => 0,
        'policy' => serialize($policy),
        'expiration' => trim($form_state['values']['expiration']),
        'warning' => str_replace(' ', '', $form_state['values']['warning']),
      ))
      ->execute();
    drupal_set_message(t('Policy %name has been created.', array('%name' =>  $form_state['values']['name'])));
    watchdog('password_policy', 'New policy %name created.', array('%name' => $form_state['values']['name']), WATCHDOG_NOTICE, l(t('edit'), 'portalpages/sp_administrator/sys-admin/password-policy/'. $pid .'/edit'));
  }

  foreach (array_filter($form_state['values']['roles']) as $rid => $enabled) {
    db_insert('password_policy_role')
      ->fields(array(
        'pid' => $pid,
        'rid' => $rid,
      ))
      ->execute();
  }

  drupal_goto('portalpages/sp_administrator/sys-admin/password-policy/list');
  }catch (Exception $ex) {
    $txn->rollback();
    unset($txn);
    watchdog_exception('format_password_policy_admin_form_submit', $ex);
    expertusErrorThrow($ex);
  }
  // Commit the transaction
  unset($txn);
}

/**
 * Overriding password_policy_admin_delete() 
 * 
 * Confirmation form for the deletion of a password policy.  Deletion takes place
 * in password_policy_admin_delete_submit().
 */
function format_password_policy_admin_delete($form, $form_state, $policy) {
  try{
  if (!empty($policy)) {
    $form['pid'] = array('#type' => 'hidden', '#value' => $policy['pid']);
    return confirm_form($form, t('Password Policies') , 'admin/config/people/password_policy/list', t('Are you sure you want to delete the policy %name?', array('%name' => $policy['name'])), t('Delete'), t('Cancel'));
  }
  else {
    drupal_not_found();
    exit;
  }
  }catch (Exception $ex) {
    watchdog_exception('format_password_policy_admin_delete', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Overridign password_policy_admin_delete_submit()
 * 
 * Submit hook for the delete policy operation.
 */
function format_password_policy_admin_delete_submit($form, &$form_state) {
  try{
  $pid = $form_state['values']['pid'];
  $policy = _password_policy_load_policy_by_pid($pid);

  db_delete('password_policy')
    ->condition('pid', $pid)
    ->execute();
  db_delete('password_policy_role')
    ->condition('pid', $pid)
    ->execute();  drupal_set_message(t('Password policy %policy was deleted.', array('%policy' => $policy['name'])));
  watchdog('password_policy', 'Policy %name was deleted.', array('%name' => $policy['name']), WATCHDOG_NOTICE);
  drupal_goto('portalpages/sp_administrator/sys-admin/password-policy/list');
  }catch (Exception $ex) {
    watchdog_exception('format_password_policy_admin_delete_submit', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * hook_init() to initialize/load the common functions on every page.
 * Here we load css file for password policy module.
 */
function exp_sp_formatter_password_init(){
	try{
  global $theme_key;
  $css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
  if(arg(1) == 'reset' || arg(1) == 'password' || arg(3) == 'password-policy') {
    if($theme_key == 'expertusoneV2'){
       drupal_add_css(drupal_get_path('module', 'exp_sp_formatter_password') .'/exp_sp_formatter_password_v2.css',$css_module_optional);
  }else{
       drupal_add_css(drupal_get_path('module', 'exp_sp_formatter_password') .'/exp_sp_formatter_password.css',$css_module_optional);
  }  
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_formatter_password_init', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Form builder; Request a password reset.
 *
 * @ingroup forms
 * @see user_pass_validate()
 * @see user_pass_submit()
 */
function format_user_pass() {
  try{
  global $user;

 // Allow logged in users to request this also.
  if ($user->uid > 0) {
    $form['mail'] = array(
      '#prefix' => '<p class="messageDiv">',
      '#markup' =>  t('Password reset instructions will be mailed to %email. You must log out before you can use the password reset link given in the e-mail.<br><br>', array('%email' => $user->mail)),
      '#suffix' => '</p>',
    );
    $form['name']['#type'] = 'value';
    $form['name']['#value'] = $user->mail;
  }
 else {
      $form['mail'] = array(
      '#prefix' => '<p class="messageDiv">',
      '#markup' =>  t('MSG426').'.'.'<br><br>',
      '#suffix' => '</p>',
    );
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('LBL061').' '.t('LBL727'),
    '#title_display' => 'invisible',
    '#size' => 60,
    '#maxlength' => max(USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH),
    '#required' => TRUE,
    '#prefix' => "<div class='container'><div class='forgot-pass-label'><span>".t('LBL061').' '.t('LBL727').": </span><span class='addedit-mandatory'>*</span></div>",
    '#suffix' => '</div>',
  );
  if(module_exists('captcha') && module_exists('image_captcha')){
  	$form['captcha_fp'] = array(
  	'#prefix' => "<div class='container'><div class='forgot-pass-label'><span class='captcha-label'>".t('MSG014').": </span><span class='addedit-mandatory'>*</span></div><div id='create-fp-captcha'>",
  	'#suffix' => '</div></div>',
  	'#type' => 'captcha',
  	);
  }
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
	'#type' => 'submit',
    '#value' => t('LBL061').' '.t('LBL754').' '.t('LBL060'),
    '#prefix' => '<div class="admin-save-button-container"><div class="admin-save-button-left-bg"></div>',
    '#attributes' => array('Class'=>'admin-save-button-middle-bg'),
    '#suffix' => '<div class="admin-save-button-right-bg"></div></div>'
);

  return $form;
  }catch (Exception $ex) {
    watchdog_exception('format_user_pass', $ex);
    expertusErrorThrow($ex);
  }  
}

function format_user_pass_validate($form, &$form_state) {
  try{
  foreach($form_state['values'] as $key=>$stripval) {
  	$form_state['values'][$key] = xml_filter($stripval);
  }
  $name = trim($form_state['values']['name']);
  // Try to load by email.
  $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  $account = reset($users);
  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
    $account = reset($users);
  }
  if (isset($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
//    form_set_error('name', t('Sorry, %name is not recognized as a user name or an e-mail address.', array('%name' => $name)));
	  if(strlen($name) > 60) {
	  	$name = '<span class="vtip short-vtip" title="'.$name.'">'.titleController('EXP-SP-FORMATTER-PASSWORD-NAME', $name, 60).'</span>';
	  }	
       form_set_error('name', t('Sorry, %name is not recognized as a user name or an e-mail address.', array('%name' => $name)));
  }
  }catch (Exception $ex) {
    watchdog_exception('format_user_pass_validate', $ex);
    expertusErrorThrow($ex);
  } 
}

function format_user_pass_submit($form, &$form_state) {
  try{
  global $language;
  $account = $form_state['values']['account'];
  // Mail one time login URL and instructions using current language.
  _format_user_mail_notify('password_reset', $account, $language);
  watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
  drupal_set_message(t('MSG428').'.');
  
  $form_state['redirect'] = 'user/password';//fix for the ticket 0028748
  //$form_state['redirect'] = '<front>';
  return;
  }catch (Exception $ex) {
    watchdog_exception('format_user_pass_submit', $ex);
    expertusErrorThrow($ex);
  } 
}
function format_user_pass_response($form, &$form_state) {
	try{
	return '';
	}catch (Exception $ex) {
		watchdog_exception('format_user_pass_response', $ex);
		expertusErrorThrow($ex);
	}
}
/**
 * Function to send reset password link to users from admin 
 */
function format_user_pass_admin($user_email) {
  try{
  global $language;
  expDebug::dPrint('Reset password email : '.$user_email , 4);
  $users = user_load_multiple(array(), array('mail' => $user_email, 'status' => '1'));
  $account = reset($users);
  expDebug::dPrint('Reset password account details : '.print_r($account, true) , 4);
  // Mail one time login URL and instructions using current language.
  _user_mail_notify('password_reset', $account, $language);
  print 'Password reset instructions mailed to '.$account->name.' at '.$account->mail.'.';
  }catch (Exception $ex) {
    watchdog_exception('format_user_pass_admin', $ex);
    expertusErrorThrow($ex);
  } 
}

/**
 * Menu callback; process one time login link and redirects to the user page on success.
 */
function format_user_pass_reset($form, &$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
	try{
		global $user;
		// change by ayyappans for 28801: All languages - Issue in language preference
		$languages = language_list();
		$user_obj = user_load(($user->uid ? $user->uid :$uid));
		if (isset($languages[$user_obj->language])) {
			global $language;
			$language = $languages[$user_obj->language];
			$_SESSION['language'] = $user_obj->language;
		}
		// When processing the one-time login link, we have to make sure that a user
		// isn't already logged in.
		if ($user->uid) {
			$current = REQUEST_TIME;
			$timeout = 86400;
			// The existing user is already logged in.
			if ($user->uid == $uid) {
				//drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array('%user' => $user->name, '!user_edit' => url("user/$user->uid/edit"))));
				drupal_set_message(t('MSG464').' '.$user->name. '. '.t('MSG465'));
				$token = drupal_hash_base64(drupal_random_bytes(55));
				$_SESSION['pass_reset_' . $user->uid] = $token;
				drupal_goto('user/password');
			}
			// A different user is already logged in on the computer.
			else {
				$reset_link_account = user_load($uid);
				if (!empty($reset_link_account)) {
					/*drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
					 array('%other_user' => $user->name, '%resetting_user' => $reset_link_account->name, '!logout' => url('user/logout'))));*/
					drupal_set_message(t('MSG466').' '.$user->name.' '.t('MSG467').' '.$reset_link_account->name.'. '.t('LBL752').' <a href="'.url('user/logout').'">'.t('LBL753').'</a> '.t('MSG468').'.');
				} else {
					// Invalid one-time link specifies an unknown user.
					drupal_set_message(t('ERR153').'.');
				}
			}
			drupal_goto();
		}
		else {
			// Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
			$timeout = 86400;
			$current = REQUEST_TIME;
			// Some redundant checks for extra security ?
			$users = user_load_multiple(array($uid), array('status' => '1'));
			if ($timestamp <= $current && $account = reset($users)) {
				// No time out for first time login.
				if ($account->login && $current - $timestamp > $timeout) {
					drupal_set_message(t('ERR153').'.');
					drupal_goto('user/password');
				}
				elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == format_user_pass_rehash($account->pass, $timestamp, $account->login))
				{
					// First stage is a confirmation form, then login
					if ($action == 'login') {
						watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
						// Set the new user.
						$user = $account;
						// user_login_finalize() also updates the login timestamp of the
						// user, which invalidates further use of the one-time login link.
						user_login_finalize();
						drupal_set_message(t('MSG450'));
						// Let the user's password be changed without the current password check.
						$token = drupal_hash_base64(drupal_random_bytes(55));
						$_SESSION['pass_reset_' . $user->uid] = $token;
						drupal_goto('user/' . $user->uid . '/edit', array('query' => array('pass-reset-token' => $token)));
					}
					else {
						$form['message'] = array('#markup' => '<p>'.t('MSG460').' '. $account->name.' '.t('MSG461').' '. format_date($timestamp + $timeout).'</p><p>'.t('MSG462'));
						$form['help'] = array('#markup' => '<p>' . t('MSG463') . '</p>');
						$form['actions'] = array('#type' => 'actions');
						$form['actions']['submit'] = array('#type' => 'submit', '#value' => t('LBL751'), '#attributes' => array('Class' => 'admin-save-button-middle-bg'),'#prefix' => '<div class="admin-save-button-left-bg"></div>');
						$form['actions']['submit']['#suffix'] = '<div class="admin-save-button-right-bg"></div>';
						$form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");
						return $form;
					}
				}
				else {
					drupal_set_message(t('ERR153').'.');
					drupal_goto('user/password');
				}
			}
			else {
				// Deny access, no more clues.
				// Everything will be in the watchdog's URL for the administrator to check.
				//drupal_access_denied();
				drupal_set_title('ACCESS DENIED');
				$form['error_message'] = array('#markup' => t('ERR039'));
				//t('You are not authorized to access this page.');
				//drupal_goto('user/password');
				return  $form;
			}
		}
	}catch (Exception $ex) {
    watchdog_exception('format_user_pass_reset', $ex);
    expertusErrorThrow($ex);
  } 
}

function format_user_pass_rehash($password, $timestamp, $login) {
	try{
  return drupal_hmac_base64($timestamp . $login, drupal_get_hash_salt() . $password);
  }catch (Exception $ex) {
  	watchdog_exception('format_user_pass_rehash', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_sp_formatter_password_mail_tokens($params, $language) {
  try{
  global $base_url;
  $account = $params['account'];
  $tokens = array(
   '!username' => $account->name,
   '!site' => variable_get('site_name', 'Drupal'),
   '!uri' => $base_url,
   '!uri_brief' => drupal_substr($base_url, drupal_strlen('http://')),
   '!date' => format_date(time(), 'medium', '', NULL, $language->language),
   '!login_uri' => url('user', array('absolute' => TRUE)),
   '!edit_uri' => url('learning/my-account', array('absolute' => TRUE)),
   '!days_left' => isset($params['days_left']) ? $params['days_left'] : NULL,
   '!login_url' => isset($params['login_url']) ? $params['login_url'] : NULL,
  );
    return $tokens;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_formatter_password_mail_tokens', $ex);
    expertusErrorThrow($ex);
  } 
}

function exp_sp_formatter_password_mail_tokens_simplify($params, $language) {
	try{
		global $base_url;
		$account = $params['account'];
		$tokens = array(
				'!username' => $account->name,
				'!site' => variable_get('site_name', 'Drupal'),
				'!uri' => $base_url,
				'!uri_brief' => drupal_substr($base_url, drupal_strlen('http://')),
				'!date' => format_date(time(), 'medium', '', NULL, $language->language),
				'!login_uri' => url('user', array('absolute' => TRUE)),
				'!edit_uri' => url('learning/reset-password', array('absolute' => TRUE)),
				'!days_left' => isset($params['days_left']) ? $params['days_left'] : NULL,
				'!login_url' => isset($params['login_url']) ? $params['login_url'] : NULL,
		);
		return $tokens;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_formatter_password_mail_tokens_simplify', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * Overrides from user.module
 * 
 * Conditionally create and send a notification email when a certain
 * operation happens on the given user account.
 *
 * @see user_mail_tokens()
 * @see drupal_mail()
 *
 * @param $op
 *  The operation being performed on the account. Possible values:
 *  'register_admin_created': Welcome message for user created by the admin
 *  'register_no_approval_required': Welcome message when user self-registers
 *  'register_pending_approval': Welcome message, user pending admin approval
 *  'password_reset': Password recovery request
 *  'status_activated': Account activated
 *  'status_blocked': Account blocked
 *  'cancel_confirm': Account cancellation request
 *  'status_canceled': Account canceled
 *
 * @param $account
 *  The user object of the account being notified. Must contain at
 *  least the fields 'uid', 'name', and 'mail'.
 * @param $language
 *  Optional language to use for the notification, overriding account language.
 * @return
 *  The return value from drupal_mail_system()->mail(), if ends up being called.
 */
function _format_user_mail_notify($op, $account, $language = NULL) {
	try{
  expDebug::dPrint(' $_format_user_mail_notify = ' .$op, 5);
  // By default, we always notify except for canceled and blocked.
  $default_notify = ($op != 'status_canceled' && $op != 'status_blocked');
  $notify = variable_get('user_mail_' . $op . '_notify', $default_notify);
  if ($notify) {
    $params['account'] = $account;
    $language = $language ? $language : user_preferred_language($account);    
    if ($op == 'register_pending_approval') {
      // If a user registered requiring admin approval, notify the admin, too.
      // We use the site default language for this.
      $mail = drupal_mail('user', 'register_pending_approval_admin', variable_get('site_mail', ini_get('sendmail_from')), language_default(), $params);
    }
    elseif($op == 'password_reset'){
      $notifyResult = new stdClass();
      $userId = getUserIdFromDrupalUid($account->uid);
      $personInfo    = getPersonDetailsForNotifications($userId);
      expDebug::dPrint('values of person mail details pasword recovery'.print_r($personInfo,true));
      $notifyResult->full_name       = convertNullValToNullStr($personInfo['full_name']);
      $notifyResult->user_name       = convertNullValToNullStr($personInfo['user_name']);
	  $notifyResult->first_name       = convertNullValToNullStr($personInfo['first_name']);
      $notifyResult->one_time_url       = str_replace('/apis/ext','',user_pass_reset_url($params['account']));
      insertUserLoginNotification('notify_133','Password Recovery',$userId,$notifyResult,$userId);
      
    }elseif($op == 'register_admin_created'){
      $notifyResult = new stdClass();
      $userId = getUserIdFromDrupalUid($account->uid);
      $personInfo    = getPersonDetailsForNotifications($userId);
      expDebug::dPrint('values of person mail details crearted'.print_r($personInfo,true));
      $notifyResult->full_name       = convertNullValToNullStr($personInfo['full_name']);
      $notifyResult->user_name       = convertNullValToNullStr($personInfo['user_name']);
	  $notifyResult->first_name       = convertNullValToNullStr($personInfo['first_name']);
      $notifyResult->one_time_url       = str_replace('/apis/ext','',user_pass_reset_url($params['account']));
      insertUserLoginNotification('notify_132','New User Creation By Admin',$userId,$notifyResult,$userId);
    }
    else{
      $mail = drupal_mail('user', $op, $account->mail, $language, $params);            
    }
  }
  return empty($mail) ? NULL : $mail['result'];
  }catch (Exception $ex) {
  	watchdog_exception('_format_user_mail_notify', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Overrides from user.module
 * 
 * Implements hook_mail().
 */
function exp_sp_formatter_password_mail($key, &$message, $params) {
	try{
  $language = $message['language'];
  $variables = array('user' => $params['account']);
  $message['subject'] .= _format_user_mail_text($key . '_subject', $language, $variables);
  $message['body'][] = _format_user_mail_text($key . '_body', $language, $variables);
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_formatter_password_mail', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Overrides from user.module
 * 
 * Returns a mail string for a variable name.
 *
 * Used by user_mail() and the settings forms to retrieve strings.
 */
function _format_user_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
	try{
  $langcode = isset($language) ? $language->language : NULL;
    // No override, return default string.
  $admin_setting = variable_get('user_mail_' . $key, FALSE);
  if ($admin_setting && ($key == 'register_admin_created_subject' || $key == 'register_admin_created_body')) {
    // An admin setting overrides the default string.
    $text = $admin_setting;
  }
  else {
    switch ($key) {
      case 'password_reset_subject':
        $options = array();
        $options['langcode'] = $langcode;
        //$text = t('LBL808 [user:name] LBL809 [site:name]', array(), array('langcode' => $langcode));
        $text = t('LBL808',array(),$options).' [user:name] '.t('LBL809',array(),$options).' [site:name]';
        break;
      case 'password_reset_body':
        $options = array();
        $options['langcode'] = $langcode;
        $text = "[html:br][html:br][user:name], [html:br][html:br]

".t('LBL810',array(),$options)." [site:name]. [html:br][html:br]

".t('LBL811',array(),$options).": [html:br][html:br]

[user:one-time-login-url] [html:br][html:br]

".t('LBL812',array(),$options)." [html:br][html:br]

--  [site:name] ".strtolower(t('TEAM',array(),$options));
        break;
      case 'register_admin_created_subject':
        $text = t('An administrator created an account for you at [site:name]', array(), array('langcode' => $langcode));
        break;
      case 'register_admin_created_body':
        $text = t("[user:name],

A site administrator at [site:name] has created an account for you. You may now log in by clicking this link or copying and pasting it to your browser:

[user:one-time-login-url]

This link can only be used once to log in and will lead you to a page where you can set your password.

After setting your password, you will be able to log in at [site:login-url] in the future using:

username: [user:name]
password: Your password

--  [site:name] team", array(), array('langcode' => $langcode));
        break;
  }
}

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables, array('language' => $language, 'callback' => 'exp_sp_formatter_user_mail_tokens', 'sanitize' => FALSE));
  }

  return $text;
  }catch (Exception $ex) {
  	watchdog_exception('_format_user_mail_text', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This function is used by the token_replace() call at the end of
 * _user_mail_text() to set up some additional tokens that can be
 * used in email messages generated by user_mail().
 *
 * @param $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param $data
 *   An associative array of token replacement values. If the 'user' element
 *   exists, it must contain a user account object with the following
 *   properties:
 *   - login: The account login name.
 *   - pass: The hashed account login password.
 * @param $options
 *   Unused parameter required by the token_replace() function.
 */
/*function exp_sp_formatter_user_mail_tokens(&$replacements, $data, $options) {
  global $base_url;
  if (isset($data['user'])) {
    $replacements['[user:one-time-login-url]'] = str_replace('/apis/ext','',user_pass_reset_url($data['user']));
    $replacements['[user:cancel-url]'] = str_replace('/apis/ext','',user_cancel_url($data['user']));
  }
  $replacements['[site:login-url]'] = str_replace('/apis/ext','',$base_url);
  $replacements['[site:url]'] = str_replace('/apis/ext','',$base_url);
}*/

function insertUserLoginNotification($notificationCode,$notificationType,$objectId1,$notifyResult,$userId){
	try{
  expDebug::dPrint(' jooooooo = ' . print_r($notifyResult, true) , 4);
  $notifyOverrideFlag = null;
  $overrideContent = '';  	
  $overrideInfo = getEntityNotificationOverrideInfo($objectId1, 'cre_sys_obt_usr', $notificationCode, 'Email');
  expDebug::dPrint(' contentmoveusers $overrideInfo = ' . print_r($overrideInfo, true) , 4); 
  if($overrideInfo != null) {
    $notifyOverrideFlag = $overrideInfo['notify_flag'];
    $overrideContent = $overrideInfo['override_content'];
  }
  $notificationTemplateInfo = getNotificationTemplateInfo($notificationCode, 'cre_sys_lng_eng');
  $notifyFlag = null;	  
  
	// Both 'Y' and 'cre_ntn_sts_atv' are active statuses
	if ($notificationTemplateInfo['status'] == 'cre_ntn_sts_atv') { 
		$notifyFlag = 'Y';
	}
  if ($notifyOverrideFlag == 'cre_ntn_sts_atv') {  // Added 
		$notifyOverrideFlag = 'Y';
	} 
	$frameString = true;
	if ($notifyFlag != 'Y' || ($notifyOverrideFlag != null && $notifyOverrideFlag != 'Y')) {
		if($notifyFlag != 'Y'){
			// If the notification is disabled status in template, do not generate notification
    	expDebug::dPrint('Notification is disabled');
    	$frameString = false;
		}else{
			//If the notification status has been overridden and set to disabled, do not generate notification.
			expDebug::dPrint(' Notification is overridded and disabled');
			$frameString = false;
		}
	}  
	if($frameString){  	
    	$notificationInfo = null;
		  $notificationInfo['tokens_string'] = 'user_name>|' . $notifyResult->user_name . '~|' .
		  									   'first_name>|' . $notifyResult->first_name . '~|' .
                                               'one_time_url>|' . $notifyResult->one_time_url . '~|' .
                                               'full_name>|' . $notifyResult->full_name;
		  
		  $notificationInfo['message_id']    = $notificationCode;
		  $notificationInfo['message_type']  = $notificationType;
		  $notificationInfo['send_type']     = 'php mailer';
		  $notificationInfo['lang_code']     = $notifyResult->lang_code;
		  callCommonNotificationInsert($notificationCode,$notificationInfo,$notificationTemplateInfo,$userId,$overrideContent);      		
	}	
	}catch (Exception $ex) {
		watchdog_exception('insertUserLoginNotification', $ex);
		expertusErrorThrow($ex);
	}
}

?>
