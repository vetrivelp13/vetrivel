<?php

const  SCALABLE_QUERY = 1;
const  NON_SCALABLE_QUERY = 0;

/**
 * Implementation of hook_init().
 */
function exp_sp_lnrreports_init() {
	try{
  global $user;
  if((arg(0) == 'reports') && ($user->uid == 0)) {
    $query = array('destination' => "reports");
    drupal_goto('/', array('query' => $query));
  }
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_lnrreports_init', $ex);
  	expertusErrorThrow($ex);
  }
}


/**
 * Implementation of hook_block_info().
 */
function exp_sp_lnrreports_block_info() {
	try{
  $blocks = array();
  $blocks = array();
  $blocks['tab_reports'] = array(
    'info' => t('Reports'),
  	'cache' => DRUPAL_CACHE_PER_ROLE,  
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'reports
learning/report-search/*'
);


$blocks['tab_reports_search'] = array(
    'info' => t('Reports Header Search'),
  	'cache' => DRUPAL_CACHE_PER_ROLE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'reports'
);

return $blocks;
} catch (Exception $ex) {
	watchdog_exception('exp_sp_lnrreports_block_info', $ex);
	expertusErrorThrow($ex);
}
}

/**
 * Implementation of hook_menu().
 */
function exp_sp_lnrreports_menu() {
 try{
  $items = array();
		
  $items['learning/report-search/all/%'] = array(
    'title' => 'Search Reports',
    'page callback' => 'learnerReportsSearchResults',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_lnrreports.inc',
    'page arguments' => array(4),
    );

  $items['reports'] = array(
    'title' => 'Search Reports',
    'page callback' => 'empty_value',
    'access arguments' => array('Report visibility Perm'),
    'type' => MENU_CALLBACK
    );
    
  $items['learning/report-autocomplete'] = array(
    'title' => 'Search Reports',
    'page callback' => 'getLearnerReportnameAutoComplete',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['learning/report-search/criteria-autocomplete'] = array(
    'title' => 'Search Reports',
    'page callback' => 'getLearnerReportCriteriaAutoComplete',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_lnrreports.inc',
    );

  $items['learning/report-search/print'] = array(
    'title' => 'Print Reports',
    'page callback' => 'reportPrintExport',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'file' => 'exp_sp_lnrreports.inc',
    );

  $items['learning/report-search/export'] = array(
    'title' => 'Print Reports',
    'page callback' => 'reportPrintExport',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['learning/report-result-content/%/%/%'] = array(
    'title' => 'Search Reports',
    'page callback' => 'loadLearnerReportResult',
    'access arguments' => array('expertus learner'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_lnrreports.inc',
  	'page arguments' => array(2,3,4),
    );
   
  $items['ajax/launchcount/%'] = array(
    'title' => 'Get launch count',
    'page callback' => 'reportlaunchcount',
    'page arguments' => array(2),
    'access arguments' => array('Report visibility Perm'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['learning/report-result-content-export/%/%/%/%/%/%'] = array(
    'title' => 'Search Reports',
    'page callback' => 'loadLearnerReportResult',
    /*'access arguments' => array('expertus learner'), */
  	'access arguments' => array('Report visibility Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_lnrreports.inc',
  	'page arguments' => array(2,3,4,5,6,7),
    );
  
  $items['learning/report-search/criteria-autocomplete/%'] = array(
    'title' => 'Load Criteria Autocomplete',
    'page callback' => 'getCriteriaAutoComplete',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_lnrreports.inc',
  	'page arguments' => array(3),
    );
    
  $items['administration/report-search/delete/%'] = array(
    'title' => 'Delete Reports',
    'page callback' => 'deleteLearnerReport',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['administration/report-search/publish-unpublish/%/%'] = array(
    'title' => 'Publish/Unpublish Reports',
    'page callback' => 'publishUnpublishLearnerReport',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['administration/report-search/load-theme/%'] = array(
    'title' => 'Load reports theme',
    'page callback' => 'loadReportLayout',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3),
    'file' => 'exp_sp_lnrreports.inc',
    );

  $items['administration/report-search/update-header-footer/%/%/%'] = array(
    'title' => 'Update Report Header / Footer',
    'page callback' => 'updateReportHeaderFooter',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4,5),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['administration/report-search/update-header-footer-style/%/%/%'] = array(
    'title' => 'Update Report Header / Footer Style',
    'page callback' => 'updateReportHeaderFooterStyle',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4,5),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['administration/report-search/load-style/%/%'] = array(
    'title' => 'Loading Style Report',
    'page callback' => 'loadStyleReport',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['administration/report-search/update-criteria-name/%/%'] = array(
    'title' => 'Update Criteria Name',
    'page callback' => 'updateCriteriaName',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['administration/report-search/change-theme/%/%'] = array(
    'title' => 'Change Theme',
    'page callback' => 'changeReportTheme',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['administration/report-search/save-theme/%/%'] = array(
    'title' => 'Save Theme',
    'page callback' => 'saveReportTheme',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['administration/report-search/load-available-criteria/%'] = array(
    'title' => 'Load Criteria',
    'page callback' => 'loadReportCriteria',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3),
    'file' => 'exp_sp_lnrreports.inc',
    );

  $items['administration/report-search/add-criteria/%/%/%'] = array(
    'title' => 'Add Criteria',
    'page callback' => 'addReportCriteria',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4,5),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['administration/report-search/delete-criteria/%/%/%/%'] = array(
    'title' => 'Delete Criteria',
    'page callback' => 'deleteReportCriteria',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4,5,6),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['administration/report-search/update-criteria-condition/%/%/%'] = array(
    'title' => 'Update Criteria Condition',
    'page callback' => 'UpdateReportCriteriaCondition',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4,5),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
    
  $items['administration/report-search/add-delete-mandatory/%/%/%'] = array(
    'title' => 'Add Delete Mandatory',
    'page callback' => 'addDeleteMandatory',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4,5),
    'file' => 'exp_sp_lnrreports.inc',
    );
  $items['administration/report-search/update-criteria-modifiers/%/%/%/%/%/%'] = array(
  	'title' => 'Update Criteria Modifiers',
  	'page callback' => 'updateCriteriaModifiers',
  	'access arguments' => array('New Report Perm'),
  	'type' => MENU_CALLBACK,
  	'page arguments' => array(3,4,5,6,7,8),
  	'file' => 'exp_sp_lnrreports.inc',
  );
  $items['administration/report-search/load-querybuilder/%'] = array(
    'title' => 'Load query builder query content',
    'page callback' => 'loadQueryBuilderContent',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3),
    'file' => 'exp_sp_lnrreports.inc',
    );
    $items['administration/report-search/load-report-details/%'] = array(
    'title' => 'Load report details',
    'page callback' => 'loadReportDetails',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3),
    'file' => 'exp_sp_lnrreports.inc',
    );
    $items['administration/report-search/load-report-list-items'] = array(
    'title' => 'Get report List Items',
    'page callback' => 'loadReportListItems',
    'access arguments' => array('expertus learner'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_lnrreports.inc',
    );
    $items['administration/report-search/qry-build/%'] = array (
    'title' => 'Set Query Building',
    'page callback' => 'setQueryBuilder',
	  'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('New Report Perm'),
    'file' => 'exp_sp_lnrreports.inc'
	);
    $items['administration/report-search/addreportpublish'] = array (
    'title' => 'Details add report',
    'page callback' => 'addReportPublishAndUnpublish',
    'type' => MENU_CALLBACK,
    'access arguments' => array('New Report Perm'),
    'file' => 'exp_sp_lnrreports.inc'
	);
	
	$items['administration/report/search/edit-report-data'] = array (
    'title' => 'Edit report data',
    'page callback' => 'editReportData',
    'type' => MENU_CALLBACK,
    'access arguments' => array('New Report Perm'),
    'file' => 'exp_sp_lnrreports.inc'
	);
	
	$items['administration/report/search/launchreport'] = array (
    'title' => 'Details launch report',
    'page callback' => 'launchReportForamt',
    'type' => MENU_CALLBACK,
    'access arguments' => array('New Report Perm'),
    'file' => 'exp_sp_lnrreports.inc'
	);
	
	$items['administration/report/search/getreporttables-auto/%'] = array (
    'title' => 'Get List of tables',
    'page callback' => 'getReportTables',
    'type' => MENU_CALLBACK,
    'access arguments' => array('New Report Perm'),
    'file' => 'exp_sp_lnrreports.inc',
	'page arguments' => array(4),
	);
	
	$items['administration/report/search/getreporttables'] = array (
    'title' => 'Get List of tables',
    'page callback' => 'getReportTables',
    'type' => MENU_CALLBACK,
    'access arguments' => array('New Report Perm'),
    'file' => 'exp_sp_lnrreports.inc',
	);
	
	$items['administration/report/search/tablecol-autocomplete'] = array (
    'title' => 'Fetch report table columns',
    'page callback' => 'getReportTableColsAutoComplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('New Report Perm'),
    'file' => 'exp_sp_lnrreports.inc'
	);
	
	$items['administration/report/search/criteria-autocomplete'] = array (
    'title' => 'Fetch report criteria field values',
    'page callback' => 'getReportCriteriaValuesAutoComplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('New Report Perm'),
    'file' => 'exp_sp_lnrreports.inc'
	);
	
	$items['administration/report/search/tables-autocomplete'] = array (
    'title' => 'Fetch report tables',
    'page callback' => 'getReportTablesAutoComplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('New Report Perm'),
    'file' => 'exp_sp_lnrreports.inc'
	);
    
	$items['administration/report-search/update-column-alias/%/%/%'] = array(
    'title' => 'Update Column AliasLabel',
    'page callback' => 'updateColumnAlias',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'page arguments' => array(3,4,5),
    'file' => 'exp_sp_lnrreports.inc',
    );
    
    $items['administration/report-column/reorder'] = array(
    'title' => 'Reorder Column',
    'page callback' => 'reorderReportColumn',
    'access arguments' => array('New Report Perm'),    
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_lnrreports.inc',
    );
    
  $items['administration/report-search/schedules/%'] = array(
	  'title' => 'Schedule Reports',
	  'page callback' => 'renderAndShowReportSchedulesPopup',
	  'access arguments' => array('expertus learner'),
	 	'type' => MENU_CALLBACK,
	  'page arguments' => array(3),
	   'file' => 'exp_sp_lnrreports.inc',
    );
  $items['ajax/administration/report-search/schedule-form/%/%'] = array(
  		'title' => 'Create schedule',
  		'page callback' => 'buildAndPaintFormInReportSchedulesPopup',
	    'access arguments' => array('expertus learner'),
	 	  'type' => MENU_CALLBACK,
	    'page arguments' => array(4,5),
	    'file' => 'exp_sp_lnrreports.inc',
  );
  $items['ajax/administration/report-search/schedule/run/%'] = array(
      'title' => 'Manually run a report schedule',
      'page callback' => 'runReportSchedule',
      'page arguments' => array(5),
      'access arguments' => array('expertus learner'),
      'type' => MENU_CALLBACK,
      'file' => 'exp_sp_lnrreports.inc',
  );
  $items['ajax/administration/report-search/schedule/status/%/%/%'] = array(
  		'title' => 'Change status of schedule',
  		'page callback' => 'activateOrDeactivateSchedule',
  		'page arguments' => array(5, 6, 7),
  		'access arguments' => array('expertus learner'),
  		'type' => MENU_CALLBACK,
  		'file' => 'exp_sp_lnrreports.inc',
  );
  $items['administration/report-schedule/datagrid/%/%/%/%/%'] = array(
  		'title' => 'Report Schedule data grid list',
  		'page callback' => 'loadReportSchedulesListDataGridType',
  		'page arguments' => array(3,4,5,6,7),
  		'access arguments' => array('expertus learner'),
  		'type' => MENU_CALLBACK,
  		'file' => 'exp_sp_lnrreports.inc'
  );
  $items['administration/report-schedule/datagrid/delete/%/%'] = array(
  		'title' => 'Report Schedule Data Grid Delete',
  		'page callback' => 'deleteScheduleAndRepaint',
  		'page arguments' => array(4,5),
  		'access arguments' => array('expertus learner'),
  		'type' => MENU_CALLBACK,
  		'file' => 'exp_sp_lnrreports.inc'
  );
  $items['administration/report-schedule/exportoption/%/CSV'] = array(
  		'title' => 'Export for Schedule List',
  		'page callback' => 'exportSchedulesToCsv',
  		'page arguments' => array(3,4),
  		'access arguments' => array('expertus learner'),
  		'type' => MENU_CALLBACK,
  		'file' => 'exp_sp_lnrreports.inc'
  );
  $items['administration/report-query/destroy'] = array(
  		'title' => 'Destroy long running query',
  		'page callback' => 'destroyQuery',
  		'page arguments' => array(),
  		'access arguments' => array('expertus learner'),
  		'type' => MENU_CALLBACK,
  		'file' => 'exp_sp_lnrreports.inc'
  );
	return $items;
	} catch (Exception $ex) {
		watchdog_exception('exp_sp_lnrreports_menu', $ex);
		expertusErrorThrow($ex);
	}
}

/*
 * Implementation of hook_theme
 */
function exp_sp_lnrreports_theme() {
	try {
  return array(
    'exp_sp_lnrreports-view-detail' => array('
  		variables' => array('results' => array()),
        'template' => 'exp_sp_lnrreports-view-detail' 
        ),
    'exp_sp_lnrreports-view-action' => array('
  		variables' => array('results' => array()),
        'template' => 'exp_sp_lnrreports-view-action' 
        ),
    'exp_sp_lnrreports-view-filter' => array('
  		variables' => array('searchObj' => new stdClass(), 'fullSearchObj' => new stdClass()),
        'template' => 'exp_sp_lnrreports-view-filter' 
        ),
  	'noitems-in-qtip' => array('
  				    variables' => array('popup_id' => '', 
  				                         'menu_path'=> '',
  				    		                 'button_label'=> '',
  				    		                 'help_text' =>'',
  				    										 'class' => '',
  				),
  				'template' => 'exp_sp_lnrreports-noitems-in-qtip'
  		),
  		'schedules-qtip'=> array('
  				 variables' => array('popup_id' => '', // The id to be given to the popup
  				'popup_width' => '1px', // Popup width with unit
  				'class' => '',  // Class(es) to be added to the popup for styling etc.
  				'display_html' => ''// The html to display inside the popup
  		),
  			'template' => 'exp_sp_lnrreports-schedules-qtip'
    ),
  		'schedule-list' => array('
  				variables' => array(
  						'report_id' => '',
  				),		
  				'template' => 'exp_sp_lnreports-schedule-list'
  			),
  		'schedule-actions' => array('
  				variables' => array(
  						'id' => '', // The id to be given to the popup
  				),
  				'template' => 'exp_sp_lnrreports-schedule-actions'
  		),

    'date_criteria_radios' => array ('render element' => 'element'),

  		
  );
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_lnrreports_theme', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_block_view().
 */
function exp_sp_lnrreports_block_view($delta = ''){
	try{
  global $theme_key;
  $css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  $header_optional = array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY);
   
  $block = array();

  switch ($delta) {
    case 'tab_reports':
      
      require_once('exp_sp_lnrreports.inc');
      require_once(drupal_get_path('module', 'exp_sp_administration_learning') . '/exp_sp_administration_learning.inc');
      
      drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
      
      drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/colorpicker/jquery.colorPicker.js', $js_module_optional);
      drupal_add_css(drupal_get_path('module', 'exp_sp_lnrreports') .'/colorpicker/colorPicker.css');
      
      //CUSTOM SCROLLBAR "JSscrollbar" 
      drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.jscrollpane.js', $js_module_optional);
      drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.mousewheel.js', $js_module_optional);
      

      drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/exp_sp_lnrreports.js', $js_module_optional);
      drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/exp_sp_lnrreports_schedules.js', $js_module_optional);
      
      $adminAccess  = reportAdminAccess();
      
      //drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/exp_sp_lnrreports_search_wz_jsgraphics.js');
      drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/dragdrop/jquery.jsPlumb-1.3.16-all.js');
      drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/exp_sp_lnrreports_search.js');
      drupal_add_js(drupal_get_path('module', 'exp_sp_administration') . '/exp_sp_administration.js');
      
      drupal_add_js('misc/ui/jquery.ui.datepicker.min.js');
      drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jquery.expertus.calendar.js',$header_optional);
      drupal_add_js(drupal_get_path('module', 'exp_sp_lnrcalendar') .'/exp_sp_lnrcalendar.js', $js_module_optional);
      drupal_add_css('misc/ui/jquery.ui.datepicker.css');
	  	if($theme_key == 'expertusoneV2') {
	  		//NEWUI THEME STYLE SHEET
	  		drupal_add_css(drupal_get_path('module', 'exp_sp_lnrreports') .'/exp_sp_lnrreports_search_v2.css');
	  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', array('group' => CSS_THEME, 'browsers' => array('IE' => 'gte IE 7'), 'preprocess' => FALSE));
	  		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
	  		drupal_add_css(drupal_get_path('module', 'exp_sp_core').'/css/calender_style_v2.css',$css_theme_optional);
	  	/* 	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning_v2.css', $css_theme_optional); */
	  	} else {
	  		drupal_add_css(drupal_get_path('module', 'exp_sp_lnrreports') .'/exp_sp_lnrreports_search.css');
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', array('group' => CSS_THEME, 'browsers' => array('IE' => 'gte IE 7'), 'preprocess' => FALSE));  
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
				drupal_add_css(drupal_get_path('module', 'exp_sp_core').'/css/calender_style.css',$css_theme_optional);
				/* drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.css', $css_theme_optional); */
	  	}
      //drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css',array('group' => CSS_THEME, 'browsers' => array('IE' => 'gte IE 7'), 'preprocess' => FALSE));
   
	  	
	  	if(module_exists('exp_sp_esignature')){
	  		if($theme_key == 'expertusoneV2') {
	  			drupal_add_css(drupal_get_path('module', 'exp_sp_esignature') .'/exp_sp_esignature_v2.css', array('type' => 'file', 'group' => CSS_DEFAULT));
	  		}else{
	  			drupal_add_css(drupal_get_path('module', 'exp_sp_esignature') .'/exp_sp_esignature.css', array('type' => 'file', 'group' => CSS_DEFAULT));
	  		}
	  	}
	  	
     // Multiselect
      $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
      drupal_add_css(drupal_get_path('module', 'exp_sp_lnrreports') .'/dragdrop/jsPlumb.css');
      drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.css');
      drupal_add_css(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.filter.css');
      drupal_add_js(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.filter.js', $js_module_optional);
      drupal_add_js(drupal_get_path('module', 'exp_sp_administration_user') .'/jquery.multiselect.js', $js_module_optional);
                
      includeJqGridJsCss();
      drupal_add_js(drupal_get_path('module', 'exp_sp_core').'/js/exp_sp_jquery/jqgrid_latest/js/grid.jqueryui.js', array('type' => 'file', 'scope' => 'header', 'group' => JS_LIBRARY, 'weight' => 5));
  		drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
      if($theme_key == 'expertusoneV2'){
      	drupal_add_css(drupal_get_path('module', 'exp_sp_lnrreports') .'/exp_sp_lnrreports_v2.css', $css_theme_optional);
      	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid_v2.css', $css_theme_optional);
      	drupal_add_css(drupal_get_path('module', 'exp_sp_lnrcalendar') .'/exp_sp_lnrcalendar_v2.css', $css_theme_optional);
      }
      else{      
      	drupal_add_css(drupal_get_path('module', 'exp_sp_lnrreports') .'/exp_sp_lnrreports.css', $css_theme_optional);
      	drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.css', $css_theme_optional);
      	drupal_add_css(drupal_get_path('module', 'exp_sp_lnrcalendar') .'/exp_sp_lnrcalendar.css', $css_theme_optional);
      }
      
      //JQUERY SCROLL BAR 
      drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/dragdrop/jquery.jscrollpane.js', $js_module_optional);
      
      
      $block['subject'] = t('Learner Reports');
      $block['content'] = ' ';
      $block['admin_access'] = $adminAccess;
      break;
      
      case 'tab_reports_search':
      $block['subject'] = ' ';
      $block['content'] = ' ';
      break;
      
  }
  return $block;
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_lnrreports_block_view', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_cron().
 */
function exp_sp_lnrreports_cron() {
	try {
    require_once('exp_sp_lnrreports.inc');
    
    // Terminate all long running queries
    terminateLongRunningQueriesOnReportsDBServer();
    
    $reportsQueue = DrupalQueue::get('report_schedules');
    expDebug::dPrint('$reportsQueue = ' . print_r($reportsQueue, true), 5);

    // Cleanup report schedules queue
	  $reportsQueue->removeExpiredItems();
		
	  //Insert items in report schedules queue
	  insertReadyToRunSchedulesInQueue($reportsQueue);
	}
	catch (ReportSchedulesException $repSchEx) {
		watchdog_exception('exp_sp_lnrreports_cron', $repSchEx);
    // Exception logged in the debug file by the original source of exception. No further action would be required.
    // Cannot die as will interrupt cron.php.
	}
	catch (Exception $ex) {
		watchdog_exception('exp_sp_lnrreports_cron', $ex);
		expertusLogError($ex);
		// Cannot die as will interrupt cron.php.
	}
}

/**
 * Implements hook_cron_queue_info().
 */
function exp_sp_lnrreports_cron_queue_info() {
	try{
	require_once('exp_sp_lnrreports.inc'); // this makes the queue and the worker callback available to cron.php

	//require_once('sites/all/services/GlobalUtil.php');
	$batchSize = 100; // one cron.php instance sends maximum these many mails
	// Discussed with Vincent and Commented By Shobana.N, Since the variable is not defined in exp_sp.ini. 
	/* $gutil = new GlobalUtil();
	$expConfig = $gutil->getConfig();
	$configBatchSize = trim($expConfig['email_queue_batch_size']) + 0; */ // the maximum number of items that can be be picked up from
	// the queue for processing by cron.php within the 'time' registered
	// below with drupal.
	/* if (!empty($configBatchSize)) {
		$batchSize = $configBatchSize;
	} */
	expDebug::dPrint('$batchSize = ' . $batchSize, 4);
	
	$throttleTime = 30; //milliseconds
	/* $gutil = new GlobalUtil();
	$expConfig = $gutil->getConfig();
	$configThrottleTime = trim($expConfig['email_queue_throttle_time']) + 0; */ // the time in milliseconds for which the queue worker will
	// be made to wait before it picks up the next job from the
	// queue for processing.
	/* if (!empty($configThrottleTime)) {
		$throttleTime = $configThrottleTime;
	} */
	expDebug::dPrint('$throttleTime = ' . $throttleTime, 4);
	
	$timeSliceForQueue = 120; // unit: seconds, default: 2 min
	$itemLeaseTime = 300; // unit: seconds, default: 5 min
	$semaphoreLockTimeout = $timeSliceForQueue + $itemLeaseTime + $throttleTime + 60; // in sec
	
	$queues['exp_email'] = array(
			'worker callback' => 'exp_email_queue_worker',
			'time' => $timeSliceForQueue, // unit: seconds
			'batch_size' => $batchSize, // unit: seconds
			'item_lease_time' => $itemLeaseTime, // unit: seconds. Has a value which is greater than the maximum (worst) amount of time
			// the queue worker needs to process one item.
			'throttle' => $throttleTime, // unit: milliseconds. Introduces a delay in the processing of successive jobs from the queue in cron.php
			'lock_timeout' => $semaphoreLockTimeout, // unit: seconds. Should be greater than time + item_lease_time + throttle (if present).
			// When present, will activate a semaphore lock so that only one instance of cron.php processes
			// items from the queue at any point of time.
	);
	
	$reportsScheduleQueueName = 'report_schedules';
	variable_set('queue_class_' . $reportsScheduleQueueName, 'ReportsScheduleQueue');
	
  $queues[$reportsScheduleQueueName] = array(
    'worker callback' => 'report_schedules_queue_worker',
    'time' => 300, // 5 min
    'item_lease_time' => 3600, // 1 hour
  );
  return $queues;
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_lnrreports_cron_queue_info', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_cron_queue_info_alter().
 */
function exp_sp_lnrreports_cron_queue_info_alter(&$queues) {
	try{
  // Make report_schedules the last queue to be processed by cron.php
  expDebug::dPrint('$queues = ' . print_r($queues, true), 5);
  $reportsSchedulesQueue = $queues['report_schedules'];
  unset($queues['report_schedules']);
  $queues['report_schedules'] = $reportsSchedulesQueue;
  
  $emailQueue = $queues['exp_email'];
  unset($queues['exp_email']);
  $queues = array('exp_email' => $emailQueue) + $queues;
  expDebug::dPrint('$queues after shift to end = ' . print_r($queues, true), 5);
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_lnrreports_cron_queue_info_alter', $ex);
  	expertusErrorThrow($ex);
  }
}

/*
 * reportAdminAccess()
 */
function reportAdminAccess(){
	try{
  return user_access('New Report Perm');
  } catch (Exception $ex) {
  	watchdog_exception('reportAdminAccess', $ex);
  	expertusErrorThrow($ex);
  }
}


/*
 * exp_sp_lnrreports_access() -
 */
function exp_sp_lnrreports_access() {
	try{
	return user_access('New Report Perm');
	} catch (Exception $ex) {
		watchdog_exception('exp_sp_lnrreports_access', $ex);
		expertusErrorThrow($ex);
	}
}


/**
 * Implementation of hook_permission().
 */
function exp_sp_lnrreports_permission() {
	try{
  return array(
    'New Report Perm' => array(
      'title' => t('New Report Perm')
    ),
  );
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_lnrreports_permission', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Implements hook_element_info.
 */
function exp_sp_lnrreports_element_info() {
	try{
  $types = array();

  $types['date_criteria_radios'] = array(
    '#input' => TRUE,
    '#process' => array('process_date_criteria_radios'), //process_date_criteria_radios
    '#theme' => array('date_criteria_radios'), //date_criteria_radios
    '#pre_render' => array('form_pre_render_conditional_form_element'), //form_pre_render_conditional_form_element
    '#value_callback' => 'date_criteria_radios_value_callback', //date_criteria_radios_value_callback
  );

  return $types;
  } catch (Exception $ex) {
  	watchdog_exception('exp_sp_lnrreports_element_info', $ex);
  	expertusErrorThrow($ex);
  }
}

function exp_email_queue_worker($message) {
	try {
		// Raise PHP max_execution_time
		// PHP set_time_limit() updates max_execution_time.
		// See http://stackoverflow.com/questions/8914257/difference-between-set-time-limit-and-ini-setmax-execution-time
		drupal_set_time_limit(300); // 5 min (keeping it same as item lease time)

		// Include module specific files where the send function is defined
		require_once('exp_sp_lnrreports.inc');

		// Send message
		expDebug::dPrint('$message->send = ' . $message->send, 4);
		call_user_func($message->send, $message);

		// Restore PHP max_execution_time
		drupal_set_time_limit(240); // Restore to a lower value but give suffient time to cron.php to do any remaining tasks
	}
	catch (Exception $ex) {
		watchdog_exception('exp_email_queue_worker', $ex);
		expertusLogError($ex);

		// Restore PHP max_execution_time
		drupal_set_time_limit(240); // Restore to a lower value but give suffient time to cron.php to do any remaining tasks

		// Cannot die as it will interrupt cron.php.
	}
}


function createUserEntityFlatTable($userId, $hour = 1){
	try{
		$lastUpdate = db_query('select max(updated_on) from report_entities_user_flat where user_id = :per_id', array(':per_id' => $userId))->fetchColumn();
		expDebug::dPrint('Last update value: ' . var_export($lastUpdate, 1), 4);

		$dataPopulation = false;
		$deltaPopulation = false;
		$mainTable = 'report_entities_user_flat';
		$tempTable = 'temp_report_entities_user_flat_' . $userId;

		if (is_null($lastUpdate)) {
			$table = $mainTable;
			$dataPopulation = true;
		} else {
			$table = $tempTable;
			$lastUpdate = new DateTime($lastUpdate);
			$curDate = new DateTime();
			$timeDifference = $curDate->diff($lastUpdate);
			if ($timeDifference->h >= $hour) {
				$dataPopulation = true;
				$deltaPopulation = true;
			}
		}
		expDebug::dPrint('$timeDifference  ' . $timeDifference->h, 4);
		expDebug::dPrint('data popupation needed in ' . $table . ' $dataPopulation =  ' . var_export($dataPopulation, 1), 4);

		if ($dataPopulation == false) {
			expDebug::dPrint('Sync up time less then '. $hour .' hour. Report User Table Sync up Skipped', 1);
			return;
		}

		if ($deltaPopulation == true) { // sync up happens only lastupdate greater then one hour
				
			$dropTable  = "DROP TABLE IF EXISTS " . $table ."; ";
			expDebug::dPrintDBAPI('$dropTable = ' , $dropTable);
			db_query($dropTable);

			$createTable = "CREATE TABLE ".$table." (
							  `RUID` varchar(255) NOT NULL,
							  `entity_id` int(11) NOT NULL,
							  `user_id` int(11) NOT NULL,
							  `updated_on` datetime DEFAULT NULL,
							   primary key (RUID)
							)
							ENGINE=InnoDB
							DEFAULT CHARSET=utf8";
			expDebug::dPrintDBAPI('$createTable = ' , $createTable);
			db_query($createTable);
		}

		if($userId ==1 ||  is_data_admin($userId)){
			$insQuery = "insert into ". $table ."
                         select
		    				  concat_ws('-', per.id, :per_id1 )  as `RUID`,
		                      per.id as entity_id,
                              :per_id2 as user_id,
		    				  now()
                         from slt_person per where per.id not in(1,2) and per.status != 'cre_usr_sts_del'";
		} else {
			$insQuery = "insert into ". $table ."
					select
						concat_ws('-', ent.entity_id, gusr.user_id)  as `RUID`,
					    ent.entity_id as entity_id,
					    gusr.user_id as user_id,
						now()
					from
					    slt_admin_group_users gusr
					    join slt_groups grp ON gusr.group_id = grp.id and grp.status = 'cre_sec_sts_atv'
					    left JOIN slt_mapped_entities ent ON (ent.group_id = gusr.group_id OR ent.group_id = 0)and ent.entity_type = 'cre_usr'
					    where gusr.user_id = :per_id1 and ent.entity_id is not null
					UNION
					select
						concat_ws('-', ent.entity_id, per.id)  as `RUID`,
					    ent.entity_id as entity_id,
					    per.id as user_id,
						now()
					from
					    slt_person per
					    JOIN slt_mapped_entities ent ON ent.owner_id = per.id and ent.entity_type = 'cre_usr' and group_id = -1
					    where per.id = :per_id2 and ent.entity_id is not null";
		}


		if ($dataPopulation == true) {
			expDebug::dPrintDBAPI('createUserEntityFlatTable obj = ' , $insQuery, array(':per_id1' => $userId, ':per_id2' => $userId));
			$result = db_query($insQuery, array(':per_id1' => $userId, ':per_id2' => $userId));
		}

		if ($deltaPopulation == true) {
			$delQuery = "DELETE p
							FROM ". $mainTable." p
							LEFT JOIN
							". $tempTable." t ON p.RUID = t.RUID 
							WHERE
							p.user_id = :per_id and
							t.RUID IS NULL";
			expDebug::dPrintDBAPI('$delQuery = ', $delQuery,  array(':per_id' => $userId));
			db_query($delQuery, array(':per_id' => $userId));
				
			$addQuery = "INSERT INTO ". $mainTable."
							SELECT tmp.*
							FROM ". $tempTable." tmp
							LEFT JOIN ". $mainTable." rent on tmp.RUID = rent.RUID and rent.user_id =  :per_id
							WHERE rent.RUID is null";
			expDebug::dPrintDBAPI('$addQuery = ' , $addQuery, array(':per_id' => $userId));
			db_query($addQuery, array(':per_id' => $userId));
				
			// update any one record to maintain updated_on value
			$updQuery = "update ". $mainTable." set updated_on = now() where user_id = :per_id limit 1";
			expDebug::dPrintDBAPI('$updQuery = ' , $updQuery,  array(':per_id' => $userId));
			db_query($updQuery, array(':per_id' => $userId));
		}
			

	}catch (Exception $ex) {
		watchdog_exception('createUserEntityFlatTable', $ex);
		expertusErrorThrow($ex);
	}
}
?>