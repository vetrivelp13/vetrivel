<?php
/**
 * Implementation of hook_init().
 */
function exp_sp_administration_location_init() {
    try {
    if(arg(0) == 'administration' && arg(1) == 'manage' && arg(2) == 'location'){
      include_once(drupal_get_path('module', 'exp_sp_administration_location') .'/exp_sp_administration_resource_location.inc');
      $css_theme_optional   = array('type' => 'file', 'group' => CSS_THEME);
      global $theme_key;
      if($theme_key == 'expertusoneV2') {
        drupal_add_css(drupal_get_path('module', 'exp_sp_administration_location') .'/exp_sp_administration_location_v2.css', $css_theme_optional);
        if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status
            drupal_add_css(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_v2.css', $css_theme_optional);
        } //#custom_attribute_0078975 - End Check module status
      } else {
        drupal_add_css(drupal_get_path('module', 'exp_sp_administration_location') .'/exp_sp_administration_location.css', $css_theme_optional);
      }
    }
  }
  catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_location_init', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * Implementation of hook_menu().
 */
function exp_sp_administration_location_menu() {
    try {
  $items = array();
  /*
  $items['administration/manage/location'] = array(
    'title' => t('LBL041'),
    'page callback' => 'getResourceTabContent',
    'access callback' => 'user_access',
    'access arguments' => array('Resources Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_location.inc',
    'weight' => 3
    );
    */
     $items['administration/manage/location'] = array(
    'title' => t('Location'),
    'page callback' => 'empty_value',
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'weight' => 2,
    'access arguments' => array('Resources Admin Perm'),
    );

   $items['administration/manage/location/%ctools_js/addedit'] = array(
    'title' => 'Add / Edit Resource',
    'page callback' => 'exp_sp_administration_location_addedit_form',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('Resources Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_location.inc'
  );
  $items['administration/manage/location/search/all'] = array(
    'title' => 'Fetch Resource List to display in JQGrid',
    'page callback' => 'sendResourceListToJqGrid',
    'access callback' => 'user_access',
    'access arguments' => array('Resources Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_location.inc'
    );
  $items['administration/manage/location/textfilter-autocomplete'] = array(
    'title' => 'Search By Text Filter Autocomplete',
    'page callback' => 'getAdminLocationAutoComplete', /* Added/changed by ganeshbabuv on Jan 11th 2016 for  Location Filter #66404 */
    'access callback' => 'user_access',
    'access arguments' => array('Resources Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_location.inc',
    );
  $items['administration/manage/location/export'] = array(
    'title' => 'Resource Search Results CSV Export',
    'page callback' => 'fetchResourceAll',
    'page arguments' => array('CSV'),
    'access callback' => 'user_access',
    'access arguments' => array('Resources Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_location.inc',
    );
  $items['administration/manage/location/print'] = array(
    'title' => 'Resource Search Results CSV Export',
    'page callback' => 'fetchResourceAll',
    'page arguments' => array('PDF'),
    'access callback' => 'user_access',
    'access arguments' => array('Resources Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_location.inc',
    );

  $items['administration/manage/location/citystate-autocomplete'] = array(
    'title' => 'Search By City State Text Filter Autocomplete',
    'page callback' => 'getAdminLocationAutoComplete', /* Added/changed by ganeshbabuv on Jan 11th 2016 for  Location Filter #66404 */
    'page arguments' => array(2,3),
    'access callback' => 'user_access',
    'access arguments' => array('Resources Admin Perm'),
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module','exp_sp_administration'),
    'file' => 'exp_sp_administration.inc'
    );

   $items['ajax/administration/location/activate-and-deactivate/%'] = array (
    'title' => 'Activate Or Deactivate Location',
    'page callback' => 'activateOrDeactivateLocation',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('Resources Admin Perm'),
    'file' => 'exp_sp_administration_location.inc',
    );

   $items['administration/location-add/%'] = array(
    'title' => 'Location Add',
    'page callback' => 'location_display',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('Resources Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_resource_location.inc'
  );

  $items['ajax/administration/manage/location/publish-and-unpublish/%'] = array (
    'title' => 'Publish Or Unpublish Location',
    'page callback' => 'publishOrUnpublishLocationStatus',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('Resources Admin Perm'),
    'file' => 'exp_sp_administration_location.inc'
    );

  expDebug::dPrint(' $items = ' . print_r($items, true) , 4);
  return $items;
  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_location_menu', $ex);
    expertusErrorThrow($ex);
  }
}

/*
 * exp_sp_administration_location_addedit_form() - Multi-Form implementation for location / facility
 */
function exp_sp_administration_location_addedit_form($js = NULL, $locationId, $facilityId = ''){
    try {
  $js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
  drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
  $css_theme_optional   = array('type' => 'file', 'group' => CSS_THEME);
  global $theme_key;
  if($theme_key == 'expertusoneV2') {
    drupal_add_css(drupal_get_path('module', 'exp_sp_administration_location') .'/exp_sp_administration_location_v2.css', $css_theme_optional);
  } else {
    drupal_add_css(drupal_get_path('module', 'exp_sp_administration_location') .'/exp_sp_administration_location.css', $css_theme_optional);
  }
  // Default modalTheme is ExpertusCToolsModalTheme (see exp_sp_core_extend_ctools_ajax.js:Drupal.CTools.Modal.show())
  $location_style = array(
    'ctools-admin-resource-addedit-style' => array(
      'modalSize' => array(
        'width' => 573,
        'minHeight' => 280,
       ),
    )
  );

  drupal_add_js($location_style, 'setting');

  if ($js) {
    // Prepare the arguments list to be passed to $formState['build_info']['args'] of each form
    $argsList = array();

    expDebug::dPrint('exp_sp_administration_location_addedit_form - $type : '.$type , 4);
    expDebug::dPrint('exp_sp_administration_location_addedit_form - $id : '.$id , 4);

    expDebug::dPrint('exp_sp_administration_location_addedit_form - $locationId : '.$locationId , 4);

    $locationTitle = '';
    if (!empty($locationId)) {
      $argsList[] = $locationId;

      $locationTitle = ' - '.titleController('EXP-SP-ADMIN-LOCATION-MODULE-LOCATIONID', getLocationTitleDirect($locationId),65);
    }
    // Prepare list of forms to be displayed in the modal
    $formIdList = array(
                        array('id' => 'exp_sp_administration_location_location_addedit_form', 'title' => (t('Location'))),
                        //array('id' => 'exp_sp_administration_location_facility_title_form', 'title' => t('LBL448'))
                        );

    exp_ctools_modal_multi_ajaxonly_forms_display($formIdList, $argsList);

  } else {

    throw new Exception('exp_sp_administration_location.module: exp_sp_administration_location_addedit_form() : nojs');

  }
  } catch (Exception $ex) {
    watchdog_exception('exp_sp_administration_location_addedit_form', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * exp_sp_administration_location_location_addedit_form() - Build the addedit form for Location.
 */
function exp_sp_administration_location_location_addedit_form($form, &$form_state, $renderMode, $locationId, $facilityId){
    try {
    expDebug::dPrint('$form_state[values] = ' . print_r($form_state['values'], true), 5);
    include_once(drupal_get_path('module', 'exp_sp_administration_location') .'/exp_sp_administration_resource_location.inc');
        include_once(drupal_get_path('module', 'exp_sp_administration_location') .'/exp_sp_administration_location.inc');
    include_once(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_custom_fields.inc');
    $showCancelSave = 1;
    if (empty($form_state['storage'])) {
        if(!empty($classId) && empty($form_state['storage'])) {
            $form_state['storage']['step'] = 'view';
        } elseif(empty($locationId)  && empty($form_state['storage'])) {
            $form_state['storage']['step'] = 'add';
        }
    }

      if (!empty($form_state['fromtooltip'])) {
        $fromToolTip = $form_state['fromtooltip'];
        $fromToolTipClassId = $form_state['fromtooltipClassId'];
      }
    $locationDetails     = array();
    $emptyId = (empty($form_state['values']['empty_id']) && empty($locationId)) ? microtime(false) : $form_state['values']['empty_id'];
    if (!empty($locationId)) {
      $locationDetails   = _getLocationDetails($locationId);
      expDebug::dPrint(' $locationDetails = ' . print_r($locationDetails, true) , 4);
    }

    $form              = newAddEditFormWithCancelAndSave('location-basic-addedit-form');
    $fieldList         = array('loc_id', 'name');
    //$defaultValue      = _getDefaultLocationAddEditFormFieldValue($fieldList, $form_state, $locationDetails[0]);
    addHiddenFieldToAddEditForm($form, 'empty_id', $emptyId);
    if(empty($locationId)){
       $entityId       = $form_state['values']['id'];
    } else {
       $entityId       = $locationId;
    }
    $form['mapped_location_id'] = array(
      '#type' => 'hidden',
      '#name' => 'mapped_location_id',
      '#value' => $entityId
    );

    $entityType        = 'cre_sys_obt_crs';
    $uniqueId          = $entityId.'-'.$entityType;

    $form['location_detail_disp'] = array(
      '#type'       => 'markup',
      '#prefix'     => '<div id="location-basic-addedit-form-disp">',
    );

    //list_forms($form, $form_state, $defaultValue);
    $form['location_detail_wrapper'] = array(
      '#type'       => 'markup',
      '#prefix'     => '<div class="location-basic-addedit-form-container" id="location-basic-addedit-form-container">',
    );

    $defaultValue =  getDefaultAddEditFormFieldValue('loc_id', $form_state, $locationDetails);
    addHiddenValueToAddEditForm($form, 'loc_id', $defaultValue);

    addTwoColumnRowToAddEditForm($form, 'loc_name_disp');

    $defaultValue =  getDefaultAddEditFormFieldValue('name', $form_state, $locationDetails);
    addTextFieldToAddEditForm($form, 'name', t('LBL311'), $defaultValue, 1, true);

    $defaultValue =  getDefaultAddEditFormFieldValue('capacity', $form_state, $locationDetails);
    addTextFieldToAddEditForm($form, 'capacity', t('LBL318'), $defaultValue, 2, false, false, 8);

    endAddEditTwoColumnRow($form);

    $defaultValue =  getDefaultAddEditFormFieldValue('addr1', $form_state, $locationDetails);
    addTextFieldToAddEditForm($form, 'addr1', t('LBL064'), $defaultValue, 3, false);

    $defaultValue =  getDefaultAddEditFormFieldValue('addr2', $form_state, $locationDetails);
    addTextFieldToAddEditForm($form, 'addr2', t('LBL065'), $defaultValue, 4, false);

    addTwoColumnRowToAddEditForm($form, 'loc_city_disp');

    $defaultValue =  getDefaultAddEditFormFieldValue('city', $form_state, $locationDetails);
    addTextFieldToAddEditForm($form, 'city', t('LBL066'), $defaultValue, 5, true);
    
    $userLocation = getUserCurrentLocation();
    $userLocation['country_code'] = empty($userLocation) ? 'US' : $userLocation['country_code'];
    $defaultAffectorValue =  getDefaultAddEditFormFieldValue('country', $form_state, $locationDetails);
    $defaultAffectedValue =  getDefaultAddEditFormFieldValue('state', $form_state, $locationDetails);
    // If this form rebuild is due to a country selected by the user, we need to set '' as default selection in the state dropdown
    if ($form_state['triggering_element']['#name'] == 'country') {
      $defaultAffectedValue = '';
    }

    $affector = array(
      'id' => 'country',
      'title' => t('LBL039'),
      'fetch_options' => getCountries,
      'default_value' => empty($defaultAffectorValue) ? $userLocation['country_code'] : $defaultAffectorValue,
      'tab_index' => 8,
      'mandatory' => true,
    );

    $affected = array(
      'id' => 'state',
      'wrapper_id' => 'adddedit-state-wrapper',
      'title' => t('LBL152'),
      'fetch_options' => getStatesForCountry,
      'default_value' => $defaultAffectedValue,
      'tab_index' => 9,
      'mandatory' => true,
    );


    //addTextFieldToAddEditForm($form, 'loc_country ', 'Country', $defaultValue['loc_name'], 0, false);
    $affector['tab_index'] = 6;
    $affected['tab_index'] = 7;
    addAjaxDependantDropDownPairToUserFormState($form, $affector, $affected);
    endAddEditTwoColumnRow($form);

    addTwoColumnRowToAddEditForm($form, 'loc_country_disp');
    addAjaxDependantDropDownPairToUserFormCountry($form, $affector, $affected,'location-basic-addedit-form');
    //addTextFieldToAddEditForm($form, 'loc_state   ', 'State', $defaultValue['loc_name'], 0, false);

    $defaultValue =  getDefaultAddEditFormFieldValue('zipcode', $form_state, $locationDetails);
    addTextFieldToAddEditForm($form, 'zipcode', t('LBL562'), $defaultValue, 8, true, false, 15); #0065630
    endAddEditTwoColumnRow($form);

    addTwoColumnRowToAddEditForm($form, 'loc_timezone_disp');

    $timeZoneList = _getTimeZone();
    foreach ($timeZoneList as $id => $row) {
    $zoneName = explode(')',$row->zonename);
    $timeZone[$row->zonecode] = $row->zonename;
    }

    $pfTimeZone = $timeZone;
    $timezone = array(
    'id' => 'timezone',
    'title' => t('LBL297'),
    'fetch_options'=> $pfTimeZone,
    'default_value' => $defaultTimeZone,
    );

    $defaultTimeZone =  getDefaultAddEditFormFieldValue('timezone', $form_state, $locationDetails);
    addDropDownToAddEditForm($form, 'timezone', t('LBL297'),$pfTimeZone,$defaultTimeZone,9,true);

    $defaultValue =  getDefaultAddEditFormFieldValue('equipment', $form_state, $locationDetails);
    $defaultValueArray = explode(',', $defaultValue);
    $equipmentOption = getProfileItemNamesKeyed('lrn_res_eqm_');
    addMultiselectDropDownToAddEditForm($form, 'equipment', t('Equipment'), $equipmentOption, $defaultValueArray, 10  );

    addTwoColumnRowToAddEditForm($form, 'loc_contact_disp');

    $defaultValue =  getDefaultAddEditFormFieldValue('contact_fname', $form_state, $locationDetails);
    addTextFieldToAddEditForm($form, 'contact_fname', t('LBL153'), $defaultValue, 11, false);

    $defaultValue =  getDefaultAddEditFormFieldValue('phone', $form_state, $locationDetails);
    addTextFieldToAddEditForm($form, 'phone', t('LBL172'), $defaultValue, 12, false);
    endAddEditTwoColumnRow($form);

    addTwoColumnRowToAddEditForm($form, 'latitude_longitude');
    $defaultLatitude =  getDefaultAddEditFormFieldValue('latitude', $form_state, $locationDetails);
    addHiddenValueToAddEditForm($form, 'dflt_latitude', $defaultLatitude);
    addTextFieldToAddEditForm($form, 'latitude', t('LBL1058'), $defaultLatitude, 13, false);

    $defaultLongitude =  getDefaultAddEditFormFieldValue('longitude', $form_state, $locationDetails);
    addHiddenValueToAddEditForm($form, 'dflt_longitude', $defaultLongitude);
    addTextFieldToAddEditForm($form, 'longitude', t('LBL1059'), $defaultLongitude, 14, false);
    endAddEditTwoColumnRow($form);

    /*
    $equipmentOption = array('is_projector' => 'Projector', 'is_maker' => 'Maker', 'is_computer' => 'Computer');
    addMultiselectDropDownToAddEditForm($form, 'equipment', t('Equipment'), $equipmentOption, $defaultValue, 20);
*/

    endAddEditTwoColumnRow($form);

    addTwoColumnRowToAddEditForm($form, 'loc_email_disp');

    $defaultValue =  getDefaultAddEditFormFieldValue('email_id', $form_state, $locationDetails);
    addTextFieldToAddEditForm($form, 'email_id', t('LBL061'), $defaultValue, 13, false);
    //addTextFieldToAddEditForm($form, 'loc_equipment', 'Equipment', $defaultValue['loc_name'], 0, false);

    endAddEditTwoColumnRow($form);

    if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/To display the Custom attributes UI
        include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
        renderCustomAttributesInAddEditForm($form, $form_state,'cre_sys_obt_loc',$locationId);
        addCustomAttributesBlockToAddEditForm($form, $form_state, $userId, 'location', 'loc-custom-attributes', 'location-basic-addedit-form');
    }else{
        addCustomFieldsBlockToAddEditForm($form, $form_state, $locationId, 'location', 'loc-custom-fields', 'location-basic-addedit-form', 16);
    } //#custom_attribute_0078975 - End Check module status
    
    
   // addCustomFieldsBlockToAddEditForm($form, $form_state, $defaultValue['crs_id'], 'course', 'course-custom-fields'.$defaultValue['crs_id'], 'catalog-course-basic-addedit-form', 10);
  //addEditFormWithLocationCancelAndSaveClose($form, 'location-basic-addedit-form', 'location-basic-save', 'location-basic-cancel', $entityId);
    //locationAddEditFormWithCancelAndSaveClose($form, 'location-basic-addedit-form', 'location-basic-save', 'location-basic-cancel', $locationDetails,$fromToolTip);
    locationNewSubmitAddEditFormWithCancelAndSaveClose($form, 'location-basic-addedit-form', 'location-basic-save', 'location-basic-cancel', $locationDetails['loc_id'],'',$emptyId,$fromToolTip,$fromToolTipClassId);  

    $form['location_detail_disp_end'] = array(
      '#type'       => 'markup',
      '#suffix'     => '<div class="clearBoth"></div></div>',
    );

    $form['location_detail_wrapper_end'] = array(
      '#type'       => 'markup',
      '#suffix'     => '</div>',
    );

    return $form;
    } catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_location_location_addedit_form', $ex);
        expertusErrorThrow($ex);
    }
}

function exp_sp_administration_location_location_addedit_form_validate($form, &$form_state){
    try {
        include_once(drupal_get_path('module', 'exp_sp_administration_location') .'/exp_sp_administration_resource_location.inc');
        $form_state['hidden-save-submit'] = false;
        $form_state['esign_show_popup'] = false;
        $form_stat['user_action_status'] = '';
        expDebug::dPrint('$form_state[triggering_element][#name] = ' . $form_state['triggering_element']['#name'], 4);
        expDebug::dPrint('$form_state[values] = ' . print_r($form_state['values'], true), 4);
        if ($form_state['values']['op'] == t('LBL109')) {
            $form_state['input'] = array(); // Clear user input - raw
            $form_state['values'] = array(); // Clear user input - security cleared
            $form_state['rebuild'] = TRUE; // Rebuild the form. Submit handler will not be called.
            return;
        }

        $triggerElementByName  = $form_state['triggering_element']['#name'];

        if ($form_state['triggering_element']['#name'] == 'country') {
            // Since country has changed, we need to unset any selection for state made by the user
            unset($form_state['values']['state']);
            unset($form_state['input']['state']);
            $form_state['storage']['affected_dropdown'] = 'state';
            return;
        }

        if (($form_state['triggering_element']['#name'] == 'save' || $form_state['triggering_element']['#name'] == 'saveandpublish')) {

            if(count($form['state']['#options']) > 1){
                addEditCheckMandatoryFields($form, $form_state, array('name','city','country','state','zipcode','timezone'));
            }else{
                addEditCheckMandatoryFields($form, $form_state, array('name','city','country','zipcode','timezone'));
            }
            // Validate capacity
            if (!empty($form_state['values']['capacity'])) {
                // Validate if capacity is a number
                if (!preg_match('/^[0-9]*$/',$form_state['values']['capacity'])) {
                    form_set_error('capacity', t('ERR097').' '.t('LBL318')); // 'Enter only numeric values in Capacity'
                    $form_state['esign_show_popup']= false;
                }

                // Validate the count of active enrollments in any active ILT classes does not exceed the number.
                if (!empty($form_state['values']["loc_id"])) {
                    $conflictingClassTitle = locationAdminILTClassEnrollmentsConflict($form_state['values']["loc_id"], $form_state['values']['capacity']);
                    if (is_string($conflictingClassTitle)) {
                        /*
                         * The enrolled users for class "<ILT class name>" at this location exceed the capacity.
                        * Note: Users may have been enrolled directly to the class or through a training plan.
                        */
                        form_set_error('capacity', t('ERR163') . ' <b>"' . $conflictingClassTitle . '"</b> ' . t('ERR164') .
                                '<br><b>' . t('LBL185') . '</b>: ' . t('ERR165'));
                        $form_state['esign_show_popup']= false;
                    }
                }
            }
            // Validate email address
            if (!empty($form_state['values']['phone'])) {
                if(!preg_match('/^[0-9\+\-#]*$/',$form_state['values']['phone'])){ // Check contact number format
                    form_set_error('phone', t('ERR097').' '.t('LBL172'));
                    $form_state['esign_show_popup']= false;
                }
            }
            // Validate email address
            if (!empty($form_state['values']['email_id'])) {
                if (!validateEmail($form_state['values']['email_id'])) { // Check email address format
                    form_set_error('email_id', t('ERR002'));
                    $form_state['esign_show_popup']= false;
                }
            }
            // latitude validation
            if(!empty($form_state['values']['latitude'])){

                if(!preg_match('/^[-]?(([0-8]?[0-9])\.(\d+))|(90(\.0+)?);[-]?((((1[0-7][0-9])|([0-9]?[0-9]))\.(\d+))|180(\.0+)?)$/', $form_state['values']['latitude'])){
                    form_set_error('latitude',t('ERR171').' '.t('LBL1058'));
                    $form_state['esign_show_popup']= false;
                }

            }
            // longitude validation
            if(!empty($form_state['values']['longitude'])){
                if(!preg_match('/^[-]?((((1[0-7][0-9])|([0-9]?[0-9]))\.(\d+))|180(\.0+)?)$/', $form_state['values']['longitude'])){
                    form_set_error('longitude', t('ERR171').' '. t('LBL1059'));
                    $form_state['esign_show_popup']= false;
                }

            }

            if(module_exists('exp_sp_administration_customattribute')){   //#custom_attribute_0078975 - Check module status/Validate Custom Attributes
                 include_once(drupal_get_path('module', 'exp_sp_administration_customattribute') .'/exp_sp_administration_customattribute_renderinforms.inc');
                 validateCustomAttributesInAddEditForm($form, $form_state,'cre_sys_obt_loc');
            }else{  // Validate the custom fields
            validateCustomFieldsInAddEditForm($form, $form_state);
            } //#custom_attribute_0078975 - End Check module status
        }

        if ($triggerElementByName == 'hidden-save' ) {
            $form_state['hidden-save-submit']=true;
            $form_state['esign_show_popup']= false;
        }

        if($form_state['triggering_element']['#name'] == 'delete' ||  $form_state['triggering_element']['#name'] == 'unpublish'){
            $form_state['esign_show_popup']= true;
        }

        $form_state['esign_validation_status'] = false;
        if(!($form_state['hidden-save-submit'])){
            unset($_SESSION['esign_validate']);
        }

        $form_state['esign_show_popup'] = false;
    } catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_location_location_addedit_form_validate', $ex);
        expertusErrorThrow($ex);
    }
}



function exp_sp_administration_location_permission() {
    try {
    return array(
    'Resources Admin Perm' => array(
      'title' => t('Resources Admin Perm')
    )
  );
    } catch (Exception $ex) {
        watchdog_exception('exp_sp_administration_location_permission', $ex);
        expertusErrorThrow($ex);
    }
}
?>