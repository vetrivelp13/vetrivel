<?php 
/* Implementation of hook_init().
 */
function exp_sp_administration_announcement_init() {
	try {
		$request_uri = request_uri();
		if(stripos($request_uri,'administration/manage/announcement')!==false){
			global $theme_key;
			// Multiselect
			$js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
				
			if($theme_key == "expertusoneV2"){
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning_v2.css');
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration_announcement').'/exp_sp_administration_announcement_v2.css', $css_module_optional);
			}else{
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_learning.css');
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration_announcement').'/exp_sp_administration_announcement.css', $css_module_optional);
			}
			//CUSTOM SCROLLBAR "JSscrollbar"
			drupal_add_js(drupal_get_path('module', 'exp_sp_lnrreports') .'/jscrollbar/jquery.jscrollpane.js', $js_module_optional);
				
		}
	} catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_announcement_init', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * Implementation of hook_block_info().
 */
function exp_sp_administration_announcement_block_info() {
	try{
	$blocks = array();
	//$check_ann = newMyLearningIsActive();
	//if($check_ann){
		$blocks['announcement_mylearning'] = array(
				'info' => t('New theme Announcement'),
				'cache' => DRUPAL_CACHE_PER_ROLE,
				'visibility' => BLOCK_VISIBILITY_NOTLISTED,
				'pages' => 'learning/enrollment-search*'
		);
	//}
	//else {
	$blocks['announcement'] = array(
			'info' => 'Announcements',
			'cache' => DRUPAL_CACHE_PER_ROLE,
			'visibility' => BLOCK_VISIBILITY_LISTED,
			'pages' => 'learning/enrollment-search*'
	);
	//}
	return $blocks;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_announcement_block_info', $ex);
		expertusErrorThrow($ex);
	}
}

function exp_sp_administration_announcement_block_view($delta = '') {
	try{
	include_once(drupal_get_path('module', 'exp_sp_administration_announcement') .'/exp_sp_administration_announcement.inc');
	$js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
	$css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
	//$announceCount = fetchAnnouncementUserWidget('count');
	global $theme_key, $user_preference;
	$block = array();
	expDebug::dPrint('testtest'.$delta);
	switch ($delta) {
		case 'announcement':			
			if($theme_key == 'expertusoneV2') {
				//NEWUI THEME STYLE SHEET
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration_announcement').'/exp_sp_administration_announcement_v2.css', $css_module_optional);
				//drupal_add_css(drupal_get_path('module', 'exp_sp_my_profile') .'/exp_sp_my_profile_v2.css', $css_theme_optional);
				//drupal_add_css(drupal_get_path('module', 'exp_sp_my_activity') .'/exp_sp_my_activity_v2.css', $css_theme_optional);
				//drupal_add_css(drupal_get_path('module','exp_sp_my_skill') .'/exp_sp_my_skill_v2.css', $css_theme_optional);
			}else {
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration_announcement').'/exp_sp_administration_announcement.css', $css_module_optional);
				//drupal_add_css(drupal_get_path('module', 'exp_sp_my_profile') .'/exp_sp_my_profile.css', $css_theme_optional);
				//drupal_add_css(drupal_get_path('module', 'exp_sp_my_activity') .'/exp_sp_my_activity.css', $css_theme_optional);
				//drupal_add_css(drupal_get_path('module','exp_sp_my_skill') .'/exp_sp_my_skill.css', $css_theme_optional);
			}
			drupal_add_js(drupal_get_path('module', 'exp_sp_administration_announcement').'/exp_sp_administration_announcement.js',$js_module_optional);
			drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
			drupal_add_js(drupal_get_path('module', 'exp_sp_my_profile').'/exp_sp_my_profile.js',$js_module_optional);
			//drupal_add_js(drupal_get_path('module', 'exp_sp_my_activity') .'/exp_sp_my_activity.js',$js_module_optional);
			//drupal_add_js(drupal_get_path('module', 'exp_sp_my_skill') .'/exp_sp_my_skill.js',$js_module_optional);
			includeJqGridJsCss();
			$block['subject'] = t('LBL196');
			$content = '<!-- <input id="exp_sp_administration_announcement_block_max_list_count" type="hidden" value="' . variable_get('exp_sp_administration_announcement_block_max_list_count', 5) .'" /> -->
			<div id="announcement_loader" class="my-transcript-content">
			<div class="my-transcript-inner">
			<div id="announcement_list">
			<table id ="announcement_jqgrid"></table>
			<div id="announcement_pager" class="my-transcript-pager" style="display:none;"></div>
			</div>
			</div>
			</div>';
			if ($theme_key == 'expertusoneV2' && !isset($user_preference['mylearning_right']['announcement'])) {
				$block_content = '';
			} else {
				$block_content = $content;
			}
			$block['content'] = $block_content;
			break;
			case 'announcement_mylearning':
				$css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
// 				drupal_add_css(drupal_get_path('module', 'exp_sp_learning_learner').'/css/jquery.carousel.css');
				drupal_add_css(drupal_get_path('module', 'exp_sp_administration_announcement').'/exp_sp_administration_announcement_v2.css', $css_module_optional);
				drupal_add_js(drupal_get_path('module', 'exp_sp_administration_announcement').'/exp_sp_administration_announcement.js',$js_module_optional);
			//	drupal_add_js(drupal_get_path('module', 'exp_sp_learning').'/exp_sp_learning.js',$js_module_optional);
				drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/exp_sp_mylearning.js',$js_module_optional);
				drupal_add_js(drupal_get_path('module', 'exp_sp_learning_learner').'/js/exp_sp_registrationdetail/jquery.carousel.js');

// 				drupal_add_js('../jcor/jcarousel-0.2.3/lib/jquery.jcarousel.pack.js');
// 				drupal_add_css('jcor/jcarousel-0.2.3/lib/jquery.jcarousel.css', $css_module_optional);
// 				drupal_add_css('jcor/jcarousel-0.2.3/skins/tango/skin.css', $css_module_optional);
				

				// 				drupal_add_js('../jcor/jcarousel-0.2.3/lib/jquery.jcarousel.pack.js');
// 				drupal_add_css('jcor/jcarousel-0.2.9/style.css', $css_module_optional);
				drupal_add_css('jcor/jcarousel-0.2.9/style-inline.css', $css_module_optional);
// 				drupal_add_css('jcor/jcarousel-0.2.9/skins/tango/skin.css', $css_module_optional);
				
				drupal_add_js(drupal_get_path('module', 'exp_sp_administration_learning') .'/exp_sp_administration_data_grid.js', $js_module_optional);
				drupal_add_js(drupal_get_path('module', 'exp_sp_my_profile').'/exp_sp_my_profile.js',$js_module_optional);
				$count = notificationforann();
				expDebug::dPrint('Count for notification'.$count);
				includeJqGridJsCss();
				$block['subject'] = '';
				$content = '<div id="user-announcement-settings">
					<div class="vtip" title="'.t("LBL196").'"><div class="announcementicon" onclick="showUserAnnouncementSettings()">';
				if($count > 0 && $count < 100){
				$content.= '<div class="unread-notification" id="announcement-notification">'.$count.'</div>';
	}
				if($count >= 100){
					$content.= '<div class="unread-notification" id="announcement-notification" style = "width:20px;">'.$count.'</div>';
				}
				$content.= '<span class="my-announcement-arrow-new" id="my-announcement-arrow-new"></span></div>
					</div></div>';
// 				$content = '';
				expDebug::dPrint('addlist conetnt value:' . print_r($content, 1));
				$block['content'] = $content;
				break;
	}
		return $block;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_announcement_block_view', $ex);
		expertusErrorThrow($ex);
	}
}

/**
 * Implementation of hook_menu().
 */
function exp_sp_administration_announcement_menu() {  
	try{
  $items = array();
 			
  $items['administration/manage/announcement'] = array(
    'title' => t('LBL350'),
    'page callback' => 'empty_value', 
    'access callback' => 'user_access',
    'type' => MENU_CALLBACK,
    'weight' => 6,
    'access arguments' => array('Announcement Admin Perm'),
    );
  
   $items['administration/manage/announcement/search/all'] = array( 
    'title' => 'Fetch banner list to display in JQGrid',
    'page callback' => 'sendAnnouncementListToJqGrid',
    'access callback' => 'user_access',
    'access arguments' => array('Announcement Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_announcement.inc'
    );
      
  $items['administration/manage/announcement/textfilter-autocomplete'] = array(
    'title' => 'Search By Text Filter Autocomplete',
    'page callback' => 'getAnnouncementTextFilterAutoComplete',
    'access callback' => 'user_access',
    'access arguments' => array('Announcement Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_announcement.inc',
    ); 
       
   $items['administration/manage/announcement/export'] = array(
    'title' => 'Announcement Details Search Results CSV Export',
    'page callback' => 'fetchAllAnnouncements',
    'page arguments' => array('CSV'),
    'access callback' => 'user_access',
    'access arguments' => array('Announcement Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_announcement.inc',
    );  
     
    $items['administration/manage/announcement/print'] = array( 
     'title' => 'Announcement Details Results Print to PDF',
     'page callback' => 'fetchAllAnnouncements',
     'page arguments' => array('PDF'),
     'access callback' => 'user_access',
     'access arguments' => array('Announcement Admin Perm'),
     'type' => MENU_CALLBACK,
     'file' => 'exp_sp_administration_announcement.inc',
    );
     
   $items['administration/manage/announcement/%ctools_js/addedit'] = array(
    'title' => 'Add / Edit Announcement',
    'page callback' => 'exp_sp_administration_announcement_display_addedit_form',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('Announcement Admin Perm'),
    'type' => MENU_CALLBACK,
    'file' => 'exp_sp_administration_announcement.inc'
    );
 
   $items['administration/manage/announcement/addedit'] = array(
    'title' => 'Add / Edit Announcement',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exp_sp_administration_banner_addedit_form'), 
    'access callback' => 'user_access',
    'access arguments' => array('Announcement Admin Perm'),
    'type' => MENU_CALLBACK
    );     

  $items['ajax/administration/manage/announcement/publish-and-unpublish/%/%'] = array (
    'title' => 'Publish Or Unpublish Announcement',
    'page callback' => 'publishOrUnpublishAnnouncement',
    'page arguments' => array(5,6),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('Announcement Admin Perm'),
    'file' => 'exp_sp_administration_announcement.inc'
	);  
  
  $items['learning/announcement/%'] = array (
  		'title' => 'Fetch the list of announcement details',
  		'page callback' => 'get_announcement_details',
  		'access callback' => 'user_access',
  		'page arguments' => array(2),
  		'type' => MENU_CALLBACK,
  		'access arguments' => array('expertus learner'),
  		'file' => 'exp_sp_administration_announcement.inc'
  );
  
  $items['learning/announcement/dismiss/%/%'] = array (
  		'title' => 'Dismiss announcement',
  		'page callback' => 'dismiss_announcement',
  		'access callback' => 'user_access',
  		'page arguments' => array(3,4),
  		'type' => MENU_CALLBACK,
  		'access arguments' => array('expertus learner'),
  		'file' => 'exp_sp_administration_announcement.inc'
  );
  $items['administration/view-announce/%ctools_js/addedit/%'] = array(
  		'title' => 'View Announcement',
  		'page callback' => 'exp_sp_administration_viewanounce_addedit_form',
  		'page arguments' => array(3,4),
  		'access callback' => 'user_access',
  		'access arguments' => array('Announcement Admin Perm'),
  		'type' => MENU_CALLBACK,
  		'file' => 'exp_sp_administration_announcement.inc'
  );
      
    expDebug::dPrint(' $items = ' . print_r($items, true) , 4);
	return $items;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_announcement_menu', $ex);
		expertusErrorThrow($ex);
	}
}



function exp_sp_administration_announcement_display_addedit_form($js = NULL, $annId) {
	try {
	if ($js) {
		$argsList = array();
		 $bannerTitle='';
		if (!empty($annId)) {
			$argsList[] = $annId;
		} 
		// Prepare list of forms to be displayed in the modal
		$formIdList = array(
				array('id' => 'exp_sp_administration_announcement_addedit_form', 'title' => t('LBL350')),
		);

		// Prepare the arguments list to be passed to $formState['build_info']['args'] of each form

		exp_ctools_modal_multi_ajaxonly_forms_display($formIdList, $argsList);
	}
	else {
		expDebug::dPrint('exp_sp_administration_announcement.module: exp_sp_administration_announcement_display_addedit_form',4);
		throw new Exception('exp_sp_administration_announcement.module: exp_sp_administration_announcement_display_addedit_form() : nojs');
	}
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_announcement_display_addedit_form', $ex);
		expertusErrorThrow($ex);
	}
}


/**
 * exp_sp_administration_announcement_addedit_form() - Build the addedit form.
 */

function exp_sp_administration_announcement_addedit_form($form, &$form_state, $renderMode, $arg ) {
	try{
	global $theme_key;
	expDebug::dPrint(' $form = ' . print_r($form, true) , 5);
	expDebug::dPrint(' $form_state = ' . print_r($form_state, true) , 5);
	expDebug::dPrint(' $renderMode = vbvb ' . print_r($renderMode, true) , 4);
	expDebug::dPrint(' $arg = ' . print_r($arg, true) ,4);
	if($theme_key == 'expertusoneV2') {
		$wid = 600;
	}else{
		$wid = 580;
	}
	$sample_style = array(
			'ctools-admin-announcement-notice-addedit-style' => array(
					'modalSize' => array(
							'type' => 'fixed',
							'width' => $wid,
							'height' => 'auto',
							'minHeight' => 330,
							/*'maxHeight' => 685, */
							'display' => 'table',
							'addWidth' => 20,
							'addHeight' => 20,
					),
					'modalOptions' => array(
							'opacity' => .5,
							'background-color' => '#000',
							'height' => 'auto',
					),
					'animation' => 'fadeIn',
					'modalTheme' => 'ExpertusCToolsModalTheme',
					'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'ctools_ajax_sample'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
			)
	);

	drupal_add_js($sample_style, 'setting');

	include_once('exp_sp_administration_announcement.inc');
	include_once(drupal_get_path('module', 'exp_sp_administration_catalog_access') .'/exp_sp_administration_catalog_access.inc');	
	if($theme_key == 'expertusoneV2') {
		$css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_announcement').'/exp_sp_administration_announcement_v2.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_catalog') .'/exp_sp_administration_catalog_v2.css', $css_theme_optional);
	}else{
		$css_theme_optional = array('type' => 'file', 'group' => CSS_THEME);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_announcement').'/exp_sp_administration_announcement.css', $css_theme_optional);
		drupal_add_css(drupal_get_path('module', 'exp_sp_administration_catalog') .'/exp_sp_administration_catalog.css', $css_theme_optional);
	}
	$js_module_optional = array('type' => 'file', 'group' => JS_DEFAULT);
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration') .'/exp_sp_administration_addedit_behaviours.js', $js_module_optional);
	drupal_add_js(drupal_get_path('module', 'exp_sp_administration_announcement').'/exp_sp_administration_announcement.js',$js_module_optional);

	$annDetails = array();
	if (empty($form_state['values']) && !empty($arg)) {
		// An edit operation. Is not form rebuild after save, in which case we can fetch values from $form_state.
		// Fetch user details to be displayed in the form
		$annDetails = getAnnouncementDetails($arg, array('id', 'user_id', 'description', 'lang_code', 'status','from_date', 'to_date', 'from_time','to_time',
				'priority', 'created_by', 'created_on', 'updated_by','updated_on', 'custom0', 'custom1', 'custom2', 'custom3', 'custom4'));

	} 
expDebug::dPrint('announcement details::'.print_r($annDetails,true),5);
	$emptyId = '';
	if(empty($arg)){
		$entityId       = $form_state['values']['id'];
		$emptyId        = empty($form_state['values']['empty_id']) ? microtime(false) : $form_state['values']['empty_id'];
	} else {
		$entityId       = $arg;
	}

	$entityType        = 'cre_sys_obt_not';
	$uniqueId          = $entityId.'-'.$entityType; 
	 


	// Create a new add/edit form
	$form = newAddEditFormWithCancelAndSave('announcement-basic-addedit-form');

	// Define the form fields
	addHiddenFieldToAddEditForm($form, 'empty_id', $emptyId);
	addHiddenFieldToAddEditForm($form, 'entity_value', $entityType);
	$AnnId =  getDefaultAnnouncementAddEditFormFieldValue('id', $form_state, $annDetails);
	addHiddenValueToAddEditForm($form, 'id', $AnnId);

	addHiddenFieldToAddEditForm($form, 'ckeditor_word_count', '500');
	 $form['addedit-long-description-container-start'] = array(
			'#type'   => 'markup',
			'#markup' => '<div class="addedit-long-description-container">',
	);
	$defaultValue =  getDefaultAnnouncementAddEditFormFieldValue('description', $form_state, $annDetails);
	addTextFormatFieldToAddEditForm($form, 'description', t('LBL350'),$defaultValue, 'full_html', 4, true, false, 500);
	$form['addedit-long-description-container-end'] = array(
			'#type'   => 'markup',
			'#markup' => '</div>',
	);  
	$form['announce-style-start'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="announce-style-container">'
	);
	addTwoColumnRowToAddEditForm($form, 'from_date_lang_code');
	$defaultValue =  getDefaultAnnouncementAddEditFormFieldValue('from_date', $form_state, $annDetails);
	$defaultValue = ($defaultValue!='' && strtotime($defaultValue) !='') ? date('m-d-Y', strtotime($defaultValue)) : $defaultValue;
	$fromreadOnly = ($defaultValue != '' && $defaultValue <= date('m-d-Y')) ? true : false;
	$frDte = $defaultValue;
	addDateFieldToAddEditFormNew($form, 'from_date', t('LBL620'), $defaultValue, 'From : mm/dd/yyyy', 'future', t('LBL218'), 2,true,$fromreadOnly);
	$defaultValue =  getDefaultAnnouncementAddEditFormFieldValue('from_time', $form_state, $annDetails);
	$form['from_time_data_disp_start'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="addedit-onecol-secondcol"><div class="admin-announce-frompart">'
	);
	$form['timepicker_load'] = array(
			'#type' => 'markup',
			'#prefix' => '<div style="display:none"><img src="themes/seven/images/buttons.png" width="0" height="0" onload="$(\'#root-admin\').data(\'narrowsearch\').timepickerLoad();return false;" width="100" height="132" /></div>',
	);
	
	$ftreadonly = (($defaultValue <= date('H:i',time()) && $fromreadOnly == true) || ($defaultValue == t('hh:mm') && ($frDte != '' && $frDte < date('m-d-Y')))) ? true : false;
	$Time = array();
	$Time['tabindex'] = 3;
	$Time['readonly'] =  "readonly";
	$Time['autocomplete'] = 'off';
	$Time['class'] = array('addedit-edit-start');
	$Time['class'][] = 'addedit-edit-ac-textfield';
	$Time['class'][] = 'exp-timepicker';
	$Time['class'][] = ($defaultValue == '' || $defaultValue == t('hh:mm') || $ftreadonly == true) ? 'narrow-search-filterset-daterange-empty' : 'narrow-search-filterset-daterange-nonempty';
	$Time['class'][] = 'callback-addEditTimeField';
	$Time['onblur'][] = 'addEditTimeField(this);';
	
	$form['from_time'] = array(
			//'#title' => t('LBL649'),
			'#id'   => 'start_time',
			'#type' => 'textfield',
			'#prefix' => '<div id="admin-announcement-data-part-expires" class="addedit-new-field-traninig-program-expires"><div class="addedit-secondcol-field-value">',
      '#suffix' => '</div></div>',
			'#default_value' => $defaultValue ? $defaultValue : t('hh:mm'),
			'#disabled' => $ftreadonly,
			'#size' => 6,
			'#attributes' => $Time,
	);
	$form['from_time_disp_end'] = array(
			'#type' => 'markup',
			'#markup' => '</div></div>'
	); 
	$annDetails['lang_code'] = !empty($annDetails['lang_code'])? $annDetails['lang_code'] : 'cre_sys_lng_eng';
	$defaultValue =  getDefaultAnnouncementAddEditFormFieldValue('lang_code', $form_state, $annDetails);
	addDropDownToAddEditForm($form, 'lang_code', t('LBL038'), getProfileItemNamesKeyed('cre_sys_lng_'), $defaultValue, 4, true,false,array(),'announcement');
	endAddEditTwoColumnRow($form);
	
	addTwoColumnRowToAddEditForm($form, 'to_date_priority');
	$defaultValue =  getDefaultAnnouncementAddEditFormFieldValue('to_date', $form_state, $annDetails);
	if($defaultValue!='' && strtotime($defaultValue) !='') $defaultValue = date('m-d-Y', strtotime($defaultValue));
	$toreadOnly = ($defaultValue!='' && $defaultValue <= date('m-d-Y')) ? true : false;
	$toDte = $defaultValue;
	addDateFieldToAddEditFormNew($form, 'to_date', t('LBL621'), $defaultValue, 'To : mm/dd/yyyy', 'future', t('LBL218'), 5,false,$toreadOnly);
	
	$defaultValue =  getDefaultAnnouncementAddEditFormFieldValue('to_time', $form_state, $annDetails);
	$form['to_time_data_disp_start'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="addedit-onecol-secondcol"><div class="admin-announce-topart">'
	);
	
	$ttreadonly = (($defaultValue <= date('H:i',time()) && $toreadOnly == true) || ($defaultValue == t('hh:mm') && ( $toDte !='' && $toDte < date('m-d-Y')))) ? true : false;
	$Time = array();
	$Time['tabindex'] = 6;
	$Time['readonly'] =  "readonly";
	$Time['autocomplete'] = 'off';
	$Time['class'] = array('addedit-edit-end');
	$Time['class'][] = 'addedit-edit-ac-textfield';
	$Time['class'][] = 'exp-timepicker';
	$Time['class'][] = ($defaultValue == '' || $defaultValue == t('hh:mm') || $ttreadonly == true) ? 'narrow-search-filterset-daterange-empty' : 'narrow-search-filterset-daterange-nonempty';
	$Time['class'][] = 'callback-addEditTimeField';
	$Time['onblur'][] = 'addEditTimeField(this);';
	
	$form['to_time'] = array(
			//'#title' => t('LBL649'),
			'#id'   => 'end_time',
			'#type' => 'textfield',
			'#prefix' => '<div id="admin-announcement-data-part-expires" class="addedit-new-field-traninig-program-expires"><div class="addedit-secondcol-field-value">',
			'#suffix' => '</div></div>',
			'#default_value' => ($defaultValue) ? $defaultValue : t('hh:mm'),
			'#disabled' => $ttreadonly,
			'#size' => 6,
			'#attributes' => $Time,
	);
	$form['to_time_disp_end'] = array(
			'#type' => 'markup',
			'#markup' => '</div></div>'
	);
	$defaultValue =  getDefaultAnnouncementAddEditFormFieldValue('priority', $form_state, $annDetails);
	$SequencePriority = array('1'=> t('LBL1244'),'2' => t('LBL1243'));
	addDropDownToAddEditForm($form, 'priority', t('LBL1240'), $SequencePriority, $defaultValue, 6, true,false,array(),'announcement');
	endAddEditTwoColumnRow($form);
	
	$entityId1          	 = $arg;
	if(!empty($emptyId)){
		$entityId1 = 0;
	} else {
		$emptyId = 0;
	}
	
	$entityType        	 = 'cre_sys_obt_not';
	$qtipIdInit        	 = $entityId1.'_'.$entityType;
	$qtipOptAccessObj      = "{'entityId':".$entityId1.",'entityType':'$entityType','url':'administration/catalogaccess/".$entityId1."/".$entityType."/".$emptyId."','popupDispId':'qtip_visible_disp_".$qtipIdInit."','catalogVisibleId':'qtipAccessqtip_visible_disp_".$qtipIdInit."','wid':650,'heg':'270','postype':'topleft','poslwid':'','qdis':'ctool','linkid':'visible-announce-".$entityId1."'}";
	//Temporary Hide
	$form['addedit-left-col-extend-func'] = array(
			'#type' => 'markup',
			'#markup' => '<div class="crs-tab-titles-container"><div class="access-tab-icon"></div>'.
			"<div id='qtip_visible_disp_".$qtipIdInit."'><a id='visible-announce-".$entityId1."' onclick = \"callVisibility(".$qtipOptAccessObj.");\" class=\"tab-title\">".t('LBL642')."</a><span id='visible-popup-".$entityId1."' class='qtip-popup-visible' style='display:none; position:absolute; left:0px; top:0px;'></span></div>".
			'</div>',
	);
	
	$form['announce-style-end'] = array(
			'#type' => 'markup',
			'#markup' => '</div><script>adminCalSuffix();</script>'
	);
	announcementsubmitAddEditFormWithCancelAndSaveClose($form, 'announcement-basic-addedit-form', 'announcement-basic-save', 'announcement-basic-cancel', $AnnId, $subStage, $emptyId);
	return $form;
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_announcement_addedit_form', $ex);
		expertusErrorThrow($ex);
	}
}

/*
 * exp_sp_administration_announcement_addedit_form_submit() - Save the data entered by the user in the exp_sp_administration_announcement_addedit_form form
*/

function exp_sp_administration_announcement_addedit_form_submit($form, &$form_state) {
	try{
	$custom_esign_check=0;
	$chkValidation = 1;
	expDebug::dPrint('exp_sp_administration_catalog_course_addedit_form_submit esign validate trigger ' .$form_state['triggering_element']['#name'] , 5);
	if(module_exists('exp_sp_esignature') && isActiveEsignRegion() && $custom_esign_check==1){
		$chkValidation = 0;
		if($form_state['hidden-save-submit']==true && $_SESSION['esign_validate'] ==  1){
			$chkValidation = 1;
			$form_state['storage']['submit_triggering_element'] = $form_state['storage']['triggering_button_element'];
		}
		else{
			$form_state['storage']['triggering_button_element'] = $form_state['triggering_element']['#name'];
		}
	}
	else{
		$form_state['storage']['submit_triggering_element'] = $form_state['triggering_element']['#name'];
	}
	include_once('exp_sp_administration_announcement.inc');
	if($chkValidation){
		$form_state['esign_validation_status'] = true;
		expDebug::dPrint('submit action ' . print_r($form_state, true) , 5);
		// Check whether add or edit
		$save_message = t('LBL350').' '. t('LBL272') .' '. t('MSG601');
		if (empty($form_state['values']['id'])) { // Add
			$form_state['storage']['new_entity'] = TRUE;
			$returnArr=addNewAnnouncement($form, $form_state);
			$newBanId = $returnArr[0]->id;
			$entityId = $form_state['values']['id'];
			$emptyId = $form_state['values']['empty_id'];
			expDebug::dPrint('Testing value'.$newBanId.'empty_id'.$emptyId , 5);
			_updateAccessEntity($newBanId, 'cre_sys_obt_not', $emptyId);
			expertus_set_message($save_message);
		}
		else {
			updateAnnouncementDetails($form, $form_state);
			$form_state['storage']['edited_entity'] = TRUE; // To trigger refresh of jqgrid on modal close.
			expertus_set_message($save_message);
		}

		// Setting $form_state['rebuild'] = TRUE causes the form to be rebuilt again.
		$form_state['rebuild'] = TRUE;

		return $form;
	}
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_announcement_addedit_form_submit', $ex);
		expertusErrorThrow($ex);
	}
}

/*
 * exp_sp_administration_announcement_addedit_form_validate - validate the data entered by the user in the exp_sp_administration_announcement_addedit_form form
*/

function exp_sp_administration_announcement_addedit_form_validate($form, &$form_state) {
	try{
	expDebug::dPrint('  $form = ' . print_r($form['from_date']['#title'], true) , 5);
	expDebug::dPrint(' $form_state = ' . print_r($form_state, true) , 5);

	$form_state['hidden-save-submit'] = false;
	$form_state['esign_show_popup']= false;
	include_once('exp_sp_administration_banner.inc');

	if (!empty($form_state['storage']['new_entity'])) {
		unset($form_state['storage']['new_entity']); // Unset the variable to remove it from $form_state
		unset($form_state['storage']['form_info_list']); // No more required to be present in $form_state
	}

	if (!empty($form_state['storage']['edited_entity'])) {
		unset($form_state['storage']['edited_entity']); // Unset the variable to remove it from $form_state
	}

	if ($form_state['values']['op'] == t('LBL123')) {
		$form_state['display_class']   = TRUE;
		$form_state['input']     = array(); // Clear user input - raw
		$form_state['values']    = array(); // Clear user input - security cleared
		$form_state['rebuild']   = TRUE; // Rebuild the form. Submit handler will not be called.
		$form_state['storage']['step'] = 'view';
		return;
	}

	if(module_exists('exp_sp_esignature') && isActiveEsignRegion()){
		$triggerValue  = 'save';
	}
	else{
		$triggerValue  = 'hidden-save';
	}
	$triggerElementByName  = $form_state['triggering_element']['#name'];

	if(($form_state['triggering_element']['#name'] == 'save' || $form_state['triggering_element']['#name'] == 'saveandpublish')) {

		$form_state['esign_show_popup']= true;

		// Check all mandatory fields exist
		addEditCheckMandatoryFields($form, $form_state, array('lang_code'));
		if (empty($form_state['values']['description']['value']) || $form_state['values']['description']['value']=='') {
			form_set_error('description', $form['description']['#title'] . t('ERR101'));
			$form_state['esign_show_popup']= false;
			 
		}

		$fromDate = $form_state['values']['from_date'];
		$toDate = $form_state['values']['to_date'];
		$from_time = $form_state['values']['from_time'];
		$to_time = $form_state['values']['to_time'];
		$explodefrmDat = explode('-',$fromDate);
		$explodeToDat = explode('-',$toDate);
		$chkFromDate = checkdate($explodefrmDat[0],$explodefrmDat[1],$explodefrmDat[2]);
		$chkToDate = checkdate($explodeToDat[0],$explodeToDat[1],$explodeToDat[2]);
		
	  if($fromDate == t('LBL112')) {
			form_set_error('from_date', $form['from_date']['#title'] . t('ERR101'));
			$form_state['esign_show_popup']= false; 
		}
		if(($fromDate != t('LBL112')) && ($fromDate != '')){
			if($chkFromDate != 1 || ($chkToDate != 1 && $toDate != t('LBL112'))){
				form_set_error('date_deactivate', t('ERR243'));
				$form_state['esign_show_popup']= false;
			}
			
		if(($to_time != 'hh:mm' && $to_time != '') && ($toDate == t('LBL112') || $toDate == '')){
			form_set_error('date_deactivate', t('LBL621').' '. t('LBL042').' '. t('ERR101'));
			$form_state['esign_show_popup']= false;
		}
			if(($toDate != t('LBL112')) && ($toDate != '')){
				// isse is fixed for this ticket #0037438
				list($month1, $day1, $year1) = split('-', $toDate); 
				$toDate = mktime(0, 0, 0, $month1, $day1, $year1);
				list($month2, $day2, $year2) = split('-', $fromDate); 
				$fromDate = mktime(0, 0, 0, $month2, $day2, $year2);
 				if(($from_time != 'hh:mm' && $from_time != '') && ( $to_time != 'hh:mm' && $to_time != '')) {
	 				 list($h1,$m1) = split(':',$to_time);
	 				 $toDate = mktime($h1, $m1, 0, $month1, $day1, $year1);
	 				 list($h2,$m2) = split(':',$from_time);
	 				 $fromDate = mktime($h2, $m2, 0, $month2, $day2, $year2);
					 
					 if(($fromDate == $toDate) && ($from_time == $to_time))	{
						form_set_error('date_deactivate', t('ERR171').' '. t('LBL621').' '. t('LBL1220') );
						$form_state['esign_show_popup']= false;
					 }
					 } 
				if($toDate < $fromDate){
					form_set_error('date_deactivate', t('MSG791'));
					$form_state['esign_show_popup']= false;
				}
			
			}
			
			
		}
		/*--- #36325 : Time field validate ---*/
		//$pattern = "/([0-2][0-9]):([0-5])([0-9])/";
		$pattern = "#^([01]?[0-9]|2[0-3]):[0-5][0-9]$#";
		if (($from_time != 'hh:mm') && !preg_match($pattern,$from_time)){
		  form_set_error('from_time', t('ERR171') . ' ' . t('LBL1220'));
		  $form_state['esign_show_popup']= false; 
		}
		if (($to_time != 'hh:mm') && !preg_match($pattern,$to_time)){
		  form_set_error('to_time', t('ERR171') . ' ' . t('LBL1220'));
		  $form_state['esign_show_popup']= false; 
		}
		
	}
	  
	if ($triggerElementByName == 'hidden-save' ) {
		$form_state['hidden-save-submit']=true;
		$form_state['esign_show_popup']= false;
	}
	if($form_state['triggering_element']['#name'] == 'delete' ||  $form_state['triggering_element']['#name'] == 'unpublish'){
		$form_state['esign_show_popup']= true;
	}

	$form_state['esign_validation_status']= false;
	if(!($form_state['hidden-save-submit'])){
		unset($_SESSION['esign_validate']);
	}
	$form_state['esign_show_popup'] = false; //temp
	}catch (Exception $ex) {
		watchdog_exception('exp_sp_administration_announcement_addedit_form_validate', $ex);
		expertusErrorThrow($ex);
	}
}
function exp_sp_administration_announcement_permission() {
	try{
    return array(    
    'Announcement Admin Perm' => array(
      'title' => t('Announcement Admin Perm')
    )
  );
    }catch (Exception $ex) {
    	watchdog_exception('exp_sp_administration_announcement_permission', $ex);
    	expertusErrorThrow($ex);
    }
} 
?>