<?php 
class UserRegister extends DrupalWebTestCase {	
	public static function getInfo() {
    return array(
      'name' => 'User Registration',
      'description' => 'New user registration testing',
      'group' => 'exp_sp_userregistration',
    );
  }
  
	public function setUp(){
  	parent::setUp();
  }
 
 public function testregisteruser() {
//input = array();
//  $formIds = $this->xpath('//form[@action="/?q=learning/register"]');
 // $formId = (string) $formIds[1]['id'];
  $this->setHttpReferer('learning/register');
  $this->drupalGet('');
  $this->clickLink(t('Register'));
  $this->assertRaw('<div id="wizard-form-wrapper" class="reg-form-wrapper">','Register Form Loaded Successfully', 'exp_sp_userregister');
    
    $random = $this->randomName();
  	$edit['fname'] = 'Joola';
	$edit['lname'] = 'Vasavi';
	$edit['email'] = 'joolavasavi' . $random . '@email.com';
	$edit['name'] = 'Joola' . $random;
	$edit['pass'] = 'welcome';
	$edit['cpass'] = 'welcome';
	$edit['tzone'] = 'cre_sys_tmz_059';
  	$post_field = array('submit'=>array(
													"form_id"=>"ajax_userregister",
													"_triggering_element_name"=>"op",
													"_triggering_element_value"=>"Register",
										),
										'wrapper'=>'wizard-form-wrapper');
	
  	$out = $this->drupalPostAJAX(null,$edit,'Register','?q=system/ajax',array(),array(),'',$post_field);
  	$isError = $this->xpath('//div[@class="messages error"]/ul/li/span');
  	$error = '';
  	foreach($isError as $err){
	  	$error .= (string) $err[0]->span;
	  }
  	$this->assertResponse(200,'Form Repainted successfully');
  	$txt = 'Your registration is successful. You will now be redirected to the catalog page.';
  	$this->assertText(t($txt),'Updated changes successfully','exp_sp_userregistration');
  	$this->assertNoText(t($error),'Error - '.$error,'exp_sp_userregistration');
  	$webError = "Website encountered an unexpected error";
  //	$webError = "These passwords do not match. Try again?"
  	$this->assertNoText(t($webError),'Web errors not found','exp_sp_userregistration');
  }
}

class RegisterUserValidationTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Register page validation',
      'description' => 'Verify that all mandatory fields validity checks behave as designed.',
      'group' => 'exp_sp_userregistration'
    );
  }

  // Username validation.
  function testUsernames() {
    $test_cases = array( // '<username>' => array('<description>', 'assert<testName>'),
      'foo'                    => array('Valid username', 'assertNull'),
      'FOO'                    => array('Valid username', 'assertNull'),
      'Foo O\'Bar'             => array('Valid username', 'assertNull'),
      'foo@bar'                => array('Valid username', 'assertNull'),
      'foo@example.com'        => array('Valid username', 'assertNull'),
      'foo@-example.com'       => array('Valid username', 'assertNull'), // invalid domains are allowed in usernames
      'þòøÇßªř€'               => array('Valid username', 'assertNull'),
      'ᚠᛇᚻ᛫ᛒᛦᚦ'                => array('Valid UTF8 username', 'assertNull'), // runes
      ' foo'                   => array('Invalid username that starts with a space', 'assertNotNull'),
      'foo '                   => array('Invalid username that ends with a space', 'assertNotNull'),
      'foo  bar'               => array('Invalid username that contains 2 spaces \'&nbsp;&nbsp;\'', 'assertNotNull'),
      ''                       => array('Invalid empty username', 'assertNotNull'),
      'foo/'                   => array('Invalid username containing invalid chars', 'assertNotNull'),
      'foo' . chr(0) . 'bar'   => array('Invalid username containing chr(0)', 'assertNotNull'), // NULL
      'foo' . chr(13) . 'bar'  => array('Invalid username containing chr(13)', 'assertNotNull'), // CR
      str_repeat('x', USERNAME_MAX_LENGTH + 1) => array('Invalid excessively long username', 'assertNotNull'),
    );
    foreach ($test_cases as $name => $test_case) {
      list($description, $test) = $test_case;
      $result = user_validate_name($name);
      $this->$test($result, $description . ' (' . $name . ')');
    }
  }

  // Mail validation. More extensive tests can be found at common.test
  function testMailAddresses() {
    $test_cases = array( // '<username>' => array('<description>', 'assert<testName>'),
      ''                => array('Empty mail address', 'assertNotNull'),
      'foo'             => array('Invalid mail address', 'assertNotNull'),
      'foo@example.com' => array('Valid mail address', 'assertNull'),
    );
    foreach ($test_cases as $name => $test_case) {
      list($description, $test) = $test_case;
      $result = user_validate_mail($name);
      $this->$test($result, $description . ' (' . $name . ')');
    }
  }
}