<?php
/*
 * Implementation of hook_menu()
 */
function exp_sp_reset_password_menu(){
  try{
  $items = array();
  $items['ctools_ajax_sample/ajax/reset_password'] = array(
    'title' => t('Reset Password'),
    'page callback' => 'render_dialog_callback',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'access callback' => array('user_is_logged_in'),
  );
  $items['learning/reset-password'] = array(
    'title' => t('Reset Password'),
  	'page callback' => 'empty_value',
  	'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
  }catch (Exception $ex) {
    watchdog_exception('exp_sp_reset_password_menu', $ex);
    expertusErrorThrow($ex);
  }
}

/*
 * Implementation of hook_theme()
 */
function exp_sp_reset_password_theme(){
	try {
  return array(
    'reset_password' => array(
        'render element' => 'form',
        'template' => 'exp_sp_reset_password_form',
        'path' => drupal_get_path('module','exp_sp_reset_password'),
    )
  );
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_profileconfig_permission', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Wizard start form of learning request.
 */
function reset_password($form, &$form_state) {
  try{
  include_once(drupal_get_path('module', 'exp_sp_administration_user') .'/exp_sp_administration_user.inc');
  global $user;
  $form_state['title'] = t('Reset user password');
  $form['#prefix']     = '<div id="reset-form-wrapper" class="reset-pass-form-wrapper">';
  $form['#suffix']     = '</div>';

  $form['#validate'] = reset_password_validators();
  //$form['#submit'][] = 'reset_password_submit';
  $form['new_password'] = array('#type' => 'password',
    '#title' => t('LBL754').' '.t('LBL060'),
    '#maxlength' => 60,
    '#size' => 15,
    '#attributes' => array('tabindex' => '1'),
    '#required' => TRUE,
  );
  $form['confirm_password'] = array('#type' => 'password',
    '#title' => t('LBL075'),
    '#maxlength' => 60,
    '#size' => 15,
    '#attributes' => array('tabindex' => '2'),
    '#required' => TRUE,
  );

  $policy = _password_policy_load_active_policy(array(DRUPAL_AUTHENTICATED_RID));
  $translate = array();
  if (!empty($policy['policy'])) {
    // Some policy constraints are active.
    foreach ($policy['policy'] as $key => $value) {
      $translate['constraint_'. $key] = _password_policy_constraint_error($key, $value);
    }
  }
  // Printing out the restrictions.
  if (variable_get('password_policy_show_restrictions', 0) && !empty($translate) && isset($translate)) {
    $form['#suffix'] = '<div id="password-policy-restrictions-acc" class="password-note-cls divNote"><ul><li>'. implode('</li><li>', $translate) .'</li></ul></div>';
  }
  $blockedFloodCnt = getAuthFloodCount($user->uid);
  expDebug::dPrint('flood count for user login'.$blockedFloodCnt,4);
  if($blockedFloodCnt == true){
    $deleteStmt = db_delete('flood');
    $deleteStmt->condition('event', 'failed_login_attempt_user', '=');
    $deleteStmt->condition('identifier', $user->uid.'-' . '%', 'LIKE');
    $deleteStmt->execute();
    expDebug::dPrintDBAPI('UnlockUser Delete =  after using forget password' , $deleteStmt);
  }

  $form_state['redirect']  = 'learning/enrollment-search';
  return $form;
  }catch (Exception $ex) {
    watchdog_exception('reset_password', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * Password validator
 */
function reset_password_validators(){
	try {
  return array('reset_password_match_validate','reset_password_validate');
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_profileconfig_permission', $ex);
  	expertusErrorThrow($ex);
  }
}

/**
 * Password save validate handler.
 */
function reset_password_validate($form, &$form_state) {
  try{
  global $user;
  $values = $form_state['values'];
  if (!empty($values['new_password'])) {
    $error = _password_policy_constraint_validate($values['new_password'], $user);
    if ($error) {
      form_set_error('new_password', t('ERR004').':' .'<ul><li>'. implode('</li><li>', $error) .'</li></ul>');
    }
  }
  }catch (Exception $ex) {
    watchdog_exception('reset_password_validate', $ex);
    expertusErrorThrow($ex);
  }
}//End of user_acc_password_validate()

/**
 * Pssword match validator.
 *
 * @param $form
 * @param $form_state
 */
function reset_password_match_validate(&$form, &$form_state){
  try{
  if ($form_state['values']['confirm_password'] != $form_state['values']['new_password']){
    form_set_error('confirm_password', t('ERR012'));
  }
  }catch (Exception $ex) {
    watchdog_exception('reset_password_match_validate', $ex);
    expertusErrorThrow($ex);
  }
}

/*
 * menucallback submit
 *
 * Implementation of hook_submit()
 */
function reset_password_submit($form,&$form_state){
  try{
  global $user;
  require_once('exp_sp_reset_password.inc');
  $account = entity_load_unchanged('user', $user->uid);
  $oldPassword = $account->pass; // Save password for adding in audit trail entry below
  expDebug::dPrint(' $account = ' . print_r($account, true) , 4);
  $account = user_save($account, array('pass'=>$form_state['values']['new_password']));
  expDebug::dPrint(' changed $account = ' . print_r($account, true) , 4);
  $newPassword = $account->pass; // For adding in audit trail entry below
  insertPaswordToPassPolicy($form_state['values']['new_password']);
  //drupal_set_message(t('MSG013'));
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands = array();
  $userId = getIdForUserName($account->name);
  $referer = parse_url($_SERVER['HTTP_REFERER']);
  $chk_admin_user = 0;
  $_SESSION['force_password_change'] = 0;
  foreach($user->roles as $v)
  {
  	if($v == 'Administer')
  		$chk_admin_user = 1;
  }
  if($chk_admin_user == 1)
  {
  	    $commands[] = ctools_ajax_command_redirect('administration/learning/catalog');
  }
  elseif(isset($_COOKIE['user_selected_url']) && !empty($_COOKIE['user_selected_url'])){
  		$commands[] = ctools_ajax_command_redirect($_COOKIE['user_selected_url']);
  }
  elseif($referer['query'] == 'q=widget/reset-password') {
  	$commands[] = ctools_ajax_command_redirect($_SESSION['widget_params']);
  }
  elseif(checkIfEnrolled($userId) > 0){
	    $commands[] = ctools_ajax_command_redirect('learning/enrollment-search');
	}else{
	    $commands[] = ctools_ajax_command_redirect('learning/catalog-search');
	}
    /*
     *  0042220: Username is not displayed only welcome is displayed, when we use forget password option(amaran)
     *  this part added to user information in cookies.
     */
    module_load_include('inc', 'exp_sp_my_account', 'exp_sp_my_account');

    $drupalUserId = getDrupalIdOfUser($userId);
    $userAccountInfo  =  getMyAccountDetails($drupalUserId);
    if($userAccountInfo) {
      /*checked from exp_sp_my_account.module's exp_sp_my_account_form_commonsave function.
       /*$val = $obj->setValue(array('userfullname'=>$dispname,'usermail'=>$Email,'userfirstname'=>$FirstName,
           'userlastname'=>$LastName,'usersavedfullname'=>$fullname)); */

      $Email      = $userAccountInfo[0][0]->person_email;
      $FirstName  = $userAccountInfo[0][0]->person_first_name;
      $LastName   = $userAccountInfo[0][0]->person_last_name;
      $fullname   = $userAccountInfo[0][0]->person_full_name;
      $dispname   = $userAccountInfo[0][0]->person_first_name." ".mb_substr($userAccountInfo[0][0]->person_last_name,0,1,'utf8');
      require_once "./getLearnerInfo.php";
      $obj = new GetLearnerInfo();
      $val = $obj->setValue(array('userid'=>$userId,'userfullname'=>$dispname,'usermail'=>$Email,'userfirstname'=>$FirstName,
          'userlastname'=>$LastName,'usersavedfullname'=>$fullname)); // #47994: On password reset, system shows Users enrolled to all the TPs in system
    }
    /*0042220: finished */

  // Make an audit trail entry for change password

  add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_reset_password', 'Password Reset', 'Password Changed', null, $oldPassword, $newPassword);

  print ajax_render($commands);
  exit;
  }catch (Exception $ex) {
    watchdog_exception('reset_password_submit', $ex);
    expertusErrorThrow($ex);
  }
}

/**
 * @Desc: Implementation of hook_init().
 * @author: Ilayaraja Esackimuthu
 * @since: 02-Sep-2011
 *
 */
function exp_sp_reset_password_init(){
	try {
  global $user;
  global $theme_key;
  $js_module_optional  = array('type' => 'file', 'group' => JS_DEFAULT);
  $css_module_optional = array('type' => 'file', 'group' => CSS_DEFAULT);
  if(arg(1) == 'reset-password' && $user->uid>0) {
    drupal_add_js(drupal_get_path('module', 'exp_sp_reset_password').'/exp_sp_reset_password.js',$js_module_optional);
    if($theme_key == 'expertusoneV2') {
    	drupal_add_css(drupal_get_path('module', 'exp_sp_reset_password').'/exp_sp_reset_password_v2.css',$css_module_optional);
    }
    else{
    	drupal_add_css(drupal_get_path('module', 'exp_sp_reset_password').'/exp_sp_reset_password.css',$css_module_optional);
    }
  }
  }catch (Exception $ex) {
  	watchdog_exception('exp_sp_profileconfig_permission', $ex);
  	expertusErrorThrow($ex);
  }
}//End of exp_sp_reset_password_init()


//code added or forced password change in mobile.
function reset_password_submit_mobile($form,&$form_state){
  try{
    global $user;
    require_once('exp_sp_reset_password.inc');
    $user->uid = $form;
    expDebug::dPrint(' reset_password_submit is called form after'.print_r($user->uid, true), 4);
    expDebug::dPrint(' reset_password_submit is called form after'.print_r($form_state, true), 4);
    $account = user_load($user->uid);
	$error = _password_policy_constraint_validate($form_state, $account);
	expDebug::dPrint(" reset_password_validate validate 111111111111 ... ".print_r($account,true ),5);
	expDebug::dPrint(' reset_password_validate validate 22222222222 = ' . print_r($error, true),4);
	if($error)
	{
    return $error;
	}
 
    $account = entity_load_unchanged('user', $user->uid);
    $oldPassword = $account->pass; // Save password for adding in audit trail entry below
    expDebug::dPrint(' $account = ' . print_r($account, true) , 4);
    $account = user_save($account, array('pass'=>$form_state));
    expDebug::dPrint(' changed $account = ' . print_r($account, true) , 4);
    $newPassword = $account->pass; // For adding in audit trail entry below
    insertPaswordToPassPolicy($form_state);
    $userId = getIdForUserName($account->name);
  
  // Make an audit trail entry for change password
    add_audit_trail_entry($userId, $userId, 'cre_sys_obt_usr', 'exp_sp_reset_password', 'Password Reset', 'Password Changed', null, $oldPassword, $newPassword);
    return;
  }catch (Exception $ex) {
    watchdog_exception('reset_password_submit', $ex);
    expertusErrorThrow($ex);
  }
}


?>