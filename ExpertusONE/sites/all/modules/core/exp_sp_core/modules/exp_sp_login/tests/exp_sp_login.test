<?php

class LoginTestCase extends ExpertusWebTestCase {
	public static function getInfo() {
	    return array(
	      'name'  => 'Login Test',
	      'description'  => 'Login Test',
	      'group' => 'exp_sp_login',
	    );
	 }
	 public function setUp() {
      parent::setUp();
     }
     public function testLogin() {
      $this->LoginValidate();
     }
    public function LoginValidate() {
    $this->setHttpReferer('learning/catalog-search');
	$this->drupalGet('');
  	$ctoolModel = array(
  		'modelWidth' => 890,
  		'modelClass' => 'ctools-modal-ctools-login-style',
  		'modelTitle' => 'Sign In',
  		'contentWidth' => 890,
  		'contentMhight' => 236,
  		'outerHeight' => 236,
  		'outerWidth' => 890,
  		'blockHeight' => 1232,
  		'blockWidth' => 1343,
  		'modelTop' => 147.5,
  		'modelLeft' => 645,
  		'docHeight' => 1169,
  		'docWidth' => 1840
  	);
  	$this->addCtoolModelContent($ctoolModel);
  	$modelContent = $this->content;
  	$edit = array(
      'name' => 'admin',
      'pass' => 'welcome',
    ); 

  	//$this->content = $modelContent;
  	$post_field = array('wrapper'=>'use-ajax ctools-modal-ctools-login-style ajax-processed');
	$out = $this->drupalPostAJAX(null, '','Save','?q=ctools_ajax_sample/ajax/user_login',array(),array(),'',$post_field);
	$this->verbose('Request to: ' . $this->getUrl() . '<hr />' . $this->content);
  	$this->assertResponse(200,'Form Rendered successfully');
	$param = array('submit'=>array(
					"form_id"=>"user_login",
					"_triggering_element_name" 	=>"op",
					"_triggering_element_value"	=>"Sign In",
	));
	
	$post_field = array('submit'=>$param,	'wrapper'=>'my-login-container');
	$formIds = $this->xpath('//form[@action="/?q=ctools_ajax_sample/ajax/user_login"]');
	$formId = (string) $formIds[1]['id'];
	//$this->drupalPost('ctools_ajax_sample/ajax/user_login', $edit, 'Sign In');
	//	$this->drupalPostAJAX(null,$edit,'Sign In','?q=ctools_ajax_sample/ajax/user_login',array(),array(),$formId,$post_field);
	$out = $this->drupalPostAJAX(null, $edit,'Save','?q=ctools_ajax_sample/ajax/user_login',array(),array(),'',$post_field);
	
	$this->drupalGet('administration/learning/catalog');
	
	$this->verbose('Request to: ' . $this->getUrl() .	'<hr />' . $this->content);
	
	$isError = $this->xpath('//div[@class="messages error"]/ul/li/span');
	$error = '';
  	foreach($isError as $err){
	  	$error .= (string) $err[0]->span;
	  } 
  	
	$txt = 'my-account-settings';
  	$this->assertRaw('my-account-settings','Logged Successfully', 'exp_sp_login');
  	//$this->assertText($txt,'Updated changes successfully','exp_sp_login');
  	$this->assertNoText(t($error),'Error - '.$error,'exp_sp_login');

   }
  
}
class LoginUserTestCase extends ExpertusWebTestCase {
	public static function getInfo() {
	    return array(
	      'name'  => 'Login User Test',
	      'description'  => 'Login User Test',
	      'group' => 'exp_sp_login',
	    );
	 }
	 public function setUp() {
      parent::setUp();
     //  $this->drupalLogin($this->admin);
     }
     public function testUserLogin() {
      $this->LoginUserValidate();
     }
    public function LoginUserValidate() {
    $this->setHttpReferer('user');
    $this->drupalGet('user');
   // $this->assertRaw('my-login-container','login form loaded', 'exp_sp_login');
    $this->assertRaw('saml-signin','saml login loaded', 'exp_sp_login');
    $formIds = $this->xpath('//form[@action="/?q=user"]');
  	$formId = (string) $formIds[1]['id'];
    $edit= array();
   $edit = array(
      'name' => 'user44',
      'pass' => 'welcome',
    ); 
 
	$post_field = array('submit'=>array(
					"form_id"=>"user_login",
					"_triggering_element_name" 	=>"op",
					"_triggering_element_value"	=>"Sign In",
			));
		$this->drupalPost('user', $edit, 'Sign In');
	    $this->verbose('Request to: ' . $post_field .	'<hr />' . $out); 
		$isError = $this->xpath('//div[@class="messages error"]/ul/li/span');
	  	$error = '';
  	foreach($isError as $err){
	  	$error .= (string) $err[0]->span;
	  }  
	
    
  	$this->assertResponse(200,'Form Repainted successfully');
  	$txt = 'my-account-settings';
  	$this->assertRaw('my-account-settings','Logged Successfully', 'exp_sp_login');
  	//$this->assertText($txt,'Updated changes successfully','exp_sp_login');
  	$this->assertNoText(t($error),'Error - '.$error,'exp_sp_login');
  	}
  
}
class LoginValidationTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Username/password validation',
      'description' => 'Verify that Username/password validity checking.',
      'group' => 'exp_sp_login'
    );
  }

  // Username validation.
  function testUsernames() {
    $test_cases = array( // '<username>' => array('<description>', 'assert<testName>'),
      'foo'                    => array('Valid username', 'assertNull'),
      'FOO'                    => array('Valid username', 'assertNull'),
      'Foo O\'Bar'             => array('Valid username', 'assertNull'),
      'foo@bar'                => array('Valid username', 'assertNull'),
      'foo@example.com'        => array('Valid username', 'assertNull'),
      'foo@-example.com'       => array('Valid username', 'assertNull'), // invalid domains are allowed in usernames
      'þòøÇßªř€'               => array('Valid username', 'assertNull'),
      'ᚠᛇᚻ᛫ᛒᛦᚦ'                => array('Valid UTF8 username', 'assertNull'), // runes
      ' foo'                   => array('Invalid username that starts with a space', 'assertNotNull'),
      'foo '                   => array('Invalid username that ends with a space', 'assertNotNull'),
      'foo  bar'               => array('Invalid username that contains 2 spaces \'&nbsp;&nbsp;\'', 'assertNotNull'),
      ''                       => array('Invalid empty username', 'assertNotNull'),
      'foo/'                   => array('Invalid username containing invalid chars', 'assertNotNull'),
      'foo' . chr(0) . 'bar'   => array('Invalid username containing chr(0)', 'assertNotNull'), // NULL
      'foo' . chr(13) . 'bar'  => array('Invalid username containing chr(13)', 'assertNotNull'), // CR
      str_repeat('x', USERNAME_MAX_LENGTH + 1) => array('Invalid excessively long username', 'assertNotNull'),
    );
    foreach ($test_cases as $name => $test_case) {
      list($description, $test) = $test_case;
      $result = user_validate_name($name);
      $this->$test($result, $description . ' (' . $name . ')');
    }
  }

  /*function testPassword() {
    $test_cases = array( 
      ''                => array('Empty password', 'assertNotNull'),
    );
    foreach ($test_cases as $name => $test_case) {
      list($description, $test) = $test_case;
      $result = $name;
      $this->$test($result, $description . ' (' . $name . ')');
    }
  }*/
}

?>